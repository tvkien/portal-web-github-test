using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Envoc.Core.Shared.Data;
using LinkIt.BubbleSheetPortal.Common.Enum;
using LinkIt.BubbleSheetPortal.Data.Repositories;
using LinkIt.BubbleSheetPortal.Models;
using LinkIt.BubbleSheetPortal.Models.Constants;
using LinkIt.BubbleSheetPortal.Models.Interfaces;
using LinkIt.BubbleSheetPortal.Models.Old.UnGroup;
using LinkIt.BubbleSheetPortal.Models.TLDS;

namespace LinkIt.BubbleSheetPortal.Services
{
    public class VulnerabilityService
    {
        private readonly IManageTestRepository manageTestRepository;
        private readonly IVirtualTestRepository virtualTestRepository;
        private readonly IVulnerabilityRepository _vulnerabilityRepository;
        private readonly IQtiBankRepository _qtiBankRepository;
        private readonly IQTIItemRepository _qtiItemQtiItemRepository;
        private readonly IQTIGroupRepository _qtiGroupRepository;
        private readonly IUserManageRepository _userManageRepository;
        private readonly ILessonRepository _lessonRepository;
        private readonly IProgramRepository _programRepository;
        private readonly IAuthorGroupRepository _authorGroupRepository;
        private readonly IUserBankRepository _userBankRepository;
        private readonly IReadOnlyRepository<Test> _testRepository;
        private readonly IRepository<QTITestClassAssignmentData> _testClassAssignmentRepository;
        private readonly IRepository<QTITestStudentAssignmentData> _qtiTestStudentAssignmentRepository;
        private readonly IRepository<QTIOnlineTestSession> _qtiOnlineTestSessionRepository;
        private readonly IRepository<QtiOnlineTestSessionAnswer> _qtiOnlineTestSessionAnswerRepository;
        private readonly IQTITestClassAssignmentReadOnlyRepository _qtiTestClassAssignmentRepository;
        private readonly IGradeRepository _gradeRepository;
        private readonly ISubjectRepository _subjectRepository;
        private readonly IReadOnlyRepository<District> _districtRepository;
        private readonly IRepository<User> _userRepository;
        private readonly IAnswerRepository _answerRepository;
        private readonly ITestResultRepository _testResultRepository;
        private readonly IClassRepository _classRepository;
        private readonly IRepository<DistrictTerm> _districtTermRepository;
        private readonly IDspDistrictRepository _dspDistrictRepository;
        private readonly IRepository<QTITestClassAssignmentData> _qtiTestClassAssignmentDataRepository;
        private readonly ITLDSProfileRepository _tldsProfileRepository;
        private readonly UserSchoolService _userSchoolService;
        private readonly SchoolRepository _schoolRepository;
        private readonly IBankRepository _bankRepository;

        public VulnerabilityService(IVulnerabilityRepository vulnerabilityRepository, IManageTestRepository manageTestRepository,
            IVirtualTestRepository virtualTestRepository,
            IQtiBankRepository qtiBankRepository,
            IQTIGroupRepository qtiGroupRepository,
            IQTIItemRepository qtiItemQtiItemRepository,
            IUserManageRepository userManageRepository,
            ILessonRepository lessonRepository,
            IProgramRepository programRepository,
            IAuthorGroupRepository authorGroupRepository,
            IUserBankRepository userBankRepository,
            IReadOnlyRepository<Test> testRepository,
            IRepository<QTITestClassAssignmentData> testClassAssignmentRepository,
            IRepository<QTITestStudentAssignmentData> qtiTestStudentAssignmentRepository,
            IRepository<QTIOnlineTestSession> qtiOnlineTestSessionRepository,
            IRepository<QtiOnlineTestSessionAnswer> qtiOnlineTestSessionAnswerRepository,
            IQTITestClassAssignmentReadOnlyRepository qtiTestClassAssignmentRepository,
            IGradeRepository gradeRepository,
            ISubjectRepository subjectRepository,
            IReadOnlyRepository<District> districtRepository,
            IRepository<User> userRepository,
            IAnswerRepository answerRepository,
            ITestResultRepository testResultRepository,
            IClassRepository classRepository,
            IRepository<DistrictTerm> districtTermRepository,
            IDspDistrictRepository dspDistrictRepository,
            IRepository<QTITestClassAssignmentData> qtiTestClassAssignmentDataRepository,
            ITLDSProfileRepository tldsProfileRepository,
            UserSchoolService userSchoolService,
            SchoolRepository schoolRepository,
            IBankRepository bankRepository
            )
        {
            this.manageTestRepository = manageTestRepository;
            this.virtualTestRepository = virtualTestRepository;
            this._classRepository = classRepository;
            this._vulnerabilityRepository = vulnerabilityRepository;
            this._qtiBankRepository = qtiBankRepository;
            this._qtiGroupRepository = qtiGroupRepository;
            this._qtiItemQtiItemRepository = qtiItemQtiItemRepository;
            this._userManageRepository = userManageRepository;
            this._lessonRepository = lessonRepository;
            this._programRepository = programRepository;
            this._authorGroupRepository = authorGroupRepository;
            this._userBankRepository = userBankRepository;
            this._testRepository = testRepository;
            this._testClassAssignmentRepository = testClassAssignmentRepository;
            this._qtiTestStudentAssignmentRepository = qtiTestStudentAssignmentRepository;
            this._qtiOnlineTestSessionRepository = qtiOnlineTestSessionRepository;
            this._qtiOnlineTestSessionAnswerRepository = qtiOnlineTestSessionAnswerRepository;
            this._qtiTestClassAssignmentRepository = qtiTestClassAssignmentRepository;
            this._gradeRepository = gradeRepository;
            this._subjectRepository = subjectRepository;
            this._districtRepository = districtRepository;
            this._userRepository = userRepository;
            this._answerRepository = answerRepository;
            this._testResultRepository = testResultRepository;
            this._districtTermRepository = districtTermRepository;
            this._dspDistrictRepository = dspDistrictRepository;
            this._qtiTestClassAssignmentDataRepository = qtiTestClassAssignmentDataRepository;
            this._tldsProfileRepository = tldsProfileRepository;
            this._userSchoolService = userSchoolService;
            this._schoolRepository = schoolRepository;
            this._bankRepository = bankRepository;
        }

        #region Common functions //===================================== Common functions =====================================================

        private int GetStateOfUser(User user)
        {
            if (user.StateId.HasValue && user.StateId.Value > 0)
            {
                return user.StateId.Value;
            }
            //
            var district = _districtRepository.Select().FirstOrDefault(x => x.Id == user.DistrictId);
            if (district != null)
            {
                return district.StateId;
            }
            else
            {
                return 0;
            }
        }
        #endregion Common functions

        #region User //========================================================= User =============================================================

        /// <summary>
        /// check the permission of account login to update user based on districtId and userId 
        /// </summary>
        public bool HasRightToUpdateUser(User currentUser, int userId, int districtID = 0)
        {
            //base on Admin.GetUsers
            if (currentUser.IsPublisher)
            {
                return true;
            }

            if (!currentUser.IsNetworkAdmin)
            {
                districtID = currentUser.DistrictId.GetValueOrDefault();
            }


            var user = _userManageRepository.GetManageUsersByRole(currentUser.Id, districtID, currentUser.RoleId, 0, string.Empty, true, userId).FirstOrDefault();
            return user != null;
        }
        public bool HasRightToAcessUserWithoutCheckStatus(User currentUser, int userId, List<int> listDistrictId)
        {
            if (userId == -1)
                return true;

            //use the same function as AssessmentController-> GetUserList 

            if (currentUser.IsTeacher && currentUser.Id == userId)
            {
                return true;
            }
            if (currentUser.IsSchoolAdmin || currentUser.IsTeacher)
            {
                return _authorGroupRepository
                    .GetUsersUserHasAccessTo(currentUser.Id, 0, currentUser.DistrictId.GetValueOrDefault(), 0)
                        .Where(en => en.Id == userId).Any();
            }
            else if (currentUser.IsNetworkAdmin || currentUser.IsDistrictAdmin)
            {
                if (currentUser.IsDistrictAdmin)
                {
                    listDistrictId = new List<int>() { currentUser.DistrictId.GetValueOrDefault() };
                }
                var canAccessRoles = new int[] { (int)Permissions.Publisher,
                    (int)Permissions.DistrictAdmin,
                    (int)Permissions.SchoolAdmin,
                    (int)Permissions.Teacher,
                    (int)Permissions.Parent,
                    (int)Permissions.NetworkAdmin,
                };

                return _userRepository.Select()
                     .Where(u => u.Id == userId)
                     .Where(u => canAccessRoles.Contains(u.RoleId)
                     && listDistrictId.Contains(u.DistrictId.GetValueOrDefault()))
                     .Any();
            }
            else if (currentUser.IsPublisher)
            {
                return true;
            }
            return false;
        }
        public bool HasRightToAcessUser(User currentUser, int userId, List<int> listDistrictId)
        {
            if (userId == -1)
                return true;

            //use the same function as AssessmentController-> GetUserList 

            IQueryable<User> userList;
            if (currentUser.IsTeacher && currentUser.Id == userId)
            {
                return true;
            }
            if (currentUser.IsSchoolAdmin || currentUser.IsTeacher)
            {
                userList =
                    _authorGroupRepository.GetUsersUserHasAccessTo(currentUser.Id, 0, currentUser.DistrictId.GetValueOrDefault(), 0)//schoolId = 0 for select all users of all authorized schools ( See AuthorGroupRepository -> GetUsersUserHasAccessTo )
                        .Where(en => en.UserStatusId == 1);
            }
            else if (currentUser.IsNetworkAdmin || currentUser.IsDistrictAdmin)
            {
                if (currentUser.IsDistrictAdmin)
                {
                    listDistrictId = new List<int>() { currentUser.DistrictId.GetValueOrDefault() };
                }

                //get only user on his/her member districts 
                userList = _userRepository.Select().Where(u => u.UserStatusId == 1
                                                                &&
                                                                (u.RoleId == (int)Permissions.Publisher ||
                                                                 u.RoleId == (int)Permissions.DistrictAdmin ||
                                                                 u.RoleId == (int)Permissions.SchoolAdmin ||
                                                                 u.RoleId == (int)Permissions.Teacher ||
                                                                 u.RoleId == (int)Permissions.NetworkAdmin)
                                                                && listDistrictId.Contains(u.DistrictId.GetValueOrDefault()));
            }
            else if (currentUser.IsPublisher)
            {
                return true;
            }
            else
            {

                userList = new List<User>().AsQueryable();

            }

            var user = userList.FirstOrDefault(x => x.Id == userId);
            return user != null;
        }

        #endregion User

        #region Item Bank, Item Set //========================================== Item Bank, Item Set ==============================================
        public bool HasRightToUpdateItemBank(User user, int qtiBankId, int districtId = 0)
        {
            //Check right base on the list of manage item bank
            var verifyDistrictId = districtId != 0 ? districtId : user.DistrictId.GetValueOrDefault();
            var qtiBank =
                _qtiBankRepository.LoadQTIBanks(user.Id, user.RoleId, verifyDistrictId)
                    .Where(x => x.QTIBankId == qtiBankId)
                    .FirstOrDefault();

            return qtiBank != null;
        }
        public bool HasRightToUpdateItemSet(User user, int qTIGroupId)
        {
            //must check the bank of the group, if user has right to update bank then user has right to update the group
            var qtiGroup = _qtiGroupRepository.Select().FirstOrDefault(x => x.QtiGroupId == qTIGroupId);
            return HasRightToUpdateItemSet(user, qtiGroup);

        }
        public bool HasRightToUpdateItemSet(User user, QtiGroup qtiGroup)
        {
            //must check the bank of the group, if user has right to update bank then user has right to update the group
            if (qtiGroup == null)
            {
                return false;
            }
            if (!qtiGroup.QtiBankId.HasValue || qtiGroup.QtiBankId == 0)
                return true;

            var qtiBank =
             _qtiBankRepository.LoadQTIBanks(user.Id, user.RoleId, user.DistrictId.GetValueOrDefault())
                 .Where(x => x.QTIBankId == qtiGroup.QtiBankId)
                 .FirstOrDefault();
            return qtiBank != null;

        }
        public bool HasRightToEditQtiItems(User currentUser, List<int> qtiItemIdList, out List<QTIItemData> authorizedQtiItemList)
        {

            var itemList = _qtiItemQtiItemRepository.Select()
                       .Where(x => qtiItemIdList.Contains(x.QTIItemID))
                       .ToList();

            var qtiGroupIdList = itemList.Select(x => x.QTIGroupID).ToList();
            //Get Item Sets of these Items
            var itemSetList = _qtiGroupRepository.Select().Where(x => qtiGroupIdList.Contains(x.QtiGroupId)).ToList();

            //Get Item banks of these item sets
            var itemBankIdList = itemSetList.Select(x => x.QtiBankId).ToList();
            var authorizedQtiBankList =
                _qtiBankRepository.LoadQTIBanks(currentUser.Id, currentUser.RoleId, currentUser.DistrictId.GetValueOrDefault()).Where(x => itemBankIdList.Contains(x.QTIBankId)).ToList();

            var authorizedItemSetIdList = new List<int>();

            foreach (var itemBank in authorizedQtiBankList)
            {
                //Check at qti group level
                var authorizedQtiGroupIdList = _qtiGroupRepository.GetlistQtiGroups(
                    itemBank.QTIBankId, currentUser.Id,
                    currentUser.RoleId,
                    currentUser.DistrictId.GetValueOrDefault()).Select(x => x.QtiGroupId);

                authorizedItemSetIdList.AddRange(authorizedQtiGroupIdList);
            }
            authorizedQtiItemList = new List<QTIItemData>();
            authorizedQtiItemList = itemList.Where(x => authorizedItemSetIdList.Contains(x.QTIGroupID)).ToList();

            foreach (var item in itemList)
            {
                if (!authorizedItemSetIdList.Contains(item.QTIGroupID))
                {
                    return false;//if there's only one item has no right, return false
                }
            }

            return true;//all qti Item are under user right 
        }
        public bool HasRightToAddQtiItems(User currentUser, List<int> qtiItemIdList)
        {
            var filter = new QtiItemFilters
            {
                ForCheckingRight = true,
                QtiItemIdString = string.Join(",", qtiItemIdList.ToArray()),
                CurrentUserId = currentUser.Id,
                DistrictCategoryId = 0,
                FindResultWith = 1
            };

            var authorizedQtiItemIdList =
            _qtiItemQtiItemRepository.GetQtiItemsByFilter(filter, currentUser.Id, currentUser.DistrictId.GetValueOrDefault(), 0,
                                                                 int.MaxValue, "QtiItemId asc", "[QtiItemId]", string.Empty).Select(x => x.QtiItemId).ToList();
            foreach (var qtiItemId in qtiItemIdList)
            {
                if (!authorizedQtiItemIdList.Contains(qtiItemId))
                {
                    return false;
                }
            }

            return true;
        }
        #endregion Item Bank, Item Set

        #region Test Bank //========================================================= Test Bank =============================================================
        public bool HasRightToAccessTestBank(User currentUser, int bankId, List<int> listMemberDistrictId)//Access include TestBank shared to district (can not edit shared test bank)
        {
            if (HasRightToEditTestBank(currentUser, bankId, listMemberDistrictId))
            {
                return true;
            }
            //look at the logic at assign online test ( that page uses _userBankRepository.GetUserBanksBySubjectName )
            var criteria = new SearchBankCriteria
            {
                GradeId = null,
                DistrictId = currentUser.DistrictId.GetValueOrDefault(),
                UserId = currentUser.Id,
                UserRole = currentUser.RoleId,
                SubjectName = null

            };
            var testBank =
                _userBankRepository.GetUserBanksBySubjectName(criteria).Where(x => x.Id == bankId).FirstOrDefault();
            return testBank != null;
        }
        /// <summary>
        /// Check if a user has right to edit a test bank or not
        /// </summary>
        /// <param name="currentUser">Current login user</param>
        /// <param name="bankId">Test Bank Id need to verify</param>
        /// <param name="listDistrictId">If user is networkadmin, this is list of his/her member districtid</param>
        /// <returns></returns>
        public bool HasRightToEditTestBank(User currentUser, int bankId, List<int> listDistrictId)
        {
            var bank = _bankRepository.Select().FirstOrDefault(x => x.Id == bankId);
            if (bank == null)
                return false;
            var subject = _subjectRepository.Select().FirstOrDefault(x => x.Id == bank.SubjectID);
            var isSurvey = subject != null ? (subject.ShortName == SubjectShortName.SURVEY_SHORTNAME) : false;

            if (currentUser.IsPublisher)
            {
                return true;
            }
            else if (currentUser.IsNetworkAdmin)
            {
                return manageTestRepository.HasRightToEditTestBankForNetWorkAdmin(bankId, currentUser.Id);
            }
            else
            {
                var filter = new GetBanksByUserIDFilter
                {
                    UserID = currentUser.Id,
                    RoleID = currentUser.RoleId,
                    DistrictID = currentUser.DistrictId.GetValueOrDefault(),
                    BankID = bankId,
                    ShowArchived = true,
                    IsSurvey = isSurvey
                };

                var authorizedBankIdList = manageTestRepository.GetBanksByUserID(filter).Select(x => x.BankID).ToList();
                return authorizedBankIdList.Contains(bankId);
            }
        }


        #endregion Test Bank

        #region Class,School //========================================================= Class,School =============================================================
        public bool CheckUserCanAccessSchool(User currentUser, int schoolId)
        {
            return _vulnerabilityRepository.CheckUserCanAccessSchool(currentUser.Id, currentUser.RoleId, schoolId);
        }

        public bool CheckUserCanAccessClass(User currentUser, int classId)
        {
            return _vulnerabilityRepository.CheckUserCanAccessClass(currentUser.Id, currentUser.RoleId, classId);
        }
        public bool CheckUserPermissionOnClassOrSchool(int userID, int roleID, int itemID, string itemType)
        {
            return _vulnerabilityRepository.CheckUserPermissionOnClassOrSchool(
                userID, roleID, itemID, itemType);
        }

        public bool CheckUserCanAccessClass(User currentUser, List<int> classIdList)
        {
            foreach (var classId in classIdList)
            {
                if (!_vulnerabilityRepository.CheckUserCanAccessClass(currentUser.Id, currentUser.RoleId, classId))
                {
                    return false;
                }
            }
            return true;
        }
        #endregion Class,School
        #region Student //========================================================= Student =============================================================

        public bool CheckUserPermissionOnStudent(User currentUser, string studentIDList)
        {
            return _vulnerabilityRepository.CheckUserPersmissionOnStudent(
                currentUser.Id, currentUser.RoleId, studentIDList);
        }
        public bool CheckUserPermissionOnStudent(User currentUser, List<int> studentIDList)
        {
            return _vulnerabilityRepository.CheckUserPersmissionOnStudent(
                currentUser.Id, currentUser.RoleId, string.Join(",", studentIDList));
        }
        #endregion Student

        #region VirtualTest //========================================================= Virtual Test =============================================================
        /// <summary>
        /// Check if a user has right to access a virtual test or not.
        /// </summary>
        /// <param name="currentUser">Current user</param>
        /// <param name="virtualTestId">Test Id need to verify</param>
        /// <returns>True if user has right to access, otherwise return false</returns>

        public bool HasRightToAccessVirtualTest(User currentUser, int virtualTestId, List<int> memberDistrictIdList)
        {
            var virtualTest = _testRepository.Select().FirstOrDefault(x => x.Id == virtualTestId && x.QuestionCount > 0 && (x.DataSetOriginID == (int)DataSetOriginEnum.Item_Based_Score || x.DataSetOriginID == (int)DataSetOriginEnum.Survey));
            if (virtualTest != null)
                return HasRightToAccessTestBank(currentUser, virtualTest.BankId, memberDistrictIdList);

            return false;
        }

        public bool CheckUserCanPurgeTest(int userID, int roleID, int virtualTestID)
        {
            return _vulnerabilityRepository.CheckUserCanPurgeTest(userID, roleID, virtualTestID);
        }
        /// <summary>
        /// Check if a user has right to edit test or not
        /// </summary>
        /// <param name="currentUser">Current user</param>
        /// <param name="virtualTestID">Virtual Test ID need to be verified</param>
        /// <param name="listDistrictId">If user is a networkadmin, this is the list of his/her member districtId</param>
        /// <returns></returns>
        public bool HasRighToEditVirtualTest(User currentUser, int virtualTestID, List<int> listDistrictId)
        {
            var virtualTest = virtualTestRepository.Select().FirstOrDefault(x => x.VirtualTestID == virtualTestID);

            if (virtualTest != null)
            {
                return HasRightToEditTestBank(currentUser, virtualTest.BankID, listDistrictId);
            }
            return false;
        }
        #endregion VirtualTest


        #region TestResult //========================================================= Test Result =============================================================
        public bool CheckUserCanAccessTestResult(User currentUser, string testResultIdList)
        {
            return _vulnerabilityRepository.CheckUserCanAccessTestResult(currentUser.Id, currentUser.RoleId, testResultIdList);
        }
        #endregion TestResult
        #region Lesson //========================================================= Lesson =============================================================
        public bool HasRightToEditLesson(User user, int lessonId, List<int> memberDistrictIdList)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            var data = _lessonRepository.Select();
            if (user.IsNetworkAdmin)
            {
                data = data.Where(x => memberDistrictIdList.Contains(x.LessonProviderId.Value));
            }
            else if (user.IsDistrictAdmin)
            {
                data = data.Where(x => x.LessonProviderId.Value == user.DistrictId.GetValueOrDefault());
            }
            else if (user.IsSchoolAdmin)
            {
                //all of his/her teacher
                var authorizedUserIdList = _userManageRepository.GetManageUsersByRole(user.Id, user.DistrictId.GetValueOrDefault(), user.RoleId, 0, string.Empty, false)
                    .Select(x => x.UserId)
                    .ToList();
                data = data.Where(x => authorizedUserIdList.Contains(x.tUserId.GetValueOrDefault()));
            }
            else if (user.IsTeacher)
            {
                data = data.Where(x => x.tUserId == user.Id);
            }
            else
            {
                return false;
            }

            return data.Where(x => x.LessonId == lessonId).Any();

        }

        public bool IsValidContenProvider(User user, int contentProviderId)
        {
            if (user.IsDistrictAdmin || user.IsSchoolAdmin || user.IsTeacher)
            {
                return _lessonRepository.GetSharedProviders(user.DistrictId ?? 0).Any(o => o.Id == contentProviderId);
            }
            if (user.IsPublisher)
            {
                //Get all districts for publisher
                return _lessonRepository.GetSharedProviders(null).Any(o => o.Id == contentProviderId);
            }
            if (user.IsNetworkAdmin)
            {
                //Get all shared providers for each ditrict
                List<int> listProviderIds = new List<int>();
                var listDistrictIds = _dspDistrictRepository.GetDistrictMembers(user.Id).Select(o => o.Id).ToList();
                foreach (var districtId in listDistrictIds)
                {
                    listProviderIds.AddRange(_lessonRepository.GetSharedProviders(districtId).Select(o => o.Id).ToList());
                }
                //distinct 
                return listProviderIds.Any(o => o == contentProviderId);
            }
            return false;
        }

        #endregion Lesson
        #region Program //========================================================= Program =============================================================
        public IQueryable<ProgramToView> LoadPrograms(User user, int distictId, string currentDateTime)
        {
            var data = _programRepository.GetProgramsByDistrictIdToView(distictId, currentDateTime);

            if (!user.IsPublisher)
            {
                data = data.Where(x => x.AccessLevelId != (int)AccessLevelEnum.LinkItOnly && x.AccessLevelId != (int)AccessLevelEnum.StateUsers);
            }
            if (user.IsSchoolAdmin)
            {
                data =
                    data.Where(
                        x =>
                            x.AccessLevelId == (int)AccessLevelEnum.DistrictAndSchoolAdmins ||
                            x.AccessLevelId == (int)AccessLevelEnum.AllUsers);
            }
            if (user.IsTeacher)
            {
                data =
                    data.Where(
                        x => x.AccessLevelId == (int)AccessLevelEnum.AllUsers);

            }
            return data;
        }
        public bool HasRigtToEditProgram(User user, int programId, int programDistictId)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            var data = LoadPrograms(user, programDistictId, DateTime.UtcNow.ToString());

            return data.Where(x => x.ProgramId == programId).Any();
        }
        public bool HasRigtToEditPrograms(User user, List<int> programIdList)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            var programs = _programRepository.Select().Where(x => programIdList.Contains(x.Id)).ToList();

            var districtIdList = programs.Select(x => x.DistrictID).Distinct().ToList();
            var authorizedProgramIdList = new List<int>();
            foreach (var districtId in districtIdList)
            {
                var data = LoadPrograms(user, districtId, DateTime.UtcNow.ToString());
                authorizedProgramIdList.AddRange(data.Select(x => x.ProgramId).ToList());
            }
            foreach (var programId in programIdList)
            {
                if (!authorizedProgramIdList.Contains(programId))
                {
                    return false;
                }
            }
            return true;
        }
        #endregion Program
        #region Author Group //========================================================= Author Group =============================================================
        public bool HasRigtToAccessAuthorGroup(User user, int authorGroupId)
        {
            //base on AssessmentController.GetAuthorGroupListHasAccessTo
            if (user.IsPublisher || user.IsNetworkAdmin)
            {
                return _authorGroupRepository.GetAuthorGroupListHasAccessTo(user.Id, 0, 0, 0)
                    .Any(x => x.AuthorGroupID == authorGroupId);
            }
            else
            {
                return _authorGroupRepository.GetAuthorGroupListHasAccessTo(user.Id, 0, user.DistrictId.Value, 0)
                    .Any(x => x.AuthorGroupID == authorGroupId);
            }
        }
        #endregion Author Group

        #region QtiTestClassAssignment //============================================== QtiTestClassAssignment ================================================
        public bool HasRigtToEditQtiTestClassAssignment(User user, int qtiTestClassAssignmentId)
        {
            //Base on page TestAssignmentReview 
            var districtId = user.DistrictId;
            if (user.IsPublisher || user.IsNetworkAdmin)
            {
                var assignmentSearchResult = _qtiTestClassAssignmentRepository.GetTestClassAssignments(new GetTestClassAssignmentsRequest
                {
                    AssignDate = "01-01-1801",
                    PageSize = 1,
                    QtiTestClassAssignmentId = qtiTestClassAssignmentId,
                    StartRow = 0,
                    UserID = user.Id
                });

                if (assignmentSearchResult == null || assignmentSearchResult.TotalRecord != 1) return false;

                var qtiTestClassAssignment = assignmentSearchResult.Data == null ? null : assignmentSearchResult.Data.FirstOrDefault();
                if (qtiTestClassAssignment == null) return false;

                var classAssign = _classRepository.GetClassByID(qtiTestClassAssignment.ClassID);
                if (classAssign == null)
                {
                    return false;
                }
                var districtTerm =
                    _districtTermRepository.Select()
                        .Where(x => x.DistrictTermID == classAssign.DistrictTermId)
                        .FirstOrDefault();
                if (districtTerm == null)
                {
                    return false;
                }
                if (user.IsNetworkAdmin)
                {
                    if (!_dspDistrictRepository.GetDistrictMembers(user.DistrictId.GetValueOrDefault()).Any(x => x.Id == districtTerm.DistrictID))
                    {
                        return false;
                    }
                }
                districtId = districtTerm.DistrictID;

            }
            else
            {

            }

            var data = _qtiTestClassAssignmentRepository.GetTestClassAssignments(new GetTestClassAssignmentsRequest
            {
                AssignDate = "01-01-1801",
                DistrictID = districtId,
                PageSize = 1,
                QtiTestClassAssignmentId = qtiTestClassAssignmentId,
                StartRow = 0,
                UserID = user.Id
            });
            var result = data != null && data.TotalRecord == 1;

            return result;

            //return _qtiTestClassAssignmentRepository.GetTestClassAssignments("01-01-1801", false, false, user.Id,
            //    districtId, qtiTestClassAssignmentId, 0).Any();
        }

        public bool HasRigtToEditMultiQtiTestClassAssignment(User user, List<int> qtiTestClassAssignmentIds)
        {
            //Base on page TestAssignmentReview 
            var qtiString = String.Join(",", qtiTestClassAssignmentIds);

            return _qtiTestClassAssignmentRepository.CheckPermissionsEditQTITestClassAssignment(user.RoleId, user.Id, qtiString);

        }

        #endregion QTITestClassAssignment
        #region QtiOnlineTestSession //======================================== QtiOnlineTestSession =====================================
        public bool HasRigtToEditQtiOnlineTestSession(User user, int qtiOnlineTestSessionId)
        {
            var qtiOnlineTestSession = _qtiOnlineTestSessionRepository.Select()
                   .FirstOrDefault(o => o.QTIOnlineTestSessionId == qtiOnlineTestSessionId);
            if (qtiOnlineTestSession == null)
            {
                return false;
            }
            //get qtiTestClassAssignment
            var qtiTestClassAssignment = _testClassAssignmentRepository.Select()
                .Where(x => x.AssignmentGuId == qtiOnlineTestSession.AssignmentGUId)
                .FirstOrDefault();
            if (qtiTestClassAssignment == null)
            {
                return false;
            }
            return HasRigtToEditQtiTestClassAssignment(user, qtiTestClassAssignment.QTITestClassAssignmentId);
        }
        #endregion QtiOnlineTestSession

        #region QtiOnlineTestSessionAnswer //======================================== QtiOnlineTestSessionAnswer =====================================
        public bool HasRigtToEditQtiOnlineTestSessionAnswer(User user, int qtiOnlineTestSessionAnswerId, int answerId, int qtiOnlineTestSessionID, int virtualQuestionID)
        {
            var qtiOnlineTestSessionAnswer = _qtiOnlineTestSessionAnswerRepository.Select()
                   .FirstOrDefault(o => o.QtiOnlineTestSessionAnswerID == qtiOnlineTestSessionAnswerId);
            if (qtiOnlineTestSessionAnswer == null)
            {
                if (answerId > 0)
                {
                    //find qtiOnlineTestSessionAnswerID through tabe Answer -> TestResult
                    var testResultId =
                        _answerRepository.Select()
                            .Where(x => x.AnswerID == answerId)
                            .Select(x => x.TestResultID)
                            .FirstOrDefault();
                    var testResult = _testResultRepository.Select()
                        .Where(x => x.TestResultId == testResultId)
                        .FirstOrDefault();
                    if (testResult != null)
                    {
                        return HasRigtToEditQtiOnlineTestSession(user,
                            testResult.QTIOnlineTestSessionID.GetValueOrDefault());
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    //This is a special case
                    //User has already click on Submit Test, at the moment this test might be waiting for AutoGrading Service grading
                    //So that the table qtiOnlineTestSessionAnswer might be clear at qtiOnlineTestSessionAnswerId but answerId is now still not be returned
                    //->Have to base on qtiOnlineTestSessionID and virtualQuestionID to check security
                    var hasRigt = HasRigtToEditQtiOnlineTestSession(user, qtiOnlineTestSessionID);
                    if (!hasRigt)
                    {
                        return false;
                    }
                    else
                    {
                        var testResult = _testResultRepository.Select()
                       .Where(x => x.QTIOnlineTestSessionID == qtiOnlineTestSessionID)
                       .FirstOrDefault();
                        if (testResult == null)
                        {
                            return false;
                        }
                        else
                        {
                            var answer = _answerRepository.Select()
                            .Where(x => x.TestResultID == testResult.TestResultId && x.VirtualQuestionID == virtualQuestionID)
                            .FirstOrDefault();
                            if (answer == null)
                            {
                                return false;
                            }
                            else
                            {
                                return true;
                            }
                        }
                    }
                }


            }
            else
            {
                return HasRigtToEditQtiOnlineTestSession(user, qtiOnlineTestSessionAnswer.QtiOnlineTestSessionID);
            }

        }
        #endregion QtiOnlineTestSessionAnswer
        #region Subject //======================================== Subject =====================================
        /// <summary>
        /// Check if the current user has right to select a subject.
        /// 
        /// </summary>
        /// <param name="user">Current user</param>
        /// <param name="subjectId">subject id need to be verified</param>
        /// <param name="memberDistrictIdList">If user is network admin, this parameter containts list of member districtid</param>
        /// <returns></returns>
        public bool HasRigtToAccessSubject(User user, int subjectId, List<int> memberDistrictIdList)
        {
            //Can not check directly if a user can access a subject
            //Check the grade of the subject ( have a look at PopulateTestController-> GetGradesByStateId,GetSubjectByStateIdAndGradeId)
            var subject = _subjectRepository.Select().Where(x => x.Id == subjectId).FirstOrDefault();
            int stateId = GetStateOfUser(user);
            if (subject == null)
            {
                return false;
            }
            if (user.IsPublisher)
            {
                return true;
            }
            else if (user.IsNetworkAdmin)
            {
                //get list of stateId
                var stateidList = _districtRepository.Select().Where(x => memberDistrictIdList.Contains(x.Id)).Select(x => x.StateId).ToList();
                if (!stateidList.Contains(subject.StateId))
                {
                    return false;
                }
            }
            else
            {
                if (subject.StateId != stateId)
                {
                    return false;
                }
            }



            var authorizedGrade = _gradeRepository.GetGradesByStateID(stateId);
            return authorizedGrade.Any(x => x.Id == subject.GradeId);
        }
        #endregion Subject
        #region District, State //======================================== District,State =====================================
        /// <summary>
        /// Check if a user has right on a district or not
        /// </summary>
        /// <param name="user">Current user</param>
        /// <param name="memberDistrictIdOfNetworkAdmin">When user is a networkadmin, this param contains list of its member districtId</param>
        /// <param name="districId">The district need to verify user right</param>
        /// <returns></returns>
        public bool HasRightOnDistrict(User user, List<int> memberDistrictIdOfNetworkAdmin, int districId)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            else if (user.IsNetworkAdmin)
            {
                return memberDistrictIdOfNetworkAdmin.Contains(districId);
            }
            else
            {
                return user.DistrictId.GetValueOrDefault() == districId;
            }

        }
        /// <summary>
        /// Check if a user has right on a state or not
        /// </summary>
        /// <param name="user">Current user</param>
        /// <param name="memberDistrictIdOfNetworkAdmin">When user is a networkadmin, this param contains list of its member districtId</param>
        /// <param name="stateId">The state id need to verify user right</param>
        /// <returns></returns>
        public bool HasRightOnState(User user, List<int> memberDistrictIdOfNetworkAdmin, int stateId)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            else if (user.IsNetworkAdmin)
            {
                //get all states of his/her member districtId
                var stateIdList = _districtRepository.Select().Where(x => memberDistrictIdOfNetworkAdmin.Contains(x.Id)).Select(x => x.StateId).ToList();
                return stateIdList.Contains(stateId);
            }
            else
            {
                return false;
            }

        }
        #endregion District,State
        #region TLDS Manage //======================================== TLDS Manage =====================================

        public bool HasRightToCreateTLDSProfile(User user)
        {
            return user.IsTeacher;//Only Teachers have right to create Profile
        }

        /// <summary>
        /// Check if a use has right to accesss (not edit) a profile or not
        /// </summary>
        /// <param name="user">Current user logged on</param>
        /// <param name="profileId">Profile need to verify</param>
        /// <returns>true if current user has right to access, else return false</returns>
        public bool HasRightToAccessTLDSProfile(User user, int profileId)
        {
            if (user.IsPublisher)
            {
                return true;
            }
            else
            {
                //Now use stored proc TLDSGetProfiles to verify
                var profileFiltered =
                    _tldsProfileRepository.FilterTLDSProfile(user.Id, null, null, null, profileId, null, null).FirstOrDefault();
                if (profileFiltered != null)
                {
                    if (profileFiltered.Viewable)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        /// <summary>
        ///  Check if a use has right to accesss (not edit) a profile or not
        /// </summary>
        /// <param name="user">Current user</param>
        /// <param name="createdUserId">UserID who created the profile</param>
        /// <param name="memberDistrictIdOfNetworkAdmin">If current user is a NetworkAdmin, this is the list of district he/she manages</param>
        /// <returns>true if current user has right to update, else return false</returns>
        public bool HasRightToUpdateTLDSProfile(User user, int createdUserId, List<int> memberDistrictIdOfNetworkAdmin)
        {
            return user.Id == createdUserId; //his/her own profile
            //at the moment, only the owner has right to update
        }
        public bool HasRightToAssociateStudentToTLDSProfile(User user, TLDSProfile profile, List<int> memberDistrictIdOfNetworkAdmin)
        {
            if (user.RoleId != (int)Permissions.SchoolAdmin)
            {
                return false;//Only School Admin has right to associate student to TLDS Profile now
            }
            if (!profile.UpcommingSchoolID.HasValue)
            {
                return false;
            }
            return CheckUserCanAccessSchool(user, profile.UpcommingSchoolID.Value);
        }

        public bool HasRightToRejectTLDSProfile(User user, TLDSProfile profile, List<int> memberDistrictIdOfNetworkAdmin)
        {
            if (user.RoleId != (int)Permissions.SchoolAdmin)
            {
                return false;//Only School Admin has right to reject TLDS Profile now
            }
            return CheckUserCanAccessSchool(user, profile.UpcommingSchoolID.Value);
        }
        #endregion TLDS Manage

        public bool IsSurveyBank(int bankId)
        {
            var bank = _bankRepository.Select().FirstOrDefault(x => x.Id == bankId);
            if (bank == null)
                return false;
            var subject = _subjectRepository.Select().FirstOrDefault(x => x.Id == bank.SubjectID);
            var isSurvey = subject != null ? (subject.ShortName == SubjectShortName.SURVEY_SHORTNAME) : false;

            return isSurvey;
        }
    }
}
