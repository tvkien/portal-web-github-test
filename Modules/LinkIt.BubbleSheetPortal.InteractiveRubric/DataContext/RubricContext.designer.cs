#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkIt.BubbleSheetPortal.InteractiveRubric.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AdminReportingVNS")]
	public partial class RubricDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRubricTestResultScoreEntity(RubricTestResultScoreEntity instance);
    partial void UpdateRubricTestResultScoreEntity(RubricTestResultScoreEntity instance);
    partial void DeleteRubricTestResultScoreEntity(RubricTestResultScoreEntity instance);
    partial void InsertRubricQuestionCategoryEntity(RubricQuestionCategoryEntity instance);
    partial void UpdateRubricQuestionCategoryEntity(RubricQuestionCategoryEntity instance);
    partial void DeleteRubricQuestionCategoryEntity(RubricQuestionCategoryEntity instance);
    partial void InsertRubricCategoryTierEntity(RubricCategoryTierEntity instance);
    partial void UpdateRubricCategoryTierEntity(RubricCategoryTierEntity instance);
    partial void DeleteRubricCategoryTierEntity(RubricCategoryTierEntity instance);
    partial void InsertRubricCategoryTagEntity(RubricCategoryTagEntity instance);
    partial void UpdateRubricCategoryTagEntity(RubricCategoryTagEntity instance);
    partial void DeleteRubricCategoryTagEntity(RubricCategoryTagEntity instance);
    #endregion
		
		public RubricDataContext() : 
				base(global::LinkIt.BubbleSheetPortal.InteractiveRubric.Properties.Settings.Default.AdminReportingVNSConnectionString30, mappingSource)
		{
			OnCreated();
		}
		
		public RubricDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RubricDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RubricTestResultScoreEntity> RubricTestResultScoreEntities
		{
			get
			{
				return this.GetTable<RubricTestResultScoreEntity>();
			}
		}
		
		public System.Data.Linq.Table<RubricQuestionCategoryEntity> RubricQuestionCategoryEntities
		{
			get
			{
				return this.GetTable<RubricQuestionCategoryEntity>();
			}
		}
		
		public System.Data.Linq.Table<RubricCategoryTierEntity> RubricCategoryTierEntities
		{
			get
			{
				return this.GetTable<RubricCategoryTierEntity>();
			}
		}
		
		public System.Data.Linq.Table<RubricCategoryTagEntity> RubricCategoryTagEntities
		{
			get
			{
				return this.GetTable<RubricCategoryTagEntity>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRubricTagByCategoryIdAndIds")]
		public ISingleResult<GetRubricTagByCategoryIdAndIdsResult> GetRubricTagByCategoryIdAndIds([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TagIDs", DbType="VarChar(MAX)")] string tagIDs, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryIDs", DbType="VarChar(MAX)")] string categoryIDs, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TagType", DbType="VarChar(50)")] string tagType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagIDs, categoryIDs, tagType);
			return ((ISingleResult<GetRubricTagByCategoryIdAndIdsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllTagsByVirtualQuestion")]
		public ISingleResult<GetAllTagsByVirtualQuestionResult> GetAllTagsByVirtualQuestion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VirtualQuestionIds", DbType="NVarChar(MAX)")] string virtualQuestionIds)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), virtualQuestionIds);
			return ((ISingleResult<GetAllTagsByVirtualQuestionResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RubricTestResultScore")]
	public partial class RubricTestResultScoreEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricTestResultScoreID;
		
		private int _RubricQuestionCategoryID;
		
		private System.Nullable<int> _QTIOnlineTestSessionID;
		
		private int _VirtualQuestionID;
		
		private System.Nullable<decimal> _Score;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<int> _UpdatedBy;
		
		private EntityRef<RubricQuestionCategoryEntity> _RubricQuestionCategoryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricTestResultScoreIDChanging(int value);
    partial void OnRubricTestResultScoreIDChanged();
    partial void OnRubricQuestionCategoryIDChanging(int value);
    partial void OnRubricQuestionCategoryIDChanged();
    partial void OnQTIOnlineTestSessionIDChanging(System.Nullable<int> value);
    partial void OnQTIOnlineTestSessionIDChanged();
    partial void OnVirtualQuestionIDChanging(int value);
    partial void OnVirtualQuestionIDChanged();
    partial void OnScoreChanging(System.Nullable<decimal> value);
    partial void OnScoreChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public RubricTestResultScoreEntity()
		{
			this._RubricQuestionCategoryEntity = default(EntityRef<RubricQuestionCategoryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricTestResultScoreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RubricTestResultScoreID
		{
			get
			{
				return this._RubricTestResultScoreID;
			}
			set
			{
				if ((this._RubricTestResultScoreID != value))
				{
					this.OnRubricTestResultScoreIDChanging(value);
					this.SendPropertyChanging();
					this._RubricTestResultScoreID = value;
					this.SendPropertyChanged("RubricTestResultScoreID");
					this.OnRubricTestResultScoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricQuestionCategoryID", DbType="Int NOT NULL")]
		public int RubricQuestionCategoryID
		{
			get
			{
				return this._RubricQuestionCategoryID;
			}
			set
			{
				if ((this._RubricQuestionCategoryID != value))
				{
					if (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricQuestionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RubricQuestionCategoryID = value;
					this.SendPropertyChanged("RubricQuestionCategoryID");
					this.OnRubricQuestionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QTIOnlineTestSessionID", DbType="Int")]
		public System.Nullable<int> QTIOnlineTestSessionID
		{
			get
			{
				return this._QTIOnlineTestSessionID;
			}
			set
			{
				if ((this._QTIOnlineTestSessionID != value))
				{
					this.OnQTIOnlineTestSessionIDChanging(value);
					this.SendPropertyChanging();
					this._QTIOnlineTestSessionID = value;
					this.SendPropertyChanged("QTIOnlineTestSessionID");
					this.OnQTIOnlineTestSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualQuestionID", DbType="Int NOT NULL")]
		public int VirtualQuestionID
		{
			get
			{
				return this._VirtualQuestionID;
			}
			set
			{
				if ((this._VirtualQuestionID != value))
				{
					this.OnVirtualQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._VirtualQuestionID = value;
					this.SendPropertyChanged("VirtualQuestionID");
					this.OnVirtualQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricTestResultScoreEntity", Storage="_RubricQuestionCategoryEntity", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RubricQuestionCategoryEntity RubricQuestionCategoryEntity
		{
			get
			{
				return this._RubricQuestionCategoryEntity.Entity;
			}
			set
			{
				RubricQuestionCategoryEntity previousValue = this._RubricQuestionCategoryEntity.Entity;
				if (((previousValue != value) 
							|| (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RubricQuestionCategoryEntity.Entity = null;
						previousValue.RubricTestResultScoreEntities.Remove(this);
					}
					this._RubricQuestionCategoryEntity.Entity = value;
					if ((value != null))
					{
						value.RubricTestResultScoreEntities.Add(this);
						this._RubricQuestionCategoryID = value.RubricQuestionCategoryID;
					}
					else
					{
						this._RubricQuestionCategoryID = default(int);
					}
					this.SendPropertyChanged("RubricQuestionCategoryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RubricQuestionCategory")]
	public partial class RubricQuestionCategoryEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricQuestionCategoryID;
		
		private int _VirtualQuestionID;
		
		private string _CategoryName;
		
		private string _CategoryCode;
		
		private int _OrderNumber;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<decimal> _PointsPossible;
		
		private EntitySet<RubricTestResultScoreEntity> _RubricTestResultScoreEntities;
		
		private EntitySet<RubricCategoryTierEntity> _RubricCategoryTierEntities;
		
		private EntitySet<RubricCategoryTagEntity> _RubricCategoryTagEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricQuestionCategoryIDChanging(int value);
    partial void OnRubricQuestionCategoryIDChanged();
    partial void OnVirtualQuestionIDChanging(int value);
    partial void OnVirtualQuestionIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryCodeChanging(string value);
    partial void OnCategoryCodeChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnPointsPossibleChanging(System.Nullable<decimal> value);
    partial void OnPointsPossibleChanged();
    #endregion
		
		public RubricQuestionCategoryEntity()
		{
			this._RubricTestResultScoreEntities = new EntitySet<RubricTestResultScoreEntity>(new Action<RubricTestResultScoreEntity>(this.attach_RubricTestResultScoreEntities), new Action<RubricTestResultScoreEntity>(this.detach_RubricTestResultScoreEntities));
			this._RubricCategoryTierEntities = new EntitySet<RubricCategoryTierEntity>(new Action<RubricCategoryTierEntity>(this.attach_RubricCategoryTierEntities), new Action<RubricCategoryTierEntity>(this.detach_RubricCategoryTierEntities));
			this._RubricCategoryTagEntities = new EntitySet<RubricCategoryTagEntity>(new Action<RubricCategoryTagEntity>(this.attach_RubricCategoryTagEntities), new Action<RubricCategoryTagEntity>(this.detach_RubricCategoryTagEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricQuestionCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RubricQuestionCategoryID
		{
			get
			{
				return this._RubricQuestionCategoryID;
			}
			set
			{
				if ((this._RubricQuestionCategoryID != value))
				{
					this.OnRubricQuestionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RubricQuestionCategoryID = value;
					this.SendPropertyChanged("RubricQuestionCategoryID");
					this.OnRubricQuestionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualQuestionID", DbType="Int NOT NULL")]
		public int VirtualQuestionID
		{
			get
			{
				return this._VirtualQuestionID;
			}
			set
			{
				if ((this._VirtualQuestionID != value))
				{
					this.OnVirtualQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._VirtualQuestionID = value;
					this.SendPropertyChanged("VirtualQuestionID");
					this.OnVirtualQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(MAX)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryCode", DbType="VarChar(500)")]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int NOT NULL")]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointsPossible")]
		public System.Nullable<decimal> PointsPossible
		{
			get
			{
				return this._PointsPossible;
			}
			set
			{
				if ((this._PointsPossible != value))
				{
					this.OnPointsPossibleChanging(value);
					this.SendPropertyChanging();
					this._PointsPossible = value;
					this.SendPropertyChanged("PointsPossible");
					this.OnPointsPossibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricTestResultScoreEntity", Storage="_RubricTestResultScoreEntities", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID")]
		public EntitySet<RubricTestResultScoreEntity> RubricTestResultScoreEntities
		{
			get
			{
				return this._RubricTestResultScoreEntities;
			}
			set
			{
				this._RubricTestResultScoreEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricCategoryTierEntity", Storage="_RubricCategoryTierEntities", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID")]
		public EntitySet<RubricCategoryTierEntity> RubricCategoryTierEntities
		{
			get
			{
				return this._RubricCategoryTierEntities;
			}
			set
			{
				this._RubricCategoryTierEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricCategoryTagEntity", Storage="_RubricCategoryTagEntities", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID")]
		public EntitySet<RubricCategoryTagEntity> RubricCategoryTagEntities
		{
			get
			{
				return this._RubricCategoryTagEntities;
			}
			set
			{
				this._RubricCategoryTagEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RubricTestResultScoreEntities(RubricTestResultScoreEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = this;
		}
		
		private void detach_RubricTestResultScoreEntities(RubricTestResultScoreEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = null;
		}
		
		private void attach_RubricCategoryTierEntities(RubricCategoryTierEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = this;
		}
		
		private void detach_RubricCategoryTierEntities(RubricCategoryTierEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = null;
		}
		
		private void attach_RubricCategoryTagEntities(RubricCategoryTagEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = this;
		}
		
		private void detach_RubricCategoryTagEntities(RubricCategoryTagEntity entity)
		{
			this.SendPropertyChanging();
			entity.RubricQuestionCategoryEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RubricCategoryTier")]
	public partial class RubricCategoryTierEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricCategoryTierID;
		
		private int _RubricQuestionCategoryID;
		
		private System.Nullable<decimal> _Point;
		
		private string _Label;
		
		private string _Description;
		
		private int _OrderNumber;
		
		private EntityRef<RubricQuestionCategoryEntity> _RubricQuestionCategoryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricCategoryTierIDChanging(int value);
    partial void OnRubricCategoryTierIDChanged();
    partial void OnRubricQuestionCategoryIDChanging(int value);
    partial void OnRubricQuestionCategoryIDChanged();
    partial void OnPointChanging(System.Nullable<decimal> value);
    partial void OnPointChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrderNumberChanging(int value);
    partial void OnOrderNumberChanged();
    #endregion
		
		public RubricCategoryTierEntity()
		{
			this._RubricQuestionCategoryEntity = default(EntityRef<RubricQuestionCategoryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricCategoryTierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RubricCategoryTierID
		{
			get
			{
				return this._RubricCategoryTierID;
			}
			set
			{
				if ((this._RubricCategoryTierID != value))
				{
					this.OnRubricCategoryTierIDChanging(value);
					this.SendPropertyChanging();
					this._RubricCategoryTierID = value;
					this.SendPropertyChanged("RubricCategoryTierID");
					this.OnRubricCategoryTierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricQuestionCategoryID", DbType="Int NOT NULL")]
		public int RubricQuestionCategoryID
		{
			get
			{
				return this._RubricQuestionCategoryID;
			}
			set
			{
				if ((this._RubricQuestionCategoryID != value))
				{
					if (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricQuestionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RubricQuestionCategoryID = value;
					this.SendPropertyChanged("RubricQuestionCategoryID");
					this.OnRubricQuestionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(500)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int NOT NULL")]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricCategoryTierEntity", Storage="_RubricQuestionCategoryEntity", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RubricQuestionCategoryEntity RubricQuestionCategoryEntity
		{
			get
			{
				return this._RubricQuestionCategoryEntity.Entity;
			}
			set
			{
				RubricQuestionCategoryEntity previousValue = this._RubricQuestionCategoryEntity.Entity;
				if (((previousValue != value) 
							|| (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RubricQuestionCategoryEntity.Entity = null;
						previousValue.RubricCategoryTierEntities.Remove(this);
					}
					this._RubricQuestionCategoryEntity.Entity = value;
					if ((value != null))
					{
						value.RubricCategoryTierEntities.Add(this);
						this._RubricQuestionCategoryID = value.RubricQuestionCategoryID;
					}
					else
					{
						this._RubricQuestionCategoryID = default(int);
					}
					this.SendPropertyChanged("RubricQuestionCategoryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RubricCategoryTag")]
	public partial class RubricCategoryTagEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RubricCategoryTagID;
		
		private int _RubricQuestionCategoryID;
		
		private int _TagID;
		
		private string _TagType;
		
		private string _TagName;
		
		private string _TagDescription;
		
		private System.Nullable<int> _TagCategoryID;
		
		private string _TagCategoryName;
		
		private System.Nullable<int> _VirtualQuestionID;
		
		private EntityRef<RubricQuestionCategoryEntity> _RubricQuestionCategoryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRubricCategoryTagIDChanging(int value);
    partial void OnRubricCategoryTagIDChanged();
    partial void OnRubricQuestionCategoryIDChanging(int value);
    partial void OnRubricQuestionCategoryIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnTagTypeChanging(string value);
    partial void OnTagTypeChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTagDescriptionChanging(string value);
    partial void OnTagDescriptionChanged();
    partial void OnTagCategoryIDChanging(System.Nullable<int> value);
    partial void OnTagCategoryIDChanged();
    partial void OnTagCategoryNameChanging(string value);
    partial void OnTagCategoryNameChanged();
    partial void OnVirtualQuestionIDChanging(System.Nullable<int> value);
    partial void OnVirtualQuestionIDChanged();
    #endregion
		
		public RubricCategoryTagEntity()
		{
			this._RubricQuestionCategoryEntity = default(EntityRef<RubricQuestionCategoryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricCategoryTagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RubricCategoryTagID
		{
			get
			{
				return this._RubricCategoryTagID;
			}
			set
			{
				if ((this._RubricCategoryTagID != value))
				{
					this.OnRubricCategoryTagIDChanging(value);
					this.SendPropertyChanging();
					this._RubricCategoryTagID = value;
					this.SendPropertyChanged("RubricCategoryTagID");
					this.OnRubricCategoryTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricQuestionCategoryID", DbType="Int NOT NULL")]
		public int RubricQuestionCategoryID
		{
			get
			{
				return this._RubricQuestionCategoryID;
			}
			set
			{
				if ((this._RubricQuestionCategoryID != value))
				{
					if (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRubricQuestionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._RubricQuestionCategoryID = value;
					this.SendPropertyChanged("RubricQuestionCategoryID");
					this.OnRubricQuestionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL")]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TagType
		{
			get
			{
				return this._TagType;
			}
			set
			{
				if ((this._TagType != value))
				{
					this.OnTagTypeChanging(value);
					this.SendPropertyChanging();
					this._TagType = value;
					this.SendPropertyChanged("TagType");
					this.OnTagTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(500)")]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagDescription", DbType="VarChar(500)")]
		public string TagDescription
		{
			get
			{
				return this._TagDescription;
			}
			set
			{
				if ((this._TagDescription != value))
				{
					this.OnTagDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TagDescription = value;
					this.SendPropertyChanged("TagDescription");
					this.OnTagDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryID", DbType="Int")]
		public System.Nullable<int> TagCategoryID
		{
			get
			{
				return this._TagCategoryID;
			}
			set
			{
				if ((this._TagCategoryID != value))
				{
					this.OnTagCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._TagCategoryID = value;
					this.SendPropertyChanged("TagCategoryID");
					this.OnTagCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryName", DbType="VarChar(500)")]
		public string TagCategoryName
		{
			get
			{
				return this._TagCategoryName;
			}
			set
			{
				if ((this._TagCategoryName != value))
				{
					this.OnTagCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._TagCategoryName = value;
					this.SendPropertyChanged("TagCategoryName");
					this.OnTagCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualQuestionID")]
		public System.Nullable<int> VirtualQuestionID
		{
			get
			{
				return this._VirtualQuestionID;
			}
			set
			{
				if ((this._VirtualQuestionID != value))
				{
					this.OnVirtualQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._VirtualQuestionID = value;
					this.SendPropertyChanged("VirtualQuestionID");
					this.OnVirtualQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RubricQuestionCategoryEntity_RubricCategoryTagEntity", Storage="_RubricQuestionCategoryEntity", ThisKey="RubricQuestionCategoryID", OtherKey="RubricQuestionCategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RubricQuestionCategoryEntity RubricQuestionCategoryEntity
		{
			get
			{
				return this._RubricQuestionCategoryEntity.Entity;
			}
			set
			{
				RubricQuestionCategoryEntity previousValue = this._RubricQuestionCategoryEntity.Entity;
				if (((previousValue != value) 
							|| (this._RubricQuestionCategoryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RubricQuestionCategoryEntity.Entity = null;
						previousValue.RubricCategoryTagEntities.Remove(this);
					}
					this._RubricQuestionCategoryEntity.Entity = value;
					if ((value != null))
					{
						value.RubricCategoryTagEntities.Add(this);
						this._RubricQuestionCategoryID = value.RubricQuestionCategoryID;
					}
					else
					{
						this._RubricQuestionCategoryID = default(int);
					}
					this.SendPropertyChanged("RubricQuestionCategoryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetRubricTagByCategoryIdAndIdsResult
	{
		
		private int _RubricCategoryTagID;
		
		private int _RubricQuestionCategoryID;
		
		private int _TagID;
		
		private string _TagType;
		
		private string _TagName;
		
		private string _TagDescription;
		
		private int _TagCategoryID;
		
		private string _TagCategoryName;
		
		private int _VirtualQuestionID;
		
		public GetRubricTagByCategoryIdAndIdsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricCategoryTagID", DbType="Int NOT NULL")]
		public int RubricCategoryTagID
		{
			get
			{
				return this._RubricCategoryTagID;
			}
			set
			{
				if ((this._RubricCategoryTagID != value))
				{
					this._RubricCategoryTagID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RubricQuestionCategoryID", DbType="Int NOT NULL")]
		public int RubricQuestionCategoryID
		{
			get
			{
				return this._RubricQuestionCategoryID;
			}
			set
			{
				if ((this._RubricQuestionCategoryID != value))
				{
					this._RubricQuestionCategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL")]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this._TagID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagType", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string TagType
		{
			get
			{
				return this._TagType;
			}
			set
			{
				if ((this._TagType != value))
				{
					this._TagType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this._TagName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagDescription", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string TagDescription
		{
			get
			{
				return this._TagDescription;
			}
			set
			{
				if ((this._TagDescription != value))
				{
					this._TagDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryID", DbType="Int NOT NULL")]
		public int TagCategoryID
		{
			get
			{
				return this._TagCategoryID;
			}
			set
			{
				if ((this._TagCategoryID != value))
				{
					this._TagCategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryName", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string TagCategoryName
		{
			get
			{
				return this._TagCategoryName;
			}
			set
			{
				if ((this._TagCategoryName != value))
				{
					this._TagCategoryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualQuestionID", DbType="Int NOT NULL")]
		public int VirtualQuestionID
		{
			get
			{
				return this._VirtualQuestionID;
			}
			set
			{
				if ((this._VirtualQuestionID != value))
				{
					this._VirtualQuestionID = value;
				}
			}
		}
	}
	
	public partial class GetAllTagsByVirtualQuestionResult
	{
		
		private int _TagID;
		
		private string _TagName;
		
		private string _TagCategoryName;
		
		private int _TagCategoryID;
		
		private string _TagType;
		
		private int _VirtualQuestionID;
		
		private int _OrderNumber;
		
		public GetAllTagsByVirtualQuestionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL")]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this._TagID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this._TagName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TagCategoryName
		{
			get
			{
				return this._TagCategoryName;
			}
			set
			{
				if ((this._TagCategoryName != value))
				{
					this._TagCategoryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCategoryID", DbType="Int NOT NULL")]
		public int TagCategoryID
		{
			get
			{
				return this._TagCategoryID;
			}
			set
			{
				if ((this._TagCategoryID != value))
				{
					this._TagCategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string TagType
		{
			get
			{
				return this._TagType;
			}
			set
			{
				if ((this._TagType != value))
				{
					this._TagType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualQuestionID", DbType="Int NOT NULL")]
		public int VirtualQuestionID
		{
			get
			{
				return this._VirtualQuestionID;
			}
			set
			{
				if ((this._VirtualQuestionID != value))
				{
					this._VirtualQuestionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int NOT NULL")]
		public int OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this._OrderNumber = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
