using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using System.Text;
using AutoMapper;
using Envoc.Core.Shared.Data;
using LinkIt.BubbleSheetPortal.Data.Entities;
using LinkIt.BubbleSheetPortal.Models;

namespace LinkIt.BubbleSheetPortal.Data.Repositories
{
    public class VulnerabilityRepository : IVulnerabilityRepository
    {
        private readonly DbDataContext dbContext;

        public VulnerabilityRepository(IConnectionString conn)
        {
            var connectionString = conn.GetLinkItConnectionString();
            dbContext = DbDataContext.Get(connectionString);
        }
        #region User //========================================================= User =============================================================
        #endregion User

        #region Teacher //========================================================= Teacher =============================================================
        public bool CheckUserCanAccessTeacher(int userId, int roleId, int teacherId)
        {
            var result = dbContext.CheckUserCanAccessTeacher(userId, roleId, teacherId).FirstOrDefault();
            return result != null;
        }
        #endregion Teacher
        #region Class,School //========================================================= Class,School =============================================================
        public bool CheckUserCanAccessClass(int userId, int roleId, int classId)
        {
            return dbContext.CheckUserCanAccessClassOrSchool(userId, roleId, classId, "Class")
                .Any(x => x.CanAccess == 1);
        }

        public bool CheckUserCanAccessSchool(int userId, int roleId, int schoolId)
        {
            var result = dbContext.CheckUserCanAccessClassOrSchool(userId, roleId, schoolId, "School").FirstOrDefault();
            return result != null;
        }
        public bool CheckUserPermissionOnClassOrSchool(int userID, int roleID, int itemID, string itemType)
        {
            var data = dbContext.CheckUserCanAccessClassOrSchool(userID, roleID, itemID, itemType).FirstOrDefault();
            return (data != null && data.CanAccess == 1);
        }
        #endregion Class,School

        #region Student //========================================================= Student =============================================================

        public bool CheckUserPersmissionOnStudent(int userID, int roleID, string studentIDList)
        {
            var data = dbContext.CheckUserCanAccessStudent(userID, roleID, studentIDList).FirstOrDefault();
            return (data != null && data.CanAccess == true);
        }
        #endregion Student

        #region VirtualTest //========================================================= Virtual Test =============================================================
        public bool CheckUserCanPurgeTest(int userID, int roleID, int virtualTestID)
        {
            var data = dbContext.CheckUserCanPurgeTest(userID, roleID, virtualTestID).FirstOrDefault();
            return (data != null && data.CanPurge == 1);
        }
        #endregion VirtualTest


        #region TestResult //========================================================= Test Result =============================================================
        public bool CheckUserCanAccessTestResult(int userId, int roleId, string testResultIdList)
        {
            var result = dbContext.CheckUserCanAccessTestResult(userId, roleId, testResultIdList).FirstOrDefault();

            if (result != null && result.CanAccess != null)
                return true;

            return false;
        }
        #endregion TestResult
        
    }
}
