@using LinkIt.BubbleSheetPortal.Models.Enum
@model LinkIt.BubbleSheetPortal.Web.ViewModels.TDLS.TDLSProfileViewModel

@{
    ViewBag.Title = "TLDS Section 1.1";
}
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleTDLSDevelopmentOutComeBundle()
<script src="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Lib/quill/quill.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.css")" rel="stylesheet" type="text/css">
<link href="@Url.Content("~/Scripts/Lib/quill/quill.snow.css")" rel="stylesheet" type="text/css">

<style>
    .wtSpreader, .wtHider, .htCore {
        width: 100% !important;
    }

    .wtHider{
        height:auto !important;
    }
    .quillEditor {
        background: #fff;
        width: 300px;
        border: 1px solid #0683e2;
        overflow: visible;
    }

        .quillEditor .handsontableInput {
            position: absolute;
            left: -99999px;
        }
    .quillEditor  .ql-editor ol li {
        position: relative;
    }

    .richTextTd .ql-editor ol li {
        position: relative;
    }


    td.richTextTd p {
        margin: 0;
    }

    .richTextTd ul {
        padding-left: 20px !important;
        list-style-type: disc !important;
    }
    .richTextTd ol {
        padding-left: 20px !important;
        list-style-type: decimal !important;
    }
        .richTextTd ol li:before, .richTextTd ul li:before {
            left: 0 !important;
            color: black !important;
            position: unset;
            font-weight: normal
        }

    .quillEditor .ql-container.ql-snow {
        border: none;
    }
    .ql-editor{
        max-height:250px;
    }

    .ht_clone_top {
        display:none !important;
    }

    .handsontable td, .handsontable th{
        padding: 0 !important;
    }

    .handsontable td {
        border-left: 1px solid #ccc;
        border-top: 1px solid #ccc;
    }

    .my-cell{
        max-height:308px;
        overflow:auto;
        padding:4px;
        height:auto;
    }

    .wtBorder.current{
        background-color: transparent !important;
    }

    .ql-toolbar {
        background-color: #e8e8e8;
    }

    [name="developmentOutcome"] .ql-formats > button.ql-list {
        margin-right: 5px;
        background: #fff;
    }

    [name="developmentOutcome"] .ql-formats > button.ql-list:last-child {
        margin-right: 0;
    }

    [name="developmentOutcome"] > .quillEditor[style*="z-index: -1"] {
        position: fixed;
        left: -99999px;
    }

    [name="developmentOutcome"] .handsontable thead,
    [name="developmentOutcome"] .handsontable tr th {
        visibility: visible;
    }
    .highlight {
        border-color: #4B89FF !important;
    }

    .is-error {
        border-top-width: 1px !important;
        border-top-color: #c23934 !important;
    }
    .block-border strong.text {
        color: #000;
    }
    .sub-list {
        list-style: disc;
        margin-left: 40px;
    }
        .sub-list li {
            margin: 4px;
            line-height: normal;
        }
</style>
<article class="container_12" id="idTopNavigation">
    @Html.Partial("_NavigationTabs", Model)
    <section class="grid_12">
        <div class="block-border">
            <div class="block-content form" id="divOnTop">
                <h1>Section 1.1</h1>
                <ul id="success-messages" class="message success u-m-t-20" style="display: none">
                    <li>Successfully saved</li>
                </ul>
                <p class="u-m-t-20">
                    The TLDS should support the child's continuity of learning as they transition into school by recognising the child's skills, capabilities and learning dispositions and linking these to the Learning and Development Outcomes of the Victorian Early Years Learning and Development Framework (VEYLDF). It should also identify specific teaching strategies for the receiving teacher to note and plan for.
                </p>
                <p>
                    You may find it helpful to refer to the VEYLDF when completing this section. An online copy of the VEYLDF can be found on the Department's website by searching 'Learning frameworks birth to eight years'.
                </p>
                <p>
                    Specific guidance for completing this section can be found in the Strengths Based Approach to Transition resource in the Transition: A Positive Start to School Resource Kit that can be found on the Department's website.
                </p>
                <p>
                    If your service is using the Early Years Assessment and Learning Tool (the Tool) and you have completed a learning report for this child, intentional teaching strategies that were generated in the report can be copied/pasted in the Intentional Teaching Strategies column below. For further information about using information from the Tool to complete the TLDS, see the <a href="https://www.vic.gov.au/early-years-assessment-and-learning-tool" target="_blank">Department's website</a>.
                </p>
                <p>
                    Instructions for completing this section:
                    <ul class="sub-list">
                        <li>Click on a Learning and Development Outcome in the left-hand column (for example, Identity).</li>
                        <li>Select at least one of the descriptors provided that best describes the child's learning progress. More than one descriptor can be selected for each Learning and Development Outcome. Once selected, you can double-click into the box to edit the descriptors to suit the child. </li>
                        <li>In the right-hand column, briefly identify any intentional teaching strategies that may support the child's continuity of learning as they start school. </li>
                        <li>A minimum of one intentional teaching strategy is required per outcome. This should be individualised noting the child's abilities, dispositions and interests. </li>
                    </ul>
                </p>
                <p>
                    Please note: This page will auto-save every 1 minute.
                </p>
                <p>
                    <strong class="text">Ensure you double-click into each box before editing.</strong>
                </p>

                @using (Html.BeginForm("DevelopmentOutcome", "TLDSManage", FormMethod.Post, new { id = "editTDLSForm", @class = "form u-m-t-20" }))
                {
                    <fieldset>
                        <legend>Learning and Development Outcome and Teaching Strategies <span class="required-field">(*)</span></legend>
                        <input type="hidden" id="profileId" value="@Model.ProfileId" />
                        <div name="developmentOutcome" id="developmentOutcome"></div>
                    </fieldset>
                    <div class="u-text-right">
                        @if (Model.AccessRight == AccessRightEnum.Update)
                        {
                            <button id="btnSave" class="u-m-l-10" type="button">Save</button>
                            <button id="btnSaveAndContinue" class="u-m-l-10" type="button">Save And Continue</button>

                        }

                        <input type="hidden" id="IsContinue" name="isContinue" value="false" />
                        <button id="btnContinue" class="u-m-l-10" type="button" @if (!Model.Step5IsEnable) { <text> disabled</text>}>Continue</button>
                    </div>
                }
            </div>
        </div>
    </section>
    <modal-component :show.sync="isShowModalDevelopmentOutcome" :width="800" style="display: none;">
        <div slot="header"></div>
        <div slot="body" v-if="currentDevelopmentOutcome == 1">
            @Html.Partial("_ModalIdentity")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 2">
            @Html.Partial("_ModalCommunity")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 3">
            @Html.Partial("_ModalWellbeing")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 4">
            @Html.Partial("_ModalLearning")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 5">
            @Html.Partial("_ModalCommunication")
        </div>
        <div slot="footer"></div>
    </modal-component>
</article>

<script>
    var isAccessRight = '@Model.AccessRight' == '@AccessRightEnum.Create' || '@Model.AccessRight' == '@AccessRightEnum.Update';
    var isDevelopmentOutcomeSaved = '@Model.DevelopmentOutcomeHasBeenSaved' === 'False';
    var developmentOutcomeFormSerializeString = '';
    var handsonDevelopmentOutcomeData = [];
    var completedChange = false;
    var DevelopmentOutcomeModel = new Vue({
        el: '#idTopNavigation',
        data: {
            isShowModalDevelopmentOutcome: false,
            currentDevelopmentOutcome: 0,
            msgErrorDevelopmentOutcome: ''
        },
        methods: {
            saveDevelopmentOutcome: function () {
                var self = this;
                var $developmentOutcomeList = $('.development-outcome-list');

                if ($developmentOutcomeList.find('input[type="radio"]:checked').length) {
                    var $developmentOutcome = $('div[name="developmentOutcome"]');
                    var developmentOutcomeData = [];

                    $developmentOutcomeList.find('input[type="radio"]:checked').each(function () {
                        var $radio = $(this);

                        developmentOutcomeData.push('<li>' + $radio.next().text() + '</li>');
                    });

                    developmentOutcomeData = developmentOutcomeData.join('');
                    developmentOutcomeData = '<ul>' + developmentOutcomeData + '</ul>';

                    if (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] == null) {
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = '';
                    }



                    if ((handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).indexOf('my-cell') == -1) {
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = '<div class="my-cell ql-editor">'
                            + handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]
                            + developmentOutcomeData
                            + '</div>';
                    } else {
                        const length = (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).length;
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).substring(0, length - 6)
                            + developmentOutcomeData
                            + '</div>';
                    }

                   saveDevelopmentOutcomeHandsontale($developmentOutcome, handsonDevelopmentOutcomeData);
                    self.msgErrorDevelopmentOutcome = '';
                    self.isShowModalDevelopmentOutcome = false;
                    $('body').removeClass('overflow-body');
                } else {
                    self.msgErrorDevelopmentOutcome = 'You should select at least one answer.';
                    return;
                }
            }
        }
    });

    $(function () {
        setInterval(autoSaving, 60000);

        $('.stats').addClass('current');
        $('#rpTLDSManager').addClass('current');
        loadDevelopmentOutcome('@Model.ProfileId');
        developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();

        if (!isAccessRight) {
            // Disable all controls
            tldsDisableInputControls();
        }

        if (isDevelopmentOutcomeSaved) {
            $('#btnContinue').prop('disabled', true);
        }

        $("#developmentOutcome").on("click", "td", function () {
            $("#developmentOutcome td").removeClass("is-error");
        });
    });

    function loadDevelopmentOutcome (profileId) {
        var container = $('div[name="developmentOutcome"]');

        ShowBlock(container, "Loading");

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDevelopmentOutcome", "TLDSManage")',
            data: {
                profileId: $('#profileId').val()
            },
            success: function (response) {
                handsonDevelopmentOutcomeData = [];
                $.each(response.developmentOutcomes, function (i, item) {
                    handsonDevelopmentOutcomeData.push([
                        item["DevelopmentOutcomeProfileId"],
                        item["ProfileId"],
                        item["DevelopmentOutcomeTypeId"],
                        item["DevelopmentOutcomeTypeName"],
                        item["DevelopmentOutcomeContent"] = item["DevelopmentOutcomeContent"] ? item["DevelopmentOutcomeContent"].replace('<p><br></p>', '') : '',
                        item["StrategyContent"]
                    ]);
                });

                saveDevelopmentOutcomeHandsontale(container, handsonDevelopmentOutcomeData);

                container.unblock();
                developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();
            }
        });
    }

    function saveDevelopmentOutcome() {
        var developmentOutcomes = getDevelopmentOutcomeJSONData();
        var $developmentOutcome = $('div[name="developmentOutcome"]');
        var $developmentOutcomeLead = $developmentOutcome.find('table tbody tr');

        // Only restrict all information when using save and continue function
        if ($('#IsContinue').val() == 'true') {
            //check required data
            for (var i = 0; i < developmentOutcomes.length; i++) {
                var item = developmentOutcomes[i];
                var $developmentOutcomeDevelopment = $developmentOutcomeLead.eq(i).find('td:nth-child(2)');
                var $developmentOutcomeStratery = $developmentOutcomeLead.eq(i).find('td:last-child');

                if (item.DevelopmentOutcomeContent == null || item.DevelopmentOutcomeContent.trim().length == 0) {
                    $developmentOutcomeDevelopment.addClass('is-error');
                    CustomAlert('Learning and Development Outcome is required');
                    return;
                } else {
                    $developmentOutcomeDevelopment.removeClass('is-error');
                }

                if (item.StrategyContent == null || item.StrategyContent.trim() === '') {
                    $developmentOutcomeStratery.addClass('is-error');
                    CustomAlert('Intentional Teaching Strategies is required');
                    return;
                } else {
                    $developmentOutcomeStratery.removeClass('is-error');
                }
            }
        }

        var data = {
            profileId: $('#profileId').val(),
            developmentOutcomeData: JSON.stringify(developmentOutcomes),
        };

        var url = '@Url.Action("SaveDevelopmentOutcome", "TLDSManage")';

        ShowBlock($('#idTopNavigation'), "Saving");


        $.ajax({
            type: "POST",
            url: url,
            data: data
        }).done(function (response) {

            if (response != undefined && response != null && response.Result == true) {
                $('#success-messages').show();
            }
            $('#idTopNavigation').unblock();
            if ($('#IsContinue').val().toLowerCase()=='true') {
                location.href = "@Url.Action("EnhancedTransitions", "TLDSManage")/?profileId=@Model.ProfileId";
            } else {
                loadDevelopmentOutcome($('#profileId').val());
                if (response.DevelopmentOutcomeHasBeenSaved) {
                    $('#btnContinue').prop('disabled', false);
                    $('#idSgoNavigationStep5').removeClass('disabled');
                    $('#idSgoNavigationStep6').removeClass('disabled');
                    $('#idSgoNavigationStep7').removeClass('disabled');
                } else {
                    $('#btnContinue').prop('disabled', true);
                    $('#idSgoNavigationStep5').addClass('disabled');
                    $('#idSgoNavigationStep6').addClass('disabled');
                    $('#idSgoNavigationStep7').addClass('disabled');
                }

                $('#btnSubmit').enableBt();
            }
        });
    }

    function buttonDevelopmentOutComeRenderer (instance, td, row, col, prop, value, cellProperties) {
        var escaped = Handsontable.helper.stringify(value);
        var button = document.createElement('button');

        button.className = 'btn-action-development-outcome';
        button.innerHTML = escaped;
        button.setAttribute('data-id', handsonDevelopmentOutcomeData[row][2]);

        if (isAccessRight) {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                var dataId = this.getAttribute('data-id');
                DevelopmentOutcomeModel.currentDevelopmentOutcome = dataId;
                DevelopmentOutcomeModel.msgErrorDevelopmentOutcome = '';
                DevelopmentOutcomeModel.isShowModalDevelopmentOutcome = true;

                Vue.nextTick(function () {
                    var $developmentOutcomeList = $('.development-outcome-list');

                    $('body').addClass('overflow-body');
                    $developmentOutcomeList.find('input[type="radio"]').prop('checked', false);
                });
            });
        } else {
            button.className += ' is-disabled';
        }

        td.innerHTML = '';
        td.appendChild(button);

        return td;
    }

    function saveDevelopmentOutcomeHandsontale(el, data) {
        var MyEditor = Handsontable.editors.TextEditor.prototype.extend();
        MyEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {
            var _this = this;
            _this.TD = td;
            _this.row = row;
            _this.col = col;
            _this.prop = prop;
            _this.originalValue = originalValue;
            _this.cellProperties = cellProperties;
            _this.state = 'STATE_VIRGIN';

            if (_this.editableDiv) {
                _this.quill.setText('');
                _this.quill.pasteHTML(0, originalValue);
                return;
            }

            _this.editableDiv = document.createElement('div');
            _this.editableDiv.innerHTML = originalValue;
            _this.TEXTAREA_PARENT.className += ' quillEditor';
            _this.TEXTAREA_PARENT.appendChild(this.editableDiv);
            _this.quill = new Quill(this.editableDiv, {
                theme: 'snow',
                modules: {
                    toolbar: [{ 'list': 'ordered' }, { 'list': 'bullet' }]
                },
            });

            _this.quill.on('text-change', function (delta, oldDelta, source) {
                if (source == 'user') {
                    if (_this.quill.root.innerHTML == '<p><br></p>') {
                        _this.setValue('');
                    } else {
                        _this.setValue('<div class="my-cell ql-editor">' + _this.quill.root.innerHTML + '</div>');
                    }

                }
            });
            _this.quill.on('selection-change', function (delta, oldDelta, source) {
              $(_this.TEXTAREA_PARENT).css('min-height', $(_this.TD).height());
            });
        };

        Handsontable.editors.TextEditor.prototype.hideEditableElement = function() {
            this.textareaParentStyle.position = 'fixed';
            this.textareaParentStyle.top = '-99999px';
            this.textareaParentStyle.left = '0px';
            this.textareaParentStyle.zIndex = '-1';
        };

        Handsontable.editors.TextEditor.prototype.showEditableElement = function() {
            this.textareaParentStyle.position = 'absolute';
            this.textareaParentStyle.visibility = 'visible';
            this.textareaParentStyle.zIndex = this.holderZIndex >= 0 ? this.holderZIndex : '';
        };

        var $el = $(el);
        var hst = $el.handsontable({
            data: data,
            minSpareRows: 0,
            colHeaders: ['Learning and Development Outcome', 'Learning and Development', 'Intentional Teaching Strategies'],
            columns: [
                { data: 3, renderer: buttonDevelopmentOutComeRenderer, editor: false, disableVisualSelection: true, readOnly: true },
                { data: 4 },
                { data: 5 }
            ],
            colWidths: [235, 300, 300],
            contextMenu: false,
            fillHandle: false,
            minSpareRows: 0,
            minSpareCols: 0,
            rowHeights: 23,
            editor: MyEditor,
            renderer: 'html',
            className: 'richTextTd',
            multiSelect: false,
            afterBeginEditing: function () {
                var editor = this.getActiveEditor();
                editor.quill.setSelection(editor.quill.getLength(), editor.quill.getLength());
            },
            beforeKeyDown: function (event) {
                event.stopImmediatePropagation();
            },
            copyPaste: false,
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a',
            afterChange: handsonTableAfterChange,
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
        });
        var hot = $el.handsontable('getInstance');

        if (!isAccessRight) {
            hot.updateSettings({ readOnly: true });
        }

        window.hot = hst;
    }

    $('#btnContinue').on('click', function () {
        var enhancedTransitionsUrl = '@Url.Action("EnhancedTransitions", "TLDSManage")/?profileId=' + $('#profileId').val();

        if (isAccessRight) {
            var formData = getDevelopmentOutcomeFormSerializeString();
            if (formData != developmentOutcomeFormSerializeString) {
                CustomConfirm({
                    message: 'Would you like to save changes before moving continue?',
                    yes: function () {
                        $("#btnSaveAndContinue").trigger("click");
                    },
                    no: function () {
                        //continue
                        location.href = enhancedTransitionsUrl;
                    },
                });
            } else {
                location.href = enhancedTransitionsUrl;
            }
        } else {
            location.href = enhancedTransitionsUrl;
        }
    });

    $('#btnSave').on('click', function () {
        $('#IsContinue').val('false');
        saveDevelopmentOutcome();
        developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();
    });

    $('#btnSaveAndContinue').on('click', function () {
        $('#IsContinue').val('true');
        saveDevelopmentOutcome();
    });
    function getDevelopmentOutcomeJSONData() {
        var developmentOutcomes = [];
        if (handsonDevelopmentOutcomeData != undefined && handsonDevelopmentOutcomeData != null && handsonDevelopmentOutcomeData.length > 0) {
            $.each($('div[name="developmentOutcome"]').handsontable('getData'), function (i, item) {
                developmentOutcomes.push({
                    DevelopmentOutcomeProfileId: handsonDevelopmentOutcomeData[i][0],
                    ProfileId: handsonDevelopmentOutcomeData[i][1],
                    DevelopmentOutcomeTypeId: handsonDevelopmentOutcomeData[i][2],
                    DevelopmentOutcomeTypeName: item[0],
                    DevelopmentOutcomeContent: item[1] ? item[1].replace('<p><br></p>', '') : '',
                    StrategyContent: item[2]
                });
            });
        }

        return developmentOutcomes;
    }
    function getDevelopmentOutcomeFormSerializeString() {
        var formData = $("#developmentOutcomeForm").serialize();
        //add more data from table
        var developmentOutcomes = getDevelopmentOutcomeJSONData();
        var developmentOutcomeData = JSON.stringify(developmentOutcomes);
        formData = formData + developmentOutcomeData;
        return formData;
    }

    function autoSaving() {
        if (completedChange) {
            var developmentOutcomes = getDevelopmentOutcomeJSONData();
            var data = {
                profileId: $('#profileId').val(),
                developmentOutcomeData: JSON.stringify(developmentOutcomes),
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveDevelopmentOutcome")',
                data: data
            }).done(function (response) {
                if (response.Result) {
                    refreshDevelopmentOutcome();
                }
            });
            completedChange = false;
        }
    }

    function handsonTableAfterChange(changes, source) {
        if (source === 'edit' && changes.length) {
            completedChange = true;
        }
    }

    function refreshDevelopmentOutcome() {
        var container = $('div[name="developmentOutcome"]');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDevelopmentOutcome", "TLDSManage")',
            data: {
                profileId: $('#profileId').val()
            },
            success: function (response) {
                handsonDevelopmentOutcomeData = [];
                $.each(response.developmentOutcomes, function (i, item) {
                    handsonDevelopmentOutcomeData.push([
                        item["DevelopmentOutcomeProfileId"],
                        item["ProfileId"],
                        item["DevelopmentOutcomeTypeId"],
                        item["DevelopmentOutcomeTypeName"],
                        item["DevelopmentOutcomeContent"] = item["DevelopmentOutcomeContent"] ? item["DevelopmentOutcomeContent"].replace('<p><br></p>', '') : '',
                        item["StrategyContent"]
                    ]);
                });

                saveDevelopmentOutcomeHandsontale(container, handsonDevelopmentOutcomeData);

                container.unblock();
                developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();
            }
        });
    }
</script>
