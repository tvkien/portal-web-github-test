@using LinkIt.BubbleSheetPortal.Models.Enum
@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Web.ViewModels.TDLS.TDLSProfileViewModel
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.ReportItemTLDSManager, "TLDS Section 1.1",true);

    var currentUser = HttpContext.Current.GetCurrentUser();
    if (currentUser != null)
    {
        var isUseNewDesign = HelperExtensions.IsUseNewDesign(currentUser.DistrictId ?? 0);
        if (isUseNewDesign)
        {
            Layout = "~/Views/Shared/_Layout_v2.cshtml";
        }
    }
}
@section jQuery {
    @BundleHelper.jQueryUpgrade()
}
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleTDLSDevelopmentOutComeBundleV2()
<script src="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Lib/quill/quill.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.css")" rel="stylesheet" type="text/css">
<link href="@Url.Content("~/Scripts/Lib/quill/quill.snow.css")" rel="stylesheet" type="text/css">

<style type="text/css">
    :root {
        --quillEditorWidth: 434px;
    }

    .wtSpreader, .wtHider, .htCore {
        width: 100% !important;
    }

    .wtHider {
        height: auto !important;
    }

        .wtHider th {
            height: 50px;
        }

    #portal-v2-containter table thead th {
        border-bottom: 0 none;
    }

    #portal-v2-containter table tbody td {
        border-bottom-color: transparent;
    }

        #portal-v2-containter table thead th:not(:first-child),
        #portal-v2-containter table tbody td:not(:first-child) {
            border-left-color: transparent;
        }

    #portal-v2-containter table tbody tr:last-child td {
        border-bottom: 1px solid var(--borderColor);
    }

    .quillEditor {
        background: var(--white);
        width: var(--quillEditorWidth);
        border: 1px solid #4B89FF;
        overflow: visible;
    }

        .quillEditor .handsontableInput {
            position: absolute;
            left: -99999px;
        }

        .quillEditor .ql-editor ol li {
            position: relative;
        }

    .richTextTd .ql-editor ol li {
        position: relative;
    }


    td.richTextTd p {
        margin: 0;
    }

    .richTextTd ul {
        padding-left: 0;
        list-style-type: disc !important;
    }

    .richTextTd ol {
        padding-left: 20px !important;
        list-style-type: decimal !important;
    }

        .richTextTd ol li:before, .richTextTd ul li:before {
            left: 0 !important;
            color: black !important;
            position: unset;
            font-weight: normal
        }

    .quillEditor .ql-container.ql-snow {
        border: none;
    }

    .ql-editor {
        max-height: 250px;
    }

    .ht_clone_top {
        display: none !important;
    }

    .handsontable td, .handsontable th {
        padding: 0 !important;
    }

    .handsontable td {
        border-left: 1px solid var(--borderColor);
        border-top: 1px solid var(--borderColor);
    }

    .my-cell {
        max-height: 308px;
        overflow: auto;
        padding: 4px;
        height: auto;
    }

    .wtBorder.current {
        background-color: transparent !important;
    }

    .ql-toolbar {
        background-color: #e8e8e8;
    }

    [name="developmentOutcome"] .ql-formats > button.ql-list {
        margin-right: 5px;
        background: var(--white);
    }

        [name="developmentOutcome"] .ql-formats > button.ql-list:last-child {
            margin-right: 0;
        }

    [name="developmentOutcome"] > .quillEditor[style*="z-index: -1"] {
        position: fixed;
        left: -99999px;
    }

    [name="developmentOutcome"] .handsontable thead,
    [name="developmentOutcome"] .handsontable tr th {
        visibility: visible;
    }

    .highlight {
        border: 1px solid #4B89FF !important;
    }

    .is-error {
        border: 1px solid #c23934 !important;
    }

    .block-border strong.text {
        color: var(--black);
    }

    .sub-list {
        list-style: disc;
    }

        .sub-list li {
            margin: 4px;
            line-height: normal;
        }

    .btn-action-development-outcome {
        margin: 4px !important;
        width: calc((100%) - (8px)) !important;
    }

    .development-outcome-list {
        padding-left: 0;
    }

    #portal-v2-containter .modal-component-header {
        padding: 0;
        padding-top: 16px;
    }

    .modal-component-body .development-outcome-list li {
        margin-top: 10px;
        margin-bottom: 10px;
    }

        .modal-component-body .development-outcome-list li input[type="radio"] {
            margin-top: 0;
        }

    .modal-component-close {
        display: none !important;
    }

    .form-development-outcome table th,
    .form-development-outcome table td {
        width: 40%;
    }

        .form-development-outcome table th:first-child,
        .form-development-outcome table td:first-child {
            width: 20%;
        }

    .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] {
        width: 440px !important;
    }

        .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] section {
            float: none;
            display: block;
        }

        .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] .block-border {
            width: auto !important;
        }

        .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] .ui-dialog-titlebar,
        .ui-dialog[aria-labelledby="ui-dialog-title-divUrlPreviewOnlinePanel"] .ui-dialog-titlebar {
            display: none;
        }

        .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] .block-content {
            padding: var(--spacingDefault) !important;
        }

            .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] .block-content > div {
                line-height: normal !important;
                display: flex;
                text-align: left !important;
                justify-content: center;
            }

    .ui-dialog[aria-labelledby^="ui-dialog-title-CustomConfirmDialog_"] {
        width: 460px !important;
    }

    @@media (max-width: 1399px) {
        .modal-component-body .development-outcome-list li input[type="radio"] {
            margin-top: -1px;
        }

        .group-checkbox input[type="checkbox"] {
            top: 3px;
        }
    }

    .group-checkbox {
        padding: 8px 16px;
        background: var(--blue1);
    }

    .group-checkbox label {
        line-height: 26px !important;
        margin-left: 4px;
        font-weight: bold !important;
    }

    .group-checkbox input[type="checkbox"] {
        position: relative;
        top: 2px;
    }

    #divChildUploadForm input[type="file"]{
        cursor: pointer;
    }

</style>
<article class="container_12" id="idTopNavigation">
    @Html.Partial("v2/_NavigationTabs", Model)
    <section class="grid_12">
        <div class="block-border">
            <div class="block-content form bg-transparent p-0" id="divOnTop">
                <div class="p-4 bg-white mb-4">
                    <h3 class="h3 mb-3">Section 1.1</h3>
                    <ul id="success-messages" class="message success mb-3" style="display: none">
                        <li>Successfully saved</li>
                    </ul>

                    <p class="mb-2">Important: If you are registered to use the Early Years Assessment and Learning Tool (EYALT) and have completed the recommended minimum number of assessment modules for this child, check this box, upload the completed EYALT report as part of this submission and you are not required to re-enter the information below.</p>
                    <div class="group-checkbox">
                        <input type="checkbox" id="ckEYALTReport" />
                        <label for="ckEYALTReport">Use the EYALT report</label>
                    </div>

                    <fieldset class="fieldset-same" id="divUploadEYALT" @if (!Model.HasEYALT) { <text> style="display: none" </text> }>
                        <div class="tlds-upload-2" id="tlds-upload-2"></div>
                        <div class="colx2-left" id="divChildUploadForm">
                            <p>
                                <span class="relative">
                                    <input id="file_upload_child_form" name="file_upload" type="file" title="Upload Child form" style="cursor:pointer" />
                                </span>
                            </p>
                            <p style="color: #c00000; display:none" id="messageNoUploadDoc">No document has been uploaded</p>
                        </div>
                        <input type="hidden" id="hdfDevelopmentOutcomeProfileID" />
                        <input type="hidden" id="hdfOriginalFileName" />
                        <input type="hidden" id="hdfS3FileName" />
                    </fieldset>
                </div>

                <div class="bg-white p-4">
                    <div id="tldsFormContent" @if (Model.HasEYALT) { <text> style="display: none" </text> }>
                        <p class="mb-2">
                            The TLDS should support the child's continuity of learning as they transition into school by recognising the child's skills, capabilities and learning dispositions and linking these to the Learning and Development Outcomes of the <a href="https://www.vic.gov.au/victorian-early-years-learning-development-framework-veyldf" target="_blank">Victorian Early Years Learning and Development Framework (VEYLDF)</a>. It should also identify specific teaching strategies for the receiving Foundation teacher to note and plan for.
                        </p>
                        <p>
                            Specific guidance for completing this section can be found in the Strengths Based Approach to <a href="https://www.vic.gov.au/transition-school-resource-kit" target="_blank">Transition resource in the Transition: A Positive Start to School Resource Kit</a>
                        </p>
                        <p>
                            Instructions for completing this section:
                            <ul class="sub-list">
                                <li>Click on a Learning and Development Outcome in the left-hand column (for example, Identity).</li>
                                <li>Select at least one of the descriptors provided that best describes the child's learning progress. More than one descriptor can be selected for each Learning and Development Outcome. Once selected, you can double-click into the box to edit the descriptors to suit the child.</li>
                                <li>In the right-hand column, briefly identify any intentional teaching strategies that may support the child's continuity of learning as they start school.</li>
                                <li>A minimum of one intentional teaching strategy is required per outcome. This should be individualised noting the child's abilities, dispositions and interests.</li>
                            </ul>
                        </p>
                        <p>
                            Please note: This page will auto-save every 1 minute.
                        </p>
                        <p>
                            <strong class="text">Ensure you double-click into each box before editing.</strong>
                        </p>
                    </div>

                    @using (Html.BeginForm("DevelopmentOutcome", "TLDSManage", FormMethod.Post, new { id = "editTDLSForm", @class = "form u-m-t-20 form-development-outcome" }))
                    {
                        <div class="mb-4" id="tldsForm" @if (Model.HasEYALT) { <text> style="display: none" </text> }>
                            <h5 class="h5 mb-3">Learning and Development Outcome and Teaching Strategies <span class="required-field">(*)</span></h5>
                            <input type="hidden" id="profileId" value="@Model.ProfileId" />
                            <div name="developmentOutcome" id="developmentOutcome"></div>
                        </div>
                        <div class="text-end">
                            <input type="hidden" id="IsContinue" name="isContinue" value="false" />
                            <button id="btnContinue" class="ms-3 @(Model.AccessRight == AccessRightEnum.Update ? "btn-blue" : "btn-red")" type="button" @if (!Model.Step5IsEnable) { <text> disabled</text>}>Continue</button>

                            @if (Model.AccessRight == AccessRightEnum.Update)
                            {
                                <button id="btnSaveAndContinue" class="ms-3 btn-blue" type="button">Save And Continue</button>
                                <button id="btnSave" class="ms-3 btn-red" type="button">Save</button>
                            }

                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
    <modal-component :show.sync="isShowModalDevelopmentOutcome" :width="800" style="display: none;">
        <div slot="header"></div>
        <div slot="body" v-if="currentDevelopmentOutcome == 1">
            @Html.Partial("v2/_ModalIdentity")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 2">
            @Html.Partial("v2/_ModalCommunity")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 3">
            @Html.Partial("v2/_ModalWellbeing")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 4">
            @Html.Partial("v2/_ModalLearning")
        </div>
        <div slot="body" v-if="currentDevelopmentOutcome == 5">
            @Html.Partial("v2/_ModalCommunication")
        </div>
        <div slot="footer">
            <button type="button" name="button" v-on:click="closeDevelopmentOutcome">Cancel</button>
            <button type="button" name="button" v-on:click="saveDevelopmentOutcome">OK</button>
        </div>
    </modal-component>
</article>

<script type="text/javascript">
    var isAccessRight = '@Model.AccessRight' == '@AccessRightEnum.Create' || '@Model.AccessRight' == '@AccessRightEnum.Update';
    var isDevelopmentOutcomeSaved = '@Model.DevelopmentOutcomeHasBeenSaved' === 'False';
    var developmentOutcomeFormSerializeString = '';
    var handsonDevelopmentOutcomeData = [];
    var completedChange = false;
    var DevelopmentOutcomeModel = new Vue({
        el: '#idTopNavigation',
        data: {
            isShowModalDevelopmentOutcome: false,
            currentDevelopmentOutcome: 0,
            msgErrorDevelopmentOutcome: ''
        },
        methods: {
            saveDevelopmentOutcome: function () {
                var self = this;
                var $developmentOutcomeList = $('.development-outcome-list');

                if ($developmentOutcomeList.find('input[type="radio"]:checked').length) {
                    var $developmentOutcome = $('div[name="developmentOutcome"]');
                    var developmentOutcomeData = [];

                    $developmentOutcomeList.find('input[type="radio"]:checked').each(function () {
                        var $radio = $(this);

                        developmentOutcomeData.push('<li>' + $radio.next().text() + '</li>');
                    });

                    developmentOutcomeData = developmentOutcomeData.join('');
                    developmentOutcomeData = '<ul>' + developmentOutcomeData + '</ul>';

                    if (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] == null) {
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = '';
                    }



                    if ((handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).indexOf('my-cell') == -1) {
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = '<div class="my-cell ql-editor">'
                            + handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]
                            + developmentOutcomeData
                            + '</div>';
                    } else {
                        const length = (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).length;
                        handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4] = (handsonDevelopmentOutcomeData[self.currentDevelopmentOutcome - 1][4]).substring(0, length - 6)
                            + developmentOutcomeData
                            + '</div>';
                    }

                   saveDevelopmentOutcomeHandsontale($developmentOutcome, handsonDevelopmentOutcomeData);
                    self.msgErrorDevelopmentOutcome = '';
                    self.isShowModalDevelopmentOutcome = false;
                    $('body').removeClass('overflow-body');
                } else {
                    self.msgErrorDevelopmentOutcome = 'You should select at least one answer.';
                    return;
                }
            },
            closeDevelopmentOutcome: function () {
                var self = this;
                self.isShowModalDevelopmentOutcome = false;
            },
        }
    });

    $(function () {
        setInterval(autoSaving, 60000);
        breadcrumbDetailPage('.stats', '#rpTLDSManager');
        $("#idSgoNavigationStep4 .sgo-checkbox").prop('checked', true);

        loadDevelopmentOutcome('@Model.ProfileId');
        developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();

        if (isDevelopmentOutcomeSaved) {
            $('#btnContinue').prop('disabled', true);
        }

        $("#developmentOutcome").on("click", "td", function () {
            $("#developmentOutcome td").removeClass("is-error");
        });

        $('#ckEYALTReport').click(function () {
            if ($(this).is(':checked')) {
                $('#tldsForm').hide();
                $('#tldsFormContent').hide();
                $('#divUploadEYALT').show();
            }
            else {
                $('#tldsForm').show();
                $('#tldsFormContent').show();
                $('#divUploadEYALT').hide();
            }
        });

        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';
        var validFile = true;
        var countFileUpload = 0;

        $('#file_upload_child_form').uploadifive({
            'uploadScript': '@Url.Action("UploadEYALTReport")',
            'overrideEvents': ['onDialogClose'],
            'formData': { profileId: @Model.ProfileId },
            'buttonText': ' ',
            'fileObjName': 'postedFile',
            'multi': false,
            'removeCompleted': true,
            'width': 32,
            'height': 32,
            'auto': true,
            'fileSizeLimit': '20MB',
            'fileType': ['application\/pdf'],
            'buttonClass': 'file_upload_child_form',
            'onInit': function () {
                $("#uploadifive-file_upload_child_form-queue").hide();
                $('#uploadifive-file_upload_child_form').click(function () {
                    validFile = true;
                });
            },
            'onUpload': function (file) {
                $('.tlds-upload-item').html('');
                $('#hdfOriginalFileName').val('');
                $('#hdfS3FileName').val('');

                var $tldsUpload2 = $('#tlds-upload-2');
                $("#uploadifive-file_upload_child_form-queue").hide();
                $('#error-messages').hide();
                $('#error-messages').empty();
                if (validFile == true) {
                    ShowBlock($('#divOnTop'), 'Uploading');
                }

                countFileUpload = file + $tldsUpload2.find('div').length;
            },
            'onUploadComplete': function (file, data) {
                var $errorMessages = $('#error-messages');
                var $tldsUpload2 = $('#tlds-upload-2');

                $("#uploadifive-file_upload_child_form-queue").hide();
                var result = $.parseJSON(data);
                if (result == undefined) {
                    CustomAlert('An error has occured.  Please try again');
                }
                if (result.Success == true) {
                    $errorMessages.hide();
                    var div = buildItemUploadFile(result);
                    $tldsUpload2.append(div);
                    $(div).find('.with-tip').tip();

                    if ($tldsUpload2.find('div').length >= countFileUpload) {
                        $('#divOnTop').unblock();
                        countFileUpload = 0;
                    }

                    displayUploadMessage();
                    $('#divUploadEYALT').removeClass('is-error');
                }
                else {
                    $('#divOnTop').unblock();
                    $errorMessages.show();
                    $errorMessages.html('<li>' + result.message + '</li>');
                    CustomAlert(result.message);
                    $('#file_upload_child_form').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                }
            },
            'onError': function (errorType, file) {
                $("#uploadifive-file_upload_child_form-queue").hide();
                $('#divChildUploadForm').unblock();
                validFile = false;
                if (errorType == 'FORBIDDEN_FILE_TYPE') {
                    CustomAlert('The file you are trying to upload is not a .pdf file. Please try again', true);
                } else if (errorType == 'FILE_SIZE_LIMIT_EXCEEDED') {
                    CustomAlert('The upload file should not be more than 20 MB in size. Press OK to close the message window.', true);
                } else {
                    CustomAlert('The file ' + file.name + ' returned an error and was not added to the queue.', true);
                }
            },
            'onCancel': function (file) {
                $('#divChildUploadForm').unblock();
                $("#uploadifive-file_upload_child_form-queue").hide();
            }
        });
    });

    function loadDevelopmentOutcome (profileId) {
        var container = $('div[name="developmentOutcome"]');

        ShowBlock(container, "Loading");

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDevelopmentOutcome", "TLDSManage")',
            data: {
                profileId: $('#profileId').val()
            },
            success: function (response) {
                handsonDevelopmentOutcomeData = [];
                $.each(response.developmentOutcomes, function (i, item) {
                    if (item["DevelopmentOutcomeTypeId"] != 6) {
                        handsonDevelopmentOutcomeData.push([
                            item["DevelopmentOutcomeProfileId"],
                            item["ProfileId"],
                            item["DevelopmentOutcomeTypeId"],
                            item["DevelopmentOutcomeTypeName"],
                            item["DevelopmentOutcomeContent"] = item["DevelopmentOutcomeContent"] ? item["DevelopmentOutcomeContent"].replace('<p><br></p>', '') : '',
                            item["StrategyContent"]
                        ]);
                    }

                    if (item["DevelopmentOutcomeTypeId"] == 6) {
                        $('#hdfDevelopmentOutcomeProfileID').val(item["DevelopmentOutcomeProfileId"]);
                        if (item["S3Url"] !== null && item["S3Url"] != '') {
                            $('#hdfS3FileName').val(item["S3FileName"]);
                            $('#hdfOriginalFileName').val(item["OriginalFileName"]);
                            var $tldsUpload2 = $('#tlds-upload-2');
                            var divName = document.createElement('div');
                            var uploadedItem = {
                                UploadedDocumentId: 0,
                                OriginalFileName: item["OriginalFileName"],
                                S3FileName: item["S3FileName"],
                                fileNameUrl: item["S3Url"]
                            }
                            var div = buildItemUploadFile(uploadedItem);
                            $tldsUpload2.append(div);

                            $('#ckEYALTReport').trigger('click');
                        }
                    }
                });

                saveDevelopmentOutcomeHandsontale(container, handsonDevelopmentOutcomeData);

                container.unblock();
                developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();

                if (!isAccessRight) {
                    // Disable all controls
                    tldsDisableInputControls();

                    if ($('#hdfOriginalFileName').val() !== null && $('#hdfOriginalFileName').val() !== ''
                        && $('#hdfS3FileName').val() !== null && $('#hdfS3FileName').val() !== '') {
                        $('#divUploadEYALT').show();
                        $('#divChildUploadForm').hide();
                        $('.icon-sgo-delete').hide();
                    }
                }
            }
        }).always(function () {
            var colWidthContent = $('.form-development-outcome table th:nth-child(2)');
            var colWidth = colWidthContent.outerWidth() || 434;
            colWidth = `${colWidth}px`;
            var rootVariable = document.querySelector(':root')
            rootVariable.style.setProperty('--quillEditorWidth', colWidth);
        });
    }

    function saveDevelopmentOutcome() {
        var developmentOutcomes = getDevelopmentOutcomeJSONData();
        var $developmentOutcome = $('div[name="developmentOutcome"]');
        var $developmentOutcomeLead = $developmentOutcome.find('table tbody tr');
        var hasEYALT = false;
        // Only restrict all information when using save and continue function
        if ($('#IsContinue').val() == 'true') {
            if ($('#ckEYALTReport').is(':checked')) {
                if ($('#hdfS3FileName').val().length == 0 || $('#hdfOriginalFileName').val().length == 0) {
                    $('#divUploadEYALT').addClass('is-error');
                    CustomAlert('No document has been uploaded');
                    return;
                }
                else {
                    $('#divUploadEYALT').removeClass('is-error');
                    hasEYALT = true;
                }
            }
            else {
                //check required data
                for (var i = 0; i < (developmentOutcomes.length - 1); i++) {
                    var item = developmentOutcomes[i];
                    var $developmentOutcomeDevelopment = $developmentOutcomeLead.eq(i).find('td:nth-child(2)');
                    var $developmentOutcomeStratery = $developmentOutcomeLead.eq(i).find('td:last-child');

                    if (item.DevelopmentOutcomeContent == null || item.DevelopmentOutcomeContent.trim().length == 0) {
                        $developmentOutcomeDevelopment.addClass('is-error');
                        CustomAlert('Learning and Development Outcome is required');
                        return;
                    } else {
                        $developmentOutcomeDevelopment.removeClass('is-error');
                    }

                    if (item.StrategyContent == null || item.StrategyContent.trim() === '') {
                        $developmentOutcomeStratery.addClass('is-error');
                        CustomAlert('Intentional Teaching Strategies is required');
                        return;
                    } else {
                        $developmentOutcomeStratery.removeClass('is-error');
                    }
                }
            }

        }

        var data = {
            profileId: $('#profileId').val(),
            developmentOutcomeData: JSON.stringify(developmentOutcomes),
            hasEYALT: hasEYALT
        };

        var url = '@Url.Action("SaveDevelopmentOutcome", "TLDSManage")';

        ShowBlock($('#idTopNavigation'), "Saving");


        $.ajax({
            type: "POST",
            url: url,
            data: data
        }).done(function (response) {

            if (response != undefined && response != null && response.Result == true) {
                $('#success-messages').show();
            }
            $('#idTopNavigation').unblock();
            if ($('#IsContinue').val().toLowerCase()=='true') {
                location.href = "@Url.Action("EnhancedTransitions", "TLDSManage")/?profileId=@Model.ProfileId";
            } else {
                loadDevelopmentOutcome($('#profileId').val());
                if (response.DevelopmentOutcomeHasBeenSaved) {
                    $('#btnContinue').prop('disabled', false);
                    $('#idSgoNavigationStep5').removeClass('disabled');
                    $('#idSgoNavigationStep6').removeClass('disabled');
                    $('#idSgoNavigationStep7').removeClass('disabled');
                } else {
                    $('#btnContinue').prop('disabled', true);
                    $('#idSgoNavigationStep5').addClass('disabled');
                    $('#idSgoNavigationStep6').addClass('disabled');
                    $('#idSgoNavigationStep7').addClass('disabled');
                }

                $('#btnSubmit').enableBt();
            }
        });
    }

    function buttonDevelopmentOutComeRenderer (instance, td, row, col, prop, value, cellProperties) {
        var escaped = Handsontable.helper.stringify(value);
        var button = document.createElement('button');

        button.className = 'btn-red btn-action-development-outcome';
        button.innerHTML = escaped;
        button.setAttribute('data-id', handsonDevelopmentOutcomeData[row][2]);

        if (isAccessRight) {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                var dataId = this.getAttribute('data-id');
                DevelopmentOutcomeModel.currentDevelopmentOutcome = dataId;
                DevelopmentOutcomeModel.msgErrorDevelopmentOutcome = '';
                DevelopmentOutcomeModel.isShowModalDevelopmentOutcome = true;

                Vue.nextTick(function () {
                    var $developmentOutcomeList = $('.development-outcome-list');

                    $('body').addClass('overflow-body');
                    $developmentOutcomeList.find('input[type="radio"]').prop('checked', false);
                });
            });
        } else {
            button.className += ' disabled is-disabled';
        }

        td.innerHTML = '';
        td.appendChild(button);

        return td;
    }

    function saveDevelopmentOutcomeHandsontale(el, data) {
        var MyEditor = Handsontable.editors.TextEditor.prototype.extend();
        MyEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {
            var _this = this;
            _this.TD = td;
            _this.row = row;
            _this.col = col;
            _this.prop = prop;
            _this.originalValue = originalValue;
            _this.cellProperties = cellProperties;
            _this.state = 'STATE_VIRGIN';

            if (_this.editableDiv) {
                _this.quill.setText('');
                _this.quill.pasteHTML(0, originalValue);
                return;
            }

            _this.editableDiv = document.createElement('div');
            _this.editableDiv.innerHTML = originalValue;
            _this.TEXTAREA_PARENT.className += ' quillEditor';
            _this.TEXTAREA_PARENT.appendChild(this.editableDiv);
            _this.quill = new Quill(this.editableDiv, {
                theme: 'snow',
                modules: {
                    toolbar: [{ 'list': 'ordered' }, { 'list': 'bullet' }]
                },
            });

            _this.quill.on('text-change', function (delta, oldDelta, source) {
                if (source == 'user') {
                    if (_this.quill.root.innerHTML == '<p><br></p>') {
                        _this.setValue('');
                    } else {
                        _this.setValue('<div class="my-cell ql-editor">' + _this.quill.root.innerHTML + '</div>');
                    }

                }
            });
            _this.quill.on('selection-change', function (delta, oldDelta, source) {
              $(_this.TEXTAREA_PARENT).css('min-height', $(_this.TD).height());
            });
        };

        Handsontable.editors.TextEditor.prototype.hideEditableElement = function() {
            this.textareaParentStyle.position = 'fixed';
            this.textareaParentStyle.top = '-99999px';
            this.textareaParentStyle.left = '0px';
            this.textareaParentStyle.zIndex = '-1';
        };

        Handsontable.editors.TextEditor.prototype.showEditableElement = function() {
            this.textareaParentStyle.position = 'absolute';
            this.textareaParentStyle.visibility = 'visible';
            this.textareaParentStyle.zIndex = this.holderZIndex >= 0 ? this.holderZIndex : '';
        };

        var $el = $(el);
        var hst = $el.handsontable({
            data: data,
            minSpareRows: 0,
            colHeaders: ['Learning and Development Outcome', 'Learning and Development', 'Intentional Teaching Strategies'],
            columns: [
                { data: 3, renderer: buttonDevelopmentOutComeRenderer, editor: false, disableVisualSelection: true, readOnly: true },
                { data: 4 },
                { data: 5 }
            ],
            colWidths: [235, 300, 300],
            contextMenu: false,
            fillHandle: false,
            minSpareRows: 0,
            minSpareCols: 0,
            rowHeights: 23,
            editor: MyEditor,
            renderer: 'html',
            className: 'richTextTd',
            multiSelect: false,
            afterBeginEditing: function () {
                var editor = this.getActiveEditor();
                editor.quill.setSelection(editor.quill.getLength(), editor.quill.getLength());
            },
            beforeKeyDown: function (event) {
                event.stopImmediatePropagation();
            },
            copyPaste: false,
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a',
            afterChange: handsonTableAfterChange,
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
        });
        var hot = $el.handsontable('getInstance');

        if (!isAccessRight) {
            hot.updateSettings({ readOnly: true });
        }

        window.hot = hst;
    }

    $('#btnContinue').on('click', function () {
        var enhancedTransitionsUrl = '@Url.Action("EnhancedTransitions", "TLDSManage")/?profileId=' + $('#profileId').val();

        if (isAccessRight) {
            var formData = getDevelopmentOutcomeFormSerializeString();
            if (formData != developmentOutcomeFormSerializeString) {
                CustomConfirm({
                    message: 'Would you like to save changes before moving continue?',
                    customClass: 'new-style-popup',
                    yes: function () {
                        $("#btnSaveAndContinue").trigger("click");
                    },
                    no: function () {
                        //continue
                        location.href = enhancedTransitionsUrl;
                    },
                });
            } else {
                location.href = enhancedTransitionsUrl;
            }
        } else {
            location.href = enhancedTransitionsUrl;
        }
    });

    $('#btnSave').on('click', function () {
        $('#IsContinue').val('false');
        saveDevelopmentOutcome();
        developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();
    });

    $('#btnSaveAndContinue').on('click', function () {
        $('#IsContinue').val('true');
        saveDevelopmentOutcome();
    });

    function getDevelopmentOutcomeJSONData() {
        var developmentOutcomes = [];
        if (handsonDevelopmentOutcomeData != undefined && handsonDevelopmentOutcomeData != null && handsonDevelopmentOutcomeData.length > 0) {
            $.each($('div[name="developmentOutcome"]').handsontable('getData'), function (i, item) {
                developmentOutcomes.push({
                    DevelopmentOutcomeProfileId: handsonDevelopmentOutcomeData[i][0],
                    ProfileId: handsonDevelopmentOutcomeData[i][1],
                    DevelopmentOutcomeTypeId: handsonDevelopmentOutcomeData[i][2],
                    DevelopmentOutcomeTypeName: item[0],
                    DevelopmentOutcomeContent: item[1] ? item[1].replace('<p><br></p>', '') : '',
                    StrategyContent: item[2]
                });
            });
        }

        developmentOutcomes.push({
            DevelopmentOutcomeProfileId: $('#hdfDevelopmentOutcomeProfileID').val(),
            ProfileId: $('#profileId').val(),
            DevelopmentOutcomeTypeId: 6,
            OriginalFileName: $('#hdfOriginalFileName').val(),
            S3FileName: $('#hdfS3FileName').val()
        });

        return developmentOutcomes;
    }

    function getDevelopmentOutcomeFormSerializeString() {
        var formData = $("#developmentOutcomeForm").serialize();
        //add more data from table
        var developmentOutcomes = getDevelopmentOutcomeJSONData();
        var developmentOutcomeData = JSON.stringify(developmentOutcomes);
        formData = formData + developmentOutcomeData;
        return formData;
    }

    function autoSaving() {
        if (completedChange) {
            var developmentOutcomes = getDevelopmentOutcomeJSONData();
            var data = {
                profileId: $('#profileId').val(),
                developmentOutcomeData: JSON.stringify(developmentOutcomes),
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveDevelopmentOutcome")',
                data: data
            }).done(function (response) {
                if (response.Result) {
                    refreshDevelopmentOutcome();
                }
            });
            completedChange = false;
        }
    }

    function handsonTableAfterChange(changes, source) {
        if (source === 'edit' && changes.length) {
            completedChange = true;
        }
    }

    function refreshDevelopmentOutcome() {
        var container = $('div[name="developmentOutcome"]');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDevelopmentOutcome", "TLDSManage")',
            data: {
                profileId: $('#profileId').val()
            },
            success: function (response) {
                handsonDevelopmentOutcomeData = [];
                $.each(response.developmentOutcomes, function (i, item) {
                    if (item["DevelopmentOutcomeTypeId"] != 6) {
                        handsonDevelopmentOutcomeData.push([
                            item["DevelopmentOutcomeProfileId"],
                            item["ProfileId"],
                            item["DevelopmentOutcomeTypeId"],
                            item["DevelopmentOutcomeTypeName"],
                            item["DevelopmentOutcomeContent"] = item["DevelopmentOutcomeContent"] ? item["DevelopmentOutcomeContent"].replace('<p><br></p>', '') : '',
                            item["StrategyContent"]
                        ]);
                    }
                });

                saveDevelopmentOutcomeHandsontale(container, handsonDevelopmentOutcomeData);

                container.unblock();
                developmentOutcomeFormSerializeString = getDevelopmentOutcomeFormSerializeString();
            }
        });
    }

    function removeItemUploadFile() {
        var $spanClose = $(this);
        $spanClose.hideTip();
        $spanClose.parent().remove();
        $('#hdfOriginalFileName').val('');
        $('#hdfS3FileName').val('');
        displayUploadMessage();
    }

    function buildItemUploadFile(uploadResult) {
        var div = document.createElement('div');
        var spanFilename = document.createElement('a');
        var spanClose = document.createElement('span');
        var hiddenUploadedDocumentId = document.createElement('input');
        var hiddenOriginalFileName = document.createElement('input');
        var hiddenS3FileName = document.createElement('input');

        spanFilename.className = 'tlds-upload-item-filename';
        spanFilename.setAttribute('href', uploadResult.fileNameUrl);
        spanFilename.setAttribute('target', '_blank');
        spanFilename.innerHTML = uploadResult.S3FileName;

        spanClose.className = 'fa-solid fa-circle-xmark icon-red icon-sgo-delete with-tip';
        spanClose.setAttribute('title', 'Delete');

        hiddenUploadedDocumentId.setAttribute('type', 'hidden');
        hiddenUploadedDocumentId.setAttribute('name', 'UploadedDocumentId');
        hiddenUploadedDocumentId.setAttribute('value', uploadResult.UploadedDocumentId == undefined ? '0' : uploadResult.UploadedDocumentId);

        hiddenOriginalFileName.setAttribute('type', 'hidden');
        hiddenOriginalFileName.setAttribute('name', 'OriginalFileName');
        hiddenOriginalFileName.setAttribute('value', uploadResult.OriginalFileName);
        $('#hdfOriginalFileName').val(uploadResult.OriginalFileName);

        hiddenS3FileName.setAttribute('type', 'hidden');
        hiddenS3FileName.setAttribute('name', 'S3FileName');
        hiddenS3FileName.setAttribute('value', uploadResult.S3FileName);
        $('#hdfS3FileName').val(uploadResult.S3FileName);

        div.className = 'tlds-upload-item';
        div.appendChild(hiddenUploadedDocumentId);
        div.appendChild(hiddenOriginalFileName);
        div.appendChild(hiddenS3FileName);
        div.appendChild(spanFilename);
        div.appendChild(spanClose);

        $(spanClose).on('click', removeItemUploadFile);
        return div;
    }

    function displayUploadMessage() {
        let isRequired = false;
        if ($('.tlds-upload-item').length == 0) {
            const requiredCheck = $('.required-file-upload');
            for (var i = 0; i < requiredCheck.length; i++) {
                if ($(requiredCheck[i]).is(':checked')) {
                    isRequired = true;
                }
            }
        }

        if (isRequired) {
            $('#messageNoUploadDoc').show();
        }
        else {
            $('#messageNoUploadDoc').hide();
        }

        $("#error-messages").hide();
    }
</script>
