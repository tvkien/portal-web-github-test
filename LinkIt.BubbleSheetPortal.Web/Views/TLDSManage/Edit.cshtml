@using LinkIt.BubbleSheetPortal.Common
@using LinkIt.BubbleSheetPortal.Models.Enum
@model LinkIt.BubbleSheetPortal.Web.ViewModels.TDLS.TDLSProfileViewModel

@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleTDLSEditBundle()
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.ScriptTDLSEditBundle()
@{
    ViewBag.Title = "TLDS Edit";
}

<link href="@Url.Content("~/Content/css/select2.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.css")" rel="stylesheet" type="text/css">
<script src="@Url.Content("~/Scripts/ckUpDownNumber.js")" type="text/javascript"></script>
@*<script src="@Url.Content("~/Scripts/jquery-1.11.2.min.js")" type="text/javascript"></script>*@
<script src=@Url.Content("~/Scripts/select2.full.min.js")></script>

<style>
    .form select {
        height: 30px;
    }

    .wtSpreader, .wtHider, .htCore {
        width: 100% !important;
    }

    .wtHider {
        height: auto !important;
    }

    #selectEnrolmentYear {
        width: 100px;
    }

    .select2 {
        width: 400px !important;
    }

    .select2-selection {
        height: 30px !important;
        border: 1px solid #89bad3 !important;
    }

    .rotate-right {
        transform: rotateY(-180deg);
    }

    .pointer {
        cursor: pointer;
    }

    .photo-box {
        width: 400px;
        height: 400px;
        overflow: hidden;
    }
</style>

<article class="container_12" id="idTopNavigation">
    @Html.Partial("_NavigationTabs", Model)
    <section class="grid_12">
        <div class="block-border">
            <div class="block-content form" id="divOnTop">
                <h1>
                    @if (Model.ProfileId > 0)
                    {
                        <span>TLDS Edit</span>
                    }
                    else
                    {
                        <span>Create New TLDS</span>
                    }
                </h1>
                <ul id="fe-error-messages" class="message error u-m-t-20" style="display:none"></ul>
                @if (Model.ErrorList != null && Model.ErrorList.Count > 0)
                {
                    <ul id="error-messages" class="message error u-m-t-20">
                        @foreach (var error in Model.ErrorList)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }
                else
                {
                    if (Model.SaveSuccessful)
                    {
                        <ul id="success-messages" class="message success u-m-t-20">
                            <li> Successfully saved</li>
                        </ul>
                    }
                }

                @if (Model.Section102HasBeenSaved)
                {
                    <img src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/flag.png")" class="u-m-t-20 " />
                }
                @using (Html.BeginForm("Edit", "TLDSManage", FormMethod.Post, new { id = "editTDLSForm", @class = "form u-m-t-20" }))
                {
                    @Html.AntiForgeryToken()
                    <fieldset>
                        <legend>Child's Information</legend>
                        <input id="profileId" name="ProfileId" type="hidden" value="@Model.ProfileId" />
                        <input id="rotatePhoto" name="RotatePhoto" type="hidden" value="@Model.RotatePhoto" />
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Child's first name <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "full-width first-focus", @maxlength = "100" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Surname <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.LastName, new { @class = "full-width", @maxlength = "100" })
                                </span>
                            </p>
                            <p></p>
                        </div>

                        <div class="colx2-left">
                            <p>
                                <label>
                                    Child's date of birth <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    <input id="DateOfBirth" name="DateOfBirth" type="text" value="@(Model.DateOfBirth.HasValue ? Model.DateOfBirth.Value.DisplayDateWithFormat() : "")" class="full-width sgo-datetime" readonly="readonly" />
                                    <input type="hidden" value="" id="DateOfBirthString" name="DateOfBirthString" />
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Gender
                                </label>
                                <span class="relative">
                                    @Html.DropDownListFor(m => m.GenderId, Model.Genders, "Select Gender", new { id = "selectGender", @class = "full-width" })
                                </span>
                            </p>
                            <p></p>
                        </div>

                        <div class="colx2-left">
                            <p>
                                <label>
                                    Primary school where the child is enrolled (if known)
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.PrimarySchool, new { @class = "full-width", @maxlength = "100" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Outside school hours care service (if known)
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.OutsideSchoolHoursCareService, new { @class = "full-width", @maxlength = "100" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Expected year of enrolment <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    <input id="selectEnrolmentYear" name="EnrolmentYear" type="text" value="@(Model.EnrolmentYear.HasValue ? Model.EnrolmentYear.Value : (@DateTime.Now.Year + 1))" class="full-width sgo-datetime" maxlength="4" />
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p></p>
                        </div>
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Child's Photo
                                </label>
                                <span class="relative">
                                    @if (Model.AccessRight == AccessRightEnum.Create || Model.AccessRight == AccessRightEnum.Update)
                                    {
                                        <label>
                                            <span style="height: 26px;
                                              line-height: 26px;
                                              text-align: center;
                                              width: 285px;
                                              font-size: 12px;
                                              padding: 0;"
                                                  id="btnUploadChildPhoto" class="big-button">Attach Child's Photo</span>
                                            <input id="imageUpload" type="file" class="hide" name="imageUpload" />
                                            <br />
                                            <label style="padding-top: 5px">We recommend your image size is under 2MB</label>
                                        </label>
                                    }

                                    <input type="hidden" name="PhotoURL" id="PhotoURL" value="@Model.PhotoURL" />
                                    <input type="hidden" name="FileName" id="FileName" value="@Model.FileName" />

                                    @if (Model.AccessRight == AccessRightEnum.Create || Model.AccessRight == AccessRightEnum.Update)
                                    {
                                        if (string.IsNullOrEmpty(Model.PhotoURL))
                                        {
                                            <span id="spanRemoveChildPhoto" style="display: none;" class="attachment-item with-tip spanRemoveChildPhoto" title="Remove Child Photo"><img src="/Content/themes/Constellation/images/icons/fugue/icon-red.png" style="width: 22px; padding-top: 3px;"></span>
                                            <span id="rotate-left" style="display: none;" class="attachment-item with-tip pointer spanRemoveChildPhoto" title="Rotate Left 90<sup>o</sup>"><img src="/Content/themes/Constellation/images/rotate.png" style="width: 22px; padding-top: 3px;"></span>
                                            <span id="rotate-right" style="display: none;" class="attachment-item with-tip pointer spanRemoveChildPhoto" title="Rotate Right 90<sup>o</sup>"><img class="rotate-right" src="/Content/themes/Constellation/images/rotate.png" style="width: 22px; padding-top: 3px;"></span>
                                        }
                                        else
                                        {
                                            <span id="spanRemoveChildPhoto" class="attachment-item with-tip pointer spanRemoveChildPhoto" title="Remove Child Photo"><img src="/Content/themes/Constellation/images/icons/fugue/icon-red.png" style="width: 22px; padding-top: 3px;"></span>
                                            <span id="rotate-left" class="attachment-item with-tip pointer spanRemoveChildPhoto" title="Rotate Left 90<sup>o</sup>"><img src="/Content/themes/Constellation/images/rotate.png" style="width: 22px; padding-top: 3px;"></span>
                                            <span id="rotate-right" class="attachment-item with-tip pointer spanRemoveChildPhoto" title="Rotate Right 90<sup>o</sup>"><img class="rotate-right" src="/Content/themes/Constellation/images/rotate.png" style="width: 22px; padding-top: 3px;"></span>
                                        }
                                    }
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <div class="photo-box">
                                @if (string.IsNullOrEmpty(Model.PhotoURL))
                                {
                                    <img id="imgChildPhoto" src="" alt="Child Photo" style="max-width: 400px; max-height: 400px; display: none;" />
                                }
                                else
                                {
                                    <img id="imgChildPhoto" src="@Model.PhotoURL" alt="Child Photo" style="max-width: 400px; max-height: 400px;" />
                                }
                                <canvas id="imgCanvas" class="hide"></canvas>
                            </div>
                            <p></p>
                        </div>
                    </fieldset>


                    <fieldset>
                        <legend>Parent/Guardian contact details</legend>
                        <div class="tlds-instruction">More than one parent/guardian contact details can be recorded (if required)</div>
                        <div name="guardianContactDetail"></div>
                    </fieldset>

                    <fieldset>
                        <legend>Early Childhood Service contact details</legend>
                        <label>
                            Service Details, educator profiles and groups can be created and managed in the Service Details tab on the TLDS Home page.
                        </label>
                        <br />
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Name of service <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.ECSName, new { @class = "full-width", @maxlength = "500" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Address of service <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.ECSAddress, new { @class = "full-width", @maxlength = "200" })
                                </span>
                            </p>
                            <p></p>
                        </div>

                        <div class="colx2-left">
                            <p>
                                <label>
                                    Service approval number <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    <input type="text" name="ECSApprovalNumber" id="ECSApprovalNumber" value="@Model.ECSApprovalNumber" maxlength="50" class="full-width" onkeypress='validateTLDSServiceNumber(event)' />
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p style="margin-bottom:8px">
                                <label>
                                    Name of educator/s completing this form
                                </label>
                                <div class="relative">
                                    <select class="form-control" id="teacherProfileList"></select>
                                </div>
                                @Html.HiddenFor(m => m.ECSCompletingFormEducatorName)
                                @*<span class="relative">
                                        @Html.TextBoxFor(m => m.ECSCompletingFormEducatorPosition, new { @class = "full-width", @maxlength = "500" })
                                    </span>*@
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Position
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.ECSCompletingFormEducatorPosition, new { @class = "full-width", @maxlength = "500" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Highest level of qualification completed
                                </label>
                                <span class="relative">
                                    @Html.DropDownListFor(m => m.ECSCompletingFormEducatorQualificationId, Model.QualificationList)
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-left">
                            <p>
                                <label>
                                    Phone <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.ECSCompletingFormEducatorPhone, new { @class = "full-width", @maxlength = "50" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>
                                    Email <span class="required-field">(*)</span>
                                </label>
                                <span class="relative">
                                    @Html.TextBoxFor(m => m.ECSCompletingFormEducatorEmail, new { @class = "full-width", @maxlength = "100" })
                                </span>
                            </p>
                            <p></p>
                        </div>
                        @if (Model.TLDSGroupSelectedItem.Count > 0)
                        {
                            <div class="colx2-left">
                                <p>
                                    <label>
                                        Group
                                    </label>
                                    <span class="relative">
                                        @Html.DropDownListFor(m => m.TldsGroupId, Model.TLDSGroupSelectedItem)
                                    </span>
                                </p>
                                <p></p>
                            </div>
                        }

                    </fieldset>
                    <div class="u-text-right">
                        @if (Model.AccessRight == AccessRightEnum.Create || Model.AccessRight == AccessRightEnum.Update)

                        {
                            <button id="btnSave" class="u-m-l-10" type="button">Save</button>
                            <button id="btnSaveAndContinue" class="u-m-l-10" type="button">Save And Continue</button>

                        }

                        <input type="hidden" id="IsContinue" name="isContinue" value="false" />
                        <button id="btnContinue" class="u-m-l-10" type="button" @if (Model.Status < (int)TLDSProfileStatusEnum.Draft) { <text> disabled</text>}>Continue</button>

                        <input type="hidden" id="GuardiantContactJSONData" name="GuardiantContactJSONData" />
                    </div>
                }
            </div>
        </div>
    </section>
</article>

<script>
    var _rotate = 0;
    $(document).ready(function () {
        $("#rotate-left").on("click", function () {

            _rotate -= 90;
            $("#rotatePhoto").val(_rotate);
            $(".photo-box").css("transform", "rotate(" + _rotate + "deg)")
        });

        $("#rotate-right").on("click", function () {
            _rotate += 90;
            $("#rotatePhoto").val(_rotate);
            $(".photo-box").css("transform", "rotate(" + _rotate + "deg)")
        });
    });
</script>


<script>
    var isAccessRight = '@Model.AccessRight' == '@AccessRightEnum.Create' || '@Model.AccessRight' == '@AccessRightEnum.Update';
    var informationFromSerializeString = '';
    var handsonGuardianContactDetail = [];
    var isConfirmEndrolmentYear = false;
    var completedChange = false;
    var tableGuardianContactChange = false;
    var tldsProfileId = 0;
    var teacherProfileList = [];

    $.fn.select2.amd.require._defined['select2/selection/search'].prototype.update = function (a, b) {
        var c = this.$search[0] == document.activeElement;
        this.$search.attr("placeholder", "");
        a.call(this, b);
        this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);
        this.resizeSearch();
        if (c) {
            var self = this;
            window.setTimeout(function () {
                self.$search.focus();
            }, 0);
        }
    };

    $(function () {
        if ('@Model.ContextSpecificInforHasBeenSaved' === 'False') {
            $('#idSgoNavigationStep4').addClass('disabled');
        }
        $('#editTDLSForm').find(':input').each(function (index, value) {
            $(this).data('val', $(this).val());
        });

        setInterval(autoSaving, 60000);

        $("#selectEnrolmentYear").ckUpDownNumber({
            width: 100,
            height: 29
        });
        $('.stats').addClass('current');
        $('#rpTLDSManager').addClass('current');
        $('#ECSCompletingFormEducatorQualificationId').val('@Model.ECSCompletingFormEducatorQualificationId');
        $('#TldsGroupId').val('@Model.TldsGroupId');

        var year = new Date().getFullYear();
        var minDate =  new Date('01 01,' + (year -7));
        $('input[name="DateOfBirth"]').datepicker({
            changeMonth: true,
            changeYear: true,
            maxDate:  new Date(),
            minDate: minDate,
            dateFormat: jqueryDatePickerFormat(),
            beforeShow: function (input, inst) {
                $('#ui-datepicker-div').addClass('datepicker-sgo');
            }
        });

        $('#ECSCompletingFormEducatorPhone').on("keypress keyup blur", function (event) {
            $(this).val($(this).val().replace(/[^\d].+/, ""));
            if ((event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        $('#ECSCompletingFormEducatorEmail').on("keypress keyup blur", function (event) {
            $("#fe-error-messages").hide();
        });

        loadGuardianContactDetail('@Model.ProfileId');
        registerUploadChildPhoto();

        informationFromSerializeString = getInformationFromSerializeString();

        if (!isAccessRight) {
            // Disable all controls
            tldsDisableInputControls();
        }

        $("input").on("keypress keyup blur", function (event) {
            $("#fe-error-messages").empty();
            $("#fe-error-messages").hide();
        });

        $("#selectEnrolmentYear").keydown(false);

        $("#selectEnrolmentYear").change(function () {
            isConfirmEndrolmentYear = false;
        });

        if ('@Model.PhotoURL' == '') {
            $('.photo-box').hide();
        }

        initTeacherProfileControl();
    });

    function initTeacherProfileControl() {
        var teacherProfiles = [];
        var data = JSON.parse('@Html.Raw(Json.Encode(Model.TLDSProfileTeacherSelectedItem))');
        var currentData = "@Html.Raw(Model.ECSCompletingFormEducatorName)";
        var selected = -1;

        if (data && data.length > 0 && data[0].Value == 0) {
            data.shift();
        }

        for (var i = 0; i < data.length; i++) {
            teacherProfiles.push({ id: data[i].Value, text: data[i].Text });

            if (data[i].Text == currentData) {
                selected = data[i].Value;
            }
        }

        if (selected == -1) {
            teacherProfiles.push({ id: -1, text: currentData });
        }

        $("#teacherProfileList").select2({
            tags: true,
            data: teacherProfiles
        });

        teacherProfileList = data;

        $("#teacherProfileList").val(selected).trigger('change');
    }

    function validEmail(isSave) {
        if ($("#selectEnrolmentYear").val() <= (new Date()).getFullYear() && !isConfirmEndrolmentYear) {
            CustomConfirm({
                message: 'The recorded Expected year of Enrolment is in the past. This field should contain the year the student is expected to begin school. Please confirm you would like to record a year in the past.',
                yes: function () {
                    isConfirmEndrolmentYear = true;
                    if (isSave) {
                        $("#btnSave").trigger("click");
                    } else {
                        $("#btnSaveAndContinue").trigger("click");
                    }
                },
                no: function () {

                }
            });

            return;
        }

        let errors = [];
        if (!$("#FirstName").val()) errors.push("CHILD'S FIRST NAME IS REQUIRED.");
        if (!$("#LastName").val()) errors.push("SURNAME IS REQUIRED.");
        if (!$("#DateOfBirth").val()) errors.push("CHILD'S DATE OF BIRTH IS REQUIRED.");
        if (!$("#selectEnrolmentYear").val()) errors.push("YEAR OF ENROLMENT IS REQUIRED.");
        if (!$("#ECSName").val()) errors.push("NAME OF SERVICE IS REQUIRED.");
        if (!$("#ECSAddress").val()) errors.push("ADDRESS OF SERVICE IS REQUIRED.");
        if (!$("#ECSApprovalNumber").val()) errors.push("SERVICE APPROVAL NUMBER IS REQUIRED.");
        if (!$("#ECSCompletingFormEducatorPhone").val()) errors.push("PHONE IS REQUIRED.");
        if (!$("#ECSCompletingFormEducatorEmail").val()) errors.push("EMAIL IS REQUIRED.");


        var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        const email = $("#ECSCompletingFormEducatorEmail").val();
        isValid = regex.test(email.toLowerCase());

        if (email && !isValid) {
            errors.push("EMAIL IS WRONG FORMAT.");
        }
        $("#fe-error-messages").empty();
        for (var i = 0; i < errors.length; i++) {
            $("#fe-error-messages").append("<li>" + errors[i] + "</li>");
            $("#fe-error-messages").show();
            $("html, body").animate({ scrollTop: 0 }, 200);
        }

        return errors.length == 0;
    }

    function validateTLDSServiceNumber(evt) {
        var theEvent = evt || window.event;
        var key = theEvent.keyCode || theEvent.which;
        key = String.fromCharCode( key );
        var regex = /^[a-zA-Z0-9-_]+$/;
        if( !regex.test(key) ) {
            theEvent.returnValue = false;
            if(theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    function registerUploadChildPhoto() {
        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';
        var canvas  = $("#imgCanvas")[0];
        var context = canvas.getContext("2d");
        function readImage() {
            var maxWidth = 400;
            var imgSrc;

            if ( this.files && this.files[0] ) {
                var FR= new FileReader();
                var fileName = this.files[0].name;
                var getImage = function (imgFilename) {
                    return (/\.(gif|jpg|jpeg|png)$/i).test(imgFilename);
                };

                if (!getImage(fileName)) {
                    var msg = 'You have selected an unsupported file type. Please select a gif, png, jpeg or jpg file.';
                    popupAlertMessage('alert', msg, 400, 200);
                    $('#imageUpload').val('');
                    $('#divOnTop').unblock();
                    return;
                }

                ShowBlock($('#divOnTop'), 'Upload Attachment');

                FR.onload = function(e) {
                    var img = new Image();
                    img.addEventListener("load", function() {
                        var selfImage = this;
                        canvas.width = selfImage.width;
                        canvas.height = selfImage.height;
                        var ratio = canvas.width / canvas.height;
                        if (canvas.width > maxWidth) {
                            canvas.width = maxWidth;
                            canvas.height = canvas.width/ratio;
                        }
                        context.drawImage(img, 0, 0, canvas.width, canvas.height);
                        imgSrc = canvas.toDataURL();

                        // Call API for creating image
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("UploadChildPhotoEnhancement")',
                            data: {
                                'AUTHID': auth,
                                'profileId': @Model.ProfileId,
                                imageSrc: imgSrc,
                                fileName: fileName
                            },
                            dataType: 'json',
                            success: function (response) {
                                if (!response.Success == true) {
                                    var msg = '<div class="text-left">' + response.ErrorMessage + '</div>';
                                    popupAlertMessage('alert', msg, 310, 500);
                                } else {
                                    $('#PhotoURL').val(response.fileNameUrl);
                                    $('#FileName').val(response.FileName);
                                    $('#imgChildPhoto').attr('src', response.fileNameUrl);
                                    $('.spanRemoveChildPhoto').show();
                                    $('.photo-box').show();
                                    $('#imgChildPhoto').show();
                                }
                                $('#imageUpload').val('');
                                $('#divOnTop').unblock();
                            },
                            error: function (err) {
                                alert('The error was: ' + err);
                                $('#imageUpload').val('');
                                $('#divOnTop').unblock();
                            }
                        });

                    });
                    img.src = e.target.result;
                };
                FR.readAsDataURL( this.files[0] );
            }
        }
        $('#imageUpload')[0] && $('#imageUpload')[0].addEventListener("change", readImage, false);
    }

    $('#editTDLSForm').on('change paste', ':input', function (e) {
        $(this).data('val', $(this).val());
        completedChange = true;
    });

    $('#editTDLSForm').on('keyup', ':input', function (e) {
        if ($(this).val() != $(this).data('val')) {
            $(this).data('val', $(this).val());
            completedChange = true;
        }
    });

    $('#spanRemoveChildPhoto').click(function () {
        _rotate = 0;
        $(".photo-box").css("transform", "rotate(0deg)");
        $('#PhotoURL').val('');
        $('#FileName').val('');
        $('#imgChildPhoto').attr('src', '');
        $('.spanRemoveChildPhoto').hide();
        $('.photo-box').hide();
        $('#imgChildPhoto').hide();
    });

    $('#btnSave').click(function () {
        const isValidEmail = validEmail(true);
        if (!isValidEmail) return;

        $('#IsContinue').val('false');
        $('#DateOfBirthString').val($('#DateOfBirth').val());
        $('#ECSCompletingFormEducatorName').val($("#teacherProfileList").select2('data')[0].text);
        if (!checkGuardiantContactData()) {
            return;
        }
        $('#GuardiantContactJSONData').val(JSON.stringify(getGuardiantContactJSONData()));
        var profileId = $('#profileId').val();
        if (profileId === '0' && tldsProfileId !== 0) {
            $('#profileId').val(tldsProfileId);
        }
        ShowBlock($('#divOnTop'), 'Saving');
        $('#editTDLSForm').submit();
        informationFromSerializeString = getInformationFromSerializeString();
    });

    $('#btnSaveAndContinue').click(function () {
        const isValidEmail = validEmail();
        if (!isValidEmail) return;
        $('#IsContinue').val('true');
        $('#DateOfBirthString').val($('#DateOfBirth').val());
       // $('#ECSCompledDateString').val($('#ECSCompledDate').val());
        if (!checkGuardiantContactData()) {
            return;
        }
        $('#GuardiantContactJSONData').val(JSON.stringify(getGuardiantContactJSONData()));
        var profileId = $('#profileId').val();
        if (profileId === '0' && tldsProfileId !== 0) {
            $('#profileId').val(tldsProfileId);
        }
        ShowBlock($('#divOnTop'), 'Saving');
        $('#editTDLSForm').submit();
    });

    $('#btnContinue').click(function () {
        var contextSpecificInforUrl = '@Url.Action("ContextSpecificInfor", "TLDSManage")/?profileId=@Model.ProfileId';

        if (isAccessRight) {
            if ($('#profileId').val() == '0') {
                //the new profile
                $( "#btnSaveAndContinue" ).trigger( "click" );
                return;
            }

            var newUpdatedInformationFromSerializeString = getInformationFromSerializeString();
            if (newUpdatedInformationFromSerializeString != informationFromSerializeString) {
                //Show a confirmation dialog
                CustomConfirm({
                    message: 'Would you like to save changes before moving continue?',
                    yes: function() {
                        $( "#btnSaveAndContinue" ).trigger( "click" );
                    },
                    no: function() {
                        //continue
                        if ($('#profileId').val() == '0') {
                            //the new profile
                            $( "#btnSaveAndContinue" ).trigger( "click" );
                        } else {
                            location.href = contextSpecificInforUrl;
                        }
                    }
                });
            } else {
                if ($('#profileId').val() == '0') {
                    //the new profile
                    $("#btnSaveAndContinue").trigger("click");
                } else {
                    location.href = contextSpecificInforUrl;
                }
            }
        } else {
            location.href = contextSpecificInforUrl;
        }
    });

    var isPageLoaded = false;
    $("#teacherProfileList").die("change");
    $('#teacherProfileList').change(function () {
        if (isPageLoaded) {
            var profileTeacherId = $('#teacherProfileList').val();
        var value = profileTeacherId === "-1" ? "" : $("#teacherProfileList").select2('data')[0].text;
        $("#ECSCompletingFormEducatorName").val(value);

        if (profileTeacherId > 0) {
            $.get('@Url.Action("GetProfileTeacherById", "TLDSManage")', { tldsProfileTeacherId: profileTeacherId }, function (profileTeacher) {
            if (profileTeacher) {
                $('#ECSCompletingFormEducatorPosition').val(profileTeacher.Position);
                $('#ECSCompletingFormEducatorQualificationId').val(profileTeacher.TLDSLevelQualificationID);
            }
        });
        }
        }
        isPageLoaded = true;
    });

    var handsonGuardianContactDetail = [];

    function loadGuardianContactDetail(profileId) {
        var container = $('div[name="guardianContactDetail"]');
        Handsontable.editors.TextEditor.prototype.hideEditableElement = function() {
            this.textareaParentStyle.position = 'fixed';
            this.textareaParentStyle.top = '-99999px';
            this.textareaParentStyle.left = '0px';
            this.textareaParentStyle.zIndex = '-1';
        };

        Handsontable.editors.TextEditor.prototype.showEditableElement = function() {
            this.textareaParentStyle.position = 'absolute';
            this.textareaParentStyle.visibility = 'visible';

            this.textareaParentStyle.zIndex = this.holderZIndex >= 0 ? this.holderZIndex : '';
        };
        buildHandsonGuardianContactDetail([]);

        if (!isAccessRight) {
            var hot = container.handsontable('getInstance');
            hot.updateSettings({ readOnly: true });
        }

        ShowBlock(container, "Loading");
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetGuardianContactDetail", "TLDSManage")',
            data: {
                profileId: @Model.ProfileId
            },
            success: function (response) {
                handsonGuardianContactDetail = [];
                $.each(response.guardiantContactDetails, function (i, item) {
                    if (item["FullName"] !== null) {
                        handsonGuardianContactDetail.push([
                            item["GuardiantContactDetailId"],
                            item["ProfileId"],
                            item["FullName"],
                            item["RelationshipToChild"],
                            item["Phone"],
                            item["Email"]
                        ]);
                    }
                });

                buildHandsonGuardianContactDetail(handsonGuardianContactDetail.sort());

                container.unblock();
                informationFromSerializeString = getInformationFromSerializeString();
            }
        });
    }
    function getInformationFromSerializeString() {
        return $("#editTDLSForm").serialize() + JSON.stringify(getGuardiantContactJSONData());
    }
    function getGuardiantContactJSONData() {
        var data = [];
        if (handsonGuardianContactDetail != undefined && handsonGuardianContactDetail != null && handsonGuardianContactDetail.length > 0) {
            $.each($('div[name="guardianContactDetail"]').handsontable('getData'), function (i, item) {
                if (item[0] !== null) {
                    data.push({
                        GuardiantContactDetailId: handsonGuardianContactDetail[i][0],
                        ProfileId: handsonGuardianContactDetail[i][1],
                        FullName: item[0],
                        RelationshipToChild: item[1],
                        Phone: item[2],
                        Email: item[3],
                    });
                }
            });
        }

        return data;
    }
    function checkGuardiantContactData() {
        //check required data
        var data = getGuardiantContactJSONData();
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var hasPhoneOrEmail = false;
            if ((item.Phone != null && item.Phone.trim().length > 0)
                || (item.Email != null && item.Email.trim().length > 0)) {
                hasPhoneOrEmail = true;
            }
            if (hasPhoneOrEmail && (item.FullName == null || item.FullName.trim().length == 0)) {
                CustomAlert('Parent/Guardian contact details -> row ' + (i+1) + ': Full name is required');
                return false;
            }
            if (hasPhoneOrEmail && (item.RelationshipToChild == null || item.RelationshipToChild.trim().length == 0)) {
                CustomAlert('Parent/Guardian contact details -> row ' + (i+1) + ': Relationship is required');
                return false;
            }
        }

        return true;
    }

    function refreshGuardianContactDetail() {
        var container = $('div[name="guardianContactDetail"]');

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetGuardianContactDetail", "TLDSManage")',
            data: {
                profileId: @Model.ProfileId === 0 ? tldsProfileId : @Model.ProfileId
            },
            success: function (response) {
                handsonGuardianContactDetail = [];
                $.each(response.guardiantContactDetails, function (i, item) {
                    if (item["FullName"] !== null) {
                        handsonGuardianContactDetail.push([
                            item["GuardiantContactDetailId"],
                            item["ProfileId"],
                            item["FullName"],
                            item["RelationshipToChild"],
                            item["Phone"],
                            item["Email"]
                        ]);
                    }
                });

                buildHandsonGuardianContactDetail(handsonGuardianContactDetail);

                container.unblock();
                informationFromSerializeString = getInformationFromSerializeString();
            }
        });
    }

    function autoSaving() {
        //const isValidEmail = validEmail(true);
        //if (!isValidEmail) return;

        if (completedChange) {
            $('#IsContinue').val('false');
            $('#DateOfBirthString').val($('#DateOfBirth').val());
            if (!checkGuardiantContactData()) {
                return;
            }
            $('#GuardiantContactJSONData').val(JSON.stringify(getGuardiantContactJSONData()));
            $('#ECSCompletingFormEducatorName').val($("#teacherProfileList").select2('data')[0].text);

            var formData = $("#editTDLSForm").serializeArray();
            formData.push({ name: "AutoSaving", value: true });
            formData[1].value = @Model.ProfileId === 0 ? tldsProfileId : @Model.ProfileId;
            $.ajax({
                url: '@Url.Action("Edit")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.Success) {
                        tldsProfileId = response.tldsProfileId;
                        if (tableGuardianContactChange) {
                            refreshGuardianContactDetail();
                            tableGuardianContactChange = false;
                        }

                        $("#rotatePhoto").val(0);
                    }
                },
                failure: function (response) {
                    alert(response);
                }
            });

            informationFromSerializeString = getInformationFromSerializeString();
            completedChange = false;
        }
    }

    function handsonTableAfterChange(changes, source) {
        if (source === 'edit' && changes.length) {
            tableGuardianContactChange = true;
            completedChange = true;
        }
    }

    function SortByName(a, b) {
        var aName = a.name.toLowerCase();
        var bName = b.name.toLowerCase();
        return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
    }

    function buildHandsonGuardianContactDetail(data) {
        while (data.length < 3) {
            data.push(['', '', '', '']);
        }

        var container = $('div[name="guardianContactDetail"]');

        container.handsontable({
            data: data,
            minSpareRows: 1,
            colHeaders: ["Full name", "Relationship to child", "Phone", "Email"],
            colWidths: [209, 210, 208, 208],
            columns: [
                { data: 2 },
                { data: 3 },
                { data: 4 },
                { data: 5 }
            ],
            contextMenu: false,
            cells: function (row, col, prop) {
                var cellProperties = {};
                return cellProperties;
            },
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a',
            afterChange: function (changes, source) {
                if (source === 'edit' && changes.length) {
                    tableGuardianContactChange = true;
                    completedChange = true;

                    var hot = container.handsontable('getInstance');
                    var row = changes[0][0];
                    var totalRow = hot.countRows();
                    if (totalRow > 3 && hot.isEmptyRow(row)) {
                        hot.alter('remove_row', row);
                    }
                }
            },
        });
    }
</script>
