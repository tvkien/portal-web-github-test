@using LinkIt.BubbleSheetPortal.Common
@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Web.ViewModels.AssignSurvey.SurveyAssignmentViewModel
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.SurveyModule, "Assign Surveys");

    var cookie = Request.Cookies[Constanst.LKARCookie];
    var token = string.Empty;
    if (cookie != null) { token = cookie.Value; }
}
<style type="text/css">
    .positionAdd {
        position: relative;
        right: -6px;
        top: 26px;
    }

    button {
        margin-left: 30px;
    }

    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

    #studentContent {
        position: relative;
    }

    .coolfieldset, .coolfieldset.expanded {
        border: 1px solid #aaa;
    }

        .coolfieldset.collapsed {
            border: 0;
            border-top: 1px solid #aaa;
        }

        .coolfieldset legend {
            padding-left: 13px;
            font-weight: bold;
            cursor: pointer;
        }

        .coolfieldset legend, .coolfieldset.expanded legend {
            background: transparent url(/Content/themes/base/images/expanded.gif) no-repeat center left;
            background-size: 10px 10px;
        }

        .coolfieldset.collapsed legend {
            background: transparent url(/Content/themes/base/images/collapsed.gif) no-repeat center left;
            background-size: 10px 10px;
        }

    #ui-datepicker-div {
        z-index: 1051 !important;
    }

    /* css for timepicker */
    .ui-datepicker .ui-datepicker-header {
        top: 0px;
    }

    .ui-datepicker .ui-datepicker-prev span,
    .ui-datepicker .ui-datepicker-next span {
        background-image: url("/Content/themes/base/images/ui-icons_222222_256x240.png");
    }

    .ui-datepicker .ui-icon {
        width: 16px;
        height: 16px;
    }

    .ui-timepicker-div .ui-widget-header {
        margin-bottom: 8px;
    }

    .ui-timepicker-div dl {
        text-align: left;
    }

        .ui-timepicker-div dl dt {
            float: left;
            clear: left;
            padding: 0 0 0 5px;
        }

        .ui-timepicker-div dl dd {
            margin: 0 10px 10px 63px;
        }

    .ui-timepicker-div td {
        font-size: 90%;
    }

    .ui-tpicker-grid-label {
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    .ui-timepicker-rtl {
        direction: rtl;
    }

        .ui-timepicker-rtl dl {
            text-align: right;
            padding: 0 5px 0 0;
        }

            .ui-timepicker-rtl dl dt {
                float: right;
                clear: right;
            }

            .ui-timepicker-rtl dl dd {
                margin: 0 45% 10px 10px;
            }

    .ui-timepicker-div .ui-widget-header {
        top: 0px;
        background: url("images/ui-bg_highlight-soft_75_cccccc_1x100.png") repeat-x scroll 50% 50% #CCCCCC !important;
    }

    .colx2-left .lblrepeat {
        line-height: 0px;
        padding-top: 7px;
    }

    .colx2-left .lblend {
        line-height: 0px;
        padding-top: 5px;
    }

    .clear10 {
        clear: both;
        height: 10px;
    }

    .tr-odd td {
        background: none repeat scroll 0 0 #F2F2F2 !important;
    }

    .tr-even td {
        background: none repeat scroll 0 0 #E6E6E6 !important;
    }

    #divDeadline select[disabled] {
        background: #f2f2f2;
    }

    #assignment-grid {
        margin-top: 20px;
    }

    #distributeSurvey .block-heading {
        color: white;
        font-size: 1.5em;
        font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Sans", Arial, Helvetica, sans-serif;
        border: 1px solid;
        border-color: #50a3c8 #297cb4 #083f6f;
        background: #0c5fa5 url(../images/old-browsers-bg/title-bg.png) repeat-x top;
        -webkit-background-size: 100% 100%;
        -moz-background-size: 100% 100%;
        -o-background-size: 100% 100%;
        background-size: 100% 100%;
        background: -moz-linear-gradient( top, white, #72c6e4 4%, #0c5fa5 );
        background: -webkit-gradient( linear, left top, left bottom, from(white), to(#0c5fa5), color-stop(0.03, #72c6e4) );
        -moz-text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.2);
        -webkit-text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.2);
        text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.2);
        padding: 0.278em 0.444em 0.389em;
        border-radius: 5px;
    }

    #distributeSurvey .box-desc-survey {
        padding-top: 10px;
    }

        #distributeSurvey .box-desc-survey .box-content {
            margin-bottom: 10px;
        }

        #distributeSurvey .box-desc-survey .box-text {
            display: inline-block;
            vertical-align: middle;
        }

        #distributeSurvey .box-desc-survey .box-color {
            width: 24px;
            height: 24px;
            display: inline-block;
            vertical-align: middle;
            border: 1px solid #4a4a4a;
        }

        #distributeSurvey .box-desc-survey .box-color-blue {
            background: blue;
        }

        #distributeSurvey .box-desc-survey .box-color-red {
            background: red;
        }

        #distributeSurvey .box-desc-survey .box-color-gray {
            background: gray;
        }

        #distributeSurvey .box-desc-survey .box-color-green {
            background: green;
        }

    #distributeSurvey .box-option .box-radio {
        display: inline-block;
        margin-right: 10px;
    }

    #distributeSurvey .box-email-content {
        margin: 10px 0;
    }

        #distributeSurvey .box-email-content .text-email {
            width: 100%;
            min-height: 160px;
            margin-top: 8px;
            list-style: none;
        }

    #distributeSurvey .tagit-dropdown {
        display: none
    }

    #distributeSurvey .box-action {
        text-align: right;
    }

        #distributeSurvey .box-action .btn-popup-survey {
            margin-left: 15px;
        }

    #distributeSurvey .tagit-choice {
        line-height: 20px;
    }

    #distributeSurvey .tagit-new input.ui-widget-content.ui-autocomplete-input {
        border-radius: 0;
        min-width: 130px !important;
    }

    #blockPublicIndividualized {
        margin-left: 200px;
        border: 1px solid #d9d9d9;
        padding: 1em;
        -moz-border-radius: 0.25em;
        -webkit-border-radius: 0.25em;
        -webkit-background-clip: padding-box;
        border-radius: 0.25em;
    }

        #blockPublicIndividualized input {
            width: 50px;
        }

        #blockPublicIndividualized #btnSubmitPublicIndividualized {
            margin-left: 10px;
        }

    .block-public-individualized #btnSubmit {
        margin-top: 15px;
    }

    #btnSubmit {
        margin-left: 10px;
    }

    .filter-group-assign .btn-filter-program-grade {
        background: #fff url('/Content/themes/base/images/expanded.gif') no-repeat center left;
        background-size: 10px 10px;
        font-weight: 700;
        z-index: 111;
        color: #666;
        display: inline-block;
        margin-top: 10px;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

        .filter-group-assign .btn-filter-program-grade.arrow-expand {
            background: #fff url('/Content/themes/base/images/collapsed.gif') no-repeat center left;
            background-size: 10px 10px;
        }

    .box-filter-program-grade {
        margin-top: 10px;
    }

    .box-with-option {
        display: inline-flex;
        align-items: center;
    }

        .box-with-option span {
            margin-right: 5px;
        }

        .box-with-option .box-option {
            margin-left: 20px;
        }
</style>
<style>
    #generateContent .blockElement {
        position: fixed !important;
        width: 30% !important;
        left: 35% !important;
        top: 45% !important;
    }
</style>
<script src="@Url.Content("~/Scripts/TagIt/js/tag-it.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/TagIt/css/jquery.tagit.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Scripts/TagIt/css/tagit.ui-zendesk.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/jquery.listSplitter.js")" type="text/javascript"></script>
<script src="@Url.Content("~/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/TestDesign/testSchedule.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/constants.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/test-schedule.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/TestPreferences/testPreferences.js")" type="text/javascript"></script>

<article class="container_12">
    <section class="grid_12">
        <div id="generateContent" class="block-border block-public-anonymous">
            @using (Html.BeginForm("index", "AssignSurvey", FormMethod.Post, new { id = "surveyAssignmentForm", @class = "block-content form bubbleSheetSelector" }))
            {
                <h1>Assign Survey</h1>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                if (Model.IsPublisher || Model.IsNetworkAdmin)
                {
                    <fieldset id="publisherContent" class="grey-bg">
                        <legend>Select State/@LabelHelper.DistrictLabel</legend>
                        <div class="columns">
                            <div class="colx2-left">
                                <p>
                                    <label>State</label>
                                    <select id="selectState"></select>
                                </p>
                            </div>
                            <div class="colx2-right">
                                <p>
                                    <label>@LabelHelper.DistrictLabel</label>
                                    <select id="selectDistrict"></select>
                                </p>
                            </div>
                        </div>
                    </fieldset>
                }
                else
                {
                    <input id="hdfDistrictId" value="@Model.DistrictId" type="hidden" />
                }

                <fieldset class="grey-bg" id="fsSelectSurvey">
                    <legend>Select Survey</legend>
                    <div class="columns">
                        <div class="colx2-left">
                            <p>
                                <label>Survey Bank</label>
                                <select id="selectBank"></select>
                            </p>
                            <p>
                                <label>
                                    @LabelHelper.Term
                                </label>
                                <select id="selectDistrictTerm"></select>
                            </p>
                        </div>
                        <div class="colx2-right">
                            <p>
                                <label>Survey</label>
                                <select id="selectSurvey"></select>
                            </p>
                            <p>
                                <label>&nbsp;</label>
                                <button id="btnPreview" type="button" onclick="previewSurvey()" style="margin-left:0px" disabled="disabled">Preview Online</button>
                            </p>
                        </div>
                    </div>
                </fieldset>
                <div class="clear"></div>
                <fieldset class="grey-bg" id="fsSelectAssignmentType">
                    <legend>
                        Select Assignment Type
                    </legend>
                    <div class="columns">
                        <p>
                            <input id="radioPublicAnonymous" type="radio" name="assignmentType" checked="checked" value="1" />
                            <label for="radioPublicAnonymous"><b>Public Anonymous:</b></label>
                            Assign survey to respondents that may not be LinkIt users. Share one link to all respondents. Respondents may submit more than once
                        </p>
                        <p>
                            <input id="radioPublicIndividualized" type="radio" name="assignmentType" value="2" />
                            <label for="radioPublicIndividualized"><b>Public Individualized:</b></label>
                            Assign survey to respondents that may not be LinkIt users. Share a unique link to each respondent Respondents may only submit once.
                        </p>
                        <p>
                            <input id="radioPrivateAnonymous" type="radio" name="assignmentType" value="3" />
                            <label for="radioPrivateAnonymous"><b>Private Anonymous:</b></label>
                            Assign survey to respondents that are LinkIt users. Respondents must take the survey through their account. Hide identifying information in Reporting.
                        </p>
                        <p>
                            <input id="radioPrivateIndividualized" type="radio" name="assignmentType" value="4" />
                            <label for="radioPrivateIndividualized"><b>Private Individualized:</b></label>
                            Assign survey to respondents that are LinkIt users. Respondents must take the survey through their account.
                        </p>
                    </div>

                    <div id="divMultiClass" style="display: none;"></div>
                </fieldset>
                <div class="actions-block">
                    <div class="grey-bg float-left" id="blockPublicIndividualized" style="display: none;">
                        Generate <input type="number" min="1" name="generateExtraCodeNumber" /> extra codes
                        <button class="float-right" id="btnSubmitPublicIndividualized" disabled="disabled">Assign</button>
                    </div>
                    <div class="filter-group-assign block-content u-m-b-10" style="display: none;">
                        <h1>Select Population</h1>
                        <fieldset>
                            <legend class=" manage-class-legend" disabled="disabled">Role</legend>
                            <div id="filterContent" class="columns">
                                <div class="grid_1" style="width:70px">
                                    <input id="checkboxStudent" name="checkboxRoles" type="checkbox" value="28">
                                    <label for="checkboxStudent"> Student</label>
                                </div>
                                <div class="grid_1" style="width:70px">
                                    <input id="checkboxParent" name="checkboxRoles" type="checkbox" value="26">
                                    <label for="checkboxParent"> Parent</label>
                                </div>
                                <div class="grid_2" style="width:70px">
                                    <input id="checkboxTeacher" name="checkboxRoles" type="checkbox" value="2">
                                    <label for="checkboxTeacher"> Teacher</label>
                                </div>
                                <div class="grid_3" style="width:110px">
                                    <input id="checkboxSchool" name="checkboxRoles" type="checkbox" value="8">
                                    <label for="checkboxSchool"> School Admin</label>
                                </div>
                                <div class="grid_4">
                                    <input id="checkboxDistrict" name="checkboxRoles" type="checkbox" value="3">
                                    <label for="checkboxDistrict"> District Admin</label>
                                </div>
                            </div>
                        </fieldset>

                        <fieldset class="grey-bg manage-class-toggle content-filter-by-program">
                            <div class="colx2-left">
                                <p class="box-school">
                                    <label>School</label>
                                    <select id="selectSchool"></select>
                                </p>
                                <p class="box-term">
                                    <label>
                                        @LabelHelper.Term
                                    </label>
                                    <select id="selectDistrictTermFilter"></select>
                                </p>
                            </div>
                            <div class="colx2-left">
                                <p class="box-teacher">
                                    <label>Teacher</label>
                                    <select id="selectTeacher"></select>
                                </p>
                                <p class="box-class">
                                    <label>
                                        Class
                                    </label>
                                    <select id="selectClass"></select>
                                </p>
                            </div>
                            <div class="clear"></div>
                            <a class="btn-filter-program-grade">Filter by Program or @LabelHelper.TestGrade</a>
                            <div class="box-filter-program-grade">
                                <div class="colx2-left box-program">
                                    <label>Program</label>
                                    <select id="selectPrograms" multiple></select>
                                </div>
                                <div class="colx2-left box-grade">
                                    <label>@LabelHelper.StudentGrade</label>
                                    <select id="selectGrades" multiple></select>
                                </div>
                                <div class="clear"></div>
                            </div>
                        </fieldset>

                        <div class="u-text-right u-m-t-15">
                            <button id="clearFilter" class="grey">Clear Filters</button>
                            <button id="applyFilter" class="u-m-l-10">Apply Filters</button>
                        </div>
                        @Html.Partial("_FilterStudentsResult")
                    </div>

                    <button class="float-right" id="btnSubmit" type="submit" disabled="disabled">Assign</button>
                    <button class="float-right" id="btnPrivateAssign" style="display: none;" disabled="disabled">Assign</button>
                    <div class="clear"></div>
                </div>
                <div class="clear"></div>
            }
        </div>

    </section>
    <div class="clear"></div>
    <section class="grid_12" id="assignment-grid" style="display: none">
        @Html.Partial("_AssignmentResults")
    </section>
</article>
<div class="container_12" style="width: 600px; display: none;" id="distributeSurvey">
    <div class="block-border">
        <div class="block-content form">
            <div class="block-heading">Distribute</div>
            <div class="box-email-content">
                <span>Email:</span>
                <ul id="email-tag" class="text-email">
                </ul>
            </div>
            <span>Legends</span>
            <div class="box-desc-survey">
                <div class="box-content">
                    <span class="box-color box-color-blue"></span>
                    <span class="box-text">Share with New Contact</span>
                </div>

                <div class="box-content">
                    <span class="box-color box-color-green"></span>
                    <span class="box-text">Share with Existing Contact</span>
                </div>

                <div class="box-content">
                    <span class="box-color box-color-gray"></span>
                    <span class="box-text">Already Assigned, Skip Sharing</span>
                </div>

                <div class="box-content box-with-option" style="display:none">
                    <span class="box-color box-color-red"></span>
                    <span class="box-text">Multiple Contacts Found</span>

                    <div class="box-option">
                        <div class="box-radio">
                            <input id="radioSkipSharing" type="radio" name="surveySharing" value="1" checked />
                            <label for="radioSkipSharing">Skip Sharing</label>
                        </div>
                        <div class="box-radio">
                            <input id="radioShareAnyWay" type="radio" name="surveySharing" value="2" />
                            <label for="radioShareAnyWay">Share Anyway</label>
                        </div>
                    </div>
                </div>

            </div>

            <div class="box-action">
                <button class="btn-popup-survey btn-share-survey">Share</button>
                <button class="btn-popup-survey btn-cancel-survey">Cancel</button>
            </div>
        </div>

    </div>
</div>


<script>
    var model = {
        isPublisher: @Model.IsPublisher.ToString().ToLower(),
        isNetworkAdmin: @Model.IsNetworkAdmin.ToString().ToLower(),
        isDistrictAdmin: @Model.IsDistrictAdmin.ToString().ToLower(),
        surveyAssignmentType: '@Model.SurveyAssignmentType',
        surveyBankId: '@Model.SurveyBankId',
        surveyId: '@Model.SurveyId',
        termId: '@Model.TermId'
    }
    var ASSIGNMENT_TYPE = {
        PublicAnonymous: '1',
        PublicIndividualized: '2',
        PrivateAnonymous: '3',
        PrivateIndividualized: '4',
        Prevew: '5'
    }
    var testPreferenceModel = null;

    var isLoadingExistAssignment;
    $(function () {
        isLoadingExistAssignment = model.surveyAssignmentType != '' && model.surveyBankId != '' && model.surveyId != '' && model.termId != '';

        if ((model.isPublisher || model.isNetworkAdmin) && isLoadingExistAssignment) {
            populateDistrictTerms();
            populateBanks();
            populateSchoolsByDistrict();
            populateStudentGrades();
            populateStudentProgams();
        }

        if (model.isPublisher) {
            $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
                populateStates(states);
            });
        }
        else {
            if (model.isNetworkAdmin) {
                $.get('@Url.Action("GetStatesByDictricIds", "PopulateStateDistrict")', { dictricIds: '@Model.StrIds' }, function (states) {
                    populateStates(states);
                });
            } else {
                populateDistrictTerms();
                populateBanks();
                populateSchoolsByDistrict();
                populateStudentGrades();
                populateStudentProgams();
            }
        }

        var parrams = assignResultDT.getFilterParrams();
        if (parrams.districtId > 0 && parrams.bankId > 0 && parrams.surveyId > 0 && parrams.districtTermId > 0) {
            $('#assignment-grid').show();
        } else {
            $('#assignment-grid').hide();
        }
        if (model.isPublisher || model.isNetworkAdmin) {
            $('#selectState').change(function () {
                $('#selectDistrict').empty();
                $('#selectBank').empty();
                $('#selectSurvey').empty();
                $('#selectDistrictTerm').empty();
                if ($('#selectState').val() != 'select') {
                    populateDistricts();
                }
                //TODO: Check Valid Assign
                CheckValidToAssign();
            });

            $('#selectDistrict').change(function () {
                $('#selectBank').empty();
                $('#selectSurvey').empty();
                $('#selectDistrictTerm').empty();

                //TODO: Check Valid Assign
                CheckValidToAssign();
                populateBanks();
                populateDistrictTerms();
                populateSchoolsByDistrict();
                populateStudentGrades();
                populateStudentProgams();
            });
        }

        $('#selectBank').change(function () {
            populateSurvey();
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectDistrictTerm').change(function () {
            CheckValidToAssign();
        });

        $('#selectSurvey').change(function () {
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });
        $('.filter-group-assign').hide()
        $('input[name=assignmentType]').change(function (ev) {
            var type = $(this).val();
            onChangeAssignmentType(type);
        });

        $('#surveyAssignmentForm').submit(function (ev) {
            ev.preventDefault();
        });
        $('#btnSubmit').click(function (ev) {
            var type = $('input[name=assignmentType]:checked').val();
            switch (type) {
                case ASSIGNMENT_TYPE.PublicAnonymous:
                    handleAssignPublicAnonymous();
                    break;
                case ASSIGNMENT_TYPE.PublicIndividualized:
                    showModalDialogBG();
                    $('#distributeSurvey').dialog({
                        title: "",
                        modal: false,
                        width: 600,
                        resizable: false,
                        close: function () {
                            hideModalDialogBG();
                        },
                        open: function(event, ui){
                            var nameSurvey = $('#selectSurvey option:selected').text();
                            $(event.target).find('.block-heading').text('Distribute - ' + nameSurvey);
                        }
                    });
                    break;
                case ASSIGNMENT_TYPE.PrivateAnonymous:
                case ASSIGNMENT_TYPE.PrivateIndividualized:
                    handleAssignAndDistributePrivate();
                    break;
            }
        });
        $('#btnSubmitPublicIndividualized').click(handleAssignPublicIndividualized);
        $('#btnPrivateAssign').click(handleAssignPrivate);
        $('.btn-cancel-survey').on('click', function() {
            $('#distributeSurvey').dialog('close');
        });

        $('.btn-share-survey').on('click', function () {
            var emails = $('.box-email-content #email-tag').tagit("assignedTags");
            var districtId = $('#hdfDistrictId').val();
            if (districtId == null) {
                districtId = $('#selectDistrict').val();
            }
            var option = $('input[name=surveySharing]:checked').val();

            if (option == '1') {
                emails = filterSkipEmailSharing(emails, 2); // position of RED color
            }

            // Bydefault, always skip gray.
            emails = filterSkipEmailSharing(emails, 3); // position of GRAY color

            var data = {
                TestName: $("#selectSurvey option:selected").text(),
                DistrictId: districtId,
                TestId: $('#selectSurvey').val(),
                DistrictTermId: $('#selectDistrictTerm').val(),
                Emails: emails
            };
            if (emails.length === 0) {
                CustomAlert('There is no valid email in the provided population.');
                return;
            }
            ShowBlock($('#distributeSurvey'), 'Sharing');
            $.ajax({
                type: 'POST',
                url: '@Url.Action("AssignAndDistributePublicIndividualized", "AssignSurvey")',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (res) {
                    if (res.Success) {
                        $('#distributeSurvey').dialog('close');
                        $('.box-email-content #email-tag').tagit("removeAll");
                        $('.box-email-content #email-tag input')[0].style.width = "";
                        assignResultDT.reload();
                    } else {
                        CustomAlert(res.Message);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    CustomAlert(errorThrown);
                },
                failure: function (response) {
                    CustomAlert(response);
                },
                complete: function () {
                    $('#distributeSurvey').unblock();
                    $('#distributeSurvey')[0].style.position = '';
                }

            });
        });

        var checkedEmails = {};
        $('#distributeSurvey #email-tag').tagit({
            afterTagAdded: function(event, ui) {

                var COLOR = ['blue', 'green', 'red', 'gray'];
                var email = ui.tagLabel;
                var newEmails = filterEmailNotChecked([email], checkedEmails);

                if (newEmails.length == 0) { // Set background for add multi emails
                    var position = checkedEmails[email];

                    setTagBackground(position, COLOR, ui);
                    var checkPosition = Object.values(checkedEmails).find(function(item) {
                        return item === 2;
                    })
                    if (checkPosition) {
                        $('.box-desc-survey .box-content.box-with-option').css('display', 'inline-flex')
                    } else {
                        $('.box-desc-survey .box-content.box-with-option').css('display', 'none')
                    }
                } else { // Handle for add one email
                    checkEmailAndCreateTag(newEmails, checkedEmails, function(res) {
                        setDictionaryEmailPosition(res, checkedEmails);

                        var position = checkedEmails[email];
                        setTagBackground(position, COLOR, ui);
                        var checkPosition = Object.values(checkedEmails).find(function(item) {
                            return item === 2;
                        })
                        if (checkPosition) {
                            $('.box-desc-survey .box-content.box-with-option').css('display', 'inline-flex')
                        } else {
                            $('.box-desc-survey .box-content.box-with-option').css('display', 'none')
                        }
                    });
                }
                return false;
            },
            beforeTagAdded: function (event, ui) {
                var emails = splitEmail(ui.tagLabel);
                var newEmails = filterEmailNotChecked(emails, checkedEmails);
                var isCreateManyEmails = emails && emails.length > 1;

                if (isCreateManyEmails && newEmails.length > 0) { // Check for multi emails
                    checkEmailAndCreateTag(newEmails, checkedEmails, function(res) {
                        setDictionaryEmailPosition(res, checkedEmails);

                        $.each(newEmails, function(_, ele) {
                            $('#distributeSurvey #email-tag').tagit("createTag", ele);
                        });
                    });
                }

                // prevent to add tag with the wrong email format
                if (!verifyEmail(ui.tagLabel)) {
                    $('#distributeSurvey #email-tag li.tagit-new input').val('');
                    return false;
                }
            },
            afterTagRemoved: function (event, ui) {
                delete checkedEmails[ui.tagLabel];
                var checkPosition = Object.values(checkedEmails).find(function(item) {
                    return item === 2;
                })
                if (checkPosition) {
                    $('.box-desc-survey .box-content.box-with-option').css('display', 'inline-flex')
                } else {
                    $('.box-desc-survey .box-content.box-with-option').css('display', 'none')
                }
            },
        });
        $('.content-filter-by-program .box-school').hide();
        $('.content-filter-by-program .box-term').hide();
        $('.content-filter-by-program .box-teacher').hide();
        $('.content-filter-by-program .box-class').hide();
        $('.box-filter-program-grade').hide();
        $('.btn-filter-program-grade').hide();
        $('.content-filter-by-program').hide()
        $('#checkboxStudent, #checkboxParent, #checkboxSchool, #checkboxTeacher, #checkboxDistrict').on('change', function(event) {
           var studentCheck = $('#checkboxStudent');
           var parentCheck = $('#checkboxParent');
           var schoolCheck = $('#checkboxSchool');
           var teacherCheck = $('#checkboxTeacher');
           var districtCheck = $('#checkboxDistrict');
           var isStudentandParent = studentCheck.is(":checked") || parentCheck.is(":checked");
           var isSchoolandTeacher = schoolCheck.is(":checked") || teacherCheck.is(":checked");
           var isDistrictAdmin = districtCheck.is(":checked");
           switch(true){
               case isStudentandParent:
                    $('.content-filter-by-program .box-school').show();
                    $('.content-filter-by-program .box-term').show();
                    $('.content-filter-by-program .box-teacher').show();
                    $('.content-filter-by-program .box-class').show();
                    $('.box-filter-program-grade').show();
                    $('.btn-filter-program-grade').show();
                    $('.content-filter-by-program').show();
                    switch(true) {
                        case isDistrictAdmin:
                            $('#applyFilter').attr('disabled', false)
                            break;
                        case isSchoolandTeacher:
                            var disabled = $('#selectSchool').val() == 'select';
                            if (disabled) {
                                $('#applyFilter').attr('disabled', true);
                            } else {
                                $('#applyFilter').attr('disabled', false);
                            }
                            break;
                        default:
                            var disabled = $('#selectSchool').val() == 'select';
                            if (disabled) {
                                $('#applyFilter').attr('disabled', true);
                            } else {
                                $('#applyFilter').attr('disabled', false);
                            }
                        break;
                    }
                break;
               case isSchoolandTeacher:
                    $('.content-filter-by-program .box-term').hide();
                    $('.content-filter-by-program .box-teacher').hide();
                    $('.content-filter-by-program .box-class').hide();
                    $('.content-filter-by-program .box-school').show();
                    $('.box-filter-program-grade').hide();
                    $('.btn-filter-program-grade').hide();
                    $('.content-filter-by-program').show();
                    var disabled = $('#selectSchool').val() == 'select';
                    if (disabled) {
                        $('#applyFilter').attr('disabled', true);
                    } else {
                        $('#applyFilter').attr('disabled', false);
                    }
               break;
               case isDistrictAdmin:
                    $('.content-filter-by-program').hide()
                    $('#applyFilter').attr('disabled', false);
               break;
               default:
                    $('.content-filter-by-program').hide();
                    $('#applyFilter').attr('disabled', true);
                break;

           }
        })
        $('.btn-filter-program-grade').on('click', function() {
            var $that = $(this)
            $('.box-filter-program-grade').slideToggle(500, function() {
               $that.toggleClass('arrow-expand')
            });
        })
        $('#selectSchool').change(function () {
            $('#selectTeacher').empty();
            $('#selectDistrictTermFilter').empty();
            $('#selectClass').empty();
            if ($('#selectSchool').val() != 'select') {
                populateTeachers();
                populateTermsByTeacherAndSchool();
                populateClasses();
            }
            if ($('#checkboxDistrict').is(":checked")) {
                $('#applyFilter').attr('disabled', false);
            } else {
                if ($('#selectSchool').val() != 'select') {
                    $('#applyFilter').attr('disabled', false);
                } else {
                    $('#applyFilter').attr('disabled', true);
                }
            }
        });
        $('#selectTeacher').change(function () {
            $('#studentContent').hide();
            $('#students').html('');

        });
        $('#selectClass').change(function() {
            if ($('#checkboxDistrict').is(":checked") || $('#checkboxSchool').is(":checked") || $('#checkboxTeacher').is(":checked")) {
                $('#applyFilter').attr('disabled', false);
            } else {
                if ($(this).val() != 'select') {
                    $('#applyFilter').attr('disabled', false);
                } else {
                    $('#applyFilter').attr('disabled', true);
                }
            }
        })
        $('#selectDistrictTermFilter').change(function () {
            $('#studentContent').hide();

            //TODO: Check Valid Assign
            CheckValidToAssign();
        });
        $('#applyFilter').on('click', function() {
            var studentCheck = $('#checkboxStudent');
            var parentCheck = $('#checkboxParent');
            var schoolCheck = $('#checkboxSchool');
            var teacherCheck = $('#checkboxTeacher');
            var districtCheck = $('#checkboxDistrict');
            var isStudentandParent = studentCheck.is(":checked") || parentCheck.is(":checked");
            var isSchoolandTeacher = schoolCheck.is(":checked") || teacherCheck.is(":checked");
            var typeAssignment = $('input[name=assignmentType]:checked').val();
            var isDistrictAdmin = districtCheck.is(":checked");
            var param = {};

           switch(true) {
                case typeAssignment == ASSIGNMENT_TYPE.PrivateIndividualized:

                break;
                case isDistrictAdmin:
                    param.isDistrictAdmin = true;
                break;
                case isSchoolandTeacher:
                    if (schoolCheck.is(":checked")) {
                        param.isSchoolCheck = schoolCheck.is(":checked")
                    }
                    if (teacherCheck.is(":checked")) {
                        param.isTeacherCheck = teacherCheck.is(":checked")
                    }
                    param.schoolId = $('#selectSchool').val()
                break;
                case isStudentandParent:
                    if(studentCheck.is(":checked")) {
                        param.isStudentCheck = studentCheck.is(":checked")
                    }
                    if (parentCheck.is(":checked")) {
                        param.isParentCheck = parentCheck.is(":checked")
                    }
                    param.schoolId = $('#selectSchool').val()
                    param.teacherId = $('#selectTeacher').val()
                    param.classlId = $('#selectClass').val()
                    param.termId = $('#selectDistrictTermFilter').val();
                    param.programId = 0;
                    param.gradeId = 0
                break;
            }
            filterStudentResultDT.reload();
        })

        $('#clearFilter').on('click', function() {
            $('#checkboxStudent').attr('checked', false).change();
            $('#checkboxParent').attr('checked', false).change();
            $('#checkboxSchool').attr('checked', false).change();
            $('#checkboxTeacher').attr('checked', false).change();
            $('#checkboxDistrict').attr('checked', false).change();
            $('#selectSchool').val('select').change();
            $('#selectDistrictTermFilter').empty();
            $('#selectTeacher').empty();
            $('#selectClass').empty();
        });
        $('#blockPublicIndividualized input[name="generateExtraCodeNumber"]').on('keydown', function(event) {
            if (event.keyCode == 46 || event.keyCode == 8) {
            }
            else {
                if (event.keyCode < 48 || event.keyCode > 57) {
                    event.preventDefault();
                }
            }
        })
    })

</script>

<script>

    function verifyEmail(email) {
        var regex = /^(([^<>()[\]\\.,;:\s@@\"]+(\.[^<>()[\]\\.,;:\s@@\"]+)*)|(\".+\"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return email && regex.test(email) ? email : '';
    }

    function splitEmail(val) {
        var result = [];
        var emails = [];
        var specialCharacters = ";,\n\t ";

        var pos = 0;
        for (var i = 0; i < val.length; i++) {
            var c = val.charAt(i);

            if (specialCharacters.indexOf(c) >= 0) {
                var email = val.substring(pos, i);
                if (email && email != '' && !emails.includes(email)) {
                    emails.push(email);
                }

                pos = i + 1;
            }
        }

        if (verifyEmail(val.substring(pos, val.length))) {
            emails.push(val.substring(pos, val.length));
        }

        if (emails && emails.length > 0) {
            $.each(emails, function(_, ele) {
                if (verifyEmail(ele.trim())) {
                        result.push(ele.trim());
                }
            });
        }

        return result;
    }

    function filterEmailNotChecked(emails, checkEmails) {
        var result = [];
        $.each(emails, function(_, e) {
            if (checkEmails[e] === undefined) {
                result.push(e);
            }
        });

        return result;
    }

    function checkEmailAndCreateTag(newEmails, checkedEmails, callback) {
        districtId = $('#hdfDistrictId').val();

        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }

        surveyId = $('#selectSurvey').val();
        termId = $('#selectDistrictTerm').val();
        var assignmentType = $('input[name=assignmentType]:checked').val();

        CheckMatchEmail(newEmails, parseInt(districtId), parseInt(surveyId), parseInt(termId), parseInt(assignmentType), callback);
    }

    function setTagBackground(position, COLOR, ui) {
        if (position >= 0) {
            $(ui.tag).css('background-color', COLOR[position]);
            $(ui.tag).attr('position', position);
            $(ui.tag).children('.tagit-label').css('color', '#fff');
            $(ui.tag).children('.tagit-close').children('.text-icon').css('color', '#fff');
        }
    }

    function setDictionaryEmailPosition(res, checkedEmails) {
        $.each(res, function(_, respone) {
            var position = 0;
            if (respone) {
                position = respone.Status;
            }

            checkedEmails[respone.Email] = position;
        });
}

    function filterSkipEmailSharing(emails, position = 1) {
        var elements = $('.box-email-content #email-tag').children('li.tagit-choice[position="' + position +'"]')
        if(elements && elements.length) {
            $.each(elements, function(index, ele) {
                var text = $(ele).children('.tagit-label').text();
                emails = emails.filter(function(item) {
                    return item !== text
                })
            })
        }

        return emails;
    }

    function previewSurvey() {
        $(".dialog").dialog("close");
        ShowBlock($('#generateContent'), 'Loading');
        var surveyId = $('#selectSurvey').val();
        var url = '@Url.Action("PreviewOnlineSettingForTestDesign", "TestAssignment")';
        url += '?testId=' + surveyId;

        $.ajax({
            url: url,
            cache: false
        }).done(function (html) {
            $('#generateContent').unblock();
            $('body').append('<div id="divPreviewOnlinePanel"></div>');
            $("#divPreviewOnlinePanel").append(html);
        });
    }
    function closePopUpOnlineTearcherPreview() {
        $('.ui-widget-overlay:last').remove();
        $('#idPopUpOnlineTearcherPreview').parent('.ui-dialog').css({ 'z-index': 1 });//recover the old value
        $('#idPopUpOnlineTearcherPreview').dialog('close');
        CheckValidToAssign();
        $('#btnPreview').enableBt();
    }
    // Populates
    function populateDistricts() {
        $('#selectDistrict').empty();
        var stateValue = $('#selectState').val();

        if (stateValue != 'select') {
            if (model.isPublisher) {
                $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItems($('#selectDistrict'), districts);

                    if (isLoadingExistAssignment && '@Model.DistrictId' != '') {
                        $('#selectDistrict').val(@Model.DistrictId);
                    }
                });
            }
            if (model.isNetworkAdmin) {
                $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItems($('#selectDistrict'), districts);

                    if (isLoadingExistAssignment && '@Model.DistrictId' != '') {
                        $('#selectDistrict').val(@Model.DistrictId);
                    }
                });
            }
        }
    }
    function populateBanks() {
        resetBanks();
        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }
        if (districtId != 'select') {
            $.get('@Url.Action("GetAssignSurveyBanks", "AssignSurvey")', { districtId: districtId }, function (banks) {
                addDefaultOption($('#selectBank'), "Bank");
                addSelectListItems($('#selectBank'), banks);

                // Set selected value
                if ('@Model.SurveyBankId' != '') {
                    $('#selectBank').val(@Model.SurveyBankId)

                    populateSurvey();
                }
            });
        }
    }
    function populateSurvey() {

        $('#selectSurvey').empty();
        var bankValue = $('#selectBank').val();
        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }

        if (!districtId) districtId = 0;
        if (bankValue != 'select') {
            $.get('@Url.Action("GetTestsForTestAssignmentCustomOrder", "PopulateTest")', { bankId: bankValue, districtId: districtId, isSurvey: true, moduleCode: RestrictionModule.ASSIGNTEST }, function (tests) {
                addDefaultOption($('#selectSurvey'), "Test");
                addSelectListItemsForTestAssignment($('#selectSurvey'), tests);

                // Set selected value
                if ('@Model.SurveyId' != '') {
                    $('#selectSurvey').val(@Model.SurveyId)
                }

                autoSelectSurveyAssignmentType(@Model.SurveyAssignmentType);
            });
        }
    }

    function populateStates(states) {
        addDefaultOption($('#selectState'), "State");
        addSelectListItems($('#selectState'), states);

        if (isLoadingExistAssignment && '@Model.StateId' != '') {
            $('#selectState').val(@Model.StateId);
            populateDistricts();
        }
    }

    function populateDistrictTerms() {
        var districtId = $("#hdfDistrictId").val();
        if (districtId == null) {
            districtId = $("#selectDistrict").val();
        }
        if (districtId != 'select') {
            $.get('@Url.Action("GetTermsByDistrict", "AssignSurvey")', { districtId: districtId  }, function (terms) {
                addDefaultOption($('#selectDistrictTerm'), "@LabelHelper.Term");
                addSelectListItems($('#selectDistrictTerm'), terms);

                // Set selected value
                if ('@Model.TermId' != '') {
                    $('#selectDistrictTerm').val(@Model.TermId)
                }
            });
        }
    }
    //Reset
    function resetBanks() {
        $('#selectBank').empty();
        $('#selectSurvey').empty();
    }

    function CheckMatchEmail(emails, districtId, surveyId, termId, assignmentType, callback) {
        $.get('@Url.Action("CheckMatchEmail", "AssignSurvey")', { emails: emails.join(','), districtId: districtId, surveyId: surveyId, termId: termId, assignmentType: assignmentType }, function(respone) {
            callback(respone)
        })
    }

    function populateSchools(schools) {
        addDefaultOption($('#selectSchool'), "School");
        addSelectListItems($('#selectSchool'), schools);
    }

    function populateTerms(terms) {
        addDefaultOption($('#selectTerm'), "@LabelHelper.Term");
        addSelectListItems($('#selectTerm'), terms);
    }

    function populateTeachers() {
        $('#selectTeacher').empty();
        var schoolValue = $('#selectSchool').val();
        if (schoolValue != 'select') {
            $.get('@Url.Action("GetTeachers", "PopulateSchoolTeacher")', { schoolId: schoolValue, hasTermOnly: 'True' }, function (teachers) {
                addDefaultOption($('#selectTeacher'), "Teacher");
                addSelectListWithDefaultValue($('#selectTeacher'), teachers, 'select', function (item) {
                    return (item.FirstName) ? item.LastName + ", " + item.FirstName + " (" + item.Name + ")" : item.LastName + " (" + item.Name + ")";
                });
            });
        }
    }

    function populateClasses() {
        $('#selectClass').empty();
        var schoolValue = $('#selectSchool').val();
        if (schoolValue != 'select') {
            $.get('@Url.Action("GetClassDistrictTermBySchool", "PopulateStudent")', { schoolId: schoolValue }, function (classes) {
                addDefaultOption($('#selectClass'), "Class");
                addSelectListItems($('#selectClass'), classes);
            });
        }
    }

    function populateSchoolsByDistrict() {
        $('#selectSchool').empty();
        var districtValue = $('#hdfDistrictId').val();
        if (districtValue == null) {
            districtValue = $('#selectDistrict').val();
        }
        if (districtValue == null || districtValue == 'select' || districtValue <= 0) {
            return;
        }
        if (districtValue != 'select') {
            $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', { districtId: districtValue }, function (schools) {
                populateSchools(schools);
            });
        }
    }

    function populateTermsByTeacherAndSchool() {
        $('#selectDistrictTermFilter').empty();
        var schoolValue = $('#selectSchool').val();
        if (schoolValue != 'select') {
            $.get('@Url.Action("GetTermsBySchool", "PopulateStudent")', { schoolId: schoolValue }, function (terms) {
                addDefaultOption($('#selectDistrictTermFilter'), "@LabelHelper.Term");
                addSelectListItems($('#selectDistrictTermFilter'), terms);
            });
        }
    }

    function onChangeAssignmentType(type) {
        var wrapperClasses = ['block-public-anonymous', 'block-public-individualized', 'block-private-anonymous', 'block-private-individualized'];
        var wrapperClass = '';
        switch (type) {
            case ASSIGNMENT_TYPE.PublicAnonymous:
                $('#btnSubmit').text('Assign');
                $('#blockPublicIndividualized').hide();
                $('.filter-group-assign').hide()
                $('#btnSurveyResultDistribute').hide();
                $('#btnPrivateAssign').hide();
                wrapperClass = 'block-public-anonymous';
                break;
            case ASSIGNMENT_TYPE.PublicIndividualized:
                $('#btnSubmit').text('Assign and Distribute');
                $('#blockPublicIndividualized').show();
                $('.filter-group-assign').hide()
                $('#btnSurveyResultDistribute').show();
                $('#btnPrivateAssign').hide();
                wrapperClass = 'block-public-individualized';
                break;
            case ASSIGNMENT_TYPE.PrivateAnonymous:
                $('#btnSubmit').text('Assign and Distribute');
                $('.filter-group-assign').show();
                $('#checkboxStudent').attr('checked', false);
                $('#checkboxParent').attr('checked', false);
                $('#blockPublicIndividualized').hide();
                $('#btnSurveyResultDistribute').show();
                wrapperClass = 'block-private-anonymous';
                $('#checkboxSchool').attr('checked', false);
                $('#checkboxTeacher').attr('checked', false);
                $('#checkboxDistrict').attr('checked', false);
                $('#applyFilter').attr('disabled', true);
                $('#btnPrivateAssign').show();
                $('.content-filter-by-program select').val(null);
                $('.content-filter-by-program select').not('#selectSchool, #selectGrades, #selectPrograms').empty();
                filterStudentResultDT.reload(true);
                break;
            case ASSIGNMENT_TYPE.PrivateIndividualized:
                $('#btnSubmit').text('Assign and Distribute');
                $('#blockPublicIndividualized').hide();
                $('#btnSurveyResultDistribute').show();
                wrapperClass = 'block-private-individualized';
                $('.filter-group-assign').show();
                $('.filter-group-assign .content-filter-by-program').hide();
                $('#checkboxStudent').attr('checked', false);
                $('#checkboxParent').attr('checked', false);
                $('#checkboxSchool').attr('checked', false);
                $('#checkboxTeacher').attr('checked', false);
                $('#checkboxDistrict').attr('checked', false);
                $('#applyFilter').attr('disabled', true);
                $('#btnPrivateAssign').show();
                $('.content-filter-by-program select').val(null);
                $('.content-filter-by-program select').not('#selectSchool, #selectGrades, #selectPrograms').empty();
                filterStudentResultDT.reload(true);
                break;
        }
        $('#generateContent').removeClass(removeAndJoinArray(wrapperClasses, wrapperClass)).addClass(wrapperClass);
        CheckValidToAssign();
    }

    function autoSelectSurveyAssignmentType(surveyAssignmentType) {

        switch (surveyAssignmentType) {
            case 1: {
                $("#radioPublicAnonymous").click();
                break;
            }
            case 2: {
                $("#radioPublicIndividualized").click();
                break;
            }
            case 3: {
                $("#radioPrivateAnonymous").click();
                break;
            }
            case 4: {
                $("#radioPrivateIndividualized").click();
                break;
            }
        }

        if (surveyAssignmentType) {
            onChangeAssignmentType(surveyAssignmentType.toString());
        }

    }

    function populateStudentGrades() {
        $('#selectGrades').empty();
        var districtId = $("#selectDistrict").val();
        if (districtId == null) {
            districtId = $("#hdfDistrictId").val();
        }
        $.get('@Url.Action("StudentLookupGetGradesFilter", "StudentLookup")', { districtId: districtId  }, function (grades) {
            addDefaultOption($('#selectGrades'), "grades");
            addSelectListItems($('#selectGrades'), grades);
        });
    }

    function populateStudentProgams() {
        $('#selectPrograms').empty();
        var districtId = $("#selectDistrict").val();
        if (districtId == null) {
            districtId = $("#hdfDistrictId").val();
        }
        $.get('@Url.Action("GetSurveyProgram", "AssignSurvey")', { districtId: districtId }, function (programs) {
            addDefaultOption($('#selectPrograms'), "programs");
            addSelectListItems($('#selectPrograms'), programs);
        });
    }
</script>

<script>

    //TODO: Check Valid Assign
    function CheckValidToAssign() {
        // Check Selected Test
        var testId = $('#selectSurvey').val();
        var termId = $('#selectDistrictTerm').val();
        var parrams = assignResultDT.getFilterParrams();
        if (parrams.districtId > 0 && parrams.bankId > 0 && parrams.surveyId > 0 && parrams.districtTermId > 0) {
            $('#assignment-grid').show();
            assignResultDT.reload();
        } else {
            $('#assignment-grid').hide();
        }
        if (testId == 'select' || testId == '' || testId == null) {
            $('#btnSubmit').disableBt();
            $('#btnPreview').disableBt();
            $('#btnPrivateAssign').disableBt();
            $('#btnSubmitPublicIndividualized').disableBt();
            return;
        }
        if (termId == 'select' || termId == '' || termId == null) {
            $('#btnSubmit').disableBt();
            $('#btnPrivateAssign').disableBt();
            return
        }
        $('#btnPreview').enableBt();
        // check validate
        var termId = $('#selectDistrictTerm').val();
        var assignmentType = $('input[name=assignmentType]:checked').val();
        switch (assignmentType) {
            case ASSIGNMENT_TYPE.PublicAnonymous:
                if (testId > 0 && termId > 0) {
                    $('#btnSubmit').enableBt();
                }
                break;
            case ASSIGNMENT_TYPE.PublicIndividualized:
                if (testId > 0 && termId > 0) {
                    $('#btnSubmit').enableBt();
                    $('#btnSubmitPublicIndividualized').enableBt();
                }
                break;
            case ASSIGNMENT_TYPE.PrivateAnonymous:
                if (testId > 0 && termId > 0) {
                    $('#btnSubmit').enableBt();
                    $('#btnPrivateAssign').enableBt();
                }
                break;
            case ASSIGNMENT_TYPE.PrivateIndividualized:
                if (testId > 0 && termId > 0) {
                    $('#btnSubmit').enableBt();
                    $('#btnPrivateAssign').enableBt();
                }
                break;
        }
    }

    function GetAssignmentData(assignmentType) {
        var numberOfCode = 0;
        var assignUserIds = []
        switch (assignmentType.toString()) {
            case ASSIGNMENT_TYPE.PublicAnonymous:
                break;
            case ASSIGNMENT_TYPE.PublicIndividualized:
                numberOfCode = $('input[name=generateExtraCodeNumber]').val();
                numberOfCode = parseInt(numberOfCode || 0);
                break;
            case ASSIGNMENT_TYPE.PrivateAnonymous:
            case ASSIGNMENT_TYPE.PrivateIndividualized:
                assignUserIds = filterStudentResultDT.getSelected();
                break;
        }
        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }
        var vdata = {
            TestName: $("#selectSurvey option:selected").text(),
            StateId: $('#selectState').val(),
            DistrictId: districtId,
            BankId: $('#selectBank').val(),
            TestId: $('#selectSurvey').val(),
            DistrictTermId: $('#selectDistrictTerm').val(),
            SurveyAssignmentType: assignmentType,
            AssignUserIds: assignUserIds,
            NumberOfCode: numberOfCode
        };
        return { data: vdata };
    }

    function ReplaceLocalTime() {
        //Set Local Time
        $('.toLocalTime').each(function () {
            var element = $(this);
            var currentValue = element.text().trim();

            var localTimeUtc = moment.utc(currentValue).toDate();

            element.html(displayDateWithFormat(localTimeUtc.valueOf(), true));
        });
    }
</script>

<script>
    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }
    function hideModalDialogBG() {
        $('.ui-widget-overlay').remove();
    }
    function removeAndJoinArray(arr, text) {
        return arr.filter(function (item) { return item != text }).join(' ');
    }
</script>

<script>
    function handleAssignPublicAnonymous() {
        var data = GetAssignmentData(ASSIGNMENT_TYPE.PublicAnonymous);
        $('#btnSubmit').disableBt();
        ShowBlock($('#generateContent'), 'Survey Assigning');
        var url = '@Url.Action("AssignPublicAnonymous", "AssignSurvey")';
        handleAssignProccess(url, data);
    }
    function handleAssignPublicIndividualized() {
        var data = GetAssignmentData(ASSIGNMENT_TYPE.PublicIndividualized);
        if (data.data.NumberOfCode <= 0) {
            CustomAlert("Number code generate should be greater than 0.");
            return;
        }
        $('#btnSubmit').disableBt();
        $('#btnSubmitPublicIndividualized').disableBt();
        var waitingMessage = data.data.NumberOfCode >= 2 ? "This assignment may take a few minutes, please do not leave this page until it completes" : "Survey Assigning";
        ShowBlock($('#generateContent'), waitingMessage);
        var url = '@Url.Action("AssignPublicIndividualized", "AssignSurvey")';
        var callbacks = {
            complete: function () {
                $('#generateContent').unblock();
                $('#btnSubmit').enableBt();
                $('#btnSubmitPublicIndividualized').enableBt();
            }
        }
        handleAssignProccess(url, data, callbacks);
    }

    function handleAssignPrivate() {
        var type = $('input[name=assignmentType]:checked').val();
        var data = GetAssignmentData(type);
        if (!data.data.AssignUserIds.length) {
            CustomAlert("Please select at least 1 user.");
            return;
        }
        $('#btnSubmit').disableBt();
        ShowBlock($('#generateContent'), 'Survey Assigning');
        var url = '@Url.Action("AssignPrivate", "AssignSurvey")';
        handleAssignProccess(url, data);
    }

    function handleAssignAndDistributePrivate() {
        var type = $('input[name=assignmentType]:checked').val();
        var data = GetAssignmentData(type);
        if (!data.data.AssignUserIds.length) {
            CustomAlert("Please select at least 1 user.");
            return;
        }
        $('#btnSubmit').disableBt();
        ShowBlock($('#generateContent'), 'Survey Assign & Distributing');
        var url = '@Url.Action("AssignAndDistributePrivate", "AssignSurvey")';
        handleAssignProccess(url, data);
    }

    function handleAssignProccess(url, data, callbacks) {
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(data),
            cache: false,
            success: function (response) {
                var checkboxes = $('#filterStudentResultDataTable').find(':checkbox');;
                if (typeof checkboxes !== "undefined") {
                    checkboxes.prop('checked', false);
                }
                filterStudentResultDT.reload(true);
                if (callbacks && callbacks.success && typeof callbacks.success == 'function') {
                    callbacks.success(response);
                    return;
                }
                if (response.Success) {
                    assignResultDT.reload();
                } else if (response.Message) {
                    CustomAlert(response.Message);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                if (callbacks && callbacks.error && typeof callbacks.error == 'function') {
                    callbacks.error(XMLHttpRequest, textStatus, errorThrown);
                    return;
                }
                if (XMLHttpRequest.status === 504) {
                    CustomAlert("This assignment will continue to generate. Please allow a few minutes for the process to complete.");
                }
                else {
                    CustomAlert(errorThrown);
                }

            },
            failure: function (response) {
                if (callbacks && callbacks.failure && typeof callbacks.failure == 'function') {
                    callbacks.failure(response);
                    return;
                }
                CustomAlert(response);
            },
            complete: function () {
                if (callbacks && callbacks.complete && typeof callbacks.complete == 'function') {
                    callbacks.complete();
                    return;
                }
                $('#generateContent').unblock();
                $('#btnSubmit').enableBt();
            }
        });
    }
</script>
