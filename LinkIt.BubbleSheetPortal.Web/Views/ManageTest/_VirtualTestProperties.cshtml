@using LinkIt.BubbleSheetPortal.Common
<style>
     #divVirtualTestProperties button {
         width: 125px;
         padding-left: 0;
         padding-right: 0;
         display: inline;
     }
 </style>
<style type="text/css">

    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
        /*top: 100px !important;*/
        height: auto !important;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

</style>

<script src="@Url.Content("~/Scripts/TestPreferences/testPreferences.js")" type="text/javascript"></script>

@model LinkIt.BubbleSheetPortal.Web.ViewModels.TestPropertiesViewModel
<article class="container_12" style="width: 100%">
    <section class="grid_12" style="width: 93%">
        <div class="block-border" style="width: 100%">
            <div class="block-content form form-properties">
                <h1>Test Properties</h1>
                <ul style="display: none" id="update-error-messages" class="message error"></ul>
                <div class="no-margin last-child">
                    <table class="datatable table no-margin" width="100%">
                        <tr>
                            <td colspan="2">
                                @Html.TextAreaFor(x => x.TestName, new { @class = "full-width", tabindex = 1, rows = 2 })
                                @Html.ValidationMessageFor(x => x.TestName, " ")
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Created Date:
                            </td>
                            <td>
                                @if (!Model.CreatedDate.Equals(DateTime.MinValue))
                                {
                                    <text>
                                        @Model.CreatedDate.DisplayDateWithFormat()
                                    </text>
                                }

                            </td>
                        </tr>
                        <tr>
                            <td>
                                Updated Date:
                            </td>
                            <td>
                                @if (!Model.UpdatedDate.Equals(DateTime.MinValue))
                                {
                                    <text>
                                        @Model.UpdatedDate.DisplayDateWithFormat()
                                    </text>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Created By:
                            </td>
                            <td>
                                @Model.CreatedBy
                            </td>
                        </tr>
                        <tr>
                            <td>
                                # of Questions:
                            </td>
                            <td>
                                @Model.TotalQuestion
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Total Points Possible:
                            </td>
                            <td>
                                @Model.TotalPointsPossible
                            </td>
                        </tr>
                        <tr>
                            <td>
                                # of Test Results:
                            </td>
                            <td>
                                @Model.TotalTestResult
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Earliest Result Date:
                            </td>
                            <td>
                                @if (!Model.EarliestResultDate.Equals(DateTime.MinValue))
                                {
                                    <text>
                                        @Model.EarliestResultDate.DisplayDateWithFormat()
                                    </text>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Most Recent Result Date:
                            </td>
                            <td>
                                @if (!Model.MostRecentResultDate.Equals(DateTime.MinValue))
                                {
                                    <text>
                                        @Model.MostRecentResultDate.DisplayDateWithFormat()
                                    </text>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <div>
                                    <div style="float: left;">
                                        <button id="btnSaveTestProperties" onclick="SaveTestProperty('@Model.TestId');"> Save Changes</button>
                                    </div>
                                    <div style="float: right">

                                    </div>
                                </div>
                                <div class="clear10"></div>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <button id="btnOpenVirtualTest" style="width: 50px">Open</button>
                                <button id="btnMoveCopyVirtualTest" style="width: 100px;">Move/Copy</button>
                                <button @(Model.HasRetakeRequest ? "disabled" : "") id="btnDeleteVirtualTest" style="width: 100px" onclick="popUpConfirmDeleteVirtualTest('@Model.TestId');">Delete</button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <button id="btnPreviewOnline" style="width: 127px; display: none">
                                    Preview Online
                                </button>
                                @if (Model.RestrictionAccessList != null && Model.RestrictionAccessList.AllowToPrint)
                                {
                                    <button id="btnPrintTest" style="width: 105px">Print Test</button>
                                }
                                <button id="btnPreferencesTest" style="width: 148px">Test Preferences</button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" id="tdmanageraccess">
                                <button onclick="displayManageerAccessVirtualTestForm()" id="btnPreviewOnline" style="width: 127px;">Manage Access</button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </section>
</article>

<style>
    .group1 {
        display: inline-block;
        width: 48%;
        vertical-align: top;
    }
    .group1 button,.group2 button {
        display: block;
        margin-bottom: 6px;
    }
    .group2 {
        display: inline-block;
        width: 48%;
        vertical-align: top;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        var linkitProtocol = window.location.protocol;
        var linkitHostname = window.location.hostname;

        MKEditor = {
            imgUrl: "../../Content/themes/TestMaker/",
            audioUrl: "/PassageEditor/AudioUpload/",
            objectId: '0',
            loadAudioUrl: linkitProtocol + "//" + linkitHostname + "/PassageEditor/GetAudio",
            imgUpload: "/PassageEditor/ImageUpload/",
            GetViewReferenceImg: linkitProtocol + "//" + linkitHostname + '/TestAssignmentRegrader/GetViewReferenceImg?imgPath=' //This is config for view image on test maker
        };
    });
</script>
<script>
        function displayManageerAccessVirtualTestForm() {
        var worker = $('<div />');
        var bankId = $("#SelectedTestBankId").val();
        //alert(bankId);
        var virtualtestid = '@Model.TestId';
        worker
            .addClass("dialog")
           .attr("id", "ManageerAccessVirtualTestForm")
           .appendTo("body")
            .load('@Url.Action("LoadVirtualTestRestrictionForm")/?bankId=' + bankId + '&testId=' + virtualtestid, function() {
           worker.dialog({
               title: $(this).attr("Virtual Test Access Retriction"),
                close: function() {
                    $('.ui-widget-overlay').remove();
                   $(this).remove();
                    //refreshTestBankProperties();
                },
                modal: false,
               width: 750,
                resizable: false,
                position: ['top', 100]
            });
        });

       showModalDialogBG(); //defined in Index.cshtml
    }


    var testPreferenceModel = null;
    $(function () {
        $('#btnPrintTest').click(function() {
            PopupPrintTest(@Model.TestId);
        });
    });

    function PopupPrintTest(virtualTestID) {
        ShowBlock($('#divVirtualTestProperties'), 'Loading');
        var districtId = $("#selectDistrict").val();

        if (!districtId) districtId = 0;
        var url = '@Url.Action("PrintVirtualTest", "PrintTest")';
        url += '?districtID=' + districtId+'&testId=' + virtualTestID;

        $.ajax({
            url: url,
            cache: false
        }).done(function (html) {
            $('#divVirtualTestProperties').unblock();
            $('body').append('<div id="PrintVirtualTestPanel" class="dialog"></div>');
            $("#PrintVirtualTestPanel").append(html);
            $('#PrintVirtualTestPanel').dialog({
                title: "",
                open: function () {

                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }

                    //Create overlay for popup
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                },
                beforeclose: function () {
                    return true;
                },
                close: function () {
                    $('#PrintVirtualTestPanel').remove();
                    $("body .my-overlay").remove();
                },
                modal: false,
                width: 1006,
                resizable: false
            });

        });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    }


</script>
<script>

    var IsShowManagerAccess =@ViewBag.IsShowManagerAccess;
    if (IsShowManagerAccess) {
        $("#tdmanageraccess").show();
    }
    else
        $("#tdmanageraccess").hide();
    $('#btnOpenVirtualTest').die('click');
    $('#btnOpenVirtualTest').click(function () {
        var virtualTestId = '@Model.TestId';
        var districtId = $("#selectDistrict").val();
        var url = '@Url.Action("Index","VirtualTest")?virtualTestId=' + virtualTestId;//+ '&virtualTestName=' + virtualTestName;//no transfer virtualName, error when virtualName contains special characters such as ' &# <a>
        if (districtId) {
            url += '&districtId=' + districtId;
        }
        window.location.href = url;
    });

    $('#btnMoveCopyVirtualTest').click(function () {
        var virtualTestId = '@Model.TestId';
        var virtualTestName = '@Model.TestName';
        var url = '@Url.Action("LoadMoveVirtualTest", "ManageTest")?virtualTestId=' + virtualTestId + '&virtualTestName=' + virtualTestName;
        $.ajax(
            {
                url: url,
                cache: false
            })
            .done(function (html) {
                $("#divOnTop").append('<div id="PopupMoveCopyVirtualTest" class="dialog"></div>');
                $("#PopupMoveCopyVirtualTest").append(html);
                $('#PopupMoveCopyVirtualTest').dialog({
                    title: "",
                    open: function () {
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        //TODO if you want do anything after close popup.
                        return true;
                    },
                    close: function () {
                        $('#dataTableVirtualTest').dataTable().fnDraw(false);
                        $('#PopupMoveCopyVirtualTest').remove();
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 750,
                    resizable: false
                });

            });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    });

    //TODO: change code open popup change preferences
    $('#btnPreferencesTest').die('click');
    $('#btnPreferencesTest').click(function () {
        ShowBlock($('#divPropertiy'), 'Loading');
        var virtualTestId = '@Model.TestId';
        var url = '@Url.Action("TestSettingForTestProperty", "TestAssignment")';
        url += '?testId=' + virtualTestId;

        $.ajax({
            url: url,
            cache: false
        }).done(function (html) {
            $('#divPropertiy').unblock();

            $('body').append('<div id="divTestSettingTestPropertyPanel" class="dialog"></div>');
            $("#divTestSettingTestPropertyPanel").append(html);
            $('#divTestSettingTestPropertyPanel').dialog({
                title: "",
                open: function () {
                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }
                    //Create overlay for popup
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                },
                beforeclose: function () {
                    return true;
                },
                close: function () {
                    $('#divTestSettingTestPropertyPanel').remove();
                    $("body .my-overlay").remove();
                },
                modal: false,
                width: 1006,
                resizable: false
            });
        });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    });

    function alertMessageSetting(message) {
        var oldzIndex = $('#divContentTestSettingTestProperty').parent('.ui-dialog').css('z-index');
        $('#divContentTestSettingTestProperty').parent('.ui-dialog').css({ 'z-index': '1000' });
        var overlayHeight = $('.my-overlayy').height();
        //set the height for overlay
        $('.my-overlay').height(2000);

        var okButton = '<button style="width:63px;" onclick="closeAlert();">OK</button>';

        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + okButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#divContentTestSettingTestProperty').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value
                    $('.my-overlay').height(overlayHeight);
                    $(this).remove();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });

        showModalDialogBG();
    }

    function closeAlert() {
        $('#divContentTestSettingTestProperty').unblock();
        $('#alertDialog').dialog('close');
    }

    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

    const genSectionSettings = (tag_key, section, option_or_tool_tag) => {
        let timeLimitParams = [
            {
                "Key": "sectionId",
                "Value": `${section.VirtualSectionId}`
            },
            {
                "Key": "duration",
                "Value": section[option_or_tool_tag][`duration_${tag_key}`]
            },
            {
                "Key": "timeLimitDurationType",
                "Value": section[option_or_tool_tag][`timeLimitDurationType_${tag_key}`]
            },
            {
                "Key": "on",
                "Value": section[option_or_tool_tag][tag_key] == "1" ? "1" : "0"
            },
            {
                "Key": "lock",
                "Value": section[option_or_tool_tag][`chklock_${tag_key}`]
            }
        ]
        let onOffParams = [
            {
                "Key": "sectionId",
                "Value": `${section.VirtualSectionId}`
            },
            {
                "Key": "on",
                "Value": `${section[option_or_tool_tag][tag_key]}`
                //"Value": section[option_or_tool_tag][tag_key] == "1" ? "1" : "0"
            },
            {
                "Key": "lock",
                "Value": section[option_or_tool_tag][`chklock_${tag_key}`]
            }
        ]

        return tag_key == 'timeLimitSectionItems' ? timeLimitParams : onOffParams
    }

    const updateSectionsAttrsOfCurrentTags = (tags, option_or_tool_tag) => {
        let customTags = tags.map(tag => {
            return  {
                "Key": tag.Key,
                "Value": "",
                "Attributes": [],
                "SectionItems": [
                //section list
                    ...customSectionsSettting.map(section => ({
                                "Key": "sectionItem",
                                "Value": "",
                                "SectionItems": [],
                                "Attributes": genSectionSettings(tag.Key, section, option_or_tool_tag)
                    }))
                ]
            }
        })

        return customTags
    }

    const customDataHaveSectionsItem = () => {
        let optionTagsRemoveItems = testPreferenceModel.OptionTags.filter(opt => !opt.Key.includes("SectionItems"))
        let toolTagsRemoveItems = testPreferenceModel.ToolTags.filter(opt => !opt.Key.includes("SectionItems"))
        let currentOptionTags = sectionsOptionsToolsTags.filter( a => ["timeLimitSectionItems", 'mustAnswerAllQuestionsSectionItems'].includes(a.Key) )
        let currentToolTags = sectionsOptionsToolsTags.filter( a => !["timeLimitSectionItems", 'mustAnswerAllQuestionsSectionItems'].includes(a.Key) )

        let getUpdatedValsCurrentOptionTags = updateSectionsAttrsOfCurrentTags(currentOptionTags, 'option_tags')
        let getUpdatedValsCurrentToolTags = updateSectionsAttrsOfCurrentTags(currentToolTags, 'tool_tags')

        return {
            OptionTags: [...optionTagsRemoveItems, ...getUpdatedValsCurrentOptionTags],
            ToolTags:  [...toolTagsRemoveItems, ...getUpdatedValsCurrentToolTags]
        }
    }

    function customDataSectionAvailability() {
        let currentChecked = $("input[name='sectionAvailability']:checked").val()
        let sectionAvailability = testPreferenceModel.OptionTags.filter(o => o.Key == "sectionAvailability")[0]

        if (!sectionAvailability) {
            testPreferenceModel.OptionTags.push({
                "Key": "sectionAvailability",
                "Value": "",
                "Attributes": [],
                "SectionItems": []
            })

            sectionAvailability = testPreferenceModel.OptionTags.filter(o => o.Key == "sectionAvailability")[0]
        }

        let sectionItems = testSections.map(s => (
            {
                "Key": "sectionItem",
                "Value": "",
                "Attributes": [
                    {
                    "Key": "sectionId",
                    "Value": `${s.VirtualSectionId}`
                    },
                    {
                    "Key": "open",
                    "Value": `${$(`input[name='section_${s.VirtualSectionId}_open']:checked`).val()}`
                    },
                    {
                    "Key": "lock",
                    "Value": "True"
                    }
                ],
                "SectionItems": []
            }
        ))


        if (currentChecked == 1) {
            sectionAvailability[`SectionItems`] = [...sectionItems]
        } else {
            sectionAvailability[`SectionItems`] = []
        }
        sectionAvailability.Attributes = [
                {
                    "Key": "on",
                    "Value": `${currentChecked}`
                },
                 {
                    "Key": "lock",
                    "Value": `${$(`#chklockSectionAvailability`).is(":checked")}`
                },
        ]
        sectionAvailability.Value = ''

    }

    function customDateTimeLimit() {
        let timeLimitSectionItemsChecked = $(`#timeLimitSectionItems`).is(":checked")
        let deadline = testPreferenceModel.OptionTags.filter(o => o.Key == "deadline")[0]
        let duration = testPreferenceModel.OptionTags.filter(o => o.Key == "duration")[0]
        if (timeLimitSectionItemsChecked) {
            deadline.Value = ''
            duration.Value = '1'
        }
    }

    $('#btnTestSettingTestProperty').die('click').live("click", function () {
        $("#btnTestSettingTestProperty").attr('disabled', true);
        if (!testSchedule.validateTestScheduleForm()) return;

        ShowBlock($('#divContentTestSettingTestProperty'), 'saving');
        var errMsg = UpdateTestPreferenceModel();
        if (errMsg != '') {
            CustomAlert(errMsg);
            $('#divContentTestSettingTestProperty').unblock();
            return;
        }

        if (customSectionsSettting.length > 1) {
            let finalDataCustom = customDataHaveSectionsItem()
            testPreferenceModel = finalDataCustom
            customDataSectionAvailability()
        }

        customDateTimeLimit()

        var data = JSON.stringify({ obj: testPreferenceModel, testId: '@Model.TestId' });

        //Save Test Preferences
        var url = '@Url.Action("SaveTestSettingForTestProperty", "TestAssignment")';
        $.ajax({
            url: url,
            traditional: true,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: data,
            cache: false
        }).done(function (response) {
            $('#divContentTestSettingTestProperty').unblock();
            if (response.success == true) {
                $('#success-message').html('<li style="text-transform:none;font-size:100%"> Preferences have been successfully saved at the test level. </li>');
                $('#success-message').show();
                $('#lastUpdateInfor').empty();
                $('#lastUpdateInfor').append('<label>Last Update: ' + response.inforUpdated.LastUpdatedDate + '</label>');
                $("html, body").animate({ scrollTop: $('#divTestSettingTestPropertyPanel').offset().top });
            }
        });
    });

    $('#btnStudentSettingTestProperty').die('click');
    $('#btnStudentSettingTestProperty').live("click", function () {
        ShowBlock($('#divContentTestSettingTestProperty'), 'saving');
        UpdateStdentPreferenceModel();
        var data = JSON.stringify({ obj: testPreferenceModel, testId: '@Model.TestId' });
        var url = '@Url.Action("SaveStudentSettingForTestProperty", "TestAssignment")';
        $.ajax({
            url: url,
            traditional: true,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: data,
            cache: false
        }).done(function (response) {
            $('#divContentTestSettingTestProperty').unblock();
            if (response.success == true) {
                $('#success-message').html('<li style="text-transform:none;font-size:100%"> Student preferences have been successfully saved at the test level. </li>');
                $('#success-message').show();
                $("html, body").animate({ scrollTop: $('#divTestSettingTestPropertyPanel').offset().top });
            }
        });
    });

    function FillDataStudentPreference() {
        BindOptionToRadioInput('showStandards', 'showStandards');
        BindOptionToRadioInput('showTopics', 'showTopics');
        BindOptionToRadioInput('showSkills', 'showSkills');
        BindOptionToRadioInput('showOther', 'showOther');
        BindOptionToRadioInput('showCorrectAnswers', 'showCorrectAnswers');
        BindOptionToRadioInput('showClassAverages', 'showClassAverages');
        BindOptionToRadioInput('showTest', 'showTest');
    }

    function UpdateStdentPreferenceModel() {
        BindRadioInputToOption('showStandards', 'showStandards');
        BindRadioInputToOption('showTopics', 'showTopics');
        BindRadioInputToOption('showSkills', 'showSkills');
        BindRadioInputToOption('showOther', 'showOther');
        BindRadioInputToOption('showCorrectAnswers', 'showCorrectAnswers');
        BindRadioInputToOption('showClassAverages', 'showClassAverages');
        BindRadioInputToOption('showTest', 'showTest');
    }
</script>
