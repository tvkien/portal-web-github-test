@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Models.DataLocker.EntryResultModel
@{
    ViewBag.Title = "Enter Results";
}
@section meta {
    <script src="@Url.Content("~/Scripts/Lib/fastclick.min.js")"></script>
    <script>
        // Support mobile click avoid case 300ms
        if ('addEventListener' in document) {
            document.addEventListener('DOMContentLoaded', function () {
                FastClick.attach(document.body);
            }, false);
        }
    </script>
}
@BundleHelper.StyleDataLockerEntryResultBundle()
@BundleHelper.ScriptDataLockerEntryResultBundle()
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/RecordRTC.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/RecordRTCBase.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/plugin.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/ckeditor4/ckeditor.js")" type="text/javascript"></script>
<script src="@BundleHelper.Version("~/Scripts/DataLockerEntryResult/Common.js")" type="text/javascript"></script>
<script src="@BundleHelper.Version("~/Scripts/Lib/handsontable/fix-html-cell.js")" type="text/javascript"></script>
<style>
    body {
        min-width: 960px;
        margin: 0 auto;
    }

    .hiddenHeader {
        display: none;
    }

    .field-datepicker {
        font-size: 1.083em;
        padding: 0.385em;
        width: 140px;
    }

    .note {
        cursor: pointer;
        min-width: 70px;
    }

    .checker {
        margin-left: -1px;
    }

    p {
        margin-bottom: 7px;
    }

    .list-artifacts {
        height: auto;
        max-height: 380px;
        overflow-y: auto;
        margin-bottom: 15px;
    }

    .handsontable th:nth-child(2) {
        border-left: none;
    }

    .note-calendar {
        height: 200px;
        padding-left: 270px;
    }

    .handsontable table .image-folder {
        position: relative;
        top: 3px;
    }

    .event a {
        background-color: #42B373 !important;
        background-image: none !important;
        color: #ffffff !important;
    }

    .handsontable table .count-artifacts {
        color: #666;
        font-size: 14px;
        margin-left: 2px;
    }

    .handsontable tr:first-child td {
        border-top: none;
    }

    .ht_master:not(.innerBorderTop) thead tr:last-child th,
    .ht_master:not(.innerBorderTop) ~ .handsontable thead tr:last-child th,
    .ht_master:not(.innerBorderTop) thead tr.lastChild th,
    .ht_master:not(.innerBorderTop) ~ .handsontable thead tr.lastChild th {
        border-bottom-width: 1px;
    }

    .qtip-custom {
        max-width: 400px;
        padding-bottom: 10px;
    }

    .custom-top {
        z-index: 111111111 !important;
    }

        .custom-top .qtip-content {
            max-height: 180px;
            overflow: auto;
        }

    .qtip-content ul,
    .qtip-content ol {
        list-style: initial;
        padding-left: 30px;
    }

    .data-locker-fullscreen .qtip-content {
        max-height: 100px;
        overflow-y: auto;
    }

    .handsontable tr {
        height: 31px;
    }

    #noteDate .ui-state-highlight {
        background: gray;
    }

    .mass-upload {
        display: block;
        margin: 5px auto;
    }

    .handsontable tr th {
        vertical-align: middle;
        background-color: #f3f3f3 !important;
    }

    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
        height: auto !important;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

    .select2-container--open {
        z-index: 99999 !important;
    }

    .icon-test-report .student-results {
        border: 1px solid #219447 !important;
        background: #2abe5b !important;
    }

    .icon-test-report .icon {
        width: 32px;
        min-width: unset;
        height: 32px;
        color: #fff;
        border-radius: 50%;
        margin-right: 16px;
        outline: none;
        text-indent: unset;
        text-align: center;
        padding: 0;
    }

        .icon-test-report .icon .fa-child {
            font-size: 20px;
            display: inline-block;
        }

    .calculator-text {
        display: inline-block;
        font-weight: bold;
        font-size: 12px;
        padding: 2px 8px;
    }

    .text-clickable {
        display: inline-block;
    }

    .cell-color-text {
        display: inline-block;
        font-size: 12px;
        border: 1px solid var(--borderColor);
        padding: 0.7rem;
        vertical-align: middle;
    }
</style>
<article class="container_12" id="studentEntry">
    <section class="grid_12" id="sectionStudentEntry">
        <div class="block-border">
            <div class="block-content">
                <h1>@Model.VirtualTestName &nbsp; @Model.ClassName</h1>
                <div style="float:left">
                    @*<button v-on:click="showRubricDescription" v-bind:disabled="isDisabledViewRubricDescription">View Rubric Description</button>*@
                    <button v-on:click="showRubricDescription" v-bind:disabled="isDisabledViewRubricDescription">@LocalizeHelper.Localized("EnterResult.ViewRubric")</button>
                </div>
                <div class="u-text-right">
                    <span style="display: none" class="icon-test-report" id="btn-student-result">
                        <button onclick="handleNavSR()" data-name="studentResults" title="Student Results" class="btn-icon-select icon student-results u-inline-block">
                            <i class="fas fa-child"></i>
                        </button>
                    </span>
                    <span class="sgo-datetime u-inline-block">
                        <input type="text" name="resultDate" id="resultDate" readonly="readonly" class="field-datepicker needsclick" />
                        <span class="icon-sgo-calendar"></span>
                    </span>
                    @*<button onclick="setResultDate()" class="button-simple-grey">Set Result Date</button>*@
                    <button onclick="setResultDate()" id="setResultDate" class="button-simple-grey">@LocalizeHelper.Localized("EnterResult.SetResultDate")</button>
                    <button class="button-simple-grey button-simple-fs-grey" v-on:click="toggleFullScreen(false)">
                        <span v-html="fullscreen.icon" class="studententry-icon-fullscreen"></span>
                        <span v-text="fullscreen.text"></span>
                    </button>
                </div>
                <br />
                <div>
                    <b>Note:</b> (*) <i>This student has an existing result for this form in another class.</i>
                </div>
                <div name="studentEntryResult" class="student-entry-result u-m-t-10"></div>
                <input type="hidden" id="virtualTestId" value="@Model.VirtualTestId" />
                <input type="hidden" id="classId" value="@Model.ClassId" />
                <input type="hidden" id="studentsIdSelectedString" value="@Model.StudentsIdSelectedString" />
                <div class="u-m-t-15 u-clearfix">
                    <div class="u-w-50" style="width: auto; margin-bottom: 16px;">
                        <button id="btnClearChanges" v-on:click="clearUnsavedChanges(null)">@LocalizeHelper.Localized("EnterResult.ClearChange")</button>
                        <button id="btnCancelEnterResults" v-on:click="toggleCancelEntryResult()">@LocalizeHelper.Localized("EnterResult.Cancel")</button>
                        <button id="btnSaveResults" onclick="preSaveResults();">@LocalizeHelper.Localized("EnterResult.SaveResults")</button>
                        <button id="btnPublish" v-on:click="checkWarningPublishToStudentPortal()" style="display:none">@LocalizeHelper.Localized("EnterResult.Publish")</button>
                        <button id="btnUnPublish" style="display:none">@LocalizeHelper.Localized("EnterResult.UnPublish")</button>
                    </div>
                    <div class="u-text-right">
                    </div>
                    <div class="u-w-50" style="width: auto;">
                        @*<button id="btnPrintResults" v-on:click="checkWarningPrint">Print</button>
                            <button id="btnviewsupportingdocument" v-on:click="viewSupportingDocument" v-bind:disabled="isDisabledViewSupportingDocument">
                            View Supporting Document
                            </button>*@
                        <button id="btnPrintResults" v-on:click="checkWarningPrint()">@LocalizeHelper.Localized("EnterResult.Print")</button>
                        <button class="btn-blue me-3 d-block" id="btnSaveAndCloseResults" onclick="saveAndCloseResults()">Save and Close</button>
                        <button id="btnviewsupportingdocument" v-on:click="viewSupportingDocument" v-bind:disabled="isDisabledViewSupportingDocument">
                            @LocalizeHelper.Localized("EnterResult.ViewDocs")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>
    @Html.Partial("_EnterResultsModalClearAllScore")
    @Html.Partial("_EnterResultsModalCancel")
    @Html.Partial("_EnterResultsModalWarning")
    @Html.Partial("_EnterResultsModalPrint")
    @Html.Partial("_ModalNote")
    @Html.Partial("_ArtifactFolderModal")
    @Html.Partial("_ViewDescriptionModal")
    @Html.Partial("_ModalNoteDate")
    @Html.Partial("_EnterResultsModalWarningChooseStudent")
    @Html.Partial("_EnterResultsModalWarningPublishToPortal")
    @Html.Partial("_ItemPreviewDialog")
    <iframe id="frame"></iframe>
</article>
<div class="block-border dialog" id="dvPublishFormSettingPanel" style="position: static; display: none; padding: 0.8rem;">
    <div class="block-content form " style="padding-top: 0.5rem; background: whitesmoke; z-index: auto; box-shadow: 0 0 0.8em rgb(255 255 255 / 50%); ">
        <fieldset class="grey-bg">
            <legend>Data Locker Publish Preferences</legend>
            <div id="dvPublishFormSetting"></div>
        </fieldset>
    </div>
</div>
@section scripts {
    <script>
   window.global = {
       dateFormat: '@Model.DateFormatModel.HandsonTableDateFormat'
   };
   if (navigator.userAgent.match(/iPad/i)) {
       // Disable pinch zoom on document on iPad
       document.documentElement.addEventListener('touchstart', function(event) {
           if (event.touches.length > 1) {
               event.preventDefault();
           }
       }, false);
       // Disable double tap on document on iPad
       var lastTouchEnd = 0;
       document.documentElement.addEventListener('touchend', function(event) {
           var now = (new Date()).getTime();
           if (now - lastTouchEnd <= 300) {
               event.preventDefault();
           }
           lastTouchEnd = now;
       }, false);
   }
   setInterval('document.body.style.zoom=1', 1);
   var viewport = document.createElement('meta');
   viewport.id = 'viewport';
   viewport.name = 'viewport';
   viewport.content = 'width=device-width, initial-scale=1';
   document.body.parentElement.children[0].appendChild(viewport);

    </script>
    <script src=@BundleHelper.Version("~/Scripts/edm-helper.js")></script>
    <script src=@BundleHelper.Version("/Scripts/DataLockerEntryResult/App.js")></script>
    <script src=@BundleHelper.Version("/Scripts/DataLockerEntryResult/DataLockerEnterResult.js")></script>
    <script>
   StudentEntryModel.generatePdfUrl = '@Url.Action("GeneratePdf")';
   StudentEntryModel.downloadSupportDocumentUrl = '@Url.Action("DownloadRubricFile", "Notification")' + '?key=';
   StudentEntryModel.virtualTestId = '@Model.VirtualTestId';
   StudentEntryModel.classId = '@Model.ClassId';
   StudentEntryModel.studentsIdSelectedString = '@Model.StudentsIdSelectedString';
   StudentEntryModel.virtualtestFileKey = '@Model.VirtualtestFileKey';
   StudentEntryModel.rubricDescriptionContent = @Html.Raw(Json.Encode(Model.RubricDescription));

   window.onbeforeunload = function(e) {
       if (checkUnsavedData(true) && !isSaveAndClose) {
           return "";
       } else {
           return null;
       }
   };

   function checkUnsavedData() {
       if (hansonStudentData && oldHandsonStudentData) {
           return oldHandsonStudentData != JSON.stringify(hansonStudentData);
       }
       return false;
   }

   CKEDITOR.replace('editor1', {
       toolbar: [
           ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
       ],
       removePlugins: 'elementspath',
       on: {
           key: function(evt) {
               var currentLength = $('<div>' + this.getData() + '</div>').text().length;
               var maxLength = 1001;
               var skipCheck = false;
               var keycode = evt.data.keyCode;

               if (keycode === 8 || keycode === 13 || keycode === 46 ||
                   keycode === 37 || keycode === 38 || keycode === 39 || keycode === 40) {
                   skipCheck = true;
               }

               if ((currentLength >= parseInt(maxLength) && skipCheck === false) || keycode === 1114129) {
                   return false;
               }
           },

       }
   });

   CKEDITOR.replace('editorNoteDate', {
       toolbar: [
           ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
       ],
       removePlugins: 'elementspath',
       on: {
           key: function(evt) {
               var currentLength = $('<div>' + this.getData() + '</div>').text().length;
               var maxLength = 1001;
               var skipCheck = false;
               var keycode = evt.data.keyCode;

               if (keycode === 8 || keycode === 13 || keycode === 46 ||
                   keycode === 37 || keycode === 38 || keycode === 39 || keycode === 40) {
                   skipCheck = true;
               }

               if ((currentLength >= parseInt(maxLength) && skipCheck === false) || keycode === 1114129) {
                   return false;
               }
           },

       }
   });

   function confirmClearAllScore() {
       var $sectionStudentEntry = $('#sectionStudentEntry');
       $.each(hansonStudentData, function(i, item) {
           if (!!item.overallScore) {
               item.overallScore.ResultDateString = '';
               item.overallScore.ResultDate = '';
               item.overallScore.ScorePercent = null;
               item.overallScore.ScorePercentage = null;
               item.overallScore.ScoreRaw = null;
               item.overallScore.ScoreScaled = null;
               item.overallScore.ScoreCustomN_1 = null;
               item.overallScore.ScoreCustomN_2 = null;
               item.overallScore.ScoreCustomN_3 = null;
               item.overallScore.ScoreCustomN_4 = null;
               item.overallScore.ScoreCustomA_1 = '';
               item.overallScore.ScoreCustomA_2 = '';
               item.overallScore.ScoreCustomA_3 = '';
               item.overallScore.ScoreCustomA_4 = '';
               item.overallScore.Artifacts = [];
               item.overallScore.Notes = [];
           }

           for (var j = 0; j < subScoreLength; j++) {
               var name = "subScore_" + j;
               if (hansonStudentData[i][name] != 'undefined') {
                   if (!!item[name]) {
                       item[name].ScorePercent = null;
                       item[name].ScorePercentage = null;
                       item[name].ScoreRaw = null;
                       item[name].ScoreScaled = null;
                       item[name].ScoreCustomN_1 = null;
                       item[name].ScoreCustomN_2 = null;
                       item[name].ScoreCustomN_3 = null;
                       item[name].ScoreCustomN_4 = null;
                       item[name].ScoreCustomA_1 = '';
                       item[name].ScoreCustomA_2 = '';
                       item[name].ScoreCustomA_3 = '';
                       item[name].ScoreCustomA_4 = '';
                       item[name].Artifacts = [];
                       item[name].Notes = [];
                   }
               }
           }
           StudentEntryModel.resetArtifactModalData();
       });

       if (hansonStudentData.length) {
           var hotStudentEntryResult = $('div[name="studentEntryResult"]').handsontable('getInstance');
           Vue.nextTick(function() {
               var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
               var arrData = [];
               for (var m = 0; m < hansonStudentData.length; m++) {
                   hansonStudentData[m].overallScore.ResultDate = moment(moment(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
                   arrData.push([m, 0, false]);
               }
               $('div[name="studentEntryResult"]').handsontable('setDataAtCell', arrData);
               $('input.checker').attr('checked', false);

               hotStudentEntryResult.loadData(hansonStudentData);
               $sectionStudentEntry.find('div[name="studentEntryResult"] td').qtip('destroy', true);
               afterScrollUpdateTooltip();
               $('div[name="studentEntryResult"]').handsontable('deselectCell');
               $sectionStudentEntry.unblock();
           });
       }
   }

   function convertToDecimal(input) {
       if (typeof input === 'undefined' || input === null || input === "") {
           return null;
       }
       if (input.toString().indexOf(".") != -1) {
           var arr = input.toString().split('.');
           return parseFloat(input).toFixed(arr[1].length);
       }
       return parseFloat(input).toString();
   }

   function preSaveResults() {
       var $studentEntryResult = $('.student-entry-result');
       if ($studentEntryResult.find('td.htInvalid').length) {
           StudentEntryModel.isShowModalWarning = false;
           StudentEntryModel.isShowModalPrint = true;
           StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
           return;
       }
       var interval = setInterval(function() {
           if (completedChange) {
               saveResults();
               clearInterval(interval);
               completedChange = false;
           }
       }, 500);
   }

   function publichToStudentPortal() {
       var virtualTestId = $('#virtualTestId').val();
       var classId = '@Model.ClassId';
       var url = '@Url.Action("LoadPublishForm", "DataLockerEntryResult")?virtualTestId=' + virtualTestId + '&classId=' + classId + '&isOldUI=true';
       $.ajax(
       {
           url: url,
           cache: false
       })
       .done(function(html) {
            $("#dvPublishFormSetting").html(html);
               $('#dvPublishFormSettingPanel').show();
               $('#dvPublishFormSettingPanel').dialog({
                   title: "",
                   open: function () {
                       //If width of popup gt window width popup auto show on the left
                       var currentPopup = $(this);
                       if (currentPopup.width() > $(window).width()) {
                           currentPopup.parent().css({ "left": "0" });
                       }
                       //Create overlay for popup
                       $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                   },
                   beforeclose: function () {
                       //TODO if you want do anything after close popup.
                       return true;
                   },
                   close: function () {
                       /* $('#dataTableVirtualTest').dataTable().fnDraw(false);*/
                       $('#dvDataLockerSettingPanel').hide();
                       $("body .my-overlay").remove();
                   },
                   modal: false,
                   width: 750,
                   resizable: false
               });
           });
           $(".close").unbind("click");
           $(".close").live("click", function(e) {
           e.preventDefault();
        });
    };

   $('#btnUnPublish').click(function () {
       var valueOject = JSON.stringify({ virtualTestID: $('#virtualTestId').val(), classID = @Model.ClassId });
       var count = 0;
       var numberOfRequest = 2;
       function processData() {
           ++count === numberOfRequest && loadStudentEntryResult();
       }
       $.ajax({
           type: 'POST',
           url: '@Url.Action("UnPublishDataLockerPreference", "DataLockerForStudent")',
           contentType: 'application/json',
           dataType: "json",
           data: valueOject,
           success: function (response) {
               if (response.success == true) {
                   processData();
               } else {
                   $('#error-messages').show();
                   $('#error-messages').html('<li>' + response.error + '</li>');
               }
           }
       });
       autoSaveResults(processData);
   });

   function isValidStudentEntry() {
       return $('.student-entry-result').find('td.htInvalid').length === 0;
   }

   function saveResults(options) {
       return new Promise(function (resolve, reject) {
           if (!isValidStudentEntry()) {
               StudentEntryModel.isShowModalWarning = false;
               StudentEntryModel.isShowModalWarningPublishToPortal = false;
               StudentEntryModel.isShowModalPrint = true;
               StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
               return;
           }
           var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
           var postData = [];
           $.each(hansonStudentData, function(k, item) {
               var inputData = {};
               var overallScore = JSON.parse(JSON.stringify(item.overallScore));

               if (overallScore != null) {
                   overallScore.ResultDate = overallScore.ResultDate ?
                       moment(overallScore.ResultDate, resultDateFormat).format('YYYY-MM-DD') :
                       '';
                   overallScore.ScorePercent = convertToDecimal(overallScore.ScorePercent);
                   overallScore.ScorePercentage = convertToDecimal(overallScore.ScorePercentage);
                   overallScore.ScoreRaw = convertToDecimal(overallScore.ScoreRaw);
                   overallScore.ScoreScaled = convertToDecimal(overallScore.ScoreScaled);
                   overallScore.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1"));
                   overallScore.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2"));
                   overallScore.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3"));
                   overallScore.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4"));
               }

               var subScores = [];
               for (var i = 0; i < subScoreLength; i++) {
                   var name = "subScore_" + i;
                   var subscore = JSON.parse(JSON.stringify(item[name]));
                   if (subscore != null) {
                       subscore.ScorePercent = convertToDecimal(subscore.ScorePercent);
                       subscore.ScorePercentage = convertToDecimal(subscore.ScorePercentage);
                       subscore.ScoreRaw = convertToDecimal(subscore.ScoreRaw);
                       subscore.ScoreScaled = convertToDecimal(subscore.ScoreScaled);
                       subscore.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1"));
                       subscore.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2"));
                       subscore.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3"));
                       subscore.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4"));
                   }

                   subScores.push(subscore);
               }
               inputData["TestResultScore"] = overallScore;
               inputData["TestResultSubScores"] = subScores;
               inputData["VirtualTestCustomScoreId"] = virtualTestCustomScoreId;
               if (inputData.TestResultScore.FullName != null) {
                   postData.push(inputData);
               }
           });

           ShowBlock($("#sectionStudentEntry"), "Save score");

           var studentNumber = 300;
           var isSaveForPublish = options && options.isSaveForPublish || false;
           if (postData.length < studentNumber) {
               $.ajax({
                   type: 'POST',
                   url: '@Url.Action("SaveResults")',
                   contentType: 'application/json',
                   dataType: "json",
                   data: JSON.stringify({ 'scores': postData, isSaveForPublish }),
                   beforeSend: function () {
                       StudentEntryModel.msgInvalid = '';
                       StudentEntryModel.isShowModalWarning = false;
                   },
                   success: function (response) {
                       StudentEntryModel.isShowModalWarningPublishToPortal = false;
                       loadStudentEntryResult(true);
                       resolve(true)
                   }
               });
           }
           else {
               var dataChunk = chunkArray(postData, studentNumber);
               var arr = []
               for (i = 0; i < dataChunk.length; i++) {
                   arr.push(CallSaveResult(dataChunk[i]));
               }
               $.when.apply($, arr).done(function (respones) {
                   if (errorSave !== '') {
                       $('#sectionStudentEntry').unblock();
                       popupAlertMessageV1('alert', 'Something went wrong! Please try again!', 400, 100, 'ClosePopup', '', 'OK');
                   }
                   else {
                       loadStudentEntryResult(true);
                   }
                   resolve(true)
               });
           }
       })
   }

   function ClosePopup() {
       $(document).find('.ui-dialog').remove();
   }


   var errorSave = '';
   function CallSaveResult(data) {
       return $.ajax({
           type: 'POST',
           url: '@Url.Action("SaveResults")',
           contentType: 'application/json',
           dataType: "json",
           data: JSON.stringify({ 'scores': data }),
           beforeSend: function() {
               StudentEntryModel.msgInvalid = '';
               StudentEntryModel.isShowModalWarning = false;
           },
           success: function(response) {
               if (!response.Success) {
                   errorSave = response.Error;
               }
           }
       });
   }

   function chunkArray(myArray, chunk_size) {
       var results = [];

       while (myArray.length) {
           results.push(myArray.splice(0, chunk_size));
       }

       return results;
   }

   function autoSaveResults(cb) {
       if (oldHandsonStudentDataAutoSave === JSON.stringify(hansonStudentData)) {
           if (typeof cb === 'function') cb();
           return;
       }

       var studentTestResultScores = [];
       var studentTestResultSubScores = [];
       var classId = 0;
       var virtualTestId = 0;
       var resultDate = null;
       var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';

       $.each(hansonStudentData, function(k, item) {
           var firstName = item.overallScore.FullName.split(', ')[0];
           var lastName = item.overallScore.FullName.split(', ')[1];
           var studentId = item.overallScore.StudentID;
           var testResultId = item.overallScore.TestResultID;
           var testResultScoreId = item.overallScore.TestResultScoreID;
           virtualTestId = item.overallScore.VirtualTestID;
           classId = item.overallScore.ClassID;

           if (item.overallScore != null) {
               var overallScore = {};
               overallScore.ResultDate = item.overallScore.ResultDate;
               if (overallScore.ResultDate) {
                   var date = moment(overallScore.ResultDate, resultDateFormat);
                   if (date.isValid()) {
                       overallScore.ResultDate = date.format('YYYY-MM-DD');
                   }
               }
               overallScore.ScorePercent = item.overallScore.ScorePercent;
               overallScore.ScorePercentage = item.overallScore.ScorePercentage;
               overallScore.ScoreRaw = item.overallScore.ScoreRaw;
               overallScore.ScoreScaled = item.overallScore.ScoreScaled;
               overallScore.ScoreCustomN_1 = getScoreCustom(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1"));
               overallScore.ScoreCustomN_2 = getScoreCustom(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2"));
               overallScore.ScoreCustomN_3 = getScoreCustom(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3"));
               overallScore.ScoreCustomN_4 = getScoreCustom(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4"));
               overallScore.ScoreCustomA_1 = item.overallScore.ScoreCustomA_1;
               overallScore.ScoreCustomA_2 = item.overallScore.ScoreCustomA_2;
               overallScore.ScoreCustomA_3 = item.overallScore.ScoreCustomA_3;
               overallScore.ScoreCustomA_4 = item.overallScore.ScoreCustomA_4;
               overallScore.Artifacts = item.overallScore.Artifacts;
               overallScore.Notes = item.overallScore.Notes;
               overallScore.LastName = firstName;
               overallScore.FirstName = lastName;
               overallScore.StudentID = studentId;
               overallScore.TestResultID = testResultId;
               overallScore.TestResultScoreID = testResultScoreId;
               overallScore.VirtualTestID = virtualTestId;
               overallScore.ClassID = classId;
               overallScore.Code = item.overallScore.Code;

               studentTestResultScores.push(overallScore);
           }

           for (var i = 0; i < subScoreLength; i++) {
               var name = "subScore_" + i;
               var subscore = item[name];
               if (subscore != null) {

                   var subScoreAutoSave = {}
                   resultDate = subscore.ResultDate;
                   subScoreAutoSave.ResultDate = resultDate ? moment(resultDate, resultDateFormat).format('YYYY-MM-DD') : '';
                   subScoreAutoSave.ScorePercent = subscore.ScorePercent;
                   subScoreAutoSave.ScorePercentage = subscore.ScorePercentage;
                   subScoreAutoSave.ScoreRaw = subscore.ScoreRaw;
                   subScoreAutoSave.ScoreScaled = subscore.ScoreScaled;
                   subScoreAutoSave.ScoreCustomN_1 = getScoreCustom(getValueFromLabelDropdown(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1"));
                   subScoreAutoSave.ScoreCustomN_2 = getScoreCustom(getValueFromLabelDropdown(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2"));
                   subScoreAutoSave.ScoreCustomN_3 = getScoreCustom(getValueFromLabelDropdown(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3"));
                   subScoreAutoSave.ScoreCustomN_4 = getScoreCustom(getValueFromLabelDropdown(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4"));
                   subScoreAutoSave.ScoreCustomA_1 = subscore.ScoreCustomA_1;
                   subScoreAutoSave.ScoreCustomA_2 = subscore.ScoreCustomA_2;
                   subScoreAutoSave.ScoreCustomA_3 = subscore.ScoreCustomA_3;
                   subScoreAutoSave.ScoreCustomA_4 = subscore.ScoreCustomA_4;
                   subScoreAutoSave.Artifacts = subscore.Artifacts;
                   subScoreAutoSave.Notes = subscore.Notes;

                   subScoreAutoSave.StudentID = studentId;
                   subScoreAutoSave.TestResultID = testResultId;
                   subScoreAutoSave.TestResultScoreID = testResultScoreId;
                   subScoreAutoSave.VirtualTestID = virtualTestId;
                   subScoreAutoSave.ClassID = classId;
                   subScoreAutoSave.TestResultScoreSubID = subscore.TestResultScoreSubID;
                   subScoreAutoSave.Name = subscore.Name;
                   subScoreAutoSave.Code = subscore.Code;
                   studentTestResultSubScores.push(subScoreAutoSave);
               }
           }
       });
       $.ajax({
           type: 'POST',
           url: '@Url.Action("AutoSaveResult")',
           contentType: 'application/json',
           dataType: "json",
           data: JSON.stringify({
               'virtualTestId': virtualTestId,
               'classId': classId,
               'studentTestResultScores': JSON.stringify(studentTestResultScores),
               'studentTestResultSubScores': JSON.stringify(studentTestResultSubScores),
               'actualTestResultScoresJson': JSON.stringify(oldHandsonStudentData),
               'resultDate': resultDate
           }),
           success: function(response) {
               if (typeof cb === 'function') cb();
               if (response && response.Success) {
                   oldHandsonStudentDataAutoSave = JSON.stringify(hansonStudentData);
               }
           }
       });
   }

   function getScoreCustom(str) {
       return isNumeric(str) ? convertToDecimal(str) : str;
   }

   function isNumeric(str) {
       if (typeof str !== 'string') return false;
       return !isNaN(str) && !isNaN(parseFloat(str));
   }

   function mousewheelfn(e) {
       if (e.ctrlKey) {
           e.preventDefault();
           e.stopPropagation();
       }
   };

   window.onmousewheel = document.onmousewheel = mousewheelfn;

    </script>
    <script type="text/javascript">
   var oldHandsonStudentData = '';
   var oldHandsonStudentDataAutoSave = '';
   var hansonStudentData = [];
   var colGroupHeaderData = [];
   var colHeaderData = [];
   var columnData = [];
   var metaData = {};
   var virtualTestCustomScoreId = 0;
   var subScoreLength = 0;
   var completedChange = false;
   var numericDropdownCol = [];
   var isShowDupScorePopup = true;
   var isSaveAndClose = false;

   $(function () {
       if ('@Model.AllowChangeResultDate' === "0") {
           $('#setResultDate').prop('disabled', true);
           $('#resultDate').prop('disabled', true);
       }
       setInterval(autoSaveResults, 60000);
       $('#btnPublish').hide();
       $('#btnUnPublish').hide();
       $('.datalocker').addClass('current');
       $('#datalockerEnterResult').addClass('current');

       $('#resultDate').datepicker({
           maxDate: 0,
           dateFormat: jqueryDatePickerFormat(),
           beforeShow: function() {
               $('#ui-datepicker-div').addClass('datepicker-handsontable');
           }
       });

       $('#resultDate').datepicker('setDate', new Date());

       var $studentEntryResult = $('div[name="studentEntryResult"]');
       $studentEntryResult.on('mousedown', 'input.checker', function(event) {
           event.preventDefault();
           var isChecked = $('input.checker').is(':checked');
           var arrData = [];

           for (var m = 0; m < hansonStudentData.length; m++) {
               if (isChecked == false) {
                   arrData.push([m, 0, true]);
               } else {
                   arrData.push([m, 0, false]);
               }
           }
           $studentEntryResult.handsontable('setDataAtCell', arrData);

           if (isChecked == false) {
               $('input.checker').attr('checked', true);
           } else {
               $('input.checker').attr('checked', false);
           }

           $studentEntryResult.handsontable('deselectCell');
       });

       $($('#frame')[0].contentWindow).resize(function() {
           afterInitTooltip();
       });

       $(document.body).on('mouseover', 'th', function () {
           afterInitTooltip();
       });

       $(document.body).on('mouseover', '.autocompleteEditor td', function(e) {
           var text = e.target.innerText;
           $(e.target).attr('title', text);
       });

       $('#noteDate').datepicker({
           changeMonth: true,
           changeYear: true,
           showOn: 'both',
           showOtherMonths: true,
           selectOtherMonths: true,
           dateFormat: 'yy-mm-dd',
           beforeShowDay: function(date) {
               var highlight_dates = [];
               for (var i = 0; i < StudentEntryModel.arrayNoteDate.length; i++) {
                   var dateNote = StudentEntryModel.arrayNoteDate[i].NoteDate;
                   var dayNote = parseInt(dateNote.substring(8, 10));
                   var monthNote = parseInt(dateNote.substring(5, 7));
                   var yearNote = parseInt(dateNote.substring(0, 4));
                   var newNoteDate = dayNote + "-" + monthNote + '-' + yearNote;
                   highlight_dates.push(newNoteDate);
               }

               var month = date.getMonth() + 1;
               var year = date.getFullYear();
               var day = date.getDate();
               var newdate = day + "-" + month + '-' + year;
               if (jQuery.inArray(newdate, highlight_dates) != -1) {
                   return [true, 'event', ''];
               }
               return [true];
           },
           onChangeMonthYear: function(year, month, inst) {
               StudentEntryModel.highlightDatePicker(year);
           },
           onSelect: function(date) {
               StudentEntryModel.noteDate = date;
               StudentEntryModel.loadNoteDate(date);
               StudentEntryModel.highlightDatePicker(date.substring(0, 4));
           }
       });

       $.ajax({
           type: 'POST',
           url: '@Url.Action("CheckAutoSaveData", "DataLockerEntryResult")',
           data: {
               virtualTestId: @Model.VirtualTestId,
               classId: @Model.ClassId
           },
           success: function(hasAutoSaveData) {
               if (hasAutoSaveData) {
                   CustomAlert('There are previously entered results that were not saved. When you click on Save Results, these changes will become permanent. Alternatively, click Clear Changes to remove any unsaved changes.', true);
                   loadStudentEntryResult();
               } else {
                   loadStudentEntryResult();
               }
           }
       });

   });

   function correctDateArtifact(artifact) {
       return artifact.map(function (item) {
           var date = item.UploadDate;
           if (date && date.indexOf('/Date(') > -1) {
               date = moment.utc(+date.replace(/\/Date\((\d+)\)\//g, "$1")).format();
           } else if (!!date) {
               date = moment(date).format();
           }
           return Object.assign({}, item, { UploadDate: date });
       });
   };

   function loadStudentEntryResult(isClearChange) {
       var $sectionStudentEntry = $('#sectionStudentEntry');
       ShowBlock($sectionStudentEntry, 'Loading');
       var studentsIdSelectedString = $('#studentsIdSelectedString').val();
       if (isClearChange) {
           var studentIdArr = hansonStudentData.map(function(stData) {
               return stData["overallScore"]["StudentID"];
           });
           studentsIdSelectedString = studentIdArr.join();
       }
       $.ajax({
           type: 'POST',
           url: '@Url.Action("GetEntryStudents")',
           cache: false,
           data: {
               virtualTestId: $('#virtualTestId').val(),
               classId: $('#classId').val(),
               studentsIdSelectedString: studentsIdSelectedString,
               isOldUI: true
           },
           success: function (response) {
               var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
               var isExistOverallScore = response.CustomScore.ScoreInfos.length > 0 ? true : false;
               hansonStudentData = [];
               virtualTestCustomScoreId = response.CustomScore.VirtualTestCustomScoreId;

               var isResultDateResultScores = false;
               var isDateTimeNull = function(element, index, array) {
                   return element.ResultDate == null && !element.IsAutoSave;
               };

               var studentTestResultScores = JSON.parse(response.StudentTestResultScores);
               var studentTestResultSubScores = JSON.parse(response.StudentTestResultSubScores);
               if (response.Preferences != null) {
                   var preferences =  JSON.parse(response.Preferences?.Value);
                   if (preferences?.PublishingToStudentPortal?.AllowPublishing == 1) {
                       $('#btnPublish').show();
                       $('#btnUnPublish').hide();
                   } else {
                       $('#btnPublish').hide();
                       $('#btnUnPublish').hide();
                   }
               }
               if (response.QTITestClassAssignmentData != null) {
                   $('#btnUnPublish').show();
                   $('#btnPublish').hide();
               }

               const dupScoreStudents = studentTestResultScores.filter(x => x.HasOtherScore).length;
               if (isShowDupScorePopup && dupScoreStudents > 0) {
                   CustomAlert(`${dupScoreStudents} student(s) already have results for this form in another class.<br/><br/>Note: Any newly entered results will NOT override the existing results in other classes. Duplicates may be created.`, true);
                   isShowDupScorePopup = false;
               }

               isResultDateResultScores = studentTestResultScores
                   .filter(function (ele) {
                       return !ele.IsAutoSave;
                   })
                   .every(isDateTimeNull);

               $.each(studentTestResultScores, function(i, item) {
                   var resultDateToday = moment().format(resultDateFormat);
                   var resultDateTemp = item['ResultDate'] || '';
                   if (!!resultDateTemp) {
                       if (resultDateTemp.indexOf('/Date(') > -1) {
                           resultDateTemp = moment.utc(+resultDateTemp.replace(/\/Date\((\d+)\)\//g, "$1")).format(resultDateFormat);
                       }

                       if (moment(resultDateTemp).isValid()) {
                           resultDateTemp = moment.utc(resultDateTemp).format(resultDateFormat);
                       }
                   }

                   var scoreJsonData = {
                       Code: item["Code"],
                       StudentID: item["StudentID"],
                       ClassID: @Model.ClassId,
                       VirtualTestID: @Model.VirtualTestId,
                       DisplayFullName: item["LastName"] + ", " + item["FirstName"] + (item["HasOtherScore"] === true ? "*" : ""),
                       FullName: item["LastName"] + ", " + item["FirstName"],
                       ResultDate: isResultDateResultScores === true && !item['IsAutoSave'] ? resultDateToday : resultDateTemp,
                       TestResultID: item["TestResultID"],
                       TestResultScoreID: item["TestResultScoreID"],
                       ScorePercent: item["ScorePercent"] != null ? "" + item["ScorePercent"] : item["ScorePercent"],
                       ScorePercentage: item["ScorePercentage"] != null ? "" + item["ScorePercentage"] : item["ScorePercentage"],
                       ScoreRaw: item["ScoreRaw"] != null ? "" + item["ScoreRaw"] : item["ScoreRaw"],
                       ScoreScaled: item["ScoreScaled"] != null ? "" + item["ScoreScaled"] : item["ScoreScaled"],
                       ScoreCustomN_1: item["ScoreCustomN_1"] != null ? "" + item["ScoreCustomN_1"] : item["ScoreCustomN_1"],
                       ScoreCustomN_2: item["ScoreCustomN_2"] != null ? "" + item["ScoreCustomN_2"] : item["ScoreCustomN_2"],
                       ScoreCustomN_3: item["ScoreCustomN_3"] != null ? "" + item["ScoreCustomN_3"] : item["ScoreCustomN_3"],
                       ScoreCustomN_4: item["ScoreCustomN_4"] != null ? "" + item["ScoreCustomN_4"] : item["ScoreCustomN_4"],
                       ScoreCustomA_1: item["ScoreCustomA_1"],
                       ScoreCustomA_2: item["ScoreCustomA_2"],
                       ScoreCustomA_3: item["ScoreCustomA_3"],
                       ScoreCustomA_4: item["ScoreCustomA_4"],
                       IsAutoSave: item['IsAutoSave']
                   };

                   if (item.Artifacts && item.Artifacts.length > 0) {
                       scoreJsonData.Artifacts = correctDateArtifact(item.Artifacts);


                   } else {
                       scoreJsonData.Artifacts = [];
                   }

                   if (item.Notes) {
                       for (var i = 0; i < item.Notes.length; i++) {
                           var noteItem = item.Notes[i];
                           scoreJsonData[noteItem["NoteColumnName"]] = noteItem["NoteValue"];
                       }
                       scoreJsonData.Notes = item.Notes;
                   } else {
                       scoreJsonData.Notes = [];
                   }

                   var jsonData = { overallScore: scoreJsonData };

                   if (response.CustomSubScores != 'undefined' && response.CustomSubScores.length > 0) {
                       for (var j = 0; j < response.CustomSubScores.length; j++) {
                           var exist = false;

                           var existCustomSubScore = studentTestResultSubScores.find(function (subItem) {
                               return subItem["StudentID"] == item["StudentID"] && (subItem["Name"] == null || subItem["Name"] == response.CustomSubScores[j]["Name"]);
                           });

                           if (existCustomSubScore) {
                               var subScoreJsonData = {
                                   TestResultScoreSubID: existCustomSubScore["TestResultScoreSubID"],
                                   Name: response.CustomSubScores[j]["Name"],
                                   ScorePercent: existCustomSubScore["ScorePercent"] != null ? "" + existCustomSubScore["ScorePercent"] : existCustomSubScore["ScorePercent"],
                                   ScorePercentage: existCustomSubScore["ScorePercentage"] != null ? "" + existCustomSubScore["ScorePercentage"] : existCustomSubScore["ScorePercentage"],
                                   ScoreRaw: existCustomSubScore["ScoreRaw"] != null ? "" + existCustomSubScore["ScoreRaw"] : existCustomSubScore["ScoreRaw"],
                                   ScoreScaled: existCustomSubScore["ScoreScaled"] != null ? "" + existCustomSubScore["ScoreScaled"] : existCustomSubScore["ScoreScaled"],
                                   ScoreCustomN_1: existCustomSubScore["ScoreCustomN_1"] != null ? "" + existCustomSubScore["ScoreCustomN_1"] : existCustomSubScore["ScoreCustomN_1"],
                                   ScoreCustomN_2: existCustomSubScore["ScoreCustomN_2"] != null ? "" + existCustomSubScore["ScoreCustomN_2"] : existCustomSubScore["ScoreCustomN_2"],
                                   ScoreCustomN_3: existCustomSubScore["ScoreCustomN_3"] != null ? "" + existCustomSubScore["ScoreCustomN_3"] : existCustomSubScore["ScoreCustomN_3"],
                                   ScoreCustomN_4: existCustomSubScore["ScoreCustomN_4"] != null ? "" + existCustomSubScore["ScoreCustomN_4"] : existCustomSubScore["ScoreCustomN_4"],
                                   ScoreCustomA_1: existCustomSubScore["ScoreCustomA_1"],
                                   ScoreCustomA_2: existCustomSubScore["ScoreCustomA_2"],
                                   ScoreCustomA_3: existCustomSubScore["ScoreCustomA_3"],
                                   ScoreCustomA_4: existCustomSubScore["ScoreCustomA_4"]
                               };
                               var name = "subScore_" + j;
                               jsonData[name] = subScoreJsonData;
                               exist = true;

                               if (existCustomSubScore.Artifacts && existCustomSubScore.Artifacts) {
                                   jsonData[name].Artifacts = correctDateArtifact(existCustomSubScore.Artifacts);
                               } else {
                                   jsonData[name].Artifacts = [];
                               }

                               if (existCustomSubScore.Notes) {
                                   for (var i = 0; i < existCustomSubScore.Notes.length; i++) {
                                       var noteItem = existCustomSubScore.Notes[i];
                                       jsonData[name][noteItem["NoteColumnName"]] = noteItem["NoteValue"];
                                   }
                                   jsonData[name].Notes = existCustomSubScore.Notes;
                               } else {
                                   jsonData[name].Notes = [];
                               }
                           } else {
                               var subScoreJsonData = {
                                   TestResultScoreSubID: 0,
                                   Name: response.CustomSubScores[j]["Name"],
                                   ScorePercent: null,
                                   ScorePercentage: null,
                                   ScoreRaw: null,
                                   ScoreScaled: null,
                                   ScoreCustomN_1: null,
                                   ScoreCustomN_2: null,
                                   ScoreCustomN_3: null,
                                   ScoreCustomN_4: null,
                                   ScoreCustomA_1: null,
                                   ScoreCustomA_2: null,
                                   ScoreCustomA_3: null,
                                   ScoreCustomA_4: null,
                                   Artifacts: []
                               };
                               var name = "subScore_" + j;
                               jsonData[name] = subScoreJsonData;
                               jsonData[name].Notes = null;
                           }
                       }
                   }

                   hansonStudentData.push(jsonData);
               });

               columnData = [];
               columnData.push(
                   { data: '', type: 'checkbox', className: 'htCenter htMiddle htCheckBox' },
                   { data: 'overallScore.DisplayFullName', readOnly: true },
                   {
                       data: 'overallScore.ResultDate',
                       type: 'date',
                       datePickerConfig: {
                           maxDate: new Date()
                       },
                       dateFormat: '@Model.DateFormatModel.HandsonTableDateFormat',
                       correctFormat: true,
                       className: 'needsclick',
                       readOnly: '@Model.AllowChangeResultDate' === "0" ? true : false
                   }
               );

               StudentEntryModel.printResult.customScore = response.CustomScore;
               StudentEntryModel.printResult.customSubScores = response.CustomSubScores;

               for (var i = 0, len = response.CustomSubScores.length; i < len; i++) {
                   var scoreSub = StudentEntryModel.printResult.customSubScores[i];

                   scoreSub.ScoreInfos = scoreSub.ScoreInfos.map(function(score) {
                       score.Id = scoreSub.Name + '::' + score.ScoreName;
                       return score;
                   });
               }

               colHeaderData = [
                   '<input type="checkbox" class="checker needsclick">',
                   'Student',
                   'Result Date'
               ];

               colGroupHeaderData.push({
                   label: '',
                   colspan: 3
               });

               if (isExistOverallScore) {
                   colGroupHeaderData.push({
                       label: '<span title="Overall Score">@LocalizeHelper.Localized("EnterResult.OverallScore")</span>',
                       colspan: response.CustomScore.ScoreInfos.length
                   });
               }
               var response = response;
               $.each(response.CustomScore.ScoreInfos, function (i, item) {
                   var scoreName = item['ScoreName'];
                   var scoreLable = item['ScoreLable'];
                   var scoreDescription = item.MetaData != null ? item.MetaData.Description : '';

                   if (!scoreLable) {
                       scoreLable = '';
                   }

                   var scoreFormatNumeric = {
                       'Percent': 'overallScore.ScorePercent',
                       'Percentile': 'overallScore.ScorePercentage',
                       'Raw': 'overallScore.ScoreRaw',
                       'Scaled': 'overallScore.ScoreScaled',
                       'CustomN_1': 'overallScore.ScoreCustomN_1',
                       'CustomN_2': 'overallScore.ScoreCustomN_2',
                       'CustomN_3': 'overallScore.ScoreCustomN_3',
                       'CustomN_4': 'overallScore.ScoreCustomN_4'
                   };

                   var scoreFormatCustomText = {
                       'CustomA_1': 'overallScore.ScoreCustomA_1',
                       'CustomA_2': 'overallScore.ScoreCustomA_2',
                       'CustomA_3': 'overallScore.ScoreCustomA_3',
                       'CustomA_4': 'overallScore.ScoreCustomA_4'
                   };

                   Object.keys(scoreFormatNumeric).forEach(function(score) {
                       if (scoreName == score) {
                           var settings = response.PerformanceBandSettingScores;
                           settings && settings.forEach(function (setting) {
                               if (compareScoreName(scoreName, setting.ScoreType)) {
                                   item.MetaData.ColorRule = {
                                       Bands: setting.Bands,
                                       Color: setting.Color,
                                       Cutoffs: setting.Cutoffs,
                                   }
                               }
                           });
                           formatNumeric(item.MetaData, scoreFormatNumeric[score], scoreLable);
                       }
                   });

                   Object.keys(scoreFormatCustomText).forEach(function(score) {
                       if (scoreName == score) {
                           formatCustomText(item.MetaData, scoreFormatCustomText[score], scoreLable);
                       }
                   });

                   if (scoreName == 'Artifact') {
                       var colName = 'overallScore.ArtifactFileName';
                       if (item.MetaData != null) {
                           metaData[colName] = item.MetaData;
                       }
                       columnData.push({
                           data: colName,
                           renderer: artifactFolderButtonRender,
                           editor: false,
                           disableVisualSelection: true,
                           width: 160,
                           scoreDisplayName: 'Overallscore'
                       });
                   }

                   if (scoreName.indexOf('note') != -1) {
                       var colName = 'overallScore.' + scoreName;
                       if (item.MetaData != null) {
                           metaData[colName] = item.MetaData;
                       }
                       columnData.push({
                           data: colName,
                           renderer: noteButtonRenderer,
                           editor: false,
                           disableVisualSelection: true,
                           label: scoreLable,
                           width: scoreLable.length < 25 ? scoreLable.length * 12 + 30 : 250
                       });
                   }

                   scoreLable = getHeaderString(scoreLable);
                   var massUpload = '<button class="btn-entry-result-score is-small mass-upload u-fw-400" style="margin: auto;">Upload File(s)</button>';
                   if (hasIconInfo(item)) {
                       var isCustomSubScores = false;
                       var infoIcon = buildIconInfo(item, response, isCustomSubScores);
                       var iconInfoContent = '<span class="icon icon-info icon-16 js-info-action with-tip" title="' + infoIcon + '"></span>'
                       if (scoreLable === "Artifact") {
                           if (infoIcon.length) {
                               colHeaderData.push('<span>' + scoreLable + ' ' + iconInfoContent + '</span >' + massUpload);
                           }
                           else {
                               colHeaderData.push(scoreLable + massUpload);
                           }
                       }
                       else {
                           colHeaderData.push('<span>' + scoreLable + iconInfoContent +'</span>');
                       }
                   } else {
                       if (scoreLable === "Artifact") {
                           colHeaderData.push(scoreLable + massUpload);
                       } else {
                           colHeaderData.push(scoreLable);
                       }
                   }
               });

               subScoreLength = 0;

               if (response.CustomSubScores != 'undefined' && response.CustomSubScores.length > 0) {
                   subScoreLength = response.CustomSubScores.length;
                   for (var i = 0; i < subScoreLength; i++) {
                       var subScore = 'subScore_' + i;

                       if (response.CustomSubScores[i].ScoreInfos.length > 0) {
                           colGroupHeaderData.push({
                               label: '<span style="display: inline-block;" title="' + response.CustomSubScores[i].Name + '">' + getHeaderString(response.CustomSubScores[i].Name) +'' + '</span>',
                               colspan: response.CustomSubScores[i].ScoreInfos.length
                           });
                       }

                       $.each(response.CustomSubScores[i].ScoreInfos, function(index, item) {
                           var subScoreName = item['ScoreName'];
                           var subScoreLable = item['ScoreLable'];
                           var subScoreDescription = item.MetaData != null ? item.MetaData.Description : '';

                           if (!subScoreLable) {
                               subScoreLable = '';
                           }

                           var subScoreFormatNumeric = {
                               'Percent': subScore + '.ScorePercent',
                               'Percentile': subScore + '.ScorePercentage',
                               'Raw': subScore + '.ScoreRaw',
                               'Scaled': subScore + '.ScoreScaled',
                               'CustomN_1': subScore + '.ScoreCustomN_1',
                               'CustomN_2': subScore + '.ScoreCustomN_2',
                               'CustomN_3': subScore + '.ScoreCustomN_3',
                               'CustomN_4': subScore + '.ScoreCustomN_4'
                           };

                           var subScoreFormatCustomText = {
                               'CustomA_1': subScore + '.ScoreCustomA_1',
                               'CustomA_2': subScore + '.ScoreCustomA_2',
                               'CustomA_3': subScore + '.ScoreCustomA_3',
                               'CustomA_4': subScore + '.ScoreCustomA_4'
                           };

                           Object.keys(subScoreFormatNumeric).forEach(function(score) {
                               if (subScoreName == score) {
                                   var subscoreName = item.Id.split('::')[0];
                                   var settings = response.PerformanceBandSettingSubScores;
                                   settings && settings.forEach(function (setting) {
                                       if (compareScoreName(score, setting.ScoreType) && subscoreName === setting.SubScoreName) {
                                           item.MetaData.ColorRule = {
                                               Bands: setting.Bands,
                                               Color: setting.Color,
                                               Cutoffs: setting.Cutoffs,
                                           }
                                       }
                                   });
                                   formatNumeric(item.MetaData, subScoreFormatNumeric[score], subScoreLable);
                               }
                           });

                           Object.keys(subScoreFormatCustomText).forEach(function(score) {
                               if (subScoreName == score) {
                                   formatCustomText(item.MetaData, subScoreFormatCustomText[score], subScoreLable);
                               }
                           });

                           if (subScoreName == 'Artifact') {
                               var colName = subScore + '.ArtifactFileName';

                               if (item.MetaData != null) {
                                   metaData[colName] = item.MetaData;
                               }
                               columnData.push({
                                   data: colName,
                                   renderer: artifactFolderButtonRender,
                                   editor: false,
                                   disableVisualSelection: true,
                                   width: 160,
                                   scoreDisplayName: response.CustomSubScores[i].Name
                               });
                           }

                           if (subScoreName.indexOf('note') != -1) {
                               var colName = subScore + '.' + subScoreName;
                               if (item.MetaData != null) {
                                   metaData[colName] = item.MetaData;
                               }
                               columnData.push({
                                   data: colName,
                                   renderer: noteButtonRenderer,
                                   editor: false,
                                   disableVisualSelection: true,
                                   label: subScoreLable,
                                   width: subScoreLable.length < 25 ? subScoreLable.length * 12 + 30 : 250
                               });
                           }

                           subScoreLable = getHeaderString(subScoreLable);
                           var massUpload = '<button class="btn-entry-result-score is-small mass-upload u-fw-400" style="margin: auto;">Upload File(s)</button>';
                           if (hasIconInfo(item)) {
                               var isCustomSubScores = true;
                               var infoIcon = buildIconInfo(item, response.CustomSubScores[i].ScoreInfos, isCustomSubScores, response);
                               var iconInfoContent = '<span class="icon icon-info icon-16 js-info-action with-tip" title="' + infoIcon + '"></span>'

                               if (subScoreLable === "Artifact") {
                                   if (infoIcon.length) {
                                       colHeaderData.push('<span>' + subScoreLable + ' ' + iconInfoContent + '</span >' + massUpload);
                                   }
                                   else {
                                       colHeaderData.push(subScoreLable + massUpload);
                                   }
                               }
                               else {
                                   colHeaderData.push('<span>' + subScoreLable + iconInfoContent + '</span>');
                               }
                           } else {
                               if (subScoreLable === "Artifact") {
                                   colHeaderData.push(subScoreLable + massUpload);
                               } else {
                                   colHeaderData.push(subScoreLable);
                               }
                           }
                       });
                   }
               }

               var $studentEntryResult = $('div[name="studentEntryResult"]');
               var studentEntryResultHeight = 410;

               if ($('body').hasClass('data-locker-fullscreen')) {
                   var HEIGHT_FULLSCREEN = 175;
                   studentEntryResultHeight = window.innerHeight - HEIGHT_FULLSCREEN;
               }
               //convert value to label or both for dropdown numeric
               convertValueToLabelDropdownNumeric();

               // recalculate dropdown position/height
               var recalculateDropdownCss = function () {
                   var dropDown = document.querySelector('.handsontableInputHolder[style*="display: block"] .autocompleteEditor');
                   if (dropDown) {
                       var contentHeight = +dropDown.querySelector('.wtHider').style.height.replace('px', '');
                       var holder = dropDown.querySelector('.wtHolder');
                       var handsontable = document.querySelector('div[name="studentEntryResult"] .handsontable.ht_master');
                       var handsontableRect = handsontable.getBoundingClientRect();
                       var headerHeight = handsontable.querySelector('thead').getBoundingClientRect().height;
                       var tableBox = {
                           y: handsontableRect.y + headerHeight,
                           height: handsontableRect.height - headerHeight
                       }
                       var tableCenterY = tableBox.y + tableBox.height / 2;
                       var inputRect = dropDown.parentElement.querySelector('.handsontableInput').getBoundingClientRect();
                       var showOnTop = inputRect.y + inputRect.height / 2 >= tableCenterY;
                       var height = contentHeight;
                       if (showOnTop) {
                           height = Math.min(height, inputRect.y - tableBox.y);
                           dropDown.style.position = 'absolute';
                           dropDown.style.top = -height + 'px';
                       } else {
                           height = Math.min(height, tableBox.y + tableBox.height - inputRect.height - inputRect.y);
                       }
                       dropDown.style.height = height + 'px';
                       holder.style.height = height + 'px';
                   }
               }

               var onMassUploadClick = function (event, coords, element) {
                   var column = columnData[coords.col];

                   StudentEntryModel.isShowModalArtifactFolder = true;
                   StudentEntryModel.artifactFolderModalVM.isMassUpload = true;
                   StudentEntryModel.artifactFolderModalVM.Students = hansonStudentData.map(e => ({
                       Code: e.overallScore.Code,
                       StudentID: e.overallScore.StudentID,
                       DisplayFullName: e.overallScore.DisplayFullName
                   }));
                   StudentEntryModel.tagList = metaData[column.data].ListArtifactTag;
                   if (StudentEntryModel.tagList != null && StudentEntryModel.tagList[0] != "") {
                       StudentEntryModel.tagList.unshift("");
                   }

                   var artifacts = [];
                   if (column.data.indexOf('overallScore') > -1) {
                       StudentEntryModel.artifactFolderModalVM.isOverallScore = true;
                       StudentEntryModel.artifactFolderModalVM.subId = null;
                       StudentEntryModel.artifactFolderModalVM.subName = null;
                       hansonStudentData.forEach(function(e, index) {
                           artifacts = artifacts.concat(
                               e.overallScore.Artifacts
                                   .map(a => ({
                                       ...a,
                                       StudentID: e.overallScore.StudentID,
                                       FileType: metaData[column.data]?.EntryResultArtifactFileTypeGroupViewModel.find(o => o.SupportFileType.some(s => s.includes(a.Name?.split('.')[1])))?.Name.toLowerCase()
                                   }))
                           );
                       });
                   } else {
                       var topScoreName = column.data.split('.')[0];
                       StudentEntryModel.artifactFolderModalVM.isOverallScore = false;
                       StudentEntryModel.artifactFolderModalVM.subId = topScoreName;
                       StudentEntryModel.artifactFolderModalVM.subName = topScoreName;
                       hansonStudentData.forEach(function (e, index) {
                           artifacts = artifacts.concat(
                               e[topScoreName].Artifacts
                                   .map(a => ({
                                       ...a,
                                       StudentID: e.overallScore.StudentID,
                                       FileType: metaData[column.data]?.EntryResultArtifactFileTypeGroupViewModel.find(o => o.SupportFileType.some(s => s.includes(a.Name?.split('.')[1])))?.Name.toLowerCase()
                                   }))
                           );
                       });
                   }
                   artifacts = artifacts.map(function (item, index) {
                       item.Index = index;
                       return item
                   })
                   StudentEntryModel.artifactFolderModalVM.artifacts = JSON.parse(JSON.stringify(artifacts));

                   var fileUploadMeta = metaData[column.data];
                   if (fileUploadMeta) {
                       var arrTypeUploadsFilter = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel.filter(function (item) { return fileUploadMeta.UploadFileTypes.includes(item.Name) });
                       StudentEntryModel.artifactFolderModalVM.allowFileTypes = arrTypeUploadsFilter?.map(function (item) { return item.DisplayName }).join(', ');
                       StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups = arrTypeUploadsFilter;
                       StudentEntryModel.artifactFolderModalVM.maxFileSize = fileUploadMeta.MaxFileSize;
                       StudentEntryModel.artifactFolderModalVM.artifactFileTypeGroup = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel;
                   }

                   StudentEntryModel.initArtifactFolderModal();
                   setUploadifive(StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups, StudentEntryModel.artifactFolderModalVM.maxFileSize, StudentEntryModel.artifactFolderModalVM.artifactFileTypeGroup, true);
                   setUploadFolder(StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups, true);
               }

               $studentEntryResult.handsontable({
                   data: hansonStudentData,
                   observeChanges: true,
                   beforeChange: function(changes, source) {
                       if (source === 'edit' && changes.length > 0) {
                           for (var i = 0, len = changes.length; i < len; i++) {
                               var colName = changes[i][1];
                               // Format uppercase
                               var rule = metaData[colName];
                               if (rule != null && rule.UpperCaseOnly != null &&
                                   rule.UpperCaseOnly && changes[i][3] != null && changes[i][3] != '') {
                                   changes[i][3] = changes[i][3].toUpperCase();
                               }

                               // Format escape html for dropdown
                               if (rule != null && rule.DataType != null && changes[i][3] != null && changes[i][3] != '') {
                                   if (rule.DataType === 'SelectList') {
                                       changes[i][3] = unescapeHtml(changes[i][3]);
                                   }
                               }
                           }
                       }
                   },
                   nestedHeaders: [colGroupHeaderData, colHeaderData],
                   columns: columnData,
                   minSpareRows: 0,
                   height: studentEntryResultHeight,
                   formulas: false,
                   fixedColumnsLeft: 3,
                   rowHeights: [31],
                   contextMenu: false,
                   fillHandle: false,
                   afterInit: afterInitTooltip,
                   afterLoadData: afterInitTooltip,
                   afterScrollHorizontally: afterScrollUpdateTooltip,
                   afterScrollVertically: afterScrollUpdateTooltip,
                   afterChange: afterChangeUpdateTooltipAndAutoCalcu,
                   afterColumnResize: afterInitTooltip,
                   manualColumnResize: true,
                   licenseKey: 'a70f6-b55ab-a3862-0471e-e915a',
                   modifyColWidth: function (width, col) {
                    if (width > 300) {
                        return 300;
                    }
                   },
                   afterBeginEditing: function() {
                       // delay for handsontable dropdown content rendering. then recalculate
                       setTimeout(recalculateDropdownCss, 10);
                   },
                   beforeOnCellMouseDown: function (event, coords, element) {
                       if (event.realTarget.classList.contains('mass-upload')) {
                           onMassUploadClick(event, coords, element);
                       }
                   },
                   afterSelection: function () {
                       setTimeout(function () {
                           toggleShowBtnStudentResult();
                       }, 200)
                   },
                   beforeRenderer: function (td, row, col, prop, value, cp) {
                       var hot = this;
                       var rule = metaData[prop];
                       var colorRule = rule ? rule.ColorRule : null;
                       if (rule) {
                           if (rule.FormatOption === "LabelValueText") {
                               var matchValue = value ? value.toString().match(/\(([^)]+)\)/) : null;
                               if (rule.DisplayOption === "both") {
                                   value = matchValue ? parseFloat(matchValue[1]) : NaN;
                               } else if (rule.DisplayOption === "label") {
                                   var selectedOption = rule.SelectListOptions.filter(function (item) {
                                       return item.Label === value;
                                   });
                                   if (selectedOption.length > 0) {
                                       value = parseFloat(selectedOption[0].Option);
                                   }
                               } else {
                                   value = parseFloat(value);
                               }
                           } else {
                               value = parseFloat(value || hot.getDataAtCell(row, col));
                           }
                           if (value !== '' && value !== null && !isNaN(value) && colorRule) {
                               var colors = colorRule.Color ? colorRule.Color.split(";") : [];
                               var bands = colorRule.Bands ? colorRule.Bands.split(";") : [];
                               var cutoffs = colorRule.Cutoffs ? colorRule.Cutoffs.split(",").map(function (cutoff) { return parseFloat(cutoff) }) : [];
                               if (colors.length === 0) {
                                   bands.forEach(function (band, index) {
                                       var colorStyle = getPerformanceStyle({
                                           scoreIndex: index,
                                           colorBand: bands.length
                                       });
                                       colors.push(colorStyle.bgColor);
                                   });
                               }
                               colors.forEach(function (color, index) {
                                   if (value >= cutoffs[0]) {
                                       hot.setCellMetaObject(row, col, {
                                           bgColor: colors[0],
                                           color: getContrastColor(colors[0]),
                                           bandText: bands[0],
                                       });
                                   } else if (value < cutoffs[cutoffs.length - 1]) {
                                       hot.setCellMetaObject(row, col, {
                                           bgColor: colors[colors.length - 1],
                                           color: getContrastColor(colors[colors.length - 1]),
                                           bandText: bands[colors.length - 1],
                                       });
                                   } else if (value >= cutoffs[index + 1] && value < cutoffs[index]) {
                                       hot.setCellMetaObject(row, col, {
                                           bgColor: colors[index + 1],
                                           color: getContrastColor(colors[index + 1]),
                                           bandText: bands[index + 1],
                                       });
                                   }
                               })
                               if (!rule.IsAutoCalculation && ((rule.MaxValue !== null && value > rule.MaxValue) || (rule.MinValue !== null && value < rule.MinValue))) {
                                   hot.setCellMetaObject(row, col, {
                                       bgColor: null,
                                       color: null,
                                       bandText: null,
                                   });
                               }
                           } else {
                               hot.setCellMetaObject(row, col, {
                                   bgColor: null,
                                   color: null,
                                   bandText: null,
                               });
                           }
                       }
                   },
                   afterRender: function () {
                       if ('@Model.AllowChangeResultDate' === "0") {
                           var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                           var isCheckExistTimePass = hansonStudentData.find(function(item) {
                               return moment().format(resultDateFormat) != moment(item.overallScore.ResultDate).format(resultDateFormat);
                           });

                           if (isCheckExistTimePass != null) {
                               $('.mass-upload').css('pointer-events', 'none');
                           }
                           else {
                               $('.mass-upload').css('pointer-events', 'auto');
                           }
                       }
                       if (hansonStudentData.every(function (item) { return item[""] === true })) {
                           $('input.checker').attr('checked', true);
                       } else {
                           $('input.checker').attr('checked', false);
                       }
                   },
                   afterRenderer: function (td, row, col, pro, value, cp) {
                       if ('@Model.AllowChangeResultDate' === "0") {
                           var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                           var studentDateResult = hansonStudentData[row].overallScore.ResultDate;
                           var testResultID = hansonStudentData[row].overallScore.TestResultID;
                           if (testResultID != null && testResultID > 0 && '@Model.HasTestResult' === 'True' && !$(td).hasClass('htCheckBox') && pro != "overallScore.FullNameDisplay" && pro != "overallScore.ResultDate") {
                               if (moment().format(resultDateFormat) != moment(studentDateResult).format(resultDateFormat)) {
                                   this.setCellMeta(row, col, 'readOnly', true);
                                   $(td).css('pointer-events', 'none');
                               }
                               else if ($(td).hasClass('cls-sum-evarage') === false) {
                                   this.setCellMeta(row, col, 'readOnly', false);
                                   $(td).css('pointer-events', 'auto');
                               }
                           }
                       }
                   }
               });

               $sectionStudentEntry.unblock();

               if (!!response.ActualTestResultScoresJson) {
                   oldHandsonStudentData = JSON.parse(response.ActualTestResultScoresJson);
               } else {
                   oldHandsonStudentData = JSON.stringify(hansonStudentData);
               }
               oldHandsonStudentDataAutoSave = JSON.stringify(hansonStudentData);
               $studentEntryResult.handsontable('validateCells');

               if (StudentEntryModel.isWarningPrint) {
                   StudentEntryModel.showPrintResults();
               }

               initializeTooltip('.student-entry-result thead th span[title]', {
                   attr: 'title',
                   classes: 'qtip-yellow qtip-custom'
               });

               toggleShowBtnStudentResult();
           }
       });
   }

   function toggleShowBtnStudentResult() {
       var rowSelected = $('div[name="studentEntryResult"] table tbody .htCheckBox input[type=checkbox]:checked');
       var dataRowSelected = hansonStudentData.some(function (item) { return item[""] })
       if (rowSelected.length || dataRowSelected) {
           $('#btn-student-result').show();
       } else {
           $('#btn-student-result').hide();
       }
   }

   function convertValueToLabelDropdownNumeric() {
       $.each(hansonStudentData, function(k, item) {
           var overallScore = item.overallScore;
           if (overallScore != null) {
               overallScore.ScoreCustomN_1 = getDisplayFromValue(overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1");
               overallScore.ScoreCustomN_2 = getDisplayFromValue(overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2");
               overallScore.ScoreCustomN_3 = getDisplayFromValue(overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3");
               overallScore.ScoreCustomN_4 = getDisplayFromValue(overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4");
           }

           for (var i = 0; i < subScoreLength; i++) {
               var name = "subScore_" + i;
               var subscore = item[name];
               if (subscore != null) {
                   subscore.ScoreCustomN_1 = getDisplayFromValue(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1");
                   subscore.ScoreCustomN_2 = getDisplayFromValue(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2");
                   subscore.ScoreCustomN_3 = getDisplayFromValue(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3");
                   subscore.ScoreCustomN_4 = getDisplayFromValue(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4");
               }
           }
       });
   }

   function hasIconInfo(item) {
       if (item.MetaData) {
           if (item.MetaData.MaxLength
               || item.MetaData.MaxValue != null
               || item.MetaData.MinValue != null
               || item.MetaData.Description
               || item.MetaData.DecimalScale != null
               || item.MetaData.MaxFileSize
               || item.MetaData.IsAutoCalculation) {
               return true;
           }
       }
       return false;
   }

   function afterScrollUpdateTooltip() {
       afterInitTooltip();
       afterValidateTooltip();
   }
   function initializeTooltip(element, settings) {
       $(element).qtip({
           overwrite: false,
           content: {
               attr: settings.attr
           },
           position: {
               my: 'bottom center',
               at: 'top center'
           },
           show: {
               event: 'mouseover'
           },
           hide: {
               event: 'mouseout'
           },
           style: {
               classes: settings.classes
           },
           hide: {
               fixed: true,
               delay: 300
           },
           events: {
               show: function () {
                   var $self = $(this);
                   var qtipId = $self.attr('data-qtip-id');
                   var iconEl = $(`.icon-info[data-hasqtip=${qtipId}]`);
                   var arrowHeight = 6;
                   if (iconEl.length > 0) {
                       var maxHeightTooltip = iconEl.offset().top - $('html').scrollTop() - 18;
                       $self.addClass('custom-top');
                       $self.find('.qtip-content').css('max-height', maxHeightTooltip);
                   }
               }
           }
       });
   }

   function afterInitTooltip() {
       initializeTooltip('.student-entry-result thead th span[title]', {
           attr: 'title',
           classes: 'qtip-yellow qtip-custom'
       });
   }

   function afterValidateTooltip() {
       initializeTooltip('.student-entry-result tbody td.htInvalid', {
           attr: 'data-invalid',
           classes: 'qtip-red'
       });
   }

   function afterChangeUpdateTooltipAndAutoCalcu(changes, source) {
       completedChange = false;
       var eventSources = ['edit', 'CopyPaste.paste', 'UndoRedo.redo', 'UndoRedo.undo'];
       if (eventSources.includes(source) && changes.length) {
           var dataCheckbox = $('div[name="studentEntryResult"]').handsontable('getDataAtCol', 0);
           //Update data multiple row
           updateMultiData(changes, source);
           dataCheckbox = dataCheckbox.map(function(cb) {
               return cb;
           });



           autoCalcuData(changes, dataCheckbox);

           var $sectionStudentEntry = $('#sectionStudentEntry');
           $sectionStudentEntry.find('div[name="studentEntryResult"] td').qtip('destroy', true);
           afterScrollUpdateTooltip();


       }

       completedChange = true;
       toggleShowBtnStudentResult();
   }

   function getValueFromLabelDropdown(label, prop) {
       var metadataProp = metaData[prop];
       if (label && metadataProp.FormatOption && metadataProp.DisplayOption && metadataProp.FormatOption.toLowerCase() === 'labelvaluetext') {
           var result = metadataProp.SelectListOptions.find(function (item) {
               if (metadataProp.DisplayOption === 'label')
                   return label === item.Label;

               if (metadataProp.DisplayOption === 'both')
                   return label === `${item.Label} (${item.Option})`;

               return label === item.Option;
           });
           return result && result.Option || label;
       }
       return label;
   }

   function getDisplayFromValue(value, prop) {
       if (!!value && !!metaData[prop].DisplayOption && !! metaData[prop].SelectListOptions && !!metaData[prop].FormatOption && metaData[prop].FormatOption.toLowerCase() === 'labelvaluetext') {
           var label = value;
           var result = metaData[prop].SelectListOptions.filter(function(option) {
               return parseFloat(option.Option) == parseFloat(value);
           });
           if (!!result && result.length > 0) {
               if (metaData[prop].DisplayOption == "label") {
                   label = result[0].Label;
               }
               if (metaData[prop].DisplayOption == "both") {
                   label = result[0].Label + ' (' + result[0].Option + ')';
               }
           }
           return label;
       }

       return value;
   }

   function validatorRangeByNumber(value, callback) {
       var rule = metaData[this.prop];
       var cell = this.instance.getCell(this.row, this.col);
       var $selected = $(cell);

       if (value === '' || value == null) {
           $selected.removeAttr('data-invalid');
           callback(true);
       } else if (!/^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$/.test(value)) {
           $selected.attr('data-invalid', 'You can only enter numbers here');
           callback(false);
       } else {
           var format = 0;

           if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 1) {
               format = 1;
           } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 2) {
               format = 2;
           } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 3) {
               format = 3;
           }

           if (rule.MinValue != null && rule.MaxValue != null && (rule.MinValue > value || rule.MaxValue < value)) {
               $selected.attr('data-invalid', 'You can only enter a score between ' + rule.MinValue.toFixed(format) + ' and ' + rule.MaxValue.toFixed(format));
               callback(false);
           } else if (rule.MinValue != null && rule.MinValue > value) {
               $selected.attr('data-invalid', 'You can only enter a score more than ' + rule.MinValue.toFixed(format));
               callback(false);
           } else if (rule.MaxValue != null && rule.MaxValue < value) {
               $selected.attr('data-invalid', 'You can only enter a score less than ' + rule.MaxValue.toFixed(format));
               callback(false);
           } else {
               $selected.removeAttr('data-invalid');
               callback(true);
           }
       }
   }

   function validatorAlphabet(value, callback) {
       var rule = metaData[this.prop];
       var ruleDataType = rule.DataType;
       var cell = this.instance.getCell(this.row, this.col);
       var $selected = $(cell);

       if (!/^[a-zA-Z0-9]*$/.test(value) && ruleDataType === 'Alphanumeric') {
           $selected.attr('data-invalid', 'You can only enter letters and/or numbers here. No spaces, symbols and special characters are allowed');
           callback(false);
       } else if (!/^[a-zA-Z]*$/.test(value) && ruleDataType === 'Alphabetic') {
           $selected.attr('data-invalid', 'You can only enter letters here. No numbers, spaces, symbols and special characters are allowed');
           callback(false);
       } else if (rule.MaxLength != null && value != null && value.length > rule.MaxLength) {
           $selected.attr('data-invalid', 'You cannot enter more than ' + rule.MaxLength + ' characters');
           callback(false);
       } else {
           $selected.removeAttr('data-invalid');
           callback(true);
       }
   }

   function validatorDropDown(value, callback) {
       callback(true);
   }

   function validatorAutoComplete(value, callback) {
       var customParameter = this.customParameter;
       var cell = this.instance.getCell(this.row, this.col);
       var $selected = $(cell);
       var result = false;
       if (value) {
           for (var i = 0; i < customParameter.length; i++) {
               if (customParameter[i] == value) {
                   result = true;
                   break;
               }
           }
       }

       if (!result && value) {
           $selected.attr('data-invalid', 'You can enter the value listed in the dropdown only');
           callback(false);
       } else {
           $selected.removeAttr('data-invalid');
           callback(true);
       }
   }

   function buttonRendererClick(button, cp) {
       Handsontable.dom.addEvent(button, 'click', function(e) {
           e.preventDefault();
           var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
           var selection = hot.getSelectedLast();
           var row = selection[0];
           var col = selection[1];
           var $button = $(this);

           $button.siblings().removeClass('selected');

           if ($button.hasClass('selected')) {
               $button.removeClass('selected');
               hot.setDataAtCell(row, col, '');
           } else {
               $button.addClass('selected');
               hot.setDataAtCell(row, col, $button.text());
               $button[0].style.backgroundColor = cp.bgColor || '#50a3c8';
               $button[0].style.borderColor = cp.bgColor || '#50a3c8';
               $button[0].style.color = cp.color || '#fff';
           }
       });
   }

   function buttonRenderer(instance, td, row, col, prop, value, cp) {
       Handsontable.dom.empty(td);

       for (var i = metaData[prop].MinValue; i <= metaData[prop].MaxValue; i++) {
           var button = document.createElement('button');
           var value = parseInt(value, 10);

           button.className = 'btn-entry-result-score is-small u-fw-400';
           button.textContent = i;

           if (i === value) {
               button.className = button.className + ' ' + 'selected';
               button.style.backgroundColor = cp.bgColor || '#50a3c8';
               button.style.borderColor = cp.bgColor || '#50a3c8';
               button.style.color = cp.color || '#fff';
           }

           buttonRendererClick(button, cp);

           td.appendChild(button);
       }

       return td;
   }

   function artifactFolderButtonRender(instance, td, row, col, prop) {
       Handsontable.dom.empty(td);
       var lengthArtifacts = hansonStudentData[row].overallScore
       var uploadBtn = document.createElement('button');
       uploadBtn.className = 'btn-entry-result-score is-small u-fw-400';
       uploadBtn.textContent = "Upload File";

       var folderBtn = document.createElement('a');
       folderBtn.className = 'with-tip artifact-folder-btn';
       folderBtn.title = "Artifact folder";

       td.classList.add('htCenter');
       td.classList.add('htMiddle');

       td.appendChild(folderBtn);
       td.appendChild(uploadBtn);
       artifactFolderButtonEventClick(folderBtn, td, row, col, prop);
       artifactFolderButtonEventClick(uploadBtn, td, row, col, prop);

       if (columnData[col].data.indexOf('overallScore') > -1) {
           if (hansonStudentData[row].overallScore.Artifacts.length > 0) {
               var length = hansonStudentData[row].overallScore.Artifacts.length;
               var folderIconHtml = getArtifactsHTML(length);
               folderBtn.appendChild(folderIconHtml);
               $(uploadBtn).hide()
           } else {
               $(folderBtn).hide();
           }
       } else {
           var topScoreName = columnData[col].data.split('.')[0];
           if (hansonStudentData[row][topScoreName].Artifacts.length > 0) {
               var length = hansonStudentData[row][topScoreName].Artifacts.length;
               var folderIconHtml = getArtifactsHTML(length);
               folderBtn.appendChild(folderIconHtml);
               $(uploadBtn).hide();
           } else {
               $(folderBtn).hide();
           }
       }


   }

   function getArtifactsHTML(numberOfArtifacts) {
       if (!numberOfArtifacts) {
           numberOfArtifacts = 0;
       }

       var artifactsHtml = document.createElement('span');
       var artifactsNumber = document.createElement('span');
       var artifactsIcon = document.createElement('img');

       artifactsNumber.className = 'count-artifacts';
       artifactsNumber.textContent = '[' + numberOfArtifacts + ']';

       artifactsIcon.className = 'image-folder';
       artifactsIcon.src = '@Url.Content("~//Content/themes/Constellation/images/icons/fugue/folder-open.png")';
       artifactsIcon.style.width = '16px';
       artifactsIcon.style.height = '16px';

       artifactsHtml.appendChild(artifactsIcon);
       artifactsHtml.appendChild(artifactsNumber);


       return artifactsHtml;
   }

   function artifactFolderButtonEventClick(button, td, row, col, prop) {
       Handsontable.dom.addEvent(button, 'click', function(e) {
           e.preventDefault();
           StudentEntryModel.tagList = metaData[prop].ListArtifactTag;
           if (StudentEntryModel.tagList != null && StudentEntryModel.tagList[0] != "") {
               StudentEntryModel.tagList.unshift("");
           }
           StudentEntryModel.isShowModalArtifactFolder = true;
           StudentEntryModel.artifactFolderModalVM.isMassUpload = false;
           StudentEntryModel.selectedTD = td;
           StudentEntryModel.selectedRow = row;
           StudentEntryModel.selectedCol = col;
           StudentEntryModel.studentName = hansonStudentData[row].overallScore.FullName;
           StudentEntryModel.artifactFolderModalVM.currentScore = columnData[col].scoreDisplayName;
           var artifacts = [];
           if (columnData[col].data.indexOf('overallScore') > -1) {
               StudentEntryModel.artifactFolderModalVM.isOverallScore = true;
               artifacts = hansonStudentData[row].overallScore.Artifacts.map(a => ({
                   ...a,
                   FileType: metaData[columnData[col].data]?.EntryResultArtifactFileTypeGroupViewModel.find(o => o.SupportFileType.some(s => s.includes(a.Name?.split('.')[1])))?.Name.toLowerCase()
               }));
               StudentEntryModel.artifactFolderModalVM.artifacts = JSON.parse(JSON.stringify(artifacts));

           } else {
               StudentEntryModel.artifactFolderModalVM.isOverallScore = false;
               var topScoreName = columnData[col].data.split('.')[0];
               artifacts = hansonStudentData[row][topScoreName].Artifacts.map(a => ({
                   ...a,
                   FileType: metaData[columnData[col].data]?.EntryResultArtifactFileTypeGroupViewModel.find(o => o.SupportFileType.some(s => s.includes(a.Name?.split('.')[1])))?.Name.toLowerCase()
               }));
               StudentEntryModel.artifactFolderModalVM.artifacts = JSON.parse(JSON.stringify(artifacts));
           }
           var fileUploadMeta = metaData[columnData[col].data];
           if (fileUploadMeta) {
               var arrTypeUploadsFilter = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel.filter(function (item) { return fileUploadMeta.UploadFileTypes.includes(item.Name) });
               StudentEntryModel.artifactFolderModalVM.allowFileTypes = arrTypeUploadsFilter?.map(function (item) { return item.DisplayName }).join(', ');
               StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups = arrTypeUploadsFilter;
               StudentEntryModel.artifactFolderModalVM.maxFileSize = fileUploadMeta.MaxFileSize;
               StudentEntryModel.artifactFolderModalVM.artifactFileTypeGroup = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel;
           }

           StudentEntryModel.initArtifactFolderModal();
           setUploadifive(StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups, StudentEntryModel.artifactFolderModalVM.maxFileSize, StudentEntryModel.artifactFolderModalVM.artifactFileTypeGroup, false);
       });
   }

   function formatNumeric(rule, colName, label) {
       var colorRule = rule.ColorRule;
       if (colorRule) {
           var bands = colorRule.Bands ? colorRule.Bands.split(';') : [];
           var cutoffs = colorRule.Cutoffs ? colorRule.Cutoffs.split(',') : [];
           var maxTextLabel = label;
           bands.forEach(function (band) { if (band.length > maxTextLabel.length) maxTextLabel = band });
           maxTextLabel += rule.MaxValue + cutoffs[0];
           if (typeof rule.DecimalScale !== 'undefined') {
               for (i = 0; i < rule.DecimalScale; i++) {
                   maxTextLabel += "0";
               }
           }
       }

       var format = '0';
       var toFormat = 0;
       if (rule != null && rule.DataType != null && rule.DataType == "Numeric") {
           if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 1) {
               format = '0.0';
               toFormat = 1;
           } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 2) {
               format = '0.00';
               toFormat = 2;
           } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 3) {
               format = '0.000';
               toFormat = 3;
           }
       }

       if (rule != null && rule.DataHostPot != null && rule.DataHostPot === 'clickable') {
           columnData.push({
               data: colName,
               renderer: buttonRenderer,
               editor: false,
               disableVisualSelection: true,
               width: (rule.MaxValue - rule.MinValue + 1) * 20 + 30
           });
       } else if (rule != null && (rule.DataHostPot != null && rule.DataHostPot === 'dropdownlist' && rule.FormatOption?.toLowerCase() != 'labelvaluetext')) {
           var sourceDataList = [];
           if (rule.MinValue != null && rule.MaxValue != null) {
               for (var i = rule.MinValue; i <= rule.MaxValue; i++) {
                   sourceDataList.push(i.toFixed(toFormat));
               }
               if (rule.DataType != null && rule.DataType == "Numeric") {
                   setFormatForDropdowValue(colName, toFormat);
               }
           }

           columnData.push({
               data: colName,
               type: 'autocomplete',
               source: sourceDataList,
               strict: true,
               filter: false,
               allowInvalid: true,
               validator: validatorAutoComplete,
               customParameter: sourceDataList,
               width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel, true)) : calculateTextRealWidth(label),
               className: 'htRight needsclick',
               renderer: colorDropdownRenderer,
           });
       } else if (rule != null && rule.DataType == "Numeric" && rule.SelectListOptions != null && rule.SelectListOptions.length > 0) {
           var sourceValList = [];
           if (!!rule.DisplayOption && !!rule.FormatOption && rule.FormatOption.toLowerCase() === 'labelvaluetext') {
               if (rule.DisplayOption == "value") {
                   for (var i = 0; i < rule.SelectListOptions.length; i++) {
                       sourceValList.push(rule.SelectListOptions[i].Option);
                   }
                   setFormatForDropdowValue(colName, toFormat);
               }
               if (rule.DisplayOption == "label") {
                   for (var i = 0; i < rule.SelectListOptions.length; i++) {
                       var lb = rule.SelectListOptions[i].Label;
                       sourceValList.push(lb);
                   }
               }
               if (rule.DisplayOption == "both") {
                   for (var i = 0; i < rule.SelectListOptions.length; i++) {
                       var lbBoth = rule.SelectListOptions[i].Label;
                       var val = lbBoth + ' (' + rule.SelectListOptions[i].Option + ')';
                       sourceValList.push(val);
                   }
               }
           } else {
               for (var i = 0; i < rule.SelectListOptions.length; i++) {
                   sourceValList.push(rule.SelectListOptions[i].Option);
               }
               setFormatForDropdowValue(colName, toFormat);
           }

           columnData.push({
               data: colName,
               type: 'autocomplete',
               source: sourceValList,
               strict: true,
               filter: false,
               validator: validatorAutoComplete,
               customParameter: sourceValList,
               allowInvalid: true,
               width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel, true)) : calculateTextRealWidth(label),
               className: 'htRight needsclick',
               renderer: colorDropdownRenderer,
               allowHtml: true
           });
       } else if (rule != null && rule.IsAutoCalculation) {
           columnData.push({
               data: colName,
               type: 'numeric',
               readOnly: true,
               numericFormat: {
                   pattern: format
               },
               className: 'htRight cls-sum-evarage',
               renderer: colorNumericRenderer,
               width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel)) : calculateTextRealWidth(label)
           });
       } else {
           columnData.push({
               data: colName,
               type: 'numeric',
               numericFormat: {
                   pattern: format
               },
               validator: validatorRangeByNumber,
               className: 'htRight',
               renderer: colorNumericRenderer,
               width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel)) : calculateTextRealWidth(label)
           });
       }

       metaData[colName] = rule;
   }

   function colorTextRenderer(hot, td, row, col, prop, value, cp) {
       Handsontable.renderers.TextRenderer.apply(this, arguments);
       return colorRenderer(hot, td, row, col, prop, value, cp);
   }

   function colorNumericRenderer(hot, td, row, col, prop, value, cp) {
       Handsontable.renderers.NumericRenderer.apply(this, arguments);
       return colorRenderer(hot, td, row, col, prop, value, cp);
   }

   function colorDropdownRenderer(hot, td, row, col, prop, value, cp) {
       Handsontable.renderers.DropdownRenderer.apply(this, arguments);
       return colorRenderer(hot, td, row, col, prop, value, cp);
   }

   function colorRenderer(hot, td, row, col, prop, value, cp) {
       td.style.backgroundColor = cp.bgColor;
       td.style.color = cp.color;
       if ((value || typeof (value) === 'number') && cp.bandText) {
           var currentHtml = $(td).html();
           $(td).html(`<div class="d-flex justify-content-between"><span class='me-2'>${cp.bandText}</span><div>${currentHtml}</div></div>`);
       }
       return td;
   }

   function setFormatForDropdowValue(colName, toFormat) {
       for (var i = 0; i < hansonStudentData.length; i++) {
           var item = hansonStudentData[i];
           var colNameSplit = colName.split('.');
           var cellVal = item[colNameSplit[0]][colNameSplit[1]];

           if (isNumeric(cellVal)) {
               cellVal = parseFloat(cellVal);
               item[colNameSplit[0]][colNameSplit[1]] = cellVal.toFixed(toFormat);
           }
       }
   }

   function formatCustomText(rule, colName, label) {
       var widthLabel = label.length < 25 ? label.length * 12 + 30 : 250;

       if (rule != null && rule.DataType == 'SelectList' && rule.SelectListOptions != null && rule.SelectListOptions.length > 0) {
           var sourceDataList = [];
           for (var i = 0; i < rule.SelectListOptions.length; i++) {
               var option = rule.SelectListOptions[i].Option;
               sourceDataList.push(option);
           }
           columnData.push({
               data: colName,
               type: 'autocomplete',
               source: sourceDataList,
               strict: true,
               filter: false,
               allowInvalid: true,
               validator: validatorAutoComplete,
               customParameter: sourceDataList,
               width: widthLabel,
               className: 'needsclick'
           });
       } else {
           columnData.push({
               data: colName,
               validator: validatorAlphabet,
               width: widthLabel
           });
       }

       metaData[colName] = rule;
   }

   function setResultDate() {
       if (hansonStudentData.length) {
           var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
           hansonStudentData = hansonStudentData.map(function(student) {
               student.overallScore.ResultDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
               return student;
           });
       }
   }

   function getFileTye(extenstion) {
       return fileType[extenstion];
   }

   function setUploadifive(uploadFileType, maxFileSize, artifactFileTypeGroup, isMass) {
       if (StudentEntryModel.initialedUploadFile.file_upload_artifact) {
           $('#file_upload_artifact').uploadifive('destroy');
           StudentEntryModel.initialedUploadFile.file_upload_artifact = false;
       }
       if (StudentEntryModel.initialedUploadFile.file_folder_artifact) {
           $('#file_folder_artifact').uploadifive('destroy');
           StudentEntryModel.initialedUploadFile.file_folder_artifact = false;
       }
       var listFileTypeAllow = {
           '.pdf': 'application\/pdf',
           '.xls': 'application/vnd.ms-excel',
           '.xlsx': 'application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
           '.doc': 'application\/msword',
           '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
           '.ppt': 'application\/vnd.ms-powerpoint',
           '.pptx': 'application\/vnd.openxmlformats-officedocument.presentationml.presentation',
           '.rtf': 'application/rtf',
           '.txt': 'text/plain',
           '.png': 'image\/png',
           '.jpeg': 'image\/jpeg',
           '.jpg': 'image\/jpeg',
           '.gif': 'image/gif',
           '.bmp': 'image/bmp',
           '.mp3': 'audio/mpeg',
           '.wma': 'audio/x-ms-wma',
           '.webm': 'audio/webm',
           '.wav': 'audio/wav',
           '.aac': 'audio/aac',
           '.ogg': 'audio/ogg',
           '.mp4': 'audio/mp4',
           '.mp4': 'video/mp4',
           '.webm': 'video/webm',
           '.ogg': 'video/ogg'
       };
       var arrUploadFileType = uploadFileType.map(function (item) { return item.SupportFileType.join(",") })?.join();
       var fileType = [];
       var fileTypeAllowUpload = [];
       if (!!arrUploadFileType) {
           fileType = arrUploadFileType;
           var fileTypeOject = Object.keys(listFileTypeAllow)
               .filter(function (key) { return arrUploadFileType.includes(key) })
               .reduce(function (obj, key) {
                   return Object.assign(obj, {
                       [key]: listFileTypeAllow[key]
                   });
               }, {});
           fileTypeAllowUpload = Object.values(fileTypeOject)
       }
       var artifactModel = StudentEntryModel.artifactFolderModalVM;
       artifactModel.uploadFileTypeOject = uploadFileType;
       StudentEntryModel.warningFileSize = StudentEntryModel.handleFormatWarningFileSize(uploadFileType);
       var fileSizeLimit = maxFileSize + "MB";
       $('#file_upload_artifact').uploadifive({
           'uploadScript': '@Url.Action("UploadArtifactDataFile")',
           'overrideEvents': ['onDialogClose'],
           'buttonText': ' ',
           'fileObjName': 'postedFile',
           'multi': isMass ? true : false,
           'removeCompleted': true,
           'width': 130,
           'height': 32,
           'auto': false,
           //'fileType': fileTypeAllowUpload,
           'accept': fileType,
           //'fileSizeLimit': fileSizeLimit,
           'buttonClass': 'uploadifive-entry-result',
           'onInit': function () {
               $('#file_folder_artifact').css("display", "none");
               StudentEntryModel.initialedUploadFile.file_upload_artifact = true;
               $("#uploadifive-file_upload_artifact-queue").hide();
               $('#uploadifive-file_upload_artifact').click(function(e) {
                   validFile = true;
               });
               $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
           },
           'onSelect': function (queue) {
               StudentEntryModel.resetErrorUploadFile();
               var doc = ".";
               if ($('.uploadifive-queue-item').length > 0) {
                   $('.uploadifive-queue-item').each(function (idx, element) {
                       var allowUpload = true;
                       var file = $(element).first().data('file');
                       var extension = doc.concat(file.name.replace(/^.*\./, '').toLowerCase());
                       // check file not allow upload
                       if (uploadFileType.find(o => o.SupportFileType.some(s => s.includes(extension))) === undefined) {
                           artifactModel.notAllowedFile.push(file);
                           resetItemUpload(element);
                           allowUpload = false;
                       }
                       // check file duplicate upload
                       var _name = file.name;
                       if (StudentEntryModel.handleCheckFileExist(artifactModel.artifacts, _name)) {
                           artifactModel.duplicateFile.push(file);
                       }
                       // check exceed file upload
                       var sizeFile = file.size;
                       var fileSizeCheck = uploadFileType.find(function (item) { return item.SupportFileType.includes(extension) });
                       var getSizeAllow = fileSizeCheck?.MaxFileSizeInBytes;
                       if (getSizeAllow > 0 && (getSizeAllow < sizeFile)) {
                           artifactModel.exceedFileSize.push({ name: file.name, size: StudentEntryModel.onBytesToSize(getSizeAllow), type: fileSizeCheck.DisplayName });
                           resetItemUpload(element);
                           allowUpload = false;
                       }
                       if (allowUpload) {
                           artifactModel.fileUploads.push(file);
                       }
                   })
                   artifactModel.uploadFileExceedSizeOject = artifactModel.exceedFileSize;
                   $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
                   if ((artifactModel.notAllowedFile != null && artifactModel.notAllowedFile.length > 0) || (artifactModel.exceedFileSize != null && artifactModel.exceedFileSize.length > 0)) {
                       if (!isMass) {
                           if (artifactModel.notAllowedFile != null && artifactModel.notAllowedFile.length > 0) {
                               CustomAlert('The file you are trying to upload is not a ' + StudentEntryModel.artifactFolderModalVM.allowFileTypes + ' file. Please try again', true);
                               $('body').find('.ui-dialog').css('z-index', 99999);
                           }
                           if (artifactModel.exceedFileSize != null && artifactModel.exceedFileSize.length > 0) {
                               CustomAlert('The file you are trying to upload exceed the file size limit: ' + artifactModel.exceedFileSize.map(function (m) { return m.size }) + ' . Please try again', true);
                               $('body').find('.ui-dialog').css('z-index', 99999);
                               artifactModel.exceedFileSize = [];
                           }
                       }
                       else {
                           artifactModel.objectPopUpModalErrorFileUploadMass = getObjectPopUpModalErrorFileUploadMass();
                           artifactModel.isShowPopUpModalErrorFileUploadMass = true;
                       }
                   }
                   if (artifactModel.duplicateFile != null && artifactModel.duplicateFile.length > 0) {
                       popUpModalDuplicateFileName(artifactModel.duplicateFile?.map(function (item) { return item.name }).join(', '), isMass);
                       return false;
                   }
                   if (artifactModel.fileUploads != null && artifactModel.fileUploads.length > 0) {
                       StudentEntryModel.handleUploadFiles(artifactModel.fileUploads);
                       resetAllUpload();
                       $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
                   }
               }
           },
           'onError': function (errorType, file) {
               $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
               $("#uploadifive-file_upload_artifact-queue").hide();
               $('.modalUploadFile').unblock();
               validFile = false;
               $('.uploadifive-queue-item').first().remove();
               if (errorType == 'FORBIDDEN_FILE_TYPE') {
                   if (!isMass) {
                       CustomAlert('The file you are trying to upload is not a ' + StudentEntryModel.artifactFolderModalVM.allowFileTypes + ' file. Please try again', true);
                   }
               } else if (errorType == 'FILE_SIZE_LIMIT_EXCEEDED') {
                   CustomAlert('The file you are trying to upload exceed the file size limit: ' + fileSizeLimit + ' . Please try again', true);
               } else {
                   CustomAlert('The file ' + file.name + ' returned an error and was not added to the queue.', true);
               }
               $('body').find('.ui-dialog').css('z-index', 99999);
           }
       });
   }

   function setUploadFolder(uploadFileType, isMass) {
       if (StudentEntryModel.initialedUploadFile.file_folder_artifact) {
           $('#file_folder_artifact').uploadifive('destroy');
           StudentEntryModel.initialedUploadFile.file_folder_artifact = false;
       }
       var artifactModel = StudentEntryModel.artifactFolderModalVM;
       artifactModel.uploadFileTypeOject = uploadFileType;
       $('#file_folder_artifact').uploadifive({
           'uploadScript': '',
           'overrideEvents': ['onDialogClose'],
           'buttonText': ' ',
           'fileObjName': 'postedFile',
           'multi': false,
           'removeCompleted': true,
           'width': 130,
           'height': 32,
           'auto': false,
           'buttonClass': 'uploadifive-entry-result',
           'onInit': function () {
               StudentEntryModel.initialedUploadFile.file_folder_artifact = true;
               $("#uploadifive-file_folder_artifact-queue").hide();
               $('#uploadifive-file_folder_artifact').click(function(e) {
                   validFile = true;
               });
               $('#uploadifive-file_folder_artifact > input[type=file]').attr('webkitdirectory', '');
               $('#uploadifive-file_folder_artifact > input[type=file]').attr('mozdirectory', '');
           },
           'onSelect': function (queue) {
               StudentEntryModel.initialedUploadFile.file_folder_artifact = true;
               var doc = ".";
               if ($('.uploadifive-queue-item').length > 0) {
                   $('.uploadifive-queue-item').each(function (idx, element) {
                       var allowUpload = true;
                       var file = $(element).first().data('file');
                       var extension = doc.concat(file.name.replace(/^.*\./, '').toLowerCase());
                       // check file not allow upload
                       if (uploadFileType.find(o => o.SupportFileType.some(s => s.includes(extension))) === undefined) {
                           artifactModel.notAllowedFile.push(file);
                           resetItemUpload(element);
                           allowUpload = false;
                       }
                       // check file duplicate upload
                       var _name = file.name;
                       if (StudentEntryModel.handleCheckFileExist(artifactModel.artifacts, _name)) {
                           artifactModel.duplicateFile.push(file);
                       }
                       // check exceed file upload
                       var sizeFile = file.size;
                       var fileSizeCheck = uploadFileType.find(function (item) { return item.SupportFileType.includes(extension) });
                       var getSizeAllow = fileSizeCheck?.MaxFileSizeInBytes;
                       if (getSizeAllow > 0 && (getSizeAllow < sizeFile)) {
                           artifactModel.exceedFileSize.push({ name: file.name, size: StudentEntryModel.onBytesToSize(getSizeAllow), type: fileSizeCheck.DisplayName });
                           resetItemUpload(element);
                           allowUpload = false;
                       }
                       if (allowUpload) {
                           artifactModel.fileUploads.push(file);
                       }
                   })
                   artifactModel.uploadFileExceedSizeOject = artifactModel.exceedFileSize;
                   $('#uploadifive-file_folder_artifact > input[type=file]').attr('webkitdirectory', '');
                   $('#uploadifive-file_folder_artifact > input[type=file]').attr('mozdirectory', '');
                   if ((artifactModel.notAllowedFile != null && artifactModel.notAllowedFile.length > 0) || (artifactModel.exceedFileSize != null && artifactModel.exceedFileSize.length > 0)) {
                       if (!isMass) {
                           if (artifactModel.notAllowedFile != null && artifactModel.notAllowedFile.length > 0) {
                               artifactModel.objectPopUpModalErrorFileUploadMass = getObjectPopUpModalErrorFileUploadMass();
                               artifactModel.isShowPopUpModalErrorFileUploadMass = true;
                           }
                           if (artifactModel.exceedFileSize != null && artifactModel.exceedFileSize.length > 0) {
                               CustomAlert('The file you are trying to upload exceed the file size limit: ' + artifactModel.exceedFileSize.map(function (m) { return m.size }) + ' . Please try again', true);
                               $('body').find('.ui-dialog').css('z-index', 99999);
                               artifactModel.exceedFileSize = [];
                           }
                       }
                       else {
                           artifactModel.objectPopUpModalErrorFileUploadMass = getObjectPopUpModalErrorFileUploadMass();
                           artifactModel.isShowPopUpModalErrorFileUploadMass = true;
                       }
                   }
                   if (artifactModel.duplicateFile != null && artifactModel.duplicateFile.length > 0) {
                       popUpModalDuplicateFileName(artifactModel.duplicateFile?.map(function (item) { return item.name }).join(', '), isMass);
                       return false;
                   }
                   if (artifactModel.fileUploads != null && artifactModel.fileUploads.length > 0) {
                       StudentEntryModel.handleUploadFiles(artifactModel.fileUploads);
                       resetAllUpload();
                       $('#uploadifive-file_folder_artifact > input[type=file]').attr('webkitdirectory', '');
                       $('#uploadifive-file_folder_artifact > input[type=file]').attr('mozdirectory', '');
                   }
               }
           },
           'onError': function (errorType, file) {
               $('#uploadifive-file_folder_artifact > input[type=file]').attr('webkitdirectory', '');
               $('#uploadifive-file_folder_artifact > input[type=file]').attr('mozdirectory', '');
               $("#uploadifive-file_folder_artifact-queue").hide();
               $('.modalUploadFile').unblock();
               validFile = false;
               $('.uploadifive-queue-item').first().remove();
               if (errorType == 'FORBIDDEN_FILE_TYPE') {
                   if (!isMass) {
                       CustomAlert('The file you are trying to upload is not a ' + StudentEntryModel.artifactFolderModalVM.allowFileTypes + ' file. Please try again', true);
                   }
               } else {
                   CustomAlert('The file ' + file.name + ' returned an error and was not added to the queue.', true);
               }
               $('body').find('.ui-dialog').css('z-index', 99999);
           }
       });
   }

   function resetAllUpload() {
       $('.uploadifive-queue-item').each(function (indx, element) {
           $('#file_upload_artifact').uploadifive('cancel', $(element).first().data('file'));
           $(element).remove();
       })
   }

   function resetItemUpload(element) {
       $('#file_upload_artifact').uploadifive('cancel', $(element).first().data('file'));
       $(element).remove();
   }

   function getObjectPopUpModalErrorFileUploadMass() {
       var hash = Object.create(null);
       var grouped = [];
       StudentEntryModel.artifactFolderModalVM.exceedFileSize.forEach(function (o) {
           var key = ['type', 'size'].map(function (k) { return o[k]; }).join('|');
           if (!hash[key]) {
               hash[key] = { type: o.type, size: o.size, files: [] };
               grouped.push(hash[key]);
           }
           ['name'].forEach(function (k) { hash[key]['files'].push({ file: o['name'] }) });
       });
       var messageSize = "";
       var _length = grouped.length;
       grouped.forEach(function (o) {
           messageSize += '*The ' + o.type + ' ' + (_length > 1 ? "files " : "file ") + ' exceeds ' + o.size + ' of the file size limit: ';
           messageSize += '<p>';
           messageSize += '<ul style="list-style: inside; padding-left: 2%; margin-bottom: 0px; ">';
           o.files?.map(function (m) { return messageSize += ('<li style="padding-bottom: 5px">' + m.file + '</li>'); });
           messageSize += '</ul>';
           messageSize += '</p>';
       })
       _length = StudentEntryModel.artifactFolderModalVM.notAllowedFile.length
       if (_length > 0) {
           messageSize += '*The following files were not uploaded due to disallowed file types:';
           messageSize += '<p>';
           messageSize += '<ul style="list-style: inside; padding-left: 2%; margin-bottom: 0px; ">';
           StudentEntryModel.artifactFolderModalVM.notAllowedFile.map(function (m) { return messageSize += ('<li style="padding-bottom: 5px">' + m.name + '</li>'); });
           messageSize += '</ul>';
           messageSize += '</p>';
       }
       return messageSize;
   }

   function noteButtonRenderer(instance, td, row, col, prop) {
       Handsontable.dom.empty(td);
       var rule = metaData[prop];
       var noteType = rule.NoteType;

       var noteValue = '';
       var noteId = '';

       var colName = columnData[col].data;
       var subColName = colName.split('.');
       if (colName.indexOf('overallScore') > -1) {
           if (hansonStudentData[row].overallScore.Notes && hansonStudentData[row].overallScore.Notes.length > 0) {
               for (var i = 0; i < hansonStudentData[row].overallScore.Notes.length; i++) {
                   var itemNote = hansonStudentData[row].overallScore.Notes[i];
                   if (itemNote.NoteKey == subColName[1]) {
                       noteId = itemNote.TestResultScoreNoteID;
                       noteValue = itemNote.Note;
                       break;
                   }
               }
           }
       } else {
           var subNameArr = colName.split('.');
           if (subNameArr.length > 0) {
               var subScoreName = subNameArr[0];
               if (hansonStudentData[row][subScoreName].Notes) {
                   if (hansonStudentData[row][subScoreName].Notes.length > 0) {
                       for (var i = 0; i < hansonStudentData[row][subScoreName].Notes.length; i++) {
                           var itemNote = hansonStudentData[row][subScoreName].Notes[i];
                           if (itemNote.NoteKey == subColName[1]) {
                               noteId = itemNote.TestResultSubScoreNoteID;
                               noteValue = itemNote.Note;
                               break;
                           }
                       }
                   }
               }
           }
       }
       if (noteValue == undefined) {
           noteValue = '';
       }
       if (noteId == undefined) {
           noteId = '';
       }
       var link = document.createElement('a');
       link.className = 'note';
       link.textContent = '+ Add Note';
       link.setAttribute('note-value', noteValue);
       link.setAttribute('note-id', noteId);
       noteButtonRendererClick(link, td, row, col, noteType);
       td.appendChild(link);

       var button = document.createElement('a');
       button.className = 'note';
       if (noteType == 'date') {
           button.innerHTML = '<img src="/Scripts/DataLockerEntryResult/Images/date_note.png" height="16" width="16">';
       } else {
           button.innerHTML = '<img src="/Scripts/DataLockerEntryResult/Images/sticky_note.png" height="16" width="16">';
       }


       button.setAttribute('note-value', noteValue);
       button.setAttribute('note-id', noteId);
       noteButtonRendererClick(button, td, row, col, noteType);
       td.appendChild(button);

       if (noteType == 'date') {
           if (noteValue != '' && noteValue != null) {
               $(link).hide();
               $(button).show();

               var objectNote = JSON.parse(noteValue);
               if (objectNote.Notes.length < 1) {
                   $(link).show();
                   $(button).hide();
               }
           } else {
               $(button).hide();
           }
       } else {
           if (noteValue != '' && noteValue != null) {
               $(link).hide();
           } else {
               $(button).hide();
           }
       }


       td.className = 'htCenter htMiddle note';
       return td;
   }

   function noteButtonRendererClick(button, td, row, col, noteType) {
       Handsontable.dom.addEvent(button, 'click', function(e) {
           e.preventDefault();
           StudentEntryModel.selectedTD = td;
           StudentEntryModel.selectedRow = row;
           StudentEntryModel.selectedCol = col;
           StudentEntryModel.studentName = hansonStudentData[row].overallScore.FullName;
           StudentEntryModel.noteColumnName = columnData[col].label;

           var noteId = '';
           var noteValue = '';
           var $tag = $(td).find('.note');
           var link = $tag.get(0);
           var button = $tag.get(1);
           if ($(link).is(':visible')) {
               noteValue = $(link).attr('note-value');
               noteId = $(link).attr('note-id');
           } else if ($(button).is(':visible')) {
               noteValue = $(button).attr('note-value');
               noteId = $(button).attr('note-id');
           }

           if (noteType == 'date') {
               StudentEntryModel.openPopupNoteDate(noteId, noteValue);
           } else {
               StudentEntryModel.openPopupNote(noteId, noteValue);
           }
       });
   }

   function yesReplaceArtifact(isMass) {
       if (isMass === "true") {
           StudentEntryModel.handleUploadFiles(StudentEntryModel.artifactFolderModalVM.fileUploads);
           resetAllUpload();
       }
       else {
           var file = $('.uploadifive-queue-item').first().data('file');
           StudentEntryModel.handleUploadFiles([file]);
           resetAllUpload();
       }
   }

   function noReplaceArtifact() {
       var fileUpload = StudentEntryModel.artifactFolderModalVM.fileUploads.filter(function (el) {
           return !StudentEntryModel.artifactFolderModalVM.duplicateFile.map(function (item) { return item.name }).includes(el.name)
       })
       if (fileUpload && fileUpload.length > 0) {
           StudentEntryModel.handleUploadFiles(fileUpload);
       }
       resetAllUpload();
       StudentEntryModel.resetErrorUploadFile();
    }

   function popUpModalDuplicateFileName(filename, isMass) {
       var message = "";
       if (!isMass) {
           message = 'A file with the same name exists for Student ' + StudentEntryModel.studentName + '. Do you want to replace?';
       }
       else {
           _length = StudentEntryModel.artifactFolderModalVM.duplicateFile.length
           if (_length > 0) {
               message += '<p>The file name already exists:</p>';
               message += '<p>';
               message += '<ul style="list-style: inside; padding-left: 2%; margin-bottom: 0px; ">';
               StudentEntryModel.artifactFolderModalVM.duplicateFile.map(function (m) { return message += ('<li style="padding-bottom: 5px">' + m.name + '</li>'); });
               message += '</ul>';
               message += '</p>';
               message += '<p>Do you want to replace it?</p>';
           }
       }
       var popupId = '#confirmReplaceArtifactFile';
       var oldzIndex = $(popupId).parent('.ui-dialog').css('z-index');
       var yesButton = "<button style='width:auto;' onclick=\"yesReplaceArtifact('" + isMass + "');$('" + popupId + "').dialog('close')\">Yes</button>";
       var noButton = "<button style='width:auto;' onclick=\"noReplaceArtifact();$('" + popupId + "').dialog('close')\">No</button>";


       var strHtml = '<section class="grid_5">' +
           '<div class="block-border" style="width:400px;">' +
           '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
           '</div><div style="text-align:right;padding-top:20px;padding-bottom:10px;">' + noButton + '&nbsp;' + yesButton + '</div></div></div></section>';

       var modals = $('.modal-component:visible');
       var maxZindexExist = StudentEntryModel.getMaxZindexExist(modals);

       $("<div></div>")
           .html(strHtml)
           .addClass("dialog")
           .attr("id", "confirmReplaceArtifactFile")
           .appendTo("body")
           .dialog({
               close: function() {
                   $('.ui-widget-overlay:last').remove();
                   $(popupId).parent('.ui-dialog').css({ 'z-index': oldzIndex });
                   $(this).remove();
                   resetAllUpload();
               },
               modal: false,
               width: 460,
               maxheight: 500,
               resizable: false,
               zIndex: maxZindexExist + 2
           });
       StudentEntryModel.showModalDialogBGCustom(maxZindexExist + 1);
   }

   function getMaxZindexExist(modals) {
       var m = [];
       modals.each(function(i, modal) {
           var modalZindex = parseInt($(modal).css('z-index'), 10)
           m.push(modalZindex)
       })
       var result = Math.max(m)
       return result;
   }

   function formatDataForMultiUpdate(column, value) {
       var rule = metaData[column];
       var scoreFormatNumeric = [
           'ScorePercent',
           'ScorePercentage',
           'ScoreRaw',
           'ScoreScaled',
           'ScoreCustomN_1',
           'ScoreCustomN_2',
           'ScoreCustomN_3',
           'ScoreCustomN_4'
       ];

       for (var m = 0; m < scoreFormatNumeric.length; m++) {
           if (column.indexOf(scoreFormatNumeric[m]) != -1) {
               if (rule && rule.DataType) {
                   if (rule.DataType == "Numeric") {
                       if (rule.DisplayOption && rule.FormatOption == "LabelValueText" && (rule.DisplayOption == "label" || rule.DisplayOption == "both")) {
                           break;
                       }
                       value = round(value, rule.DecimalScale);
                       break;
                   }

               }
           }
       }
       return value;
   }

   function updateMultiData(changes, source) {
       var dataColCheckbox = $('div[name="studentEntryResult"]').handsontable('getDataAtCol', 0);
       var column = changes[0][1].split('.');
       var colIndex = $('div[name="studentEntryResult"]').handsontable('propToCol', changes[0][1]);
       var currentCell = $('div[name="studentEntryResult"]').handsontable('getCell', changes[0][0], colIndex);

       var isCurrentCellInValid = false;
       if (currentCell) {
           isCurrentCellInValid = currentCell.className.indexOf("htInvalid") != -1;
       }

       if (changes[0][1] != "") {
           for (var i = 0; i < dataColCheckbox.length; i++) {
               if (dataColCheckbox[i] == true) {
                   hansonStudentData[i][""] = false;
                   hansonStudentData[i][column[0]][column[1]] = formatDataForMultiUpdate(changes[0][1], changes[0][3]);
                   autoRoundIntegerColumn(changes);
                   var cellMeta = $('div[name="studentEntryResult"]').handsontable('getCellMeta', i, colIndex);
                   if (isCurrentCellInValid) {
                       cellMeta.valid = false;
                       var cell = $('div[name="studentEntryResult"]').handsontable('getCell', i, colIndex, true);
                       if (cell) {
                           cell.setAttribute('data-invalid', $(currentCell).attr("data-invalid"));
                       }
                   } else {
                       cellMeta.valid = true;
                   }
               }
           }
       }

       autoRoundIntegerColumn(changes);
       $('div[name="studentEntryResult"]').handsontable('render');
   }

   function autoRoundIntegerColumn(changes) {
       var rule = metaData[changes[0][1]];
       var row = changes[0][0];
       var column = changes[0][1].split('.');
       if (typeof rule !== 'undefined' && typeof rule.DataType !== 'undefined') {
           if (rule.DataType == "Numeric") {
               var value = changes[0][3];
               if (!Number.isInteger(value) && typeof value == 'number') {
                   value = round(value, rule.DecimalScale);
                   hansonStudentData[row][column[0]][column[1]] = value;
               }
           }

       }
   }

   function round(value, decimals) {
       return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
   }

   function autoCalcuData(changes, dataCheckbox) {
       var changeProp = changes[0][1];
       if (!!changeProp && !!metaData[changeProp] && metaData[changeProp].DataType == "Numeric") {
           var row = changes[0][0];
           for (var j = 0; j < changes.length; j++) {
               if (j == 0) {
                   calcuValue(row);
               }
               if (row != changes[j][0]) {
                   row = changes[j][0];
                   calcuValue(row);
               }
           }

           var rowChecked = dataCheckbox.filter(function(isCheck) {
               return isCheck;
           });

           if (rowChecked.length > 0) {
               for (var i = 0; i < dataCheckbox.length; i++) {
                   if (dataCheckbox[i] == true) {
                       calcuValue(i);
                   }
               }
           }

           var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
           hot.validateRows([row]);
           $('div[name="studentEntryResult"]').handsontable('render');
       }
   }

   function calcuValue(row) {
       var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
       Object.keys(metaData).forEach(function(prop) {
           var setting = metaData[prop];
           var level = prop.split('.')[0];
           var scoreName = prop.split('.')[1];
           var derivedName = setting.DerivedName;
           if (setting.IsAutoCalculation) {
               var decimalScale = setting.DecimalScale;
               var format = 0;

               if (typeof decimalScale !== 'undefined' && decimalScale == 1) {
                   format = 1;
               } else if (typeof decimalScale !== 'undefined' && decimalScale == 2) {
                   format = 2;
               } else if (typeof decimalScale !== 'undefined' && decimalScale == 3) {
                   format = 3;
               }

               var Expression = setting.Expression;
               if (derivedName === 'sum' || derivedName === 'average') {
                   var columns = getColumnsDerived(Expression);
                   var sum = 0;
                   var count = 0;
                   var hasValue = false;
                   if (columns.length > 0) {
                       columns.forEach(function(column) {
                           var value = hot.getDataAtRowProp(row, column);
                           if (!!metaData[column].DisplayOption && !!metaData[column].SelectListOptions) {
                               value = getValueFromLabelDropdown(value, column);
                           }
                           if (value == null || value === '') {
                               value = 0;
                           } else {
                               count++;
                           }

                           hasValue = true;
                           value = parseFloat(value);
                           sum += value;
                       });
                   }
                   if (hasValue) {
                       if (derivedName === 'sum') {
                           var _sum = count ? sum.toFixed(format) : '';
                           hansonStudentData[row][level][scoreName] = _sum;
                       } else {
                           var average = sum && count ? sum / count : 0;
                           average = count ? average.toFixed(format) : '';
                           hansonStudentData[row][level][scoreName] = average;
                       }
                   }
               }
               if (derivedName === 'percent') {
                   var rawCol = level + ".ScoreRaw";
                   var rawMeta = metaData[rawCol];
                   var maxValue = 0;
                   var colRownOfRawDerived = 0;
                   var rawValue = hot.getDataAtRowProp(row, rawCol);
                   var listValue = rawMeta.SelectListOptions;
                   if (listValue != null && listValue.length > 0) {
                       listValue.forEach(function(selectList) {
                           var numVal = parseFloat(selectList.Option);
                           if (numVal > maxValue) {
                               maxValue = numVal;
                           }
                       });
                   } else if (rawMeta.IsAutoCalculation) {
                       if (rawMeta.DerivedName === 'sum' || rawMeta.DerivedName === 'average') {
                           var columnDrs = getColumnsDerived(rawMeta.Expression);
                           colRownOfRawDerived = columnDrs.length;
                           maxValue = getMaxValueOfRawDerived(columnDrs);
                           rawValue = getRawDerivedValue(row, columnDrs, rawMeta.DerivedName, hot);
                       }
                   } else {
                       maxValue = rawMeta.MaxValue;
                   }
                   if (rawValue == null || rawValue === '') {
                       hansonStudentData[row][level][scoreName] = null;
                   } else {
                       rawValue = parseFloat(rawValue);
                       if (maxValue > 0) {
                           var val = (rawValue / maxValue);
                           if (rawMeta.DerivedName === 'average' && colRownOfRawDerived > 0) {
                               val = val * colRownOfRawDerived;
                           }
                           hansonStudentData[row][level][scoreName] = (val * 100).toFixed(format);
                       } else {
                           hansonStudentData[row][level][scoreName] = 0;
                       }
                   }
               }
           }
       });
   }

   function getMaxValueOfRawDerived(columnDrs) {
       var maxValue = 0;
       if (columnDrs.length > 0) {
           columnDrs.forEach(function(column) {
               var mv = 0;
               var colMt = metaData[column];
               var lv = colMt.SelectListOptions;
               if (lv != null && lv.length > 0) {
                   lv.forEach(function(selectList) {
                       var numVal = parseFloat(selectList.Option);
                       if (numVal > mv) {
                           mv = numVal;
                       }
                   });
               } else {
                   mv = colMt.MaxValue;
               }
               maxValue += mv;
           });
       }
       return maxValue;
   }

   function getRawDerivedValue(row, columns, derivedName, hot) {
       var sum = 0;
       if (columns.length > 0) {
           columns.forEach(function(column) {
               var value = hot.getDataAtRowProp(row, column);
               if (!!metaData[column].DisplayOption && !!metaData[column].SelectListOptions) {
                   value = getValueFromLabelDropdown(value, column);
               }
               if (value == null || value === '') {
                   value = 0;
               }
               value = parseFloat(value);
               sum += value;
           });
       }
       var result = 0;
       if (derivedName === 'sum') {
           result = sum;
       } else {
           result = sum / columns.length;
       }

       return result;
   }

   function getColumnsDerived(derivedIncludedColumns) {
       var columns = [];
       if (derivedIncludedColumns != null && derivedIncludedColumns.length > 0) {
           derivedIncludedColumns.forEach(function(item) {
               if (item.Level === "Overall") {
                   if (item.IncludedColumns != null && item.IncludedColumns.length > 0) {
                       item.IncludedColumns.forEach(function(colType) {
                           var propName = "overallScore.Score" + colType;
                           columns.push(propName);
                       });
                   }
               }
               if (item.Level === "Subscore") {
                   if (item.IncludedColumns != null && item.IncludedColumns.length > 0) {
                       var scoreId = item.ScoreId;
                       StudentEntryModel.printResult.customSubScores.forEach(function(sub, i) {
                           if (sub.VirtualTestCustomSubScoreId === scoreId) {
                               item.IncludedColumns.forEach(function(colType) {
                                   var propName = "subScore_" + i + ".Score" + colType;
                                   columns.push(propName);
                               });
                           }
                       });
                   }
               }
           });
       }

       return columns;
   }

   function getLevelName(level, scoreId) {
       var levelName = level;
       if (level === "Subscore") {
           for (var i = 0; i < StudentEntryModel.printResult.customSubScores.length; i++) {
               var item = StudentEntryModel.printResult.customSubScores[i];
               if (item.VirtualTestCustomSubScoreId == scoreId) {
                   levelName = item.Name;
                   break;
               }
           }
       }
       return levelName;
   }

   function getColumnName(level, scoreId, column) {
       if (level == "Overall") {
           for (var i = 0; i < StudentEntryModel.printResult.customScore.ScoreInfos.length; i++) {
               var scoreInfoItem = StudentEntryModel.printResult.customScore.ScoreInfos[i];
               if (column == scoreInfoItem.ScoreName) {
                   return scoreInfoItem.ScoreLable;
               }
           }
       } else {
           for (var i = 0; i < StudentEntryModel.printResult.customSubScores.length; i++) {
               var item = StudentEntryModel.printResult.customSubScores[i];
               if (item.VirtualTestCustomSubScoreId == scoreId) {
                   for (var j = 0; j < item.ScoreInfos.length; i++) {
                       var scoreInfoItem = item.ScoreInfos[j];
                       if (column == scoreInfoItem.ScoreName) {
                           return scoreInfoItem.ScoreLable;
                       }
                   }
               }
           }
       }
   }

   function insertString(mainString, insString, pos) {
       if (typeof(pos) == "undefined") {
           pos = 0;
       }

       if (typeof(insString) == 'undefined') {
           insString = '';
       }

       return mainString.slice(0, pos) + insString + mainString.slice(pos);
   }

    function getHeaderString(label) {
       var maxChars = 50;
       if (label && label.length > maxChars) {
           let result = '';
           let currentLineLength = 0;
           const words = label.split(' ');

           for (let i = 0; i < words.length; i++) {
               const word = words[i];
               if (currentLineLength + word.length + 1 > maxChars) {
                   result += '<br>';
                   currentLineLength = 0;
               }
               result += (currentLineLength > 0 ? ' ' : '') + word;
               currentLineLength += word.length + 1;
           }
           label = result;
       }
       return label;
   }

   function convertJqueryFormatToHandsonTableFormat() {
       var jQueryFormat = jqueryDatePickerFormat();
       var result =jQueryFormat;
       if ((jQueryFormat.match(/M/g)||[]).length = 1) {
           result = result.replace(/M/g, 'MMM')
       } else if ((jQueryFormat.match(/M/g)||[]).length = 2) {
           result = result.replace(/MM/g, 'MMMMM')
       }
       result = result.replace(/d/g, 'D').replace(/y/g, 'YY').replace(/m/g, 'M')
       return result;
   }

   function calculateTextRealWidth(text, isClickableButton = false) {
       var textEl = document.createElement("span");
       document.body.appendChild(textEl);
       textEl.classList.add(isClickableButton ? "text-clickable" : "calculator-text");
       textEl.innerHTML = !!text ? getHeaderString(text) : text;
       width = Math.ceil(textEl.clientWidth);
       document.body.removeChild(textEl);
       return width + (isClickableButton ? 12 : 30);
   }

   function calculateCellHaveColorRealWidth(text, isDropdown = false) {
       var textEl = document.createElement("span");
       document.body.appendChild(textEl);
       textEl.classList.add("cell-color-text");
       textEl.innerHTML = !!text ? getHeaderString(text) : text;
       width = Math.ceil(textEl.clientWidth);
       document.body.removeChild(textEl);
       return width + (isDropdown ? 38 : 8);
   }

   function saveAndCloseResults() {
       isSaveAndClose = true;
       var $studentEntryResult = $('.student-entry-result');
       if ($studentEntryResult.find('td.htInvalid').length) {
           StudentEntryModel.isShowModalWarning = false;
           StudentEntryModel.isShowModalPrint = true;
           StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
           return;
       }
       var interval = setInterval(function () {
           if (completedChange) {
               saveResults().then(function () {
                   window.location.href = StudentEntryModel.enterResultsUrl;
               });
               clearInterval(interval);
               completedChange = false;
           }
       }, 500);
   }

    </script>
    <script>
   function checkUnSaveSelected() {
       if (hansonStudentData && oldHandsonStudentData) {
           var listA = [];
           var listB = [];
           JSON.parse(JSON.stringify(hansonStudentData)).forEach(function (item, index) {
               var isSelected = item[""];
               if (isSelected) {
                   delete item[""];
                   listA.push(item);
                   listB.push(JSON.parse(oldHandsonStudentData)[index])
               }
           });
           return JSON.stringify(listA) != JSON.stringify(listB);
       }
       return false;
   }

   function handleCancelNavSRDialog() {
       $('#datalockerNavSRDialog').dialog('close');
   }

   function wrapSaveClickNavSr() {
       handleCancelNavSRDialog();
       toggleShowBtnStudentResult();
       saveResults().then(function() {
           setTimeout(function () {
               navigateDataLockerToSR()
           }, 1000)
       })
   }

   function handleNavSR() {
       var dataChanged = checkUnSaveSelected();
       if (dataChanged) {
           StudentEntryModel.isClickNavSR = true;
           StudentEntryModel.isShowModalWarning = true;
       } else {
           navigateDataLockerToSR()
       }
   }

   function navigateDataLockerToSR() {
       StudentEntryModel.isClickNavSR = false;
       var listCheckedBox = $('div[name="studentEntryResult"] table tbody .htCheckBox input[type=checkbox]');
       var dataRowSelected = []
       listCheckedBox.each(function (index, item) {
           if ($(item).is(':checked') && hansonStudentData[index]) {
               dataRowSelected.push(hansonStudentData[index])
           }
       });
        var dataRowValids = [];
       dataRowSelected.forEach(function (row) {
           var dataRowValid = false
           Object.keys(row).forEach(function (key) {
               if (key == 'overallScore' || key.indexOf('subScore') !== -1) {
                   if (checkRowHasValue(row[key])) {
                       dataRowValid = true;
                       return;
                   }
               }
           })
           if (dataRowValid) {
               dataRowValids.push(row)
           }
       })

       var studentIdSelected = dataRowSelected.map(function (item) {
           return item.overallScore.StudentID
       })

        var rowResultDate = dataRowValids.map(function (item) {
            return item.overallScore.ResultDate
        });

       if (!rowResultDate.length) {
           rowResultDate = hansonStudentData.map(function (item) {
               return item.overallScore.ResultDate
           })
       }

       rowResultDate.sort(function(a, b) {
           return new Date(a) - new Date(b);
       })

       var keyDataLockNavSR = `EntryResultFilterSRStudentId${new Date().getTime()}`;
       localStorage.setItem(keyDataLockNavSR, JSON.stringify(studentIdSelected));

        var virtualTestId = '@Model.VirtualTestId';
        var districtId = '@Model.DistrictId';
        if (!districtId || districtId == '0') {
            districtId = '@Model.CurrentUserDistrictId'
        }
        var schoolid = '&schoolid=' + '@Model.SchoolId';
        var teacherid = '&teacherid='+ '@Model.TeacherId';
        var classid = '&classid=' + '@Model.ClassId';

       var href = `${location.origin}/Content/HtmlModules/studentReport`
       + `/#/student-results?virtualtestids=${virtualTestId}`
           + `&districtid=${districtId + schoolid + teacherid + classid}&datefrom=${rowResultDate[0]}&dateto&keyDataLockNavSR=` + keyDataLockNavSR;
       window.open(href, '_blank')
   }

   function checkRowHasValue(row) {
       if (!row) return false;
       var hasValue = false;
       Object.keys(row).forEach(function (propKey) {
           var propArray = ['Artifacts', 'Notes'];
           var validKey = propArray.includes(propKey) || propKey.indexOf('Score') === 0;
           if (validKey) {
               var hasRowValue = false
               if (row[propKey] && Array.isArray(row[propKey]) && propArray.includes(propKey)) {
                   hasRowValue = Boolean(row[propKey].length)
               } else {
                   hasRowValue = Boolean(row[propKey])
               }
               if (hasRowValue) {
                   hasValue = hasRowValue;
                   return;
               }
           }
       });
       return hasValue;
   }
    </script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-regular.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-shims.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-solid.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/fontawesome.min.js")"></script>
}
