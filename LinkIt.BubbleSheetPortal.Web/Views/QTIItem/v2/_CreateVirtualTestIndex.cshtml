@*@MvcHtmlString.Create(
    Bundle.Css()
        .Add(@Url.Content("~/Content/themes/AssessmentItem/css/popup.css"))
                .Add(@Url.Content("~/Content/themes/Constellation/css/reset.css"))
            .Add(@Url.Content("~/Content/themes/Constellation/css/common.css"))
            .Add(@Url.Content("~/Content/themes/Constellation/css/custom.css"))
            .Add(@Url.Content("~/Content/themes/Constellation/css/form.css"))
            .Render("/Content/themes/Constellation/css/assessment_item_combined_#.css")
     )*@

@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleQTIItemVirtualTestIndexBundle()
@*@MvcHtmlString.Create(
    Bundle.JavaScript()
            .Add("/Scripts/knockout-3.0.0.js")
            .Render("/Content/themes/Constellation/js/assessment_item_combined_#.js")
    )*@
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.ScriptKnockout30Bundle()

<script src="@Url.Content("~/Scripts/constants.js")" type="text/javascript"></script>
<link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.0.45/css/materialdesignicons.min.css">
<link href="/Content/libs/select2/comboTreePlugin.css" rel="stylesheet" />
<script src="/Content/libs/select2/comboTreePlugin.js"></script>
<style>
    .dialog-create-test .ui-dialog-titlebar-close {
        margin-right: 24px !important;
        margin-top: 0px !important;
    }

    #portal-v2-containter .ui-dialog.dialog-create-test .ui-dialog-titlebar-close:after, #portal-v2-containter .ui-dialog-titlebar-close:after {
        bottom: 5px;
    }

    body {
        padding-left: var(--drawerCollapsedWidth);
    }
    body {
        padding-top: var(--heightMainNav);
    }
</style>
<div class="modal-component-content">
    <div class="modal-passage-body p-4 form">
        <h3 class="h3 mb-3">Create Test</h3>
        <ul style="display: none" id="error-messages" class="message error"></ul>
        @if (ViewBag.IsPublisher || ViewBag.IsNetworkAdmin)
        {
            <div id="publisherContent">
                <h4 class="mb-3 title-medium">Select State/@LabelHelper.DistrictLabel</h4>
                <div class="row g-3">
                    <div class="col-3 fileter-item mb-3">
                        <label>State</label>
                        <div class="block-text-name w-100">
                            <select id="selectState" class="full-width" data-bind='options: States, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select State", value: StateID'></select>
                            <div class="box-select">
                                <span class="overlay"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-3 fileter-item mb-3">
                        <label>@LabelHelper.DistrictLabel</label>
                        <div class="block-text-name w-100">
                            <select id="selectDistrict" class="full-width" data-bind='options: Districts, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select @LabelHelper.DistrictLabel", value: DistrictID'></select>
                            <div class="box-select">
                                <span class="overlay"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div>
            <h4 class="title-medium mb-3">Select Bank</h4>
            <div class="row g-3">
                <div class="col-6 fileter-item mb-3">
                    <div class="form-check form-check-inline mb-0 form-check-none-bg ps-0">
                        <input id="radioExistingBank" type="radio" name="selectOrCreateBank" value="existingBank" onclick="SelectBankClick()" data-bind="    checked: SelectOrCreateBank" />
                        <label for="radioExistingBank">Existing Bank</label>
                    </div>
                    <div class="form-check form-check-inline mb-0 form-check-none-bg">
                        <input id="radioNewBank" type="radio" name="selectOrCreateBank" value="newBank" onclick="SelectBankClick()" data-bind="    checked: SelectOrCreateBank" />
                        <label for="radioNewBank">New Bank</label>
                    </div>
                </div>
            </div>
            <div class="row g-3">
                <div id="GradeExistingBank" class="col-3 fileter-item mb-3">
                    <label>@LabelHelper.TestGrade</label>
                    <select class="full-width" data-bind='options: Grades, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select @LabelHelper.TestGrade", value: GradeID'></select>
                </div>
                <div id="GradeNewBank" class="col-3 fileter-item mb-3" style="display: none">
                    <label>@LabelHelper.TestGrade</label>
                    <select class="full-width" data-bind='options: GradesNewBank, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select @LabelHelper.TestGrade", value: GradeIDNewBank'></select>
                </div>
                <div id="SubjectExistingBank" class="col-3 fileter-item mb-3">
                    <label>@LabelHelper.Subject</label>
                    <div class="block-text-name w-100">
                        <select id="SubjectExistingBankSelect" class="full-width" data-bind='options: Subjects, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select @LabelHelper.Subject", value: SubjectID'></select>
                        <div class="box-select">
                            <span class="overlay"></span>
                        </div>
                    </div>
                </div>
                <div id="SubjectNewBank" class="col-3 fileter-item mb-3" style="display:none">
                    <label>@LabelHelper.Subject</label>
                    <div class="block-text-name w-100">
                        <select id="SubjectNewBankSelect" class="full-width" data-bind='options: SubjectsNewBank, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select @LabelHelper.Subject", value: SubjectIDNewBank'></select>
                        <div class="box-select">
                            <span class="overlay"></span>
                        </div>
                    </div>
                </div>
                <div class="col-3 fileter-item mb-3">
                    <label>Bank</label>
                    <div class="block-text-name w-100">
                        <select id="BankSelect" class="full-width" data-bind='visible: SelectExistingBank, options: Banks, optionsText: "Text", optionsValue: "Value", optionsCaption: "Select Bank", value: BankID'></select>
                        <div class="box-select">
                            <span class="overlay"></span>
                        </div>
                    </div>
                    <input data-bind='visible: SelectNewBank, value: BankName, valueUpdate: "afterkeydown"' class="full-width" type="text" />
                </div>
                <div class="col-3 fileter-item mb-3 comboTreeArrowBtnv2">
                    <label>Category</label>
                    <input type="text" id="inputVirtualTestCategoryId" placeholder="Select Category" autocomplete="off" class="full-width " />
                </div>
            </div>
            <h4 class="title-medium mb-3">Test</h4>
            <div class="row g-3">
                <div class="col-3 fileter-item">
                    <label>Test Name</label>
                    <input data-bind='value: VirtualTestName, valueUpdate: "afterkeydown"' class="full-width" type="text" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-component-footer buttonAction">
        <div slot="footer">
            <button data-bind="click: CreateTest, enable: CreateTestEnable" type="button">Create Test</button>
        </div>
    </div>
</div>
<script type="text/javascript" language="javascript">
    var categoryElementId = '#inputVirtualTestCategoryId';
    var comboTree1 = null;

    function GetDataSetCategories(districtId) {
        $.get('@Url.Action("GetDataSetCategoriesToComboTreeByDistrictId", "CategoriesAPI")?districtid=' + districtId, function (categoryList) {
            //defaul linkit category
            $('.comboTreeWrapper').css('width', '350px');
            if (!comboTree1) {
                comboTree1 = $(categoryElementId).comboTree({
                    source: categoryList,
                    isMultiple: false,
                    cascadeSelect: true,
                    collapse: false,
                    selected: [46]
                });
            } else {
                comboTree1.setSource(categoryList);
            }
            if (comboTree1 && '@ViewBag.IsIsPublisherOrNetworkAdmin' === 'False')
            {
                $(categoryElementId).parents('.comboTreeInputWrapper').css('pointer-events', 'none');
            }
            $(categoryElementId).change(function(e) {
                $(this).val(comboTree1 ? comboTree1.getSelectedNames() : '');
            });
        });
    }

    function IsNullOrEmpty(value) {
        return typeof (value) === "undefined" || value == null || $.trim(value) == '';
    }

    function AlertMessage(message) {
        var okButton = '<button onclick="closeAlert(this);">OK</button>';

        var strHtml = '<div>' +
            '<div class="block-border">' +
            '<div class="block-content form p-4 text-center"><div class="text-bold">' + message +
            '</div></div>' +
            `<div class="modal-component-footer">
                <div slot="footer">
                    ${okButton}
                </div>
             </div></div></div >`;
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                modal: true,
                width: 400,
                maxheight: 500,
                resizable: false,
                open: function () {
                    $("#alertDialog").prev().css('top', '30px');
                },
                close: function () {
                    $(this).remove();
                },
                dialogClass: 'dialog-alert'
            });
    }

    function YesClick(item) {
        $("#CustomAlertDialog").dialog("close");
    }
</script>

<script type="text/javascript" language="javascript">
    var qtiItemGroupID = '@ViewBag.QTIItemGroupID';

    var viewModel;
    var existingBank = 'existingBank';
    var newBank = 'newBank';

    function KeyValuePair(data) {
        var self = this;
        self.Text = ko.observable(data.Name);
        self.Value = ko.observable(data.Id);
    }

    function CreateVirtualTestViewModel() {
        var self = this;

        self.SelectOrCreateBank = ko.observable(existingBank);

        self.StateID = ko.observable('');
        self.DistrictID = ko.observable('');
        self.GradeID = ko.observable('');
        self.SubjectID = ko.observable('');
        self.BankID = ko.observable('');
        self.BankName = ko.observable('');
        self.VirtualTestName = ko.observable('');

        self.States = ko.observableArray([]);
        self.Districts = ko.observableArray([]);
        self.Grades = ko.observableArray([]);
        self.Subjects = ko.observableArray([]);
        self.Banks = ko.observableArray([]);

        self.GradeIDNewBank = ko.observable('');
        self.SubjectIDNewBank = ko.observable('');
        self.GradesNewBank = ko.observableArray([]);
        self.SubjectsNewBank = ko.observableArray([]);

        self.DisplayStates = function () {
            var url = '@Url.Action("GetStates", "PopulateStateDistrict")';
            if ('@ViewBag.IsNetworkAdmin' === 'True') {
                url = '@Url.Action("GetStatesForNetworkAdmin", "PopulateStateDistrict")';
            }

            $.ajax({
                url: url,
                type: 'get',
                cache: false
            }).done(function (data) {
                var mappedObjects = $.map(data, function (item) {
                    return new KeyValuePair(item);
                });
                self.States(mappedObjects);
            });
        };

        // Subscribe: DistrictID
        self.DisplayGrades = ko.computed(function() {

            if (!IsNullOrEmpty(self.StateID()) && !IsNullOrEmpty(self.DistrictID()) && self.SelectOrCreateBank() === existingBank) {
                var url = '@Url.Action("GetGradesForItemSetSaveTest", "PopulateTest")';
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { districtId: self.DistrictID }
                }).done(function(data) {
                    var mappedObjects = $.map(data, function(item) {
                        return new KeyValuePair(item);
                    });
                    self.Grades(mappedObjects);
                });
            } else {
                self.Grades([]);
            }
        });
          self.DisplayCategories = ko.computed(function () {

              if (!IsNullOrEmpty(self.DistrictID())) {

                  GetDataSetCategories(self.DistrictID());
            }
        });
        self.DisplayGradesNewBank = ko.computed(function () {

            if (!IsNullOrEmpty(self.StateID()) && !IsNullOrEmpty(self.DistrictID()) && self.SelectOrCreateBank() === newBank) {
                //var url = '@Url.Action("GetGrades", "PopulateTest")';
                var url = '@Url.Action("GetGradesHasSubjects", "PopulateTest")';
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { stateId: self.StateID() ,districtId: self.DistrictID}
                }).done(function (data) {
                    var mappedObjects = $.map(data, function (item) {
                        return new KeyValuePair(item);
                    });
                    self.GradesNewBank(mappedObjects);
                });
            } else {
                self.GradesNewBank([]);
            }
        });

        self.InnitView = function () {
            self.DisplayStates();
            self.DisplayGrades();
            if ('@ViewBag.IsPublisher' != 'True') {
                self.StateID('@ViewBag.StateId');
                self.DistrictID('@ViewBag.DistrictId');
            }
        };

        self.InnitView();

        // Subscribe: StateID
        self.DisplayDistricts = ko.computed(function () {
            if (!IsNullOrEmpty(self.StateID())) {
                var url = '@Url.Action("GetDistricts", "PopulateStateDistrict")';
                    if ('@ViewBag.IsNetworkAdmin' === 'True') {
                        url = '@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")';
                    }
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { stateId: self.StateID() }
                }).done(function (data) {
                    var mappedObjects = $.map(data, function (item) {
                        return new KeyValuePair(item);
                    });
                    self.Districts(mappedObjects);
                });
            } else {
                self.Districts([]);
            }
        });

        // Subscribe: GradeID, DistrictID
        self.DisplaySubjects = ko.computed(function () {
            if (!IsNullOrEmpty(self.GradeID()) && !IsNullOrEmpty(self.DistrictID())) {
                var url = '@Url.Action("GetSubjectsForItemSetSaveTest", "SearchBank")';
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { gradeId: self.GradeID(), districtId: self.DistrictID() }
                }).done(function (data) {
                    var mappedObjects = $.map(data, function (item) {
                        return new KeyValuePair(item);
                    });
                    self.Subjects(mappedObjects);
                });
            } else {
                self.Subjects([]);
            }
        });
        self.DisplaySubjectsNewBank = ko.computed(function () {
            if (!IsNullOrEmpty(self.GradeIDNewBank()) && !IsNullOrEmpty(self.DistrictID())) {
                var url = '@Url.Action("GetSubjects", "SearchBank")';
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { gradeId: self.GradeIDNewBank(), districtId: self.DistrictID() }
                }).done(function (data) {
                    var mappedObjects = $.map(data, function (item) {
                        return new KeyValuePair(item);
                    });
                    self.SubjectsNewBank(mappedObjects);
                });
            } else {
                self.SubjectsNewBank([]);
            }
        });
        // Subscribe: SubjectID, DistrictID
        self.DisplayBanks = ko.computed(function () {
            if (!IsNullOrEmpty(self.SubjectID()) && !IsNullOrEmpty(self.DistrictID())) {
                var url = '@Url.Action("GetBanksForItemSetSaveTestNew", "SearchBank")';
                $.ajax({
                    url: url,
                    type: 'get',
                    cache: false,
                    data: { subjectIds: self.SubjectID(), districtId: self.DistrictID(), moduleCode : RestrictionModule.MANAGE }
                }).done(function (data) {
                    var mappedObjects = $.map(data, function (item) {
                        return new KeyValuePair(item);
                    });
                    self.Banks(mappedObjects);
                });
            } else {
                self.Banks([]);
            }
        });

        self.SelectExistingBank = ko.computed(function () {
            return self.SelectOrCreateBank() === existingBank;
        });

        self.SelectNewBank = ko.computed(function () {
            return self.SelectOrCreateBank() === newBank;
        });

        self.CreateTestEnable = ko.computed(function () {

            var result = false;
            var datasetCategoryId = null;
            if (comboTree1 && comboTree1._selectedItem) {
                datasetCategoryId= comboTree1._selectedItem.id;
            }
            if (self.SelectOrCreateBank() === existingBank) {

                if (!IsNullOrEmpty(self.DistrictID()) && !IsNullOrEmpty(self.GradeID()) && !IsNullOrEmpty(self.SubjectID())
                    && ((self.SelectOrCreateBank() === existingBank && !IsNullOrEmpty(self.BankID())) ||
                        (self.SelectOrCreateBank() === newBank && !IsNullOrEmpty(self.BankName())))
                    && !IsNullOrEmpty(self.VirtualTestName())) result = true;
            }
            if (self.SelectOrCreateBank() === newBank) {
                if (!IsNullOrEmpty(self.DistrictID()) && !IsNullOrEmpty(self.GradeIDNewBank()) && !IsNullOrEmpty(self.SubjectIDNewBank())
                   && ((self.SelectOrCreateBank() === existingBank && !IsNullOrEmpty(self.BankID())) ||
                       (self.SelectOrCreateBank() === newBank && !IsNullOrEmpty(self.BankName())))
                   && !IsNullOrEmpty(self.VirtualTestName())) result = true;
            }
            return result && datasetCategoryId;
        });

        self.CreateTest = function () {
            $('#error-messages').hide();
            var datasetCategoryId = null;
            if (comboTree1 && comboTree1._selectedItem) {
                datasetCategoryId = comboTree1._selectedItem.id;
            }
            if (!datasetCategoryId || datasetCategoryId <= 0) {
                if (IsNullOrEmpty(self.SubjectID())) {
                    $("#error-messages").html("<li>Dataset Category is required.</li>");
                    $('#error-messages').show();
                    return;
                }
            }

            //check subject
            if (self.SelectOrCreateBank() == existingBank) {
                if (IsNullOrEmpty(self.SubjectID())) {
                    $("#error-messages").html("<li>@LabelHelper.Subject is required.</li>");
                    $('#error-messages').show();
                    return;
                }
            }
            if (self.SelectOrCreateBank() == newBank) {
                if (IsNullOrEmpty(self.SubjectIDNewBank())) {
                    $("#error-messages").html("<li>@LabelHelper.Subject is required.</li>");
                    $('#error-messages').show();
                    return;
                }
            }
            //check when existing bank selected
            if (self.SelectOrCreateBank() == 'existingBank') {
                if (IsNullOrEmpty(self.BankID())) {
                    var html = $("#error-messages").html();
                    html += "<li>Bank is required.</li>";
                    $("#error-messages").html(html);
                    $('#error-messages').show();
                    return;
                }
            }

            //check when new bank selected
            if (self.SelectOrCreateBank() == newBank) {
                if (IsNullOrEmpty(self.BankName())) {
                    var html = $("#error-messages").html();
                    html += "<li>Bank is required.</li>";
                    $("#error-messages").html(html);
                    $('#error-messages').show();
                    return;
                }
            }
            var subject = 0;
            if (self.SelectOrCreateBank() == existingBank) {
                subject = self.SubjectID();
            }
            if (self.SelectOrCreateBank() == newBank) {
                subject = self.SubjectIDNewBank();
            }
            var isExistingBank = $('#radioExistingBank').is(':checked');

            ShowBlock($('#PopupCreateVirtualTest'), 'Loading');
            var url = '@Url.Action("CreateVirtualTest", "QTIItem")';
            $.ajax({
                url: url,
                type: 'post',
                cache: false,
                data: {
                    stateID: self.StateID(),
                    districtId: self.DistrictID(),
                    datasetCategoryId: datasetCategoryId,
                    QTIItemGroupID: qtiItemGroupID,
                    bankId: isExistingBank == true?self.BankID():0,
                    BankName: encodeURIComponent(htmlEncode(self.BankName())),
                    VirtualTestName: encodeURIComponent(htmlEncode(self.VirtualTestName())),
                    SubjectIDs: subject,
                    IsExistingBank: isExistingBank
                }
            }).done(function (data) {
                $('#PopupCreateVirtualTest').unblock();
                if (!IsNullOrEmpty(data.message)) {
                    $('.ui-dialog-titlebar').css('z-index', '10000');
                    var response = { ErrorList: [{ ErrorMessage: data.message }] };
                    addErrorMessages(response); //AlertMessage(data.message);
                }
                else
                {
                    if (data.success == 'true') {
                        AlertMessage('Your test was successfully created!');
                    }

                    $('#PopupCreateVirtualTest').dialog("close");

                }
            });
        };
    }

    (function () {
        viewModel = new CreateVirtualTestViewModel();
        ko.cleanNode(document.getElementById("divCreateVirtualTest"));
        ko.applyBindings(viewModel,document.getElementById('divCreateVirtualTest') );
        //ko.applyBindings(viewModel);

    }());
</script>
<script>
    function SelectBankClick() {
        if ($('#radioExistingBank').is(':checked')) {
            $('#GradeExistingBank').show();
            $('#SubjectExistingBank').show();
            $('#GradeNewBank').hide();
            $('#SubjectNewBank').hide();
        }
        if ($('#radioNewBank').is(':checked')) {
            $('#GradeExistingBank').hide();
            $('#SubjectExistingBank').hide();
            $('#GradeNewBank').show();
            $('#SubjectNewBank').show();

        }

    }
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $('#selectState').marquee({ widthSelected: 215 });
        $('#selectDistrict').marquee({ widthSelected: 215 });
        $('#SubjectNewBankSelect').marquee({ widthSelected: 215 });
        $('#SubjectExistingBankSelect').marquee({ widthSelected: 215 });
        $('#BankSelect').marquee({ widthSelected: 215 });
    });
</script>
