@model LinkIt.BubbleSheetPortal.Web.ViewModels.QtiItemEditViewModel
@using LinkIt.BubbleSheetPortal.Web.Helpers
@{
    ViewBag.Title = "Edit Item";
}

@BundleHelper.StyleTestMakerEditBundle()

@BundleHelper.ScriptTestMakerEditBundle()
@BundleHelper.ScriptKnockout30Bundle()

<script src="@Url.Content("~/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")" type="text/javascript"></script>

@BundleHelper.Include(new string[] {
    "/Content/themes/TestMaker/ckeditor.js",
    "/Content/themes/TestMaker/ckeditor_utils.js",
    "/Content/themes/TestMaker/ckeditor_functions.js",
    "/Content/themes/TestMaker/ckeditor_mk.js"
})

<script type="text/javascript" src="https://s3-us-west-2.amazonaws.com/linkit-utility/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<link rel="stylesheet" href="/Content/css/vue-components/vue-modal.css">
<link rel="stylesheet" href="/Scripts/JqueryBuilder/css/bootstrap-query-builder.css">
<link rel="stylesheet" href="/Scripts/JqueryBuilder/css/query-builder.default.css" id="qb-theme">
<link rel="stylesheet" href="/Scripts/JqueryBuilder/css/bootstrap-glyphicon.css">

<script src="/Scripts/JqueryBuilder/components/interact/interact.js"></script>
<script src="/Scripts/JqueryBuilder/js/query-builder.standalone.js"></script>

<script src="/Scripts/JqueryBuilder/src/main.js"></script>
<script src="/Scripts/JqueryBuilder/src/defaults.js"></script>
<script src="/Scripts/JqueryBuilder/src/plugins.js"></script>
<script src="/Scripts/JqueryBuilder/src/core.js"></script>
<script src="/Scripts/JqueryBuilder/src/public.js"></script>
<script src="/Scripts/JqueryBuilder/src/data.js"></script>
<script src="/Scripts/JqueryBuilder/src/template.js"></script>
<script src="/Scripts/JqueryBuilder/src/model.js"></script>
<script src="/Scripts/JqueryBuilder/src/utils.js"></script>
<script src="/Scripts/JqueryBuilder/src/jquery.js"></script>
<script src="/Scripts/JqueryBuilder/src/plugins/bt-tooltip-errors/plugin.js"></script>
<script src="/Scripts/JqueryBuilder/src/plugins/sortable/plugin.js"></script>
<script src="/Scripts/JqueryBuilder/src/plugins/atleast/plugin.js"></script>
<script src="/Scripts/JqueryBuilder/i18n/query-builder.en.js"></script>
<link href="@Url.Content("~/Content/libs/awesome-icon/css/font-awesome.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/css/select2.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/css/attachment-setting.css")" rel="stylesheet" />
<script src=@Url.Content("~/Scripts/select2.full.min.js")></script>
<script src=@Url.Content("~/Scripts/Select2Customs/CustomSelectionAdapter.js")></script>
@Html.Partial("~/Views/Passage/_KeepingDistrict.cshtml", (int)ViewBag.DistrictId)
<article class="container_12">
    <section class="grid_12">
        @Html.TextArea("txtXmlContent", (string)Model.XmlContent, new { @style = "display:none" })
        <div class="block-border" id="divEditItem">
            <div class="block-content form">
                <h1>Edit Item - @Model.QtiGroupName</h1>
                <input type="hidden" id="qtiItemId" value="@Model.QtiItemId" />
                <textarea style="display: none" id="xmlContent">@Html.Raw(Model.XmlContent)</textarea>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                <ul style="display: none" id="success-message" class="message success">
                    <li>Item Successfully Edited.</li>
                </ul>
                <p style="height: 5px"></p>

                @Html.Hidden("hdQTISchemaID", (int)Model.QTISchemaId)
                @Html.Hidden("hdPointsPossible", (int)Model.PointsPossible)
                @Html.Hidden("hdResponseIdentifier", (string)Model.ResponseIdentifier)
                <div class="editorArea">
                    <fieldset>
                        <legend>Question Content Area</legend>
                        <label>
                            <select title="There are test results associated with this question. Item type cannot be changed." size="1" name="changeItemType" aria-controls="changeItemType" id="changeItemType">
                                @if (Model.IsSurvey == 1)
                                {
                                    <option value="1" titlespecial="MultipleChoice">Multiple Choice</option>
                                    <option value="37" titlespecial="MultipleChoiceVariable">Multiple Choice Variable</option>
                                    <option value="10" titlespecial="ExtendedText">Extended Text</option>
                                }
                                else
                                {
                                    <option value="1" titlespecial="MultipleChoice">Multiple Choice</option>
                                    <option value="37" titlespecial="MultipleChoiceVariable">Multiple Choice Variable</option>
                                    <option value="1" titlespecial="TrueFalse">True/False</option>
                                    <option value="8" titlespecial="InlineChoice">Inline Choice</option>
                                    <option value="9" titlespecial="FillBlank">Fill-in-the-Blank</option>
                                    <option value="10" titlespecial="ExtendedText">Constructed Response</option>
                                    <option value="10d" titlespecial="DrawingResponse">Drawing Response</option>
                                    <option value="21" titlespecial="Multi-Part">Multi-Part</option>
                                    <option value="30" titlespecial="DragDrop">Drag-and-Drop</option>
                                    <option value="31" titlespecial="TextHotSpot">Text Hot Spot</option>
                                    <option value="32" titlespecial="ImageHotSpotSelection">Image Hot Spot</option>
                                    <option value="33" titlespecial="TableHotSpotSelection">Table Hot Spot</option>
                                    <option value="34" titlespecial="NumberLine">Number Line Hot Spot</option>
                                    <option value="35" titlespecial="DragDropNumerical">Drag and Drop Numerical</option>
                                    <option value="36" titlespecial="SequenceOrder">Drag-and-Drop Sequence/Order</option>
                                }

                            </select>
                        </label>
                        <br>
                        <div id="divAttachmentSetting">
                            <attachment-setting-component v-bind:qti-schema-id="qtiSchemaId" v-bind:attachment-setting="attachmentSetting" v-bind:assessment-artifact-configuration="assessmentArtifactConfiguration"></attachment-setting-component>
                        </div>
                        <div id="duplicateAnswer"></div>
                        <div class="clear10"></div>
                        <div class="topMenu inEdit">
                            <div id="topSpace"></div>
                            <div class="questionType" id="questionType">
                                <ul>
                                    <li>
                                        <div class="audio js-audio" id="audioQuestion">
                                            <div class="audioRemove" id="audioRemoveQuestion">
                                                <img alt="Play audio" class="bntPlay" src="../../Content/themes/TestMaker/images/small_audio_play.png" title="Play audio" />
                                                <img alt="Stop audio" class="bntStop" src="../../Content/themes/TestMaker/images/small_audio_stop.png" title="Stop audio" />
                                                <input type="button" value="Remove audio" class="ckbutton removeAudio cke_toolgroup" />
                                                <span class="audioRef"></span>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                                <div class="clear"></div>
                            </div>
                        </div>
                        <div class="clear"></div>
                        <div id="divQContent" class="qContent"></div>
                    </fieldset>
                    <div class="clear"></div>
                    <div id="bottomSpace"></div>
                    <div id="referenceObject">

                        <ul class="hiddenReference" style="display:none">
                            @foreach (var item in Model.PassageList)
                            {
                                if (item.RefNumber > 0)
                                {
                                    <li data-refid="@item.RefNumber" data-text="@item.RefNumber: @item.Name" data-name="@item.Name">@item.RefNumber: @item.Name</li>
                                }
                                else
                                {
                                    <li data-refid="@item.QtiRefObjectID" data-text="@item.QtiRefObjectID: @item.Name" data-name="@item.Name">@item.QtiRefObjectID: @item.Name</li>
                                }
                            }
                        </ul>
                        <ul id="listReference"></ul>
                        <div class="clear"></div>
                    </div>
                </div>
                <div class="divBotButton u-clearfix u-text-right">
                    @if (Model.VirtualTestId > 0)
                    {
                        if (ViewBag.HasMoreThanOneSection)
                        {
                            <div class="u-inline-block u-v-align-middle u-text-left">
                                <label for="selectSectionQuestion" class="u-fw-400">Select the section to move the items to</label>
                                <select id="selectSectionQuestion" class="u-w-200 u-m-l-5"></select>
                            </div>
                        }
                    }

                    <button id="btnAlgorithmicConfiguration"
                            type="button"
                            class="js-btn-actions disabled u-tsn"
                            v-on:click="openPopupAlgorithmic"
                            v-show="isShowAlgorithmicConfiguration">
                        Algorithmic Configuration
                    </button>
                    <button id="btnConditionalLogicConfiguration"
                            type="button"
                            class="js-btn-actions disabled u-tsn"
                            v-on:click="openPopupConditionalLogicMultipart"
                            v-show="isShowConditionalLogicButton">
                        Conditional Logic
                    </button>
                    <button id="btnPreviewItem" class="js-preview-item js-btn-actions disabled u-tsn">Preview Item</button>
                    <button id="btnUpdateItem" class="js-btn-actions disabled u-tsn" onclick="updateItemClick()">Save</button>
                    <button id="btnUpdateItemAndSaveClose" class="js-btn-actions disabled u-tsn" onclick="saveAndCloseItemClick()">Save and Close</button>
                    <button @(Model.IsVirtualTestHasRetakeRequest ? "disabled" : "") id="btnUpdateItemAndClose" class="js-btn-actions disabled u-tsn" onclick="saveAndCreateNewItemClick()">Save and Create New</button>
                    <button id="btnCancel" class="grey js-btn-actions disabled u-tsn" onclick="backToQtiItemList()">Cancel</button>
                </div>
                <div class="clear"></div>
                <div style="height: 50px; margin-bottom: -16px; margin-top: 10px;">
                    <img id="imgPreviousItem" onclick="updateItemGoPreClick()" src="@Url.Content("~/Content/themes/AssessmentItem/images/previous.png")" width="50" height="50" style="float: left; display: none" class=" with-tip" title="Save content and go to previous question" />
                    <div id="divQuestionOrder" style="float: left;margin-left: 410px; margin-top: 18px;text-align: center;">
                        @if (Model.VirtualTestId <= 0)
                        {
                            <span class="question-order"> @Html.Raw(Model.QuestionOrder.ToString()) of @Html.Raw(Model.CountQtiItems.ToString())</span>
                        }
                        @if (Model.VirtualTestId > 0)
                        {
                            <span class="question-order"> @Html.Raw(Model.VirtualQuestionOrder.ToString()) of @Html.Raw(Model.CountVirtualQuestions.ToString())</span>
                        }
                    </div>
                    <img id="imgNextItem" onclick="updateItemGoNextClick()" src="@Url.Content("~/Content/themes/AssessmentItem/images/next.png")" width="50" height="50" style="float: right;display: none" class=" with-tip" title="Save content and go to next  question" />
                </div>
            </div>
            @Html.Partial("~/Views/Shared/_ModalKeepAlive.cshtml")
            @Html.Partial("_ModalAlgorithmicConfiguration")
            @Html.Partial("_ModalAlgorithmicExpression")
            @Html.Partial("_ModalMultiPartConfiguration")
            @Html.Partial("_ModalMultiPartExpression")
        </div>
    </section>
</article>
<div id="divOnTop"></div>
<div id="tips">
    <div class="tool-tip-tips" style="opacity: 0; display: none;">Double click here to edit answer choices<span class="arrow"><span></span></span></div>
</div>
<style type="text/css">

    .divBotButton {
        padding-top: 10px;
    }

        .divBotButton button {
            margin-left: 10px;
            font-family: "Lucida Grande", "Lucida Sans Unicode", Arial, sans-serif, dejavu_sansbook;
        }

    .customDialogStyle {
        border-radius: 0px;
        padding: 0px;
        background: #fff;
    }

        .customDialogStyle .ui-icon {
            width: 19px;
            height: 17px;
        }

        .customDialogStyle .ui-widget-header.cke_dialog_title {
            font-weight: bold;
            font-size: 13px;
            cursor: move;
            position: relative;
            top: 0 !important;
            color: #474747;
            text-shadow: 0 1px 0 rgba(255,255,255,.75);
            border-bottom: 1px solid #999;
            padding: 6px 10px;
            -moz-border-radius: 2px 2px 0 0;
            -webkit-border-radius: 2px 2px 0 0;
            border-radius: 2px 2px 0 0;
            -moz-box-shadow: 0 1px 0 #fff inset;
            -webkit-box-shadow: 0 1px 0 #fff inset;
            box-shadow: 0 1px 0 #fff inset;
            background: #cfd1cf;
            background-image: -webkit-gradient(linear, left top, left bottom, from(#f5f5f5), to(#cfd1cf)) !important;
            background-image: -moz-linear-gradient(top, #f5f5f5, #cfd1cf) !important;
            background-image: -webkit-linear-gradient(top, #f5f5f5, #cfd1cf) !important;
            background-image: -o-linear-gradient(top, #f5f5f5, #cfd1cf) !important;
            background-image: -ms-linear-gradient(top, #f5f5f5, #cfd1cf) !important;
            background-image: linear-gradient(top, #f5f5f5, #cfd1cf) !important;
            filter: progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#f5f5f5', endColorstr='#cfd1cf');
            border: 0;
        }

        .customDialogStyle .ui-icon-closethick {
            background-position: -94px -127px;
        }

    .ui-dialog.customDialogStyle .ui-dialog-titlebar-close {
        width: 21px;
        height: 19px;
        position: absolute;
        right: 7px;
        top: 13px;
    }

    .customDialogStyle .cke_dialog_title {
        font-weight: bold;
        font-size: 13px;
        cursor: move;
        position: relative;
        color: #474747;
        text-shadow: 0 1px 0 rgba(255,255,255,.75);
        border-bottom: 1px solid #999;
        padding: 6px 10px;
        -moz-border-radius: 2px 2px 0 0;
        -webkit-border-radius: 2px 2px 0 0;
        border-radius: 2px 2px 0 0;
        -moz-box-shadow: 0 1px 0 #fff inset;
        -webkit-box-shadow: 0 1px 0 #fff inset;
        box-shadow: 0 1px 0 #fff inset;
        background: #cfd1cf;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#f5f5f5), to(#cfd1cf));
        background-image: -moz-linear-gradient(top, #f5f5f5, #cfd1cf);
        background-image: -webkit-linear-gradient(top, #f5f5f5, #cfd1cf);
        background-image: -o-linear-gradient(top, #f5f5f5, #cfd1cf);
        background-image: -ms-linear-gradient(top, #f5f5f5, #cfd1cf);
        background-image: linear-gradient(top, #f5f5f5, #cfd1cf);
        filter: progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#f5f5f5', endColorstr='#cfd1cf');
        border: 0;
    }

    .customDialogStyle .ui-button-text-only {
        display: inline-block;
        *display: inline;
        *zoom: 1;
        padding: 3px 0;
        margin: 0;
        text-align: center;
        color: #333;
        vertical-align: middle;
        cursor: pointer;
        border: 1px solid #b6b6b6;
        border-bottom-color: #999;
        -moz-border-radius: 3px;
        -webkit-border-radius: 3px;
        border-radius: 3px;
        -moz-box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 0 2px rgba(255,255,255,.15) inset, 0 1px 0 rgba(255,255,255,.15) inset;
        -webkit-box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 0 2px rgba(255,255,255,.15) inset, 0 1px 0 rgba(255,255,255,.15) inset;
        box-shadow: 0 1px 0 rgba(255,255,255,.5), 0 0 2px rgba(255,255,255,.15) inset, 0 1px 0 rgba(255,255,255,.15) inset;
        background: #e4e4e4;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#ffffff), to(#e4e4e4));
        background-image: -moz-linear-gradient(top, #ffffff, #e4e4e4);
        background-image: -webkit-linear-gradient(top, #ffffff, #e4e4e4);
        background-image: -o-linear-gradient(top, #ffffff, #e4e4e4);
        background-image: -ms-linear-gradient(top, #ffffff, #e4e4e4);
        background-image: linear-gradient(top, #ffffff, #e4e4e4);
        filter: progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#ffffff', endColorstr='#e4e4e4');
    }

        .customDialogStyle .ui-button-text-only:hover {
            border-color: #9e9e9e;
            background: #ccc;
            background-image: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#ccc));
            background-image: -moz-linear-gradient(top, #f2f2f2, #ccc);
            background-image: -webkit-linear-gradient(top, #f2f2f2, #ccc);
            background-image: -o-linear-gradient(top, #f2f2f2, #ccc);
            background-image: -ms-linear-gradient(top, #f2f2f2, #ccc);
            background-image: linear-gradient(top, #f2f2f2, #ccc);
            filter: progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#f2f2f2', endColorstr='#cccccc');
        }

        .customDialogStyle .ui-button-text-only .ui-button-text {
            padding: .2em 1em;
        }

        .customDialogStyle .ui-button-text-only:first-child {
            color: #fff !important;
            text-shadow: 0 0px 0 #55830c;
            border-color: #62a60a #62a60a #4d9200;
            background: #69b10b;
            background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#9ad717), to(#69b10b));
            background-image: -webkit-linear-gradient(top, #9ad717, #69b10b);
            background-image: -o-linear-gradient(top, #9ad717, #69b10b);
            background-image: linear-gradient(to bottom, #9ad717, #69b10b);
            background-image: -moz-linear-gradient(top, #9ad717, #69b10b);
            filter: progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#9ad717', endColorstr='#69b10b');
        }

            .customDialogStyle .ui-button-text-only:first-child:hover {
                border-color: #5b9909 #5b9909 #478500;
                background: #88be14;
                background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#88be14), color-stop(100%,#5d9c0a));
                background: -webkit-linear-gradient(top, #88be14 0%,#5d9c0a 100%);
                background: -o-linear-gradient(top, #88be14 0%,#5d9c0a 100%);
                background: linear-gradient(to bottom, #88be14 0%,#5d9c0a 100%);
                background: -moz-linear-gradient(top, #88be14 0%, #5d9c0a 100%);
                filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#88be14', endColorstr='#5d9c0a',GradientType=0 );
            }

    .no-close .ui-dialog-titlebar-close {
        display: none;
    }

    .question-order {
        color: #1482D9;
        font-weight: bold;
        font-size: 16px;
    }

    a.cke_button.cke_button__gardinghotspot {
        display: inline-block;
    }

    #listReference .ui-state-highlight {
        width: auto;
        height: 22px;
    }

    #listReference {
        position: relative;
    }

        #listReference::after {
            content: '';
            float: none;
            clear: both;
            display: table;
        }
</style>

@section scripts {
    <script>
        var global = {
            sessionTimeoutWarning: '@Model.WarningTimeoutMinues',
            sessionTimeout: '@Model.DefaultCookieTimeOutMinutes',
            sessionKeepAliveUrl: '@Url.Action("KeepAlive", "Home")',
            keepAliveDistanceSecond: '@Model.KeepAliveDistanceSecond',
            basicSciencePaletteSymbol: unescapeHtml('@Model.BasicSciencePaletteSymbol'),
            rubricQuestionCategories: @Html.Raw(Json.Encode(Model.RubricQuestionCategories)),
            isMultipart: false,
            isAllowRubricGradingMode: @Model.IsAllowRubricGradingMode,
            extendtextMethod: 'default',
            extendtextMethodPrevious: 'default',
            virtualQuestionRubricCount: @Model.VirtualQuestionRubricCount,
            virtualQuestionSectionId: @Model.VirtualSectionId,
            isSurvey: @Model.IsSurvey,
            isVirtualTestHasRetakeRequest: @(Model.IsVirtualTestHasRetakeRequest.ToString().ToLower())
        };
        if (global.isAllowRubricGradingMode === 1 && global.rubricQuestionCategories && global.rubricQuestionCategories.length) {
            global.scoringMethod = 'rubricBasedGrading';
        }
    </script>

    <script src="/Scripts/TestMaker/Algorithmic/MultipleChoice.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/InlineChoice.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/TextEntry.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/DragDrop.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/TextHotSpot.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/ImageHotSpot.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/TableHotSpot.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/NumberlineHotSpot.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/DragDropNumerical.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/DragDropSequenceOrder.js"></script>
    <script src="/Scripts/TestMaker/Algorithmic/MultipleChoiceVariable.js"></script>
    <script src="/Scripts/TestMaker/MultiPart.js"></script>
    <script src="/Scripts/TestMaker/Utils.js"></script>

    <script src="/Scripts/Lib/lodash.js"></script>
    <script src="~/FeLibs/sortable/sortable.min.js"></script>
    <script src="/Scripts/Lib/vuedragablefor.min.js"></script>

    <script src="/Scripts/TestMaker/AssessmentArtifact/AttachmentSettingValidation.js"></script>
    <script src="/Scripts/TestMaker/AssessmentArtifact/AttachmentSetting.js"></script>
    <script src="/Scripts/TestMaker/AssessmentArtifact/AttachmentSettingAction.js"></script>
    <script src="/Scripts/TestMaker/Edit.js"></script>
    <script src="/Scripts/TestMaker/MultiPart/RemoveConditional.js"></script>
    <script>
        var oldXml = null;
        MKEditor = {
            imgUrl: "../../Content/themes/TestMaker/",
            audioUrl: '@Url.Action("AudioUpload", "TestMaker")',
            loadAudioUrl: window.location.protocol + "//" + window.location.hostname + "/TestMaker/GetAudio/",
            objectId: '@Model.QtiItemGroupId',
            imgUpload: '@Url.Action("ImageUpload", "TestMaker")',
            GetViewReferenceImg: window.location.protocol + "//" + window.location.hostname + '/TestAssignmentRegrader/GetViewReferenceImg?imgPath=', //This is config for view image on test maker
            UseS3Content: true, // this variable use to download to applition(  server) or S3
            S3PassageMedia: '',
            GetViewReferenceImgS3: '',
            Oldtexttospeech: {}
        };

        var _qtiSchemaIds = {
            MULTIPART: 21,
            CONSTRUCTED_RESPONSE: 10
        };

        @if (Model.MediaModel != null)
        {
            <text>MKEditor.S3PassageMedia = '@Model.MediaModel.PassageMediaFolderPath';</text>
            <text>MKEditor.GetViewReferenceImg = '@Model.MediaModel.TestMediaFolderPath';</text>
            <text>MKEditor.GetViewReferenceImgS3 = '@Model.MediaModel.TestMediaFolderPath';</text>
            <text>MKEditor.UseS3Content = true;</text>
        }
        if (global.isSurvey == 1) {
            MKEditor.isSurveyTest = true;
        }
        $(function () {
            $('.write').addClass('current');
            $('#assesmenItemRewrite').addClass('current');
            $(this).parent().find(".audioRef").text();

            if (@Model.VirtualTestId > 0) {
                $.get('@Url.Action("GetSections", "VirtualTest")?virtualTestId=@Model.VirtualTestId', function(states) {
                    AddSelectListItems($('#selectSectionQuestion'), states, 'Select Section');
                    $("#selectSectionQuestion").val(global.virtualQuestionSectionId);
                });
            }
        });

        function AddSelectListItems(selectList, results, defaultValue) {
            if (results.length == 0) {
                return;
            }
            selectList.append($("<option></option>").attr("value", "-1").text(defaultValue));
            $.each(results, function (i, value) {
                selectList
                    .append($("<option></option>")
                        .attr("value", value.Id)
                        .text(value.Name));
            });
        }

        var currentCkID = ckID; //remember the current ckID
        function addReferenceCallBack() {
            $('.cke_dialog_background_cover').hide();
            var worker = $('<div />');
            currentCkID = ckID;
            var assignedObjectIdList = getObjectIdList();
            var url = '@Url.Action("ShowPassageAvailable", "TestMaker")/?assignedObjectIdList=' + assignedObjectIdList+'&qtiItemGroupId=@Model.QtiItemGroupId&virtualTestId=@Model.VirtualTestId';

            worker
                .addClass("dialog")
                .attr("id", "PopupAddReference")
                .appendTo("body")
                .load(url, function () {
                    worker.dialog({
                        title: $(this).attr("Add Reference"),
                        close: function () {
                            $('.ui-widget-overlay').remove();
                            $(this).remove();
                            RecoverTestMakerCKEditorConfig();
                        },
                        open: function() {
                            $('.ui-widget-header').css('top', '70px');
                        },
                        modal: false,
                        width: 1084,
                        resizable: false,
                    });
                });

            showModalDialogBG();
        }

        function backToQtiItemList() {

            if ('@Model.FromVirtualQuestionProperty' == 'True') {
                window.location = '@Url.Action("Index", "VirtualTest")?virtualTestId=@Model.VirtualTestId&virtualQuestionId=@Model.VirtualQuestionId&qtiItemId=@Model.QtiItemId' + generateDistrictIdParamsFromURL();
            }
            else {
                var url = '@Url.Action("Index", "QTIItem")?qtiItemGroupID=' + '@Model.QtiItemGroupId' + generateDistrictIdParamsFromURL();
                if (isChangedctx == true) {
                    var isValidateDragAndDrop = validateDragAndDrop(iResult);

                    if (!isValidateDragAndDrop) {
                        popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                        return false;
                    }

                    CustomConfirm({
                        message:'Do you want to save your changes before exiting the item editor?',
                        yes:function() {
                            $(this).dialog("close");
                            updateItem(true);
                            window.location.href = url;
                        },
                        no:function() {
                            $(this).dialog("close");
                            ShowBlock($('#divEditItem'), "Waiting");
                            window.location.href = url;
                        }
                    });
                } else {
                    window.location.href = url;
                }
            }
        }

        function showModalDialogBG() {
            var win = $('body');
            $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
        }

        function updateItemClick() {
            if (!validateUniquePoints()) {
                return;
            }
            if (@Model.VirtualTestId > 0 && '@ViewBag.HasMoreThanOneSection' == 'True') {
                var selectedVirtualSectionId = $('#selectSectionQuestion').val();
                if (selectedVirtualSectionId == null || selectedVirtualSectionId < 0) {
                    CustomAlert('Please select the section to move the items to');
                    return;
                }
            }
            if ('@Model.HasTest' == 'True') {
                // Check answer has conflict or not
                checkConflictConstraintBeforeUpdate('save');
            } else {
                updateItem();
            }
        }

        function checkConflictConstraintBeforeUpdate(typeSave) {
            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            var qtiItemId = $('#qtiItemId').val();
            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                return;
            }

            var isChangeAnswerChoice = compareXmlContent(oldXml, xmlContent, iSchemeID);

            var $divEditItem = $('#divEditItem');

            ShowBlock($divEditItem, 'Updating');
            var data = buidData(xmlContent);
            data.isChangeAnswerChoice = isChangeAnswerChoice;
            var postModel = {
                qtiItemId: qtiItemId,
                xmlContent: xmlContent,
                isChangeAnswerChoice: isChangeAnswerChoice,
                virtualQuestionId: @Model.VirtualQuestionId,
                RubricQuestionCategories: global.rubricQuestionCategories
            }
            $.ajax({
                url: '@Url.Action("CheckIsConflictConstraintUpdate")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data })
            }).done(function(response) {
                $divEditItem.unblock();

                if (response.success == true) {
                    var message = response.message;

                    if (global.isVirtualTestHasRetakeRequest) {
                        message = "You are attempting to change a test that is being used for retake assignments. This is not permitted.";
                    }
                    popupAlertMessageV1('alert', message || '', 400, 100, 'RefereshPage', '', 'OK');
                } else {
                    if ('@Model.IsSurvey' == '1') {
                        doActionSaveItem(typeSave);
                    } else {
                        var virtualTestId = @Model.VirtualTestId;
                        var messageConfirm = 'This item is already used by existing tests. Saving it will update the content and the points possible for those tests; however, standards and tags will remain the same on those tests. Are you sure you want to save?';
                        var showConfirm = false;
                        if (virtualTestId && response.virtualTestCounting) {
                            messageConfirm = `This item is used on ${response.virtualTestCounting} other test(s). Saving it will update the content and points possible for those tests. Standards and tags will remain unchanged. Are you sure you want to save?`;
                            showConfirm = true;
                        }
                        else if(!virtualTestId && response.virtualTestCounting){
                            messageConfirm = `This item is used on ${response.virtualTestCounting} existing test(s). Saving it will update the content and points possible for those tests. Standards and tags will remain unchanged. Are you sure you want to save?`;
                            showConfirm = true;
                        }

                        if (showConfirm) {
                            CustomConfirm({
                                message: messageConfirm,
                                yes: function () {
                                    doActionSaveItem(typeSave);
                                },
                                no: function () {
                                    $divEditItem.unblock();
                                }
                            });
                        }
                        else doActionSaveItem(typeSave);
                    }
                }
            });
        }

        function doActionSaveItem(typeSave) {
            switch (typeSave) {
                case 'saveandclose': saveAndCloseItem(); break;
                case 'saveandnew': updateCloseItem(); break;
                case 'save':
                default: updateItem();
            }
        }

        function updateItem(backToQtiList) {

            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            var validateAttachmentSettingResult = validateAttachmentSetting(TestMakerComponent.attachmentSetting, iSchemeID);
            if (!validateAttachmentSettingResult.valid) {
                CustomAlert(validateAttachmentSettingResult.errorMessage);
                return;
            }

            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                return;
            }

            // Validate input
            var errorMessage = '';
            if ($('iframe[allowtransparency]').contents().find('body').find('span.placeholder').text() == 'Enter Question…') {
                $('iframe[allowtransparency]').contents().find('body').find('span.placeholder').remove();
            }
            //remove class style font size for inline choice
            resetDefaultFontSize();
            var virtualSectionId = $('#selectSectionQuestion').val();

            var data = buidData(xmlContent, virtualSectionId);
            var maxPoint = getMaxPointPossible(data.ListExpression);
            ShowBlock($('#divEditItem'), "Updating");
            $('.js-btn-actions').prop('disabled', true);

            $.ajax({
                url: '@Url.Action("UpdateItem")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data })
            }).done(function (response) {
                SessionTimeOutComponent.sessionKeepAlive();
                $('#divEditItem').unblock();
                $('.js-btn-actions').prop('disabled', false);
            $('.js-btn-actions').prop('disabled', false);

                isChangedctx = false;
                if (response.success == true) {
                    $('#success-message').show();
                    setTimeout(function () {
                        $('#success-message').hide();
                    }, 5000);

                    if (backToQtiList != 'undefined' && backToQtiList == true) {
                        window.location.href = '@Url.Action("Index", "QTIItem")?qtiItemGroupID=' + '@Model.QtiItemGroupId' + generateDistrictIdParamsFromURL();
                    }
                } else {
                    addErrorMessages(response);
                    setTimeout(function () {
                        $('#error-messages').hide();
                    }, 5000);
                }
            });
        }
        function getMaxPointPossible(arrayExpression) {
            var max = 0;
            for(var i = 0; i < arrayExpression.length; i++) {
                var item = parseInt(arrayExpression[i].PointEarned, 10);
                if(item > max) {
                    max = item;
                }
            }
            return max;
        }

        function saveAndCreateNewItemClick() {
            if (!validateUniquePoints()) {
                return;
            }
            if (@Model.VirtualTestId > 0 && '@ViewBag.HasMoreThanOneSection' == 'True') {
                var selectedVirtualSectionId = $('#selectSectionQuestion').val();
                if (selectedVirtualSectionId == null || selectedVirtualSectionId < 0) {
                    CustomAlert('Please select the section to move the items to');
                    return;
                }
            }
            if ('@Model.HasTest' == 'True') {
                //check answer has conflict or not
                checkConflictConstraintBeforeUpdate('saveandnew');
            } else {
                updateCloseItem();
            }
        }

        function updateCloseItem() {
            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            var validateAttachmentSettingResult = validateAttachmentSetting(TestMakerComponent.attachmentSetting, iSchemeID);
            if (!validateAttachmentSettingResult.valid) {
                CustomAlert(validateAttachmentSettingResult.errorMessage);
                return false;
            }

            $('.js-btn-actions').prop('disabled', true);
            $("#imgPreviousItem").hide();
            $("#imgNextItem").hide();

            // Validate input
            var errorMessage = '';

            if ($('iframe[allowtransparency]').contents().find('body').find('span.placeholder').text() == 'Enter Question…') {
                $('iframe[allowtransparency]').contents().find('body').find('span.placeholder').remove();
            }
            //remove class style font size for inline choice
            resetDefaultFontSize();

            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                return;
            }
            var virtualSectionId = $('#selectSectionQuestion').val();
            var data = buidData(xmlContent, virtualSectionId);

            ShowBlock($('#divEditItem'), "Updating");

            $.ajax({
                url: '@Url.Action("UpdateItem")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data })
            }).done(function (response) {
                if (response.success == true) {
                    ShowBlock($('#divEditItem'), "Closing");
                    $('#success-message').show();

                    setTimeout(function () {
                        $('#success-message').hide();
                        saveAndNewItem();
                    }, 2000);
                } else {
                    $('#divEditItem').unblock();
                    addErrorMessages(response);
                    setTimeout(function () {
                        $('#error-messages').hide();
                    }, 5000);
                }
            });
        }
        //create and close item
        function saveAndCloseItemClick() {
            if (!validateUniquePoints()) {
                return;
            }
           if (@Model.VirtualTestId > 0 && '@ViewBag.HasMoreThanOneSection' == 'True') {
                var selectedVirtualSectionId = $('#selectSectionQuestion').val();
                if (selectedVirtualSectionId == null || selectedVirtualSectionId < 0) {
                    CustomAlert('Please select the section to move the items to');
                    return;
                }
            }
            if ('@Model.HasTest' == 'True') {
                //check answer has conflict or not
                checkConflictConstraintBeforeUpdate('saveandclose');
            } else {
                saveAndCloseItem();
            }
        }
        function saveAndCloseItem() {
            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            var validateAttachmentSettingResult = validateAttachmentSetting(TestMakerComponent.attachmentSetting, iSchemeID);
            if (!validateAttachmentSettingResult.valid) {
                CustomAlert(validateAttachmentSettingResult.errorMessage);
                return;
            }

            var pointsPossible = 0;
            // Validate input
            var errorMessage = '';

            //remove placeholder xmlExport
            if ($('iframe[allowtransparency]').contents().find('body').find('span.placeholder').text() == 'Enter Question…') {
                $('iframe[allowtransparency]').contents().find('body').find('span.placeholder').remove();
            }
            //remove class style font size for inline choice
            resetDefaultFontSize();

            // End of Validate input
            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                return;
            }

            $('.js-btn-actions').prop('disabled', true);
            var virtualSectionId = $('#selectSectionQuestion').val();
            var data = buidData(xmlContent, virtualSectionId);

            ShowBlock($('#divEditItem'), "Updating");
            $('.js-btn-actions').prop('disabled', true);
            $("#imgPreviousItem").hide();
            $("#imgNextItem").hide();

            $.ajax({
                url: '@Url.Action("UpdateItem")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data })
            }).done(function (response) {
                $('#divEditItem').unblock();
                $('#divEditItem').removeAttr('disabled');
                $('.js-btn-actions').prop('disabled', false);
                if (response.success == true) {
                    ShowBlock($('#divEditItem'), "Closing");
                    $('#success-message').show();
                    setTimeout(function () {
                        $('#success-message').hide();
                        if (@Model.VirtualTestId > 0) {
                            window.location.href = '@Url.Action("Index", "VirtualTest")?virtualTestId=' + '@Model.VirtualTestId' + generateDistrictIdParamsFromURL();
                        } else {
                            window.location.href = '@Url.Action("Index", "QTIItem")?qtiItemGroupID=' + '@Model.QtiItemGroupId' + generateDistrictIdParamsFromURL();
                        }
                    }, 2000);

                } else {
                    addErrorMessages(response);
                    setTimeout(function () {
                        $('#error-messages').hide();
                    }, 5000);
                }
            });
        }

        function RefereshPage() {
            $(document).find('.ui-dialog').remove();
            ShowBlock($('#divEditItem'), "Loading");

            @if(Model.FromVirtualQuestionProperty)
        {
            <text> var url = '@Url.Action("Edit", "TestMaker")';
            var form = '<form action="' + url + '" method="get">' +
                '<input type="hidden" name="qtiItemId" value="@Model.QtiItemId" />' +
                '<input type="hidden" name="fromVirtualQuestionProperty" value="@Model.FromVirtualQuestionProperty.ToString()" />' +
                '<input type="hidden" name="virtualTestId" value="@Model.VirtualTestId" />' +
                '<input type="hidden" name="virtualQuestionId" value="@Model.VirtualQuestionId" />';

            var districtId = getDistrictIdFromURL();
            if (districtId) {
                form += '<input type="hidden" name="districtId" value="' + districtId + '" />';
            }

            form += '</form>';
            form = $(form);
            $('body').append(form);
            $(form).submit();
            </text>
        }
        else
        {
            <text>window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.QtiItemId' + generateDistrictIdParamsFromURL();</text>
        }

        }

        function preQuestion() {
            var url = '@Url.Action("Edit", "TestMaker")';
            var form = '<form action="' + url + '" method="get">' +
                '<input type="hidden" name="qtiItemId" value="@Model.PreviousQtiItemId" />' +
                '<input type="hidden" name="fromVirtualQuestionProperty" value="True" />' +
                '<input type="hidden" name="virtualTestId" value="@Model.VirtualTestId" />' +
                '<input type="hidden" name="virtualQuestionId" value="@Model.PreviousVirtualQuesionId" />';

            var districtId = getDistrictIdFromURL();
            if (districtId) {
                form += '<input type="hidden" name="districtId" value="' + districtId + '" />';
            }

            form += '</form>';
            form = $(form);
            $('body').append(form);
            $(form).submit();
        }
        function nextQuestion() {
            var url = '@Url.Action("Edit", "TestMaker")';
            var form = '<form action="' + url + '" method="get">' +
                '<input type="hidden" name="qtiItemId" value="@Model.NextQtiItemId" />' +
                '<input type="hidden" name="fromVirtualQuestionProperty" value="True" />' +
                '<input type="hidden" name="virtualTestId" value="@Model.VirtualTestId" />' +
                '<input type="hidden" name="virtualQuestionId" value="@Model.NextVirtualQuesionId" />';

            var districtId = getDistrictIdFromURL();
            if (districtId) {
                form += '<input type="hidden" name="districtId" value="' + districtId + '" />';
            }

            form += '</form>';
            form = $(form);
            $('body').append(form);
            $(form).submit();
        }

        function updateItemGoPreClick() {
            var isChangeCkeditor = CKEDITOR.instances[ckID].checkDirty() == true;
            var isChangeTexttospeech = JSON.stringify(iResultComponent.texttospeech) !== JSON.stringify(MKEditor.Oldtexttospeech);
            var isAlgorithmic = '@Model.ResponseProcessingTypeID' == 7;
            var isAlgorithmicState = isAlgorithmic && algorithmStartedStateJsonString !== JSON.stringify(TestMakerComponent.listExpression)

            if (isChangeCkeditor || isChangeTexttospeech || isAlgorithmicState) {

                CustomConfirm({
                    message:'Do you want to save your changes before moving to the previous question?',
                    yes:function() {
                        updateItemGo(@Model.PreviousQtiItemId,'@Model.FromVirtualQuestionProperty',3);
                    },
                    no:function() {
                        ShowBlock($('#divEditItem'), 'Loading');

                        @if(Model.FromVirtualQuestionProperty)
                        {
                            <text>preQuestion();</text>
                        }
                        else
                        {
                            <text>window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.PreviousQtiItemId' + generateDistrictIdParamsFromURL();</text>
                        }
                    }
                });

            } else {
                ShowBlock($('#divEditItem'), 'Loading');

                @if(Model.FromVirtualQuestionProperty)
                {
                    <text>preQuestion();</text>
                }
                else
                {
                    <text>window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.PreviousQtiItemId' + generateDistrictIdParamsFromURL();</text>
                }
            }
        }
        function updateItemGoNextClick() {
            var isChangeCkeditor = CKEDITOR.instances[ckID].checkDirty() == true;
            var isChangeTexttospeech = JSON.stringify(iResultComponent.texttospeech) !== JSON.stringify(MKEditor.Oldtexttospeech);
            var isAlgorithmic = '@Model.ResponseProcessingTypeID' == 7;
             var isAlgorithmicState = isAlgorithmic && algorithmStartedStateJsonString !== JSON.stringify(TestMakerComponent.listExpression)

        	if (isChangeCkeditor || isChangeTexttospeech || isAlgorithmicState) {

                CustomConfirm({
                    message:'Do you want to save your changes before moving to the next question?',
                    yes:function() {
                        updateItemGo(@Model.NextQtiItemId,'@Model.FromVirtualQuestionProperty',4);
                    },
                    no:function() {
                    ShowBlock($('#divEditItem'), 'Loading');

                        @if(Model.FromVirtualQuestionProperty)
                    {
                        <text>nextQuestion();</text>
                    }
                    else
                    {
                        <text>window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.NextQtiItemId' + generateDistrictIdParamsFromURL();</text>
                    }
                    }
                });
            } else {
                ShowBlock($('#divEditItem'), 'Loading');

                @if(Model.FromVirtualQuestionProperty)
                {
                    <text>nextQuestion();</text>
                }
                else
                {

                    <text>window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.NextQtiItemId' + generateDistrictIdParamsFromURL();</text>
                }
            }
        }
        function updateItemGo(anotherQtiItemId,fromVirtualQuestionProperty,updateTypeId) {
            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            $('.js-btn-actions').prop('disabled', true);
            $('.js-btn-actions').prop('disabled', true);
            $("#imgPreviousItem").hide();
            $("#imgNextItem").hide();

            // Validate input
            var errorMessage = '';
            if ($('iframe[allowtransparency]').contents().find('body').find('span.placeholder').text() == 'Enter Question…') {
                $('iframe[allowtransparency]').contents().find('body').find('span.placeholder').remove();
            }
            //remove class style font size for inline choice
            resetDefaultFontSize();

            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                return;
            }

            var virtualSectionId = $('#selectSectionQuestion').val();
            var data = buidData(xmlContent, virtualSectionId);
            ShowBlock($('#divEditItem'), "Updating");

            $.ajax({
                url: '@Url.Action("UpdateItem")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data })
            }).done(function (response) {
                isChangedctx = false;
                if (response.success == true) {
                    $('#success-message').show();
                    ShowBlock($('#divEditItem'), "Transferring");
                    setTimeout(function () {
                        $('#success-message').hide();
                        if (fromVirtualQuestionProperty != undefined && fromVirtualQuestionProperty == 'True') {
                            if (updateTypeId != undefined && updateTypeId == 3) {
                                preQuestion();
                            }
                            if (updateTypeId != undefined && updateTypeId == 4) {
                                nextQuestion();
                            }
                        } else {
                            window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=' + anotherQtiItemId + generateDistrictIdParamsFromURL();
                        }

                    }, 2000);
                } else {
                    $('#divEditItem').unblock();
                    addErrorMessages(response);
                    setTimeout(function () {
                        $('#error-messages').hide();
                    }, 5000);
                }
            });
        }
        function saveAndNewItem() {
            if (@Model.VirtualTestId > 0) {
                window.location.href = '@Url.Action("Index", "TestMaker")?qtiItemGroupId=0' + '&qtiSchemaId=1' + '&virtualTestId=@Model.VirtualTestId' + generateDistrictIdParamsFromURL();
            } else {
                window.location.href = '@Url.Action("Index", "TestMaker")?qtiItemGroupId=@Model.QtiItemGroupId' + '&qtiSchemaId=1' + '&virtualTestId=0' + generateDistrictIdParamsFromURL();
            }
        }

        var algorithmStartedStateJsonString = null;

        $(document).ready(function () {
            TestMakerComponent.assessmentArtifactConfiguration = JSON.parse(unescapeHtml('@ViewBag.AssessmentArtifactConfiguration'));

            $("#listReference").disableSelection();
            isEditChangeType = false;
            isEditMultipChoice = false;

            var isAlgorithmic = '@Model.ResponseProcessingTypeID' == 7;
            var pointsValueAlgorithmic = null;

            if (isAlgorithmic) {
                pointsValueAlgorithmic = '@Model.PointsPossible';
                TestMakerComponent.listExpression = @Html.Raw(Json.Encode(Model.ListExpression));

                TestMakerComponent.listExpression = TestMakerComponent.listExpression.map(function (item) {
                    var newItem = {};
                    var isRules = item.Rules == null || item.Rules == 'null' || item.Rules == '';

                    newItem.qtiitemAlgorithmID = item.QtiItemAlgorithmID;
                    newItem.virtualQuestionAlgorithmID = item.VirtualQuestionAlgorithmID;
                    newItem.expression = item.Expression;
                    newItem.order = item.Order;
                    newItem.point = item.PointEarned;
                    newItem.rules = isRules ? '' : JSON.parse(item.Rules);
                    return newItem;
                });

                algorithmStartedStateJsonString = JSON.stringify(TestMakerComponent.listExpression);
            }

            if (@Model.QTISchemaId === _qtiSchemaIds.MULTIPART) {
                TestMakerComponent.isShowConditionalLogicButton = true;
                var listMultipartExpression = @Html.Raw(Json.Encode(Model.ListMultiPartExpression));
                if (listMultipartExpression.length > 0) {
                    TestMakerComponent.listMultiPartExpression = listMultipartExpression;

                    TestMakerComponent.listMultiPartExpression = TestMakerComponent.listMultiPartExpression.map(function (item) {
                        var newItem = {};
                        var isRules = !item && (item.Rules === 'null' || !item.Rules);

                        newItem.multiPartQTIItemExpressionID = item.MultiPartQTIItemExpressionId;
                        newItem.multiPartVirtualQuestionExpressionID = item.MultiPartVirtualQuestionExpressionId;
                        newItem.expression = item.Expression;
                        newItem.enableElements =  item.EnableElements != null ? item.EnableElements.split(',') : [];
                        newItem.rules = isRules ? '' : JSON.parse(item.Rules);
                        newItem.order = item.Order;
                        return newItem;
                    });
                }
            }

            if(@Model.QtiItemId > 0) {
                xmlImport($('#txtXmlContent').val(), '@Model.QTISchemaId', pointsValueAlgorithmic);
                TestMakerComponent.qtiSchemaId = '@Model.QTISchemaId';
            }
            if(@Model.PreviousQtiItemId > 0) {
                $('#imgPreviousItem').show();
                $('#divQuestionOrder').css('margin-left','360px');
            }
            if(@Model.NextQtiItemId > 0) {
                $('#imgNextItem').show();
                if(@Model.PreviousQtiItemId > 0) {
                    $('#divQuestionOrder').css('margin-left','360px');
                }else{
                    $('#divQuestionOrder').css('margin-left','410px');
                }
            }

            if('@Model.NoDuplicateAnswer'=='True') {
                $('#noDuplicate').prop('checked', true);
            }
            if(@Model.QtiItemId == 0) {

                //Can not find item
                $('#btnUpdateItem').attr('disabled','disabled');
                $('#btnUpdateItemAndClose').attr('disabled','disabled');
            }

            //redirect to item difference
            $("#changeItemType").change(function (evt) {

                var id = $(this).val();
                var titleSpecical = $(this).find("option:selected").attr('titleSpecial');
                 if(titleSpecical === 'Multi-Part') {
                    global.isMultipart = true;
                } else {
                    global.isMultipart = false;
                }

                if (titleSpecical == 'TrueFalse') {
                    isTrueFalse = true;
                    isEditMultipChoice = true;
                }
                else {
                    if (titleSpecical == 'MultipleChoice') {
                        isEditMultipChoice = true;
                    }
                    isTrueFalse = false;
                }

                var stringHtml = '';
                isEditChangeType = true;
                CustomConfirm({
                    message:'Item will be lost in converting to a different item type. Do you want to continue?',
                    yes:function() {
                        $(this).dialog('destroy');
                        $('#topSpace > div').hide().remove();
                        $('#topSpace > div').last().show();
                        $('#bottomSpace').empty();
                        $('.editorArea').find('.noDuplicateHTML').hide().remove();

                        $('#hdQTISchemaID').val(id);
                        loadEditItem(id, true);

                        if ($('body').find('div[role="dialog"]').hasClass('cke_reset_all')) {
                            $('body').find('div[role="dialog"]').remove();
                        }

                        if ($('body').find('.dialog').length) {
                            $('body').find('.dialog').remove();
                        }

                        TestMakerComponent.isShowAlgorithmicConfiguration = false;
                        TestMakerComponent.listExpression = [];
                        TestMakerComponent.attachmentSetting.allowStudentAttachment = false;
                        TestMakerComponent.qtiSchemaId = id;
                    },
                    no:function() {
                        $(this).dialog('destroy');

                        var $changeItemType = $('#changeItemType');
                        var txtTrueFalse = CKEDITOR.instances[ckID].getData();
                        if (txtTrueFalse.indexOf('texttruefalse="TrueFalse"') !== -1 && iSchemeID == '1') {
                            $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="TrueFalse"]').prop('selected', true);
                        } else if (txtTrueFalse.indexOf('imageDrawTool') !== -1 && iSchemeID === '10') {
                            $changeItemType.find('option[value="' + iSchemeID + 'd"]').prop('selected', true);
                        } else if (iSchemeID == '1') {
                            $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="MultipleChoice"]').prop('selected', true);
                        } else {
                            $changeItemType.find('option[value="' + iSchemeID + '"]').prop('selected', true);
                        }

                        if ($('body').find('div[role="dialog"]').hasClass('cke_reset_all')) {
                            $('body').find('div[role="dialog"]').remove();
                        }

                        if ($('body').find('.dialog').length) {
                            $('body').find('.dialog').remove();
                        }
                    }
                });
            });

            //remove class style font size for inline choice
            resetDefaultFontSize();

            // Assign old text to speech
            // New modern web can use Object.assign({}, iResultComponent.texttospeech)
            MKEditor.Oldtexttospeech = {
                enable: iResultComponent.texttospeech.enable,
                voice: iResultComponent.texttospeech.voice,
                rate: iResultComponent.texttospeech.rate,
                volume: iResultComponent.texttospeech.volume
            };

            CKEDITOR.instances[ckID].once('editItemLoaded', function() {
                var xmlContent = xmlExport();
                oldXml = xmlContent;
                TestMakerComponent.typeChoice = xmlContent.indexOf('cardinality="multiple"') != -1 ? 'multiple' : 'single';
                TestMakerComponent.typeTextEntry = xmlContent.indexOf('range="true"') != -1 ? 'range' : 'text';
                if(isAlgorithmic){
                    var qtiSchemaId = parseInt('@Model.QTISchemaId',10);
                    if (qtiSchemaId === 1 || qtiSchemaId === 3 || qtiSchemaId === 37) {
                        TestMakerComponent.listExpression.schemaSubType = xmlContent.indexOf('cardinality="multiple"') != -1 ? 'multiple' : 'single';
                    }
                }
                var lineMatchingConfig = (iResult.find(function(e) {
                    return e.responseDeclaration.lineMatching == 1
                }) || {}).responseDeclaration;
                var bodyClassList = CKEDITOR.instances[ckID].document.$.body.classList;
                bodyClassList.remove(
                    'object-left',
                    'object-right',
                    'object-top',
                    'object-bottom',
                    'destination-left',
                    'destination-right',
                    'destination-top',
                    'destination-bottom'
                )
                if (lineMatchingConfig) {
                    bodyClassList.add(
                        'line-matching',
                        'object-' + lineMatchingConfig.anchorPositionObject,
                        'destination-' + lineMatchingConfig.anchorPositionDestination
                    )
                } else {
                    bodyClassList.remove('line-matching')
                }
            })
        });

        function getObjectIdList() {
            var objectIdList = '';

            $("#listReference li").each(function () {
                if ($(this).attr("type") != "objectUrl") {
                    objectIdList += $(this).attr("data") + ';';
                }
            });

            if (objectIdList.length > 0)
                return objectIdList.substring(0, objectIdList.length - 1);
            else {
                return objectIdList;
            }
        }

        function viewRefObjectContent(control) {
            //tracking current refObject is being viewed
            $(control).parent().addClass('currentView');

            // Get refObjectId from Add Passage Popup
            var refObjectId = $(control).attr('data');
            var refObjectLink = '';

            var type = $(control).parent().attr('type'); // ckeditor_mk.js
            if(type=='objectUrl') {
                refObjectLink = $(control).parent().attr('data');
            }
            if(type=='objectId') {
                // Get refObjectId from view passage control from Create or Edit page
                if (refObjectId == null)
                    refObjectId = $(control).parent().attr('data');
            }
            if(refObjectId==null || refObjectId==undefined) {
                refObjectId = 0;
            }

            var isShowShuffleCheckBox = false;
            if ('@Model.FromVirtualQuestionProperty' == 'True') {
                isShowShuffleCheckBox = true;
            }

            var noShuffle = false;
            var noshuffleAttr = $(control).parent().attr('noshuffle');
            if (noshuffleAttr != undefined) {
                noShuffle = noshuffleAttr;
            }
            var worker = $('<div />');
            var assignedObjectIdList = getObjectIdList();
            var url = '@Url.Action("ShowPassageDetail", "QTIItem")/?refObjectID=' + refObjectId + '&data=' + encodeURI(refObjectLink) + '&IsShowShuffleCheckbox=' + isShowShuffleCheckBox + '&noShuffle=' + noShuffle + '&virtualTestId=' + '@Model.VirtualTestId';

            worker
                .addClass("dialog")
                .attr("id", "ShowRefObjectContent")
                .appendTo("body")
                .load(url, function () {

                    worker.dialog({
                        title: $(this).attr("Show Ref Object Content"),
                        open: function() {
                            $('#divPassageDetail').find('video').trigger('play');
                        },
                        close: function () {
                            //check checkbox shuffle
                            if ($('#cbShuffle') != undefined)
                            {
                                if ($('#cbShuffle').attr('checked') == 'checked') {
                                    $('.currentView').attr('noShuffle', 'true');
                                } else {
                                    $('.currentView').removeAttr('noShuffle');
                                }

                                $('.currentView').removeClass('currentView');;
                            }

                            $('.ui-widget-overlay').remove();
                            $(this).remove();

                            if (window.playsound != null) {
                                window.playsound.pause();
                            }
                        },
                        modal: false,
                        width: 750,
                        resizable: false,
                    });
                });

            showModalDialogBG();
        }

        //Create event click for delete button
        $(".delReference").click(function () {
            $(this).parent().remove();
        });

        $('#btnPreviewItem').on('click', function () {

            var isValidateDragAndDrop = validateDragAndDrop(iResult);

            if (!isValidateDragAndDrop) {
                popupAlertMessage('alert', "<p style='text-align: left'>You are using <b>Destination Level Partial Credit Grading</b> on this question, but you have set the overall point value on this question to be greater than the sum of each destination's point value. This means that if a student answers each destination correctly, they still will not earn the full credit on this question. Please adjust the point values on this question before saving.</p>", 515);
                return false;
            }

            ShowBlock($('#divEditItem'), "Previewing");
            $('.js-btn-actions').prop('disabled', true);

            if (currentCkID && currentCkID != '' && ckID != currentCkID) {
                ckID = currentCkID;
            }

            var xmlContent = xmlExport();
            if (xmlContent == '' || !xmlContent) {
                CustomAlert('Question content is empty');
                return;
            }
            xmlContent = xmlContent.replace('<span class="placeholder" contenteditable="false" style="position: absolute;z-index: 99999;">Enter Question…</span>', "");

            var multiPartExpressions = [];
            var enableElement = '';
            if (TestMakerComponent.listMultiPartExpression.length > 0) {
                for (var i = 0; i < TestMakerComponent.listMultiPartExpression.length; i++) {
                    enableElement = TestMakerComponent.listMultiPartExpression[i].enableElements.toString();
                    if (enableElement) {
                        multiPartExpressions.push({
                            MultiPartExpressionPreviewID: null,
                            QTIItemPreviewRequestID: null,
                            Expression: TestMakerComponent.listMultiPartExpression[i].expression,
                            EnableElements: TestMakerComponent.listMultiPartExpression[i].enableElements.toString(),
                            Order: i + 1,
                            Rules: JSON.stringify(TestMakerComponent.listMultiPartExpression[i].rules),
                        });
                    }
                }
            }

            var data = {
                virtualTestId: @Model.VirtualTestId,
                xmlContent: xmlContent,
                multiPartExpressions: multiPartExpressions
            }

            $.ajax({
                url: '@Url.Action("GeneratePreviewRequest")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 'model': data }),
                error: function () {
                    $('#divEditItem').unblock();
                    $('.js-btn-actions').prop('disabled', false);
                }
            }).done(function (response) {
                SessionTimeOutComponent.sessionKeepAlive();
                $('#divEditItem').unblock();
                $('.js-btn-actions').prop('disabled', false);

                $('body').append('<div id="divUrlPreviewOnlinePanel" class="dialog"></div>');
                var yesButton = '<button id="button-ok" class="LinkitStypeButton big-button" style="width:63px;">OK</button>';
                var strHtml = '<section class="grid_5"><div class="block-border" style="width: 300px;">' +
                    '<div class="block-content form" style="padding-bottom: 1em; text-align: center;"><div>Question is ready for preview' +
                    '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + '</div></div></div></section>';

                $("#divUrlPreviewOnlinePanel").append(strHtml);
                $('#divUrlPreviewOnlinePanel').dialog({
                    title: "",
                    open: function () {
                        //If width of popup gt window width popup auto show on the left
                        var currentPopup = $(this);
                        if (currentPopup.width() > $(window).width()) {
                            currentPopup.parent().css({ "left": "0" });
                        }
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                        $('#divUrlPreviewOnlinePanel #button-ok').click(function () {
                            window.open(response.testTakerUrl, '_blank');
                            closePopUpOnlineTearcherPreview();
                        });
                    },
                    beforeclose: function () {
                        return true;
                    },
                    close: function () {
                        $('#divUrlPreviewOnlinePanel').remove();
                        $("body .my-overlay").remove();
                        if (window.playsound != null) {
                            window.playsound.pause();
                        }
                    },
                    modal: false,
                    width: 360,
                    resizable: false
                });
            });
        });

        function closePopUpOnlineTearcherPreview(){
            $('#divUrlPreviewOnlinePanel').remove();
            $("body .my-overlay").remove();
        }
         $("#listReference").sortable({
            placeholder: "ui-state-highlight",
            forcePlaceholderSize: true,
            forceHelperSize: true,
            dropOnEmpty: true,
            containment: '#listReference',
            distance: 1,
            classes: {
                "ui-sortable": "highlight"
            },
            scroll: true,
            tolerance: "pointer",
            cursor: "grabbing",
             sort: function(event, ui) {
                ui.helper.css({'top' : ui.position.top + $(window).scrollTop() + 'px', 'height': 'auto' ,'width': 'auto'});
            }
        });
    </script>
    <!-- Close PassageDetail-->
    <script type="text/javascript">
        $('#btnCloseUserClickPassageDetail').die('click');
        $('#btnCloseUserClickPassageDetail').live("click", function (e) {
            //check checkbox shuffle
            if ($('#cbShuffle') != undefined) {
                if ($('#cbShuffle').attr('checked') == 'checked') {
                    $('.currentView').attr('noShuffle', 'true');
                } else {
                    $('.currentView').removeAttr('noShuffle');
                }

                $('.currentView').removeClass('currentView');;
            }
            $('#ShowRefObjectContent').dialog("close");
            $('#ShowRefObjectContent').parent().dialog("close");

            if (window.playsound != null) {
                window.playsound.pause();
            }
        });

        $('#btnConditionalLogicConfiguration').live("click", function (e) {
            if (TestMakerComponent.listMultiPartExpression.length > 0) {
                var xmlContent = xmlExport();
                var options = MultiPart.getQueryBuilder(xmlContent);
                var response = '';
                TestMakerComponent.multiPartResponses = ["NEXT"];

                for (var i = 0; i < options.filters.length; i++) {
                    response = options.filters[i].id;
                    if ($.inArray(response, TestMakerComponent.multiPartResponses) < 0) {
                        TestMakerComponent.multiPartResponses.push(response);
                    }
                }
                TestMakerComponent.multiPartResponses.sort();

                var enableElements = null;
                for (var i = 0; i < TestMakerComponent.listMultiPartExpression.length; i++) {
                    enableElements = TestMakerComponent.listMultiPartExpression[i].enableElements;
                    $("#enableElement" + (i + 1)).tagit({
                        availableTags: enableElements
                    });
                    $.each(enableElements, function (key, single_tag) {
                        $('#enableElement' + (i + 1)).tagit('createTag', single_tag);
                    });
                }
            }
        });
    </script>
    <script type="text/javascript">
        function ConfirmItemUpdate(message,updateTypeId) {
            var hbody = $("body").height() - 109;
            var strHtml = '<section class="grid_5" style="height:140px;">' +
                '<div class="block-border" style="width: 350px; min-height: 100px;">' +
                '<div class="block-content form" style="padding-bottom:0px">' +
                '<table cellpadding="0" cellspacing="0" style="margin-top:-15px;"><tr><td><p class="styleMessage" style="margin-bottom:10px;">' + message +
                '</p></td></tr><tr><td>' +
                '<p class="plButton"  style="margin-bottom:10px;text-align: center">' +
                '<button id="btnOk" type="button" name="ok" onclick="ConfirmItemUpdateOkClick('+ updateTypeId + ')">OK</button>' +
                '<button id="btnCancel" type="button" name="cancel" onclick="ConfirmItemUpdateCancellick('+updateTypeId +')" style="margin-left:10px;">Cancel</button>' +
                '</p></td></tr></table></div></div></section>';
            $("<div></div>")
                .html(strHtml)
                .addClass("dialog")
                .attr("id", "ConfirmItemUpdateDialog")
                .appendTo("body")
                .dialog({
                    close: function () { $(this).remove(); },
                    modal: true,
                    width: 420,
                    maxheight: 100,
                    resizable: false
                });

            $(".ui-dialog").css("height", hbody);

        }

        function ConfirmItemUpdateOkClick(updateTypeId) {
            $(".dialog").dialog("close");
            if(updateTypeId==1) {
                updateItem();
            }
            if(updateTypeId==2) {
                saveAndCloseItem();
            }
            if(updateTypeId==3) {
                updateItemGo(@Model.PreviousQtiItemId);
            }
            if(updateTypeId==4) {
                updateItemGo(@Model.NextQtiItemId );
            }
            if(updateTypeId==5) {
                updateCloseItem();
            }
            if (updateTypeId == 6) {//cancel
                $(this).dialog("close");
                updateItem(true);
            }
            if (updateTypeId == 7) {//change item type
                $(this).dialog("close");
                $('#topSpace > div').hide().remove();
                $('#topSpace > div').last().show();
                $('#bottomSpace').empty();
                $('.editorArea').find('.noDuplicateHTML').hide().remove();

                loadQuestionType(id);

                if ($('body').find('div[role="dialog"]').hasClass('cke_reset_all')) {
                    $('body').find('div[role="dialog"]').remove();
                }

            }
        }

        function ConfirmItemUpdateCancellick(updateTypeId) {
            $(".dialog").dialog("close");
            if(updateTypeId==3) {
                window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.PreviousQtiItemId' + generateDistrictIdParamsFromURL();
            }
            if(updateTypeId==4) {
                window.location.href = '@Url.Action("Edit", "TestMaker")?qtiItemId=@Model.NextQtiItemId' + generateDistrictIdParamsFromURL();
            }
            if(updateTypeId==6) {//cancel
                $(this).dialog("close");
                ShowBlock($('#divEditItem'), "Waiting");
                window.location.href = '@Url.Action("Index", "QTIItem")?qtiItemGroupID=' + '@Model.QtiItemGroupId' + generateDistrictIdParamsFromURL();
            }
            if(updateTypeId==7) {//change item type
                $(this).dialog("close");

                var $changeItemType = $('#changeItemType');
                var txtTrueFalse = CKEDITOR.instances[ckID].getData();
                if (txtTrueFalse.indexOf('texttruefalse="TrueFalse"') !== -1 && iSchemeID == '1') {
                    $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="TrueFalse"]').prop('selected', true);
                } else if (txtTrueFalse.indexOf('imageDrawTool') !== -1 && iSchemeID === '10') {
                    $changeItemType.find('option[value="' + iSchemeID + 'd"]').prop('selected', true);
                } else {
                    if (iSchemeID == '1') {
                        $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="MultipleChoice"]').prop('selected', true);
                    } else {
                        $changeItemType.find('option[value="' + iSchemeID + '"]').prop('selected', true);
                    }
                }
                return;
            }
        }
    </script>

    <script type="text/javascript">
        CKEDITOR.on('instanceReady', function (ev) {
            var $changeItemType = $('#changeItemType');
            var txtTrueFalse = CKEDITOR.instances[ckID].getData();

            var editable = ev.editor.editable();
            var top = $('#divQContent').find('iframe[allowtransparency]').offset().top - 30;

            ev.editor.on('key', function (ev) {
                SessionTimeOutComponent.handlerSessionKeepAlive();
            });

            ev.editor.on('contentDom', function () {
                var doc = editable.getDocument();

                editable.attachListener(editable, 'click', function () {
                    SessionTimeOutComponent.handlerSessionKeepAlive();
                });

                editable.attachListener(doc, 'scroll', function () {
                    SessionTimeOutComponent.handlerSessionKeepAlive();
                });
            });

            editable.attachListener(editable, 'mousemove', function (evt) {
                var ele = evt.data.getTarget();
                var tagTable = $(ele.$.parentElement).parents('table');
                var left = $('#divQContent').find('iframe[allowtransparency]').offset().left - 90;
                var topM = evt.data.$.clientY;
                var leftM = evt.data.$.clientX;
                var topEle = ele.getDocumentPosition().y;
                var leftEle = ele.getDocumentPosition().x;
                var $tooltips = $('.tool-tip-tips');
                var arrowHtml = '<span class="arrow"><span></span></span>';

                var itemChoice = '';
                if (ele.getAttribute('class') != undefined) {
                    if (ele.getAttribute('class').split(" ")[2] != undefined) {
                        itemChoice = ele.getAttribute('class').split(" ")[2];
                    }
                }
                if (!ele.hasClass('placeholder')) {
                    var newSubPart = [
                        'multipleChoiceMark',
                        'inlineChoiceInteractionMark',
                        'extentTextInteractionMark',
                        'textEntryInteractionMark',
                        'extendText',
                        'imageDrawTool',
                        'partialAddSourceTextMark',
                        'partialAddSourceImage',
                        'partialAddDestinationTextMark',
                        'partialAddDestinationImageMark',
                        'imageupload',
                        'imageHotspotMark',
                        'imageHotspotMarkObject',
                        'numberLineInteraction',
                        'partialDragDropNumericalSourceMark',
                        'numberLineInteraction',
                        'sequenceMark',
                        'partialDragDropNumericalDestinationMark',
                        'itemtypeonimageMark'
                    ];

                    for (var si = 0, lenSubPart = newSubPart.length; si < lenSubPart; si++) {
                        if (ele.hasClass(newSubPart[si])) {
                            $tooltips.css({
                                'top': (top + topM) + 'px',
                                'left': (left + leftM) + 'px',
                                'opacity': 1,
                                'display': 'block'
                            });
                        }

                    }
                    if (ele.hasClass('hotspot-checkbox') || ele.hasClass('hotspot-circle')) {
                        $tooltips.css({
                            'top': (top + topM) + 'px',
                            'left': (left + leftM - 65) + 'px',
                            'opacity': 1,
                            'display': 'block'
                        });
                    }

                    if (ele.hasClass('imageupload') || ele.hasClass('itemtypeonimageMark')) {
                        $tooltips.html('Double click here to edit image' + arrowHtml);
                    } else if (ele.hasClass('textEntryInteractionMark')) {
                        $tooltips.html('Double click here to edit text entry' + arrowHtml);
                    } else if (ele.hasClass('extendText') || ele.hasClass('extentTextInteractionMark')) {
                        $tooltips.html('Double click here to edit open ended box' + arrowHtml);
                    } else if (ele.hasClass('imageDrawTool')) {
                        $tooltips.html('Double click here to edit drawing interaction' + arrowHtml);
                    } else if (ele.hasClass('partialAddSourceTextMark') || ele.hasClass('partialAddSourceImage')) {
                        $tooltips.html('Double click here to edit source object' + arrowHtml);
                    } else if (ele.hasClass('partialAddDestinationTextMark') || ele.hasClass('partialAddDestinationImageMark')) {
                        $tooltips.html('Double click here to edit destination object' + arrowHtml);
                    } else if (ele.hasClass('imageHotspotMark') || ele.hasClass('imageHotspotMarkObject')) {
                        $tooltips.html('Double click here to edit image hot spot selection' + arrowHtml);
                    } else if (ele.hasClass('hotspot-checkbox') || ele.hasClass('hotspot-circle')) {
                        $tooltips.html('Double click to edit the hot spot properties' + arrowHtml);
                    } else if (ele.hasClass('numberLineInteraction')) {
                        $tooltips.html('Double click here to edit number line hot spot' + arrowHtml);
                    } else if (ele.hasClass('sequenceMark')) {
                        $tooltips.html('Double click here to edit sequence order' + arrowHtml);
                    } else if (ele.hasClass('partialDragDropNumericalDestinationMark')) {
                        $tooltips.html('Double click here to edit destination drag and drop numberical' + arrowHtml);
                    } else {
                        $tooltips.html('Double click here to edit answer choices' + arrowHtml);
                    }
                }

                if (ele.hasClass('single-click')) {
                    $tooltips.css({
                        'top': (top + topEle) + 'px',
                        'left': (left + leftEle) + 'px',
                        'opacity': 1,
                        'display': 'none'
                    });
                }
            });
            editable.attachListener(editable, 'mouseout', function (evt) {
                var ele = evt.data.getTarget();

                $('.tool-tip-tips').css({
                    'top': '0px',
                    'opacity': 0,
                    'display': 'none'
                });

            });

            editable.attachListener(editable, 'keyup', function (evt) {
                if (iSchemeID == '36') {
                    // Drap and drop sequence
                    if (myEditor.getData().indexOf('class="sequenceBlock"') == -1) {
                        $('.cke_button__sequenceorder').parents('span.cke_toolbar').show();
                    } else {
                        $('.cke_button__sequenceorder').parents('span.cke_toolbar').hide();
                    }
                }
            });

        editable.attachListener(editable, 'click', function (evt) {
            var element = ev.editor.getSelection().getSelectedElement();
            if (evt.name == "click" && element != null && evt.data.$.toElement) {
                if (evt.data.$.toElement.className == "audioTable bntPlay") {
                    var audioUrl = evt.data.$.toElement.getAttribute('audiosrc');
                    if (window.playsound != undefined) {
                        if (window.playsound.isPaused() == true) {
                            window.playsound = new vnsAudio({
                                src: audioUrl
                            });
                        } else {
                            window.playsound.pause();
                        }
                    } else {
                        window.playsound = new vnsAudio({
                            src: audioUrl
                        });
                    }
                }
            }
            tristateStatusHandler(element, ev.editor);
            closeAttachmentTypesSelect();
            closeRecordingOptionsSelect();
            evt.sender.$.focus();
        });

            if (iSchemeID == "21") {
                editable.attachListener(editable, 'click', function (evt) {

                    var element = ev.editor.getSelection().getSelectedElement();

                    var newSubPart = ['multipleChoice', 'inlineChoiceInteraction', 'textEntryInteraction', 'extendText', 'drawTool'];

                    if (element !== null) {
                        var elementParent = element.getParent();
                        for (var i = 0, len = newSubPart.length; i < len; i++) {
                            if (elementParent.hasClass(newSubPart[i])) {
                                if (elementParent.hasClass('active-border')) {
                                    elementParent.removeClass('active-border');
                                } else {
                                    elementParent.addClass('active-border');
                                }

                                if (elementParent.hasClass('inlineChoiceInteraction')) {
                                    elementParent.addClass('typeFontSize');
                                }
                            }
                        }
                    }
                });
                //add class typeFontSize for inline choice when edit
                var tagBody = $('iframe[allowtransparency]').contents().find('body');
                tagBody.click(function (evt) {
                    if (!$(evt.target).hasClass('inlineChoiceInteractionMark')) {
                        if ($(tagBody).find('span.inlineChoiceInteraction').hasClass('typeFontSize')) {
                            $(tagBody).find('span.inlineChoiceInteraction').removeClass('typeFontSize');
                        }

                        if (navigator.userAgent.indexOf('Trident') > -1) {

                            if ($(tagBody).find('span.inlineChoiceInteraction').hasClass('active-border')) {
                                $(tagBody).find('span.inlineChoiceInteraction').removeClass('active-border');
                            }

                            if (!$(evt.target).hasClass('smallText') || !$(evt.target).hasClass('normalText') || !$(evt.target).hasClass('largeText') || !$(evt.target).hasClass('veryLargeText')) {
                                $('.editorArea .cke_combo__fontsize').find('a .cke_combo_text').text('Normal');
                                $('.editorArea .cke_combo__fontsize').find('.cke_combo_label').text('Normal');
                            }
                        }

                    } else {

                        if (navigator.userAgent.indexOf('Trident') > -1) {
                            $(tagBody).find('span.inlineChoiceInteraction').removeClass('active-border');
                        }
                        $(tagBody).find('span.inlineChoiceInteraction').removeClass('typeFontSize');
                        $(evt.target).parent('span.inlineChoiceInteraction').addClass('typeFontSize');

                        if (navigator.userAgent.indexOf('Trident') > -1) {
                            if ($(evt.target).hasClass('inlineChoiceInteractionMark')) {
                                var tagInlineChoice = $(evt.target).parent();
                                var tagFontSize = tagInlineChoice.parent();
                                $(evt.target).parent('span.inlineChoiceInteraction').addClass('active-border');

                                if ($(tagFontSize).hasClass('smallText') || $(tagFontSize).hasClass('normalText') || $(tagFontSize).hasClass('largeText') || $(tagFontSize).hasClass('veryLargeText')) {
                                    var eleFontSize = getStyleFontSizeInlineChoice(tagFontSize);
                                    $('.editorArea .cke_combo__fontsize').find('a .cke_combo_text').text(eleFontSize);
                                    $('.editorArea .cke_combo__fontsize').find('.cke_combo_label').text(eleFontSize);
                                }
                            }
                        }
                    }

                });
            }

            if (txtTrueFalse.indexOf('texttruefalse="TrueFalse"') !== -1 && iSchemeID == '1') {
                $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="TrueFalse"]').prop('selected', true);
            } else if (txtTrueFalse.indexOf('imageDrawTool') !== -1 && iSchemeID === '10') {
                $changeItemType.find('option[value="' + iSchemeID + 'd"]').prop('selected', true);
            } else {
                if (iSchemeID == '1') {
                    $changeItemType.find('option[value="' + iSchemeID + '"][titlespecial="MultipleChoice"]').prop('selected', true);
                } else {
                    $changeItemType.find('option[value="' + iSchemeID + '"]').prop('selected', true);
                }
            }

            removeDisabledAfterCkeditorLoaded();
        });

        $(document).on('mouseover', '#btnCancel', function () {
            $('iframe[allowtransparency]').contents().find('body').trigger('blur');
        });

        function removeDisabledAfterCkeditorLoaded () {
            var status;

            if (window.CKEDITOR && CKEDITOR.instances && CKEDITOR.instances[ckID]) {
                status = CKEDITOR.instances[ckID].status;
            }

            MathJax.Hub.Queue(function () {
                if (status === 'ready') {
                    setTimeout(function () {
                        var $btnActions = $('.js-btn-actions');
                        $btnActions.removeClass('disabled');

                        if (!currentCkID) {
                            currentCkID = ckID;
                        }

                    }, 3000);
                }
            });
        }

        function RecoverTestMakerCKEditorConfig() {
            //reset config for CKEditor used in TestMaker
            MKEditor = {
                isPassageEditor: false,
                imgUrl: "../../Content/themes/TestMaker/",
                audioUrl: '@Url.Action("AudioUpload", "TestMaker")',
                loadAudioUrl: window.location.protocol + "//" + window.location.hostname + "/TestMaker/GetAudio",
                objectId: '@Model.QtiItemGroupId',
                imgUpload: '@Url.Action("ImageUpload", "TestMaker")',
                GetViewReferenceImg: window.location.protocol + "//" + window.location.hostname + '/TestAssignmentRegrader/GetViewReferenceImg?imgPath=', //This is config for view image on test maker
                UseS3Content: true, // this variable use to download to applition(  server) or S3
                S3PassageMedia: '',
                GetViewReferenceImgS3: '',
                Oldtexttospeech: {}
            };
            @if (Model.MediaModel != null)
            {
                <text>MKEditor.S3PassageMedia = '@Model.MediaModel.PassageMediaFolderPath';</text>
                <text>MKEditor.GetViewReferenceImg = '@Model.MediaModel.TestMediaFolderPath';</text>
                <text>MKEditor.GetViewReferenceImgS3 = '@Model.MediaModel.TestMediaFolderPath';</text>
                <text>MKEditor.UseS3Content = true;</text>
            }
            ckID = currentCkID;//recover the current ckID (used by test  maker)
        }

        function buidData(xmlContent, virtualSectionId) {
            var listExpression = [];
            var noDuplicateAnswers = false;
            if ($('#noDuplicate').length > 0) {
                noDuplicateAnswers = $('#noDuplicate').is(':checked');
            }
            if (TestMakerComponent.listExpression.length > 0) {
                for (var i = 0; i < TestMakerComponent.listExpression.length; i++) {
                    var expressionItem = TestMakerComponent.listExpression[i];
                    var expressionObj = {};

                    var expressionObj = {
                        QtiItemAlgorithmID: expressionItem.qtiitemAlgorithmID,
                        VirtualQuestionAlgorithmID: expressionItem.virtualQuestionAlgorithmID,
                        Expression: expressionItem.expression,
                        PointEarned: expressionItem.point,
                        Order: i + 1
                    };

                    if (expressionItem.rules != '') {
                        expressionObj.Rules = JSON.stringify(expressionItem.rules)
                    }

                    listExpression.push(expressionObj);
                }
            }

            var multiPartExpressions = [];
            if (TestMakerComponent.listMultiPartExpression.length > 0) {

                for (var i = 0; i < TestMakerComponent.listMultiPartExpression.length; i++) {
                    var item = TestMakerComponent.listMultiPartExpression[i];
                    var expression = {};
                    var expression = {
                        MultiPartQTIItemExpressionID: item.multiPartQTIItemExpressionID,
                        MultiPartVirtualQuestionExpressionID: item.multiPartVirtualQuestionExpressionID,
                        Expression: item.expression,
                        EnableElements: TestMakerComponent.listMultiPartExpression[i].enableElements.toString(),
                        Order: i + 1
                    };
                    if (item && item.rules) {
                        expression.Rules = JSON.stringify(item.rules)
                    }

                    if (expression.EnableElements) {
                        multiPartExpressions.push(expression);
                    }
                }
            }

            var qtiItemId = $('#qtiItemId').val();
            var data = {
                QtiItemId: qtiItemId,
                XMLContent: xmlContent,
                VirtualquestionId: '@Model.VirtualQuestionId',
                NoDuplicateAnswers: noDuplicateAnswers,
                ListExpression: listExpression,
                ListMultiPartExpression: multiPartExpressions,
                RubricQuestionCategories: global.scoringMethod === 'rubricBasedGrading' ? global.rubricQuestionCategories : [],
                VirtualSectionId: virtualSectionId,
                VirtualTestId: '@Model.VirtualTestId'
            };
            if ($("#changeItemType").val() != _qtiSchemaIds.CONSTRUCTED_RESPONSE) {
                delete data.RubricQuestionCategories;
            }
            return data;
        }

        function compareXmlContent(oldXml, newXml, iSchemeID) {
            var isChangeAnswerChoice = false;
            var $oldXml = $(oldXml);
            var $newXml = $(newXml);
            //Single & Multiple Choice & Multiple Choice Variable
            if (iSchemeID == 1 || iSchemeID == 3 || iSchemeID == 37) {
                if ($oldXml.find('simpleChoice').length > $newXml.find('simpleChoice').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //Inline Choice
            if (iSchemeID == 8) {
                if ($oldXml.find('inlineChoice').length > $newXml.find('inlineChoice').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //DragDrop & DragDropNumerical
            if (iSchemeID == 30 || iSchemeID == 35) {
                if ($oldXml.find('sourceObject').length > $newXml.find('sourceObject').length) {
                    isChangeAnswerChoice = true;
                }
                if ($oldXml.find('destinationObject').length > $newXml.find('destinationObject').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //TextHotSpot
            if (iSchemeID == 31) {
                if ($oldXml.find('sourceText').length > $newXml.find('sourceText').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //ImageHotSpot & SequenceOrder
            if (iSchemeID == 32 || iSchemeID == 36) {
                if ($oldXml.find('sourceItem').length > $newXml.find('sourceItem').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //TableHotSpotSelection
            if (iSchemeID == 33) {
                if ($oldXml.find('tableitem').length > $newXml.find('tableitem').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //NumberLine
            if (iSchemeID == 34) {
                if ($oldXml.find('numberLineItem').length > $newXml.find('numberLineItem').length) {
                    isChangeAnswerChoice = true;
                }
            }
            //Multipart
            if (iSchemeID == 21) {
                global.isMultipart = true;
                for (var i = 0; i < $oldXml.find('[responseIdentifier]').length; i++) {
                    var itemOld = $oldXml.find('[responseIdentifier]')[i];
                    for (var j = 0; j < $newXml.find('[responseIdentifier]').length; j++) {
                        var itemNew = $newXml.find('[responseIdentifier]')[j];
                        if ($(itemOld).attr('responseidentifier') == $(itemNew).attr('responseidentifier')) {
                            if ($(itemOld).find('simpleChoice').length && $(itemOld).find('simpleChoice').length > $(itemNew).find('simpleChoice').length) {
                                isChangeAnswerChoice = true;
                            }
                            if ($(itemOld).find('inlineChoice').length && $(itemOld).find('inlineChoice').length > $(itemNew).find('inlineChoice').length) {
                                isChangeAnswerChoice = true;
                            }
                            break;
                        }
                    }
                }
            }
            return isChangeAnswerChoice;
        }
    </script>
    @if (Model.IsSurvey == 1)
    {
        <script>
             $(function () {
                var item = $("#main-nav li a[href='@Url.Action("Index", "AssessmentItems")']");
                item.parent().removeClass('current');
                item.parent().parent().parent().removeClass('current');
                item = $("#main-nav li a[href='@Url.Action("Index", "ManageSurvey")']");
                item.parent().addClass("current");
                item.parent().parent().parent().addClass("current");
            })
        </script>
    }
    <script>
        function validateUniquePoints() {
            if ('@Model.IsSurvey' == '1' && iSchemeID == '37') {
                var pointArr = [];
                $.each(iResult[0].simpleChoice, function () {
                    pointArr.push(this.answerPoint);
                });
                if (_.union(pointArr).length != pointArr.length) {
                    CustomAlert('The point values must be different.');
                    return false;
                }
            }
            return true;
        }
    </script>
}
