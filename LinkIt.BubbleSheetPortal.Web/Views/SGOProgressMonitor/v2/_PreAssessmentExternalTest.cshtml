@using DevExpress.Office.Utils
@model LinkIt.BubbleSheetPortal.Web.ViewModels.SGO.DataPointViewModel
<div class="FileLocation" style="display: none; visibility: hidden;">FileLocation: SGOSelectDataPoint\_PreAssessmentExternalTest</div>
<style type="text/css">
    .datepicker-sgo .ui-datepicker-header {
        top: 0;
    }

    .datepicker-sgo {
        position: absolute !important;
        top: 657px !important;
    }

    .datepicker-sgo .ui-icon {
        background-image: url(/Content/themes/base/images/ui-icons_222222_256x240.png);
        width: 16px;
        height: 16px;
    }

    .datepicker-sgo .ui-datepicker-prev,
    .datepicker-sgo .ui-datepicker-next {
        border: 1px solid transparent;
    }

    .datepicker-sgo .ui-datepicker-prev:hover,
    .datepicker-sgo .ui-datepicker-prev:focus,
    .datepicker-sgo .ui-datepicker-next:hover,
    .datepicker-sgo .ui-datepicker-next:focus {
        border-color: var(--grey7);
        background: unset !important;
    }

    .wtHider .wtSpreader {
        width: 100% !important;
        height: 100% !important;
    }

    #ui-datepicker-div {
        z-index: 9999 !important;
        margin-top: 6px;
        margin-left: -2px;
    }

    .sgo-datetime {
        position: relative;
        display: block;
        border: 2px solid var(--selectBorder);
    }

    .sgo-datetime input {
        border: 0;
        padding: 0.6875rem 1rem;
        width: auto;
    }

    .sgo-datetime .icon-sgo-calendar {
        background: url(/Content/images/icon-sgo-calendar.png) no-repeat;
        background-size: 18px 18px;
        width: 18px;
        height: 18px;
        display: inline-block;
        vertical-align: middle;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 1rem;
        cursor: default;
        pointer-events: none;
    }

   input[name="txtPointPossiblePreAssessmentExternal"] {
        padding: 0.65rem !important;
        border: 2px solid var(--selectBorder);
        border-radius: 0;
        color: var(--selectColor);
        font-size: var(--fontSizeText);
        background: none;
    }

</style>
<div class="coolfieldset qtiItemSelector fieldset-datapoint" id="fsSelectVirtualTest">
    <div class="divider mt-32 mb-32"></div>
    <p class="fw-bold mb-3">Specify Test Descriptions</p>

    <input type="hidden" name="txtHiddenSubjectName" value="@Model.SubjectName" dataPoint="@Model.DataPointIndex" />
    <input type="hidden" name="txtHiddenGradeId" value="@Model.GradeId" dataPoint="@Model.DataPointIndex" />
    <input type="hidden" name="txtHiddenVirtualTestId" value="@Model.VirtualTestId" dataPoint="@Model.DataPointIndex" />
    <input type="hidden" name="txtHiddenAttachScoreUrl" value="@Model.AttactScoreUrl" dataPoint="@Model.DataPointIndex" />
    <input type="hidden" name="txtRemainingAjaxRequest" value="1" dataPoint="@Model.DataPointIndex" />

    <div class="columns" id="divItemCriteria">
        <div class="row g-3">
            <div class="col-4">
                <label>@LabelHelper.Subject</label>
                <div class="block-text-name w-100">
                    <select id="selectSubjectPreAssessmentExternal" class="w-100" name="selectSubjectPreAssessmentExternal" datapoint="@Model.DataPointIndex"></select>
                    <div class="box-select">
                        <span class="overlay"></span>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <label>@LabelHelper.TestGrade</label>
                <div class="block-text-name w-100">
                    <select id="selectGradePreAssessmentExternal" class="w-100" name="selectGradePreAssessmentExternal" datapoint="@Model.DataPointIndex"></select>
                    <div class="box-select">
                        <span class="overlay"></span>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <label>Test</label>
                <div class="block-text-name w-100">
                    <div class="relative" style="display: block">
                        <input type="text" name="txtTestNamePreAssessmentExternal" datapoint="@Model.DataPointIndex" class="full-width " style="display: none; line-height: 15px; padding-bottom: 6px;" placeholder="Add New Test" />
                        <i class="custom-icon fa-solid fa-circle-xmark icon-red" name="NewTestCloseButton" dataPoint="@Model.DataPointIndex" style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); cursor: pointer; display: none;" />
                        <select id="selectTestPreAssessmentExternal" class="w-100" name="selectTestPreAssessmentExternal" dataPoint="@Model.DataPointIndex"></select>
                        <div class="box-select">
                            <span class="overlay"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="divider mt-32 mb-32"></div>

<div class="coolfieldset qtiItemSelector fieldset-datapoint" id="fsEnterOrAttachScore">
    <p class="fw-bold mb-3">Optional: Enter or Attach Scores</p>
    <div name="divAttachResultInfo" datapoint="@Model.DataPointIndex"
         @if (string.IsNullOrEmpty(Model.AttactScoreUrl))
         { <text>
         style="display: none; visibility: hidden;"
         </text>  }>
        <span class="attachment-item" name="spanAttachResultFileName" datapoint="@Model.DataPointIndex" attactscoredownloadlink="@Model.AttactScoreDownloadLink">
            @if (Model != null && !string.IsNullOrEmpty(Model.AttactScoreUrl))
            {
                @Model.AttactScoreUrl.Substring(@Model.AttactScoreUrl.IndexOf('_') + 1)
            }
        </span>
        <span class="attachment-item with-tip" onclick="removeAttachResult(@Model.DataPointIndex)" title="Remove Attach Results">
            <img src="/Content/themes/Constellation/images/icons/fugue/icon-red.png"></span>
    </div>

    <div class="coolfieldset fieldset-datapoint form">
        <p class="mb-2">Enter Scores</p>
        <ul style="display: none" id="error-messages" class="message error"></ul>
        <ul style="display: none" id="success-message" class="message success">
            <li>Student successfully updated.</li>
        </ul>
        <div class="mb-4" style="font-weight: bold; color: var(--grey);"><i>Note: only raw scores can be entered.</i></div>
        <div class="columns" id="divItemCriteria">
            <div class="row g-3">
                <div class="col-4">
                    <div>
                        <label>Total Points Possible</label>
                        <input class="w-100" name="txtPointPossiblePreAssessmentExternal" datapoint="@Model.DataPointIndex" value="@Math.Round(Model.TotalPoints, 1)" />
                    </div>
                </div>
                <div class="col-4">
                    <div>
                        <label>Date of Results</label>
                        <span class="sgo-datetime">
                            <input class="w-100" name="txtResultDatePreAssessmentExternal" datapoint="@Model.DataPointIndex" value="@(Model.ResultDate.HasValue ? Model.ResultDate.Value.ToShortDateString() : "")" readonly="readonly" />
                            <span class="icon-sgo-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <div>
                <label></label>
            </div>
        </div>

        <div name="studentsList" dataPoint="@Model.DataPointIndex"></div>

    </div>

</div>

<script>
    $(function () {
        // All functions are at index.cshtml file
        $('input[name="txtResultDatePreAssessmentExternal"]').datepicker({
            beforeShow: function (input, inst) {
                $('#ui-datepicker-div').addClass('datepicker-sgo');
                $('#ui-datepicker-div').prependTo(".wrapper-dialog");
            },
            onClose: function () {
                var uiDatepickerDiv = $('#ui-datepicker-div');
                if (uiDatepickerDiv.length) {
                    uiDatepickerDiv.hide();
                    uiDatepickerDiv.appendTo("body");
                }
            }
        });
        $('input[name="txtPointPossiblePreAssessmentExternal"]').numeric();

        populateSubjectsPreAssessmentExternal('@Model.DataPointIndex');


        if($('input[name="sgoDataPointId"][dataPoint="' + '@Model.DataPointIndex' + '"]').val() == 0)
            loadStudentsPreAssessmentExternal('@Model.DataPointIndex', ''); // Load empty student data point at this step when creating new datapoint; otherwise loading this data after binding external virtualtest

        var downloadElement = $('span[name="spanAttachResultFileName"]');
        downloadElement.unbind('click');
        downloadElement.click(function () {
            var element = $(this);
            var url = element.attr('attactscoredownloadlink');
            window.open(url, 'Download');
        });
    });

    // Remove focus on this elmenent if unfortunately the Handsontable table is clicked on
    // The issue related to the datepicker doesn't show
    document.addEventListener('click', (e) => {
        if (e.target.name !== 'txtResultDatePreAssessmentExternal' && document.activeElement.name === 'txtResultDatePreAssessmentExternal') {
            $(document.activeElement).blur();
        }
    });

    // Simulate default scroll animation because the wheel event has been disabled by the library Handsontable
    (function() {
        var fixedDiv = document.querySelector('div[name=studentsList]');
        var scrollableDiv = $('.wrapper-dialog');
        var calculatedTop = 0;
        var lastDeltaY = 0;
        var scrollDirectionChanged = false;

        fixedDiv.addEventListener('wheel', function (e) {
            scrollDirectionChanged = lastDeltaY * e.deltaY < 0;
            lastDeltaY = e.deltaY;
            if (calculatedTop === 0 || scrollDirectionChanged) {
                calculatedTop = scrollableDiv.scrollTop();
            }

            calculatedTop += e.deltaY;
            scrollableDiv.stop().animate({ scrollTop: calculatedTop }, 100);
        });

        fixedDiv.addEventListener('mouseleave', function (e) {
            calculatedTop = 0;
        });
    })();

</script>
