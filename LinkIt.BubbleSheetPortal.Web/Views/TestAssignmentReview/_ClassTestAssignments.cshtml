
<style type="text/css">
    #classDataTable tr {
        height: 56px;
    }

    #dvTestAssignmentDefaultSetting table {
        width: 100%;
    }

    .popup-exportInfo a.big-button {
        color: #fff;
    }

    #divClassTestAssignments a.is-disabled,
    #divClassTestAssignments a.is-disabled:hover,
    #divClassTestAssignments a.is-disabled:focus {
        color: white;
        text-shadow: rgba(0, 0, 0, 0.6) 0 1px 2px;
        box-shadow: rgba(0, 0, 0, 0.2) 0 1px 4px;
        border-color: rgb(161, 167, 174) rgb(144, 148, 152) rgb(107, 112, 118);
        background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), color-stop(0.05, rgb(197, 203, 206)), to(rgb(159, 167, 176)));
        cursor: default;
        pointer-events: none;
    }

    .tooltip {
        position: relative;
    }

    .ui-dialog-titlebar-close {
        z-index: 100;
    }

    .btn-review-assignment.disabled {
        pointer-events: none;
        opacity: 0.7;
        cursor: not-allowed;
    }
</style>
<link rel="stylesheet" href="/Scripts/Qtip/jquery.qtip.css">
<link rel="stylesheet" href="/Content/css/vue-components/vue-modal.css">
<script type="text/javascript" src="https://s3-us-west-2.amazonaws.com/linkit-utility/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script src="@Url.Content("~/Scripts/tipped/tipped.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Qtip/jquery.qtip.js")"></script>
<script src="@Url.Content("~/Scripts/constants.js")"></script>
<div class="block-border" id="divClassTestAssignments">
    <div class="block-content form">
        <h1>
            Review Test Assignments
            <div class="clearfix"></div>
            <a href="javascript:void(0)" id="btnActiveTestClassAssignment" style="margin-left: 7px; margin-top: 1px;" class="off">
                Show Deactivated:
                <span id="spanClassActive">Off</span>
            </a>
            <a href="javascript:void(0)"
               id="btnActions"
               v-on:click="showingDistributeModal = !showingDistributeModal "
               style="margin-left: 199px; margin-top: 1px;">
                Actions
            </a>
        </h1>
        <div class="toggle" style="display: none;">
            <a href="javascript:void(0)" id="btnClassPendingReview" style="margin-top: 1px; margin-left: -11px;" class="on">
                Pending Review:
                <span id="spanClassPendingReview">On</span>
            </a>
            <button id="btnClassView" type="button" style="margin-left: -11px; float: left; display: none;">Go to Student View</button>
        </div>
        <p style="height: 11px"></p>
        <div class="no-margin last-child">
            <table id="classDataTable" class="datatable table table-assignment no-margin" width="100%">
                <thead>
                    <tr>
                        <th scope="col" style="width: 13px; text-align: center;">
                            <input type="checkbox" id="chkAllTest" />
                        </th>
                        <th scope="col" class="black-cell"><span class="loading"></span></th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Assigned
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Test
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Teacher
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Class
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            NS
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            IP
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            PR
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Fini
                        </th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Code
                        </th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="text-align: center;">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Student
                        </th>
                        <th scope="col" style="display: none"></th>
                        <th scope="col" style="display: none"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="height: 60px;"></td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>
    <modal-component v-bind:show.sync="showingDistributeModal" v-bind:width="300" id="modal-distribute">
        <div slot="close"><span></span></div>
        <div slot="header">
            <div class="block-heading">
                <h1 class="block-heading-item is-active">ACTIONS</h1>
            </div>
        </div>
        <div slot="body" class="u-m-t-20">
            <p style="margin-bottom: 10px">
                <input type="radio" id="activate-test" name="action-types" v-model="actionMethods" value="activate-test" />
                <label for="activate-test"><b>Activate Test</b></label><br />
            </p>
            <p style="margin-bottom: 10px">
                <input type="radio" id="deactivate-test" name="action-types" v-model="actionMethods" value="deactivate-test" />
                <label for="deactivate-test"><b>Deactivate Test</b></label>
            </p>
            <p style="margin-bottom: 10px" id="pShow">
                <input type="radio" id="show-test" name="action-types" v-model="actionMethods" value="show-test" />
                <label for="show-test"><b>Show test in the Student Portal</b></label>
            </p>
            <p style="margin-bottom: 10px" id="pHide">
                <input type="radio" id="hide-test" name="action-types" v-model="actionMethods" value="hide-test" />
                <label for="hide-test"><b>Hide test in the Student Portal</b></label>
            </p>
            <p style="margin-bottom: 10px">
                <input type="radio" id="export-student-sessions" name="action-types" v-model="actionMethods" value="export-student-sessions" />
                <label for="export-student-sessions"><b>Export Student Sessions</b></label>
            </p>
            <p style="margin-bottom: 10px">
                <input type="radio" id="export-test-assignments" name="action-types" v-model="actionMethods" value="export-test-assignments" />
                <label for="export-test-assignments"><b>Export Test Assigments</b></label>
                <div style="margin-left:25px" v-show="checkedActivateTest">
                    You will change the status of <b>{{selectedTestClassAssignmentCount}}</b> assignment{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} to active.
                </div>
                <div style="margin-left:25px" v-show="checkedExportTestAssigments">
                    You selected <b>{{selectedTestClassAssignmentCount}}</b> assignment{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} to export test assignments
                </div>
                <div style="margin-left:25px" v-show="checkedExportStudentSessions">
                    You selected <b>{{selectedTestClassAssignmentCount}}</b> assignment{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} to export student sessions
                </div>
                <div style="margin-left:25px" v-show="checkedHideTest">
                    You will hide <b>{{selectedTestClassAssignmentCount}}</b> test{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} in the Student Portal
                </div>
                <div style="margin-left:25px" v-show="checkedShowTest">
                    You will show <b>{{selectedTestClassAssignmentCount}}</b> test{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} in the Student Portal.
                </div>
                <div style="margin-left:25px" v-show="checkedDeactivateTest">
                    You will change the status of <b>{{selectedTestClassAssignmentCount}}</b> assignment{{(selectedTestClassAssignmentCount > 1 ? 's' : '')}} to inactive.
                </div>
            </p>
        </div>
        <div slot="footer">
            <div class="u-text-center" style="margin-top: 20px;">
                <!-- <button id="btnSubmit" type="submit" v-on:click="submitDistribute" name="distribute">Submit</button> -->
                <button id="btnSubmit" type="submit" v-on:click="showingDistributeModal = false" name="submit">Submit</button>
                <button id="btnCancel" type="button" v-on:click="showingDistributeModal = false" class="grey">Cancel</button>
            </div>
        </div>
    </modal-component>
</div>
<div class="block-border" id="dvTestAssignmentDefaultSettingPanel" style="position: static; display: none">
    <div class="block-content form bubbleSheetSelector">
        <fieldset class="grey-bg">
            <legend>Test Setting</legend>
            <div id="dvTestAssignmentDefaultSetting"></div>
        </fieldset>
    </div>
</div>
<div id="divHideShowAssignment">
    @Html.Partial("_ModalHideShowAssignment")
</div>
<input type="hidden" id="hdAssignmentCodes" value="@ViewBag.AssignmentCodes" />
<script type="text/javascript">

    function displayDateWithFormatFixBug(tickDateTime, displayHour) {
        if (tickDateTime == undefined || tickDateTime == null || tickDateTime == "") {
            return '';//default US
        }

        var defaultDateFormat = readCookie('DefaultDateFormat');
        var defaultTimeFormat = readCookie('DefaultTimeFormat');

        if (defaultDateFormat == null || defaultDateFormat == undefined) {
            defaultDateFormat = 'MM/dd/yyyy';//default value if defaultDateFormat is not provided
        }
        if (defaultTimeFormat == null || defaultTimeFormat == undefined) {
            defaultTimeFormat = 'h:mm tt';//default value if defaultTimeFormat is not provided
        }

        if (displayHour != undefined && displayHour) {
            defaultDateFormat = defaultDateFormat + ' ' + defaultTimeFormat;
        }


        var date = eval(tickDateTime.replace(/\/Date\((\d+)\)\//gi, "new Date($1)"));
        return date.toString(defaultDateFormat);
    }

</script>
<script type="text/javascript">
    var vueService = {
        changeHideShow: function (params) {
            return $.ajax({
                type: "POST",
                url: '/TestAssignmentReview/ChangeStatusShowHide',
                data: params
            });
        }
    };
    var vueModel = new Vue({
        el: '#divHideShowAssignment',
        data: {
            isShowModalHideShow: false,
            isHide: false,
            qtiTestassingmentId: 0,
            showingDistributeModal: false
        },
        computed: {
            visibleText: function () {
                return this.isHide ? 'show': 'hide';
            }
        },
        methods: {
            changeStatusHideShow: function () {
                this.isShowModalHideShow = false;
                var params = {
                    qtiTestClassAssignmentID: this.qtiTestassingmentId,
                    isHide: this.isHide,
                    IsOldUI: true
                };

                ShowBlock($('#classDataTable'), 'Loading');
                vueService.changeHideShow(params).done(function () {

                    SetupFilters();
                }).error(function (err) {
                    console.log(err);
                });
            },
            closeModalHideShow: function () {
                this.isShowModalHideShow = false;
            }
        }
    });

    var testAssignmentsModel = new Vue({
        el: '#divClassTestAssignments',
        data: {
            selectedTestClassAssignment: [],
            showingDistributeModal: false,
            actionMethods: 'activate-test'
        },
        computed: {
            selectedTestClassAssignmentCount: function () {
                var countarr = [];
                var _self = this;
                switch (true) {
                    case _self.checkedActivateTest:
                        countarr = _self.selectedTestClassAssignment.filter(function (item) { return item.status !== "1" })
                        return countarr.length;
                    case _self.checkedDeactivateTest:
                        countarr = _self.selectedTestClassAssignment.filter(function (item) { return item.status === "1" })
                        return countarr.length;
                    case _self.checkedShowTest:
                        countarr = _self.selectedTestClassAssignment.filter(function (item) { return item.ishide === 'true' && _self.isSubCondition(item) })
                        return countarr.length;
                    case _self.checkedHideTest:
                        countarr = _self.selectedTestClassAssignment.filter(function (item) { return item.ishide === 'false' && _self.isSubCondition(item) })
                        return countarr.length;
                    case _self.checkedExportStudentSessions:
                    case _self.checkedExportTestAssigments:
                        return _self.selectedTestClassAssignment.length;
                }
            },
            checkedActivateTest: function () {
                return this.actionMethods === 'activate-test';
            },
            checkedDeactivateTest: function () {
                return this.actionMethods === 'deactivate-test';
            },
            checkedShowTest: function () {
                return this.actionMethods === 'show-test';
            },
            checkedHideTest: function () {
                return this.actionMethods === 'hide-test';
            },
            checkedExportStudentSessions: function () {
                return this.actionMethods === 'export-student-sessions';
            },
            checkedExportTestAssigments: function () {
                return this.actionMethods === 'export-test-assignments';
            }
        },
        methods: {
            isSubCondition: function (item) {
                return item.status === '1' && IsShowUserCurrentDictrictStudentPortal && (item.isteacherled === 'false' || item.isteacherled === 'null')
            },
            updateSelectedTestClassAssignment: function () {
                var idlist = [];
                $("input.rcode:checked").each(function (index, elem) {
                    idlist.push({
                        qtitestclassassignmentid: $(elem).attr('data-qtitestclassassignmentid'),
                        status: $(elem).attr('data-status'),
                        ishide: $(elem).attr('data-ishide'),
                        isteacherled: $(elem).attr('data-isteacherled')
                    });
                });
                this.selectedTestClassAssignment = idlist;
                if (testAssignmentsModel.selectedTestClassAssignment.length === 0) {
                    $('#btnActions').addClass("is-disabled");
                } else {
                    $('#btnActions').removeClass("is-disabled");
                }
            },

            resetSelectedTestClassAssignment: function () {
                $('#chkAllTest').prop("checked", false);

                this.selectedTestClassAssignment = [];

                if (testAssignmentsModel.selectedTestClassAssignment.length === 0) {
                    $('#btnActions').addClass("is-disabled");
                } else {
                    $('#btnActions').removeClass("is-disabled");
                }
            },

            submitfunction: function () {
                var operationOption = 1;
                var operationHide = true;
                var _self = this;
                if (_self.checkedActivateTest || _self.checkedDeactivateTest) {
                    operationOption = this.checkedActivateTest ? 0 : 1;
                    $("#messageClassDialog").dialog("close");
                    var qtiTestClassAssignmentIDs = operationOption ? _self.selectedTestClassAssignment.filter(function (item) {
                        return item.status === "1"
                    })
                        : _self.selectedTestClassAssignment.filter(function (item) {
                            return item.status !== "1"
                        })

                    $.post('@Url.Action("ChangeStatusMutipleAssignment")',
                        {
                            qtiTestClassAssignmentIDs: qtiTestClassAssignmentIDs.map(function (item) {
                                return item.qtitestclassassignmentid
                            }).join(','),
                            operationOption: operationOption,
                            IsOldUI: true
                        },
                        function (response) {
                            SetupFilters();
                            var testsNotActive = response.virtualTestNames;
                            if (testsNotActive != null && testsNotActive != '') {
                                $(".blockUI").hide();
                                var strHtml = "";
                                for (var i = 0; i < testsNotActive.length; i++) {
                                    strHtml += "<li style='margin-left: 10px;width: 100%;text-align: left;'>" + testsNotActive[i] + "</li>";
                                }
                                popupAlertMessage('alert', '<nobr>Student(s) have an existing retake assignment or have already completed the test(s):</nobr>' + strHtml, 750, 500)
                            }

                        });
                } else if (_self.checkedShowTest || _self.checkedHideTest) {
                    (operationHide = _self.checkedShowTest);
                    $("#messageClassDialog").dialog("close");
                    var qtiTestClassAssignmentIDs = operationHide ? _self.selectedTestClassAssignment.filter(function (item) {
                        return item.ishide + '' === "true" && _self.isSubCondition(item)
                    })
                        : _self.selectedTestClassAssignment.filter(function (item) {
                            return item.ishide + '' === "false" && _self.isSubCondition(item)
                        })
                    $.post('@Url.Action("ChangeStatusShowHideMutipleAssignment")',
                        {
                            qtiTestClassAssignmentIDs: qtiTestClassAssignmentIDs.map(function (item) {
                                return item.qtitestclassassignmentid
                            }).join(','),
                            isHide: operationHide,
                            IsOldUI : true
                        }, function (response) {
                            SetupFilters();
                        });
                } else if (_self.checkedExportStudentSessions) {
                    var url = '@Url.Action("ExportTestStudentSessions")';
                    ShowBlock($('#divClassTestAssignments'), "Exporting");
                    $.ajax({
                        url: url,
                        data: {
                            DateTime: $('#dateTime option:selected').val(),
                            DistrictID: $('#selectDistrict').val(),
                            QTITestClassAssignmentIDs: _self.selectedTestClassAssignment.map(function (item) {
                                return item.qtitestclassassignmentid
                            }).join(',')
                        },
                        cache: false
                    }).done(function (url) {
                        $('#divClassTestAssignments').unblock();
                        popupAlertExportInfoMessage('ui-popup-exportInfo', 240, 125, url);
                    });
                } else if (_self.checkedExportTestAssigments) {
                    var url = '@Url.Action("ExportTestAssignments")';
                    ShowBlock($('#divClassTestAssignments'), "Exporting");
                    $.ajax({
                        url: url,
                        data: {
                            DateTime: $('#dateTime option:selected').val(),
                            QTITestClassAssignmentIDs: _self.selectedTestClassAssignment.map(function (item) {
                                return item.qtitestclassassignmentid
                            }).join(','),
                            DistrictID: $('#selectDistrict').val()
                        },
                        cache: false
                    }).done(function (url) {
                        $('#divClassTestAssignments').unblock();
                        popupAlertExportInfoMessage('ui-popup-exportInfo', 240, 125, url);
                    });
                }
            },

        }
    });

    $(document).ready(function () {
        if (!IsShowUserCurrentDictrictStudentPortal) {
            $('#pHide').attr("hidden", true);
            $('#pShow').attr("hidden", true);
        }
     });

    $('#btnSubmit').click(function () {
        testAssignmentsModel.submitfunction();
    });

    function rcode_onchange(t, qtiTestClassAssignmentID) {
        var isAllSelected = true;
        testAssignmentsModel.updateSelectedTestClassAssignment();
        $("input.rcode").each(function (index, elem) {
            if (!$(elem).is(':checked')) {
                isAllSelected = false;
            }
        });
        $('#chkAllTest').prop("checked", isAllSelected);
    };

    $('#chkAllTest').click(function () {
        $("input.rcode").each(function (index, elem) {
            $(elem).prop("checked", $('#chkAllTest').is(':checked'));
        });
        testAssignmentsModel.updateSelectedTestClassAssignment();
    });


    var teacherReviewerPageLoad = true;
    $(function () {
        //LoadTesClassAssignmentToTable(); call when load school finish.
        if ($('#selectDistrict').length > 0)
        {
            LoadTesClassAssignmentToTable(); // default load when Publisher OR NetworkAdmin
        }
    });

    function LoadTesClassAssignmentToTable() {
        var options = {
            bServerSide: true,
            sServerMethod: "POST",
            bDestroy: true,
            bProcessing: false,
            sAjaxSource: '@Url.Action("GetTestClassAssignmentsImproved", "TestAssignmentReview")',
            oLanguage: { "sZeroRecords": "No results meet your search criteria. Try changing your date range or other filters and search again." },
            onSearch: keepSession,
            fnServerParams: function (aoData) {
                var schoolID = 0;
                if ($('#selectSchool').val() != 'select' && $('#selectSchool').val() > 0) {
                    schoolID = $('#selectSchool').val();
                }

                var currentParams = currentFilterParams || _historyData;
                if (!currentParams.districtID && _historyData.districtID) {
                    currentParams.districtID = _historyData.districtID;
                }

                if (!currentParams.assignmentCodes) {
                    currentParams.assignmentCodes = $("#hdAssignmentCodes").val()
                }

                aoData.push(
                    { name: "DateTime", value: currentParams && currentParams.timeFrame ? currentParams.timeFrame : $('#dateTime').val()},
                    { name: "OnlyShowPendingReview", value: showPendingReviewClassTestAssignment },
                    { name: "ShowActiveClassTestAssignment", value: (currentParams && !currentParams.isFormLoad) ? currentParams.showInactive : showActiveClassTestAssignment },
                    { name: "DistrictID", value: currentParams && currentParams.districtID ? currentParams.districtID : -1 },
                    { name: "AssignmentCodes", value: currentParams && currentParams.assignmentCodes ? currentParams.assignmentCodes : '' },
                    { name: "SchoolID", value: currentParams && currentParams.schoolID ? currentParams.schoolID : -1 },
                    { name: "PageLoad", value: currentParams && !currentParams.teacherPageLoad && !_historyData.isFormLoad ? false : teacherReviewerPageLoad },
                     { name: "ModuleCode", value: RestrictionModule.REVIEW_AND_MANUAL_GRADE },
                    { name: "GradeName", value: currentParams && currentParams.grade ? currentParams.grade : '' },
                    { name: "SubjectName", value: currentParams && currentParams.subject ? currentParams.subject : '' },
                    { name: "BankName", value: currentParams && currentParams.bank ? currentParams.bank : '' },
                    { name: "ClassName", value: currentParams && currentParams.class ? currentParams.class : '' },
                    { name: "TeacherName", value: currentParams && currentParams.teacher ? currentParams.teacher : '' },
                    { name: "StudentName", value: currentParams && currentParams.student ? currentParams.student : '' },
                    { name: "TestName", value: currentParams && currentParams.test ? currentParams.test : '' },
                    { name: "Code", value: currentParams && currentParams.testCode ? currentParams.testCode : '' }
                );

                teacherReviewerPageLoad = false;
            },
            iDisplayLength: _historyData.pageSize > 0 ? parseInt(_historyData.pageSize) : 10,
            aoColumns: [
                { sDefaultContent: '', sWidth: '13px', bSearchable: false, bSortable: false },
                { mData: 'QTITestClassAssignmentID', sName: 'QTITestClassAssignmentID', bSearchable: true, bSortable: false, bVisible: true, sWidth: '67px' },
                { mData: 'Assigned', sName: 'Assigned', sType: 'string', bSearchable: true, bSortable: true, bVisible: true, sWidth: '78px' },
                { mData: 'TestName', sName: 'TestName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '125px' },
                { mData: 'TeacherName', sName: 'TeacherName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '75px' },
                { mData: 'ClassName', sName: 'ClassName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '90px' },
                { mData: 'NotStarted', sName: 'NotStarted', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'Started', sName: 'Started', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'WaitingForReview', sName: 'WaitingForReview', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'Completed', sName: 'Completed', bSearchable: true, bSortable: true, bVisible: true, sWidth: '41px', sClass: 'css-align-right' },
                { mData: 'Code', sName: 'Code', bSearchable: true, bSortable: true, bVisible: true, sWidth: '68px' },
                { mData: 'ClassID', sName: 'ClassID', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'SubjectName', sName: 'SubjectName', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'GradeName', sName: 'GradeName', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'BankName', sName: 'BankName', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'VirtualTestID', sName: 'VirtualTestID', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'CodeTime', sName: 'CodeTime', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'DistrictID', sName: 'DistrictID', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'Status', sName: 'Status', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'AssignmentShortDate', sName: 'AssignmentShortDate', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'AssignmentShortTime', sName: 'AssignmentShortTime', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'StudentNames', sName: 'StudentNames', bSearchable: true, bSortable: false, bVisible: true },
                { mData: 'AssignmentType', sName: 'AssignmentType', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'BankIsLocked', sName: 'BankIsLocked', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'IsTeacherLed', sName: 'IsTeacherLed', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'AssignmentModifiedUserID', sName: 'AssignmentModifiedUserID', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'AssignmentFirstName', sName: 'AssignmentFirstName', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'AssignmentLastName', sName: 'AssignmentLastName', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'IsHide', sName: 'IsHide', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'SchoolName', sName: 'SchoolName', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'IsAllowReview', sName: 'IsAllowReview', bSearchable: false, bSortable: false, bVisible: false },
                { mData: 'BankId', sName: 'BankId', bSearchable: false, bSortable: false, bVisible: false }
            ],

            aaSorting: [[1, "desc"]],
            oSearch: {
                sSearch: _historyData.searchText
            },
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).parent().addClass('tableRow');
                var assignmentUser = "<span class='tooltipBox' title='" + aData['AssignmentLastName'] + ", " + aData['AssignmentFirstName'] + "' >" + (aData['Assigned']) + "</span>";

                var colContent = {
                    col0: setIconCheckbox(aData['QTITestClassAssignmentID'], aData['Status'], aData['IsHide'], aData['IsTeacherLed']),
                    col1: setIconVisibilityClass(aData['QTITestClassAssignmentID'], aData['Status'], aData['VirtualTestID'], aData['BankIsLocked'], aData, aData['IsVirtualTestRetake']),
                    col2: assignmentUser,
                    col3: aData['TestName'],
                    col4: WrapTextInSpan(aData['TeacherName'], 10),
                    col5: aData['ClassName'],
                    col6: aData['NotStarted'] > 0
                        ? getTooltipStudents(aData['QTITestClassAssignmentID'], aData['NotStarted'], 'NotStarted')
                        : '0',
                    col7: aData['Started'] > 0
                        ? getTooltipStudents(aData['QTITestClassAssignmentID'], aData['Started'], 'Started')
                        : '0',
                    col8: aData['WaitingForReview'] > 0
                        ? setReviewText(aData)
                        : setReviewText(aData, true),
                    col9: aData['Completed'] > 0
                        ? getTooltipStudents(aData['QTITestClassAssignmentID'], aData['Completed'], 'Completed')
                        : '0',
                    col10: portalLinkTestCode(aData['Code'], aData['DistrictID'], aData['IsTeacherLed'], aData['Status']),
                    col11:  DisplayStudents(aData['StudentNames'], aData['AssignmentType'])
                }

                for (var i = 0, totalRow = 12; i < totalRow; i++) {
                    $('td:eq(' + i + ')', nRow).html(colContent['col' + i]);
                }
                $(nRow).find('td:nth-child(2) > a:nth-child(2)').attr('testname', aData['TestName']);

                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#classDataTable'), 'Loading');
                $('#filterSheets').attr("disabled", "disabled");
                return true;
            },
            fnDrawCallback: function () {
                testAssignmentsModel.resetSelectedTestClassAssignment();
                $('#classDataTable').unblock();
                $('#filterSheets').removeAttr("disabled");

                var _pageSizeDefault = _historyData.pageSize ? _historyData.pageSize : 50;
                var pageSizeGrid = $('#classDataTable_length select').val();
                if (_pageSizeDefault != pageSizeGrid) {
                    keepSession();
                    _pageSizeDefault = pageSizeGrid;
                }

                $('.js-tooltip').parent('td').qtip({
                    content: {
                        text: function (event, api) {
                            var $self = $(this);
                            var $parent = $self.parents('tr');
                            var title = $self.attr('title');
                            var status = $self.find('.js-tooltip').data('status');
                            var assignmentid = $self.find('.js-tooltip').data('assignmentid');

                            if (typeof title !== 'undefined' && title !== '') {
                                return title
                            }

                            $.ajax({
                                url: '@Url.Action("GetStudentByCodeAndStatus", "TestAssignmentReview")?qtiTestClassAssignmentId=' + assignmentid,
                                type: 'GET'
                            }).then(function (data) {
                                var currentTooltip = '';
                                var studentsNotStarted = getStudentsByStatus(data.liststudentstatus, 'NotStarted');
                                var studentsStarted = getStudentsByStatus(data.liststudentstatus, 'Started');
                                var studentsWaitingForReview = getStudentsByStatus(data.liststudentstatus, 'WaitingForReview');
                                var studentsCompleted = getStudentsByStatus(data.liststudentstatus, 'Completed');

                                var studentsNotStartedTitle = getStudentsTitle(studentsNotStarted);
                                var studentsStartedTitle = getStudentsTitle(studentsStarted);
                                var studentsWaitingForReviewTitle = getStudentsTitle(studentsWaitingForReview);
                                var studentsCompletedTitle = getStudentsTitle(studentsCompleted);

                                var $tdNotStarted = $parent.find('td').eq(6);
                                if (studentsNotStarted.Total) {
                                    var studentsNotStartedTooltip = getStudentsTotal(studentsNotStarted.Total);
                                    $tdNotStarted.attr('title', studentsNotStartedTitle);
                                    $tdNotStarted.html(studentsNotStartedTooltip);
                                } else {
                                    $tdNotStarted.qtip('destroy', true);
                                    $tdNotStarted.html('0');
                                }

                                var $tdStarted = $parent.find('td').eq(7);
                                if (studentsStarted.Total) {
                                    var studentsStartedTooltip = getStudentsTotal(studentsStarted.Total);
                                    $tdStarted.attr('title', studentsStartedTitle);
                                    $tdStarted.html(studentsStartedTooltip);
                                } else {
                                    $tdStarted.qtip('destroy', true);
                                    $tdStarted.html('0');
                                }

                                var $tdWaitingForReview = $parent.find('td').eq(8);
                                if (studentsWaitingForReview.Total) {
                                    var studentsWaitingForReviewTooltip = getStudentsTotal(studentsWaitingForReview.Total, true);
                                    var $pendingReview = $tdWaitingForReview.find('.jsTeacherReview');
                                    var studentsWaitingForReviewButton = createStudentsReviewButton($pendingReview);

                                    $tdWaitingForReview.html('');
                                    $tdWaitingForReview.attr('title', studentsWaitingForReviewTitle);
                                    $tdWaitingForReview.append(studentsWaitingForReviewTooltip);
                                    $tdWaitingForReview.append(studentsWaitingForReviewButton);
                                } else {
                                    $tdWaitingForReview.qtip('destroy', true);
                                    $tdWaitingForReview.html('0');
                                }

                                var $tdCompleted = $parent.find('td').eq(9);
                                if (studentsCompleted.Total) {
                                    var studentsCompletedTooltip = getStudentsTotal(studentsCompleted.Total);
                                    $tdCompleted.attr('title', studentsCompletedTitle);
                                    $tdCompleted.html(studentsCompletedTooltip);
                                } else {
                                    $tdCompleted.qtip('destroy', true);
                                    $tdCompleted.html('0');
                                }

                                if (status === 'NotStarted') {
                                    currentTooltip = studentsNotStartedTitle;
                                } else if (status === 'Started') {
                                    currentTooltip = studentsStartedTitle;
                                } else if (status === 'WaitingForReview') {
                                    currentTooltip = studentsWaitingForReviewTitle;
                                } else if (status === 'Completed') {
                                    currentTooltip = studentsCompletedTitle;
                                }

                                api.set('content.text', currentTooltip);
                            }, function (xhr, status, error) {
                                api.set('content.text', status + ': ' + error);
                            });

                            return 'Loading...';
                        }
                    },
                    hide: {
                        fixed: true,
                        delay: 300
                    },
                    style: {
                        classes: 'qtip-students qtip-bootstrap qtip-shadow'
                    },
                    position: {
                        at: 'center right',
                        my: 'left center',
                        viewport: $('#divClassTestAssignments'),
                        adjust: {
                            method: 'none shift'
                        }
                    }
                });

                getStudentsQtip('.js-tooltip-students');

                $('.with-tip').tip();

                return true;
            },
            fnInitComplete: function () {
                $('.block-footer').append('<span><b>*NS = Not Started, IP = In Progress, PR = Pending Review (or Being Graded), Fini = Completed</b></span>');
            }
        };

        $("#classDataTable").data("options", options);
    }

    function getStudentsByStatus(students, status) {
        return _.find(students, function (stu) {
            return stu.StudentStatus === status;
        });
    }

    function getStudentsTitle(students) {
        var studentNames = students.ListStudents;
        var studentsTitle = '';

        if (studentNames !== '') {
            studentsTitle = getStudentsTitleWithIcon(studentNames);
        }

        return studentsTitle;
    }

    function getStudentsTitleWithIcon(studentNames) {
        var studentsTitle = '';
        var studentList = studentNames.split('|');

        studentList = studentList.filter(function (stuName) {
            return stuName.trim() !== '';
        }).sort(function (a, b) {
            a = a.toLowerCase().trim().substring(1);
            b = b.toLowerCase().trim().substring(1);

            if (a < b) {
                return -1;
            }

            if (a > b) {
                return 1;
            }

            return 0;
        }).map(function (stuName) {
            return "<span class='icon icon-16 icon-student icon-student-offset'></span> " + stuName.substring(2) + '<br/>';
        });

        studentsTitle = studentList.join('');

        return studentsTitle;
    }

    function getStudentsTotal(total, isPendingReview) {
        var tooltip = '<span class="js-tooltip">' + total + '</span>';

        if (isPendingReview) {
            tooltip = '<span class="js-tooltip table-assignment-waiting-review">' + total + '</span>';
        }

        return tooltip;
    }

    function getStudentsQtip(el) {
        var $el = $(el);
        $(el).parent('td').qtip({
                    content: {
                        text: function (event, api) {
                            var $self = $(this);
                            var $parent = $self.parents('tr');
                            var title = $self.attr('title');
                            var status = $self.find('.js-tooltip').data('status');
                            var assignmentid = $parent.children().first().find('input').data('qtitestclassassignmentid');

                            $.ajax({
                                url: '@Url.Action("GetAllStudents", "TestAssignmentReview")?qtiTestClassAssignmentId=' + assignmentid,
                                type: 'GET'
                            }).then(function (data) {
                                var currentTooltip = getStudentsTitleWithIcon(data.liststudentstatus);
                                api.set('content.text', currentTooltip);
                            }, function (xhr, status, error) {
                                api.set('content.text', status + ': ' + error);
                            });

                            return 'Loading...';
                        }
                    },
                    hide: {
                        fixed: true,
                        delay: 300
                    },
                    style: {
                        classes: 'qtip-students qtip-bootstrap qtip-shadow'
                    },
                    position: {
                        at: 'center right',
                        my: 'left center',
                        viewport: $('#divClassTestAssignments'),
                        adjust: {
                            method: 'none shift'
                        }
                    }
                });
    }

    function createStudentsReviewButton(el) {
        var $el = $(el);

        if (!$el.attr('virtualtestid')) return null;

        var btnTeacherReviewContainer = document.createElement('div');
        var btnTeacherReview = document.createElement('a');

        btnTeacherReview.setAttribute('href', 'javascript:void(0);');
        btnTeacherReview.setAttribute('qtitestclassassignmentid', $el.attr('qtitestclassassignmentid'));
        btnTeacherReview.setAttribute('virtualtestid', $el.attr('virtualtestid'));
        btnTeacherReview.setAttribute('classname', $el.attr('classname'));
        btnTeacherReview.setAttribute('districtID', $el.attr('districtID'));
        btnTeacherReview.setAttribute('teachername', $el.attr('teachername'));
        btnTeacherReview.setAttribute('selectfirststudentforreview', $el.attr('selectfirststudentforreview'));
        btnTeacherReview.className = 'big-button btn-review jsTeacherReview';
        btnTeacherReview.textContent = 'Review';

        btnTeacherReviewContainer.style.paddingTop = '5px';
        btnTeacherReviewContainer.appendChild(btnTeacherReview);

        return btnTeacherReviewContainer;
    }
</script>

<script type="text/javascript">


    function SetupFiltersClass() {
        var dataTable = $('#classDataTable').dataTable();
        var settings = dataTable.fnSettings();
        fnResetAllFilters(settings);

        if ($("#selectGrade").val()) {
            FilterColumn($('#selectGrade').val(), 12, settings);
        }

        if ($("#selectBank").val()) {
            FilterColumn($('#selectBank').val(), 13, settings);
        }

        if ($("#selectClass").val()) {
            FilterColumn($('#selectClass').val(), 4, settings);
        }

        if ($("#selectSubject").val()) {
            FilterColumn($('#selectSubject').val(), 11, settings);
        }

        if ($("#selectTeacher").val()) {
            FilterColumn($('#selectTeacher').val(), 3, settings);
        }

        if ($("#selectTest").val()) {
            FilterColumn($('#selectTest').val(), 2, settings);
        }

        if ($("#selectStudent").val()) {
            FilterColumn($('#selectStudent').val(), 20, settings);
        }

        if ($("#selectTestCode").val()) {
            FilterColumn($('#selectTestCode').val(), 9, settings);
        }

        dataTable.fnDraw();
    }

    function setIconVisibilityClass(qtiTestClassAssignmentID, status, virtualTestID, bankIsLockedForTutorial, aData, isVirtualTestRetake) {     
        if (bankIsLockedForTutorial == null || bankIsLockedForTutorial == '') {
            bankIsLockedForTutorial = '0';
        }
        bankIsLockedForTutorial = parseInt(bankIsLockedForTutorial);
        var splitedString = aData['TestName'].split(' ');
        var retakeName = splitedString[splitedString.length - 1];
        var iconString = "";

        var detailsIcon = '<span class="icon icon-review-pencil"></span>';

        var activateIcon = '<span class="icon icon-review-action"></span>';
        var activateString = '<a href="javascript:void(0)" title="Activate" operation="0"'
            + ' qtiTestClassAssignmentID = "' + qtiTestClassAssignmentID + '"' 
            + ' type="' + aData['AssignmentType'] + '"' 
            + ' status="' + aData['Status'] + '"' 
            + ' isHide="' + aData['IsHide'] + '"'
            + ' isRetakeAssignment = "' + isVirtualTestRetake + '"'
            + ' testName = "' + retakeName + '"'
            + ' class="with-tip jsChangeStatus btn-review-assignment">' + activateIcon + '</a>';

        var activateDisableIcon = '<span class="icon icon-review-disabled"></span>';
        var activateDisableString = '<a href="javascript:void(0)" title="Bank is locked" operation="0"'
            + ' qtiTestClassAssignmentID = "' + qtiTestClassAssignmentID + '"'
            + ' type="' + aData['AssignmentType'] + '"'
            + ' status="' + aData['Status'] + '"'
            + ' isHide="' + aData['IsHide'] + '"'
            + ' isRetakeAssignment = "' + isVirtualTestRetake + '"'
            + ' testName = "' + retakeName + '"'
            + ' class="with-tip btn-review-assignment">' + activateDisableIcon + '</a>';

        var deactivateIcon = '<span class="icon icon-review-deactivate"></span>';
        var deactivateString = '<a href="javascript:void(0)" title="Deactivate" operation="1"'
            + ' qtiTestClassAssignmentID = "' + qtiTestClassAssignmentID + '"'
            + ' type="' + aData['AssignmentType'] + '"'
            + ' status="' + aData['Status'] + '"'
            + ' isHide="' + aData['IsHide'] + '"'
            + ' isRetakeAssignment = "' + isVirtualTestRetake + '"'
            + ' testName = "' + retakeName + '"'
            + ' class="with-tip jsChangeStatus btn-review-assignment">' + deactivateIcon + '</a>';

        if (bankIsLockedForTutorial > 0) {
            activateString = activateDisableString;
        }

        if (aData.IsAllowReview) {
            detailsString = '<a href="javascript:void(0);" title="Review" class="with-tip jsTeacherReview btn-review-assignment"'
                + ' type="' + aData['AssignmentType'] + '"'
                + ' status="' + aData['Status'] + '"'
                + ' isHide="' + aData['IsHide'] + '"'
                + ' qtiTestClassAssignmentID="' + qtiTestClassAssignmentID + '"'
                + ' virtualTestID="' + virtualTestID + '"'
                + ' className="' + aData['ClassName'] + '"'
                + ' districtID="' + aData['DistrictID'] + '"'
                + ' teacherName="' + aData['TeacherName'] + '"'
                + ' selectFirstStudentForReview="0"'
                + '>' + detailsIcon + '</a>';

            iconString += detailsString;
        }

        if (status == 1) {
            iconString += deactivateString;
        } else {
            iconString += activateString;
        }

        var href = 'javascript:RegisterOpenDialog(' + virtualTestID + ');';
        var printIcon = '<img src="' + '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/print1.png")' + '" width="16" height="16">';
        var vPrintTestContent = ' <a  class="actionIcon"' +
            'title="Print" href="' + href + '">' + printIcon + '</a> ';

        var preferenceIcon = '<span class="icon icon-review-preference"></span>';
        var preferenceString = '<a href="javascript:void(0)" title="Preferences" operation="0" qtiTestClassAssignmentID="' + qtiTestClassAssignmentID + '" class="with-tip jsViewPreference btn-review-assignment">' + preferenceIcon + '</a>';
        iconString += preferenceString;

        if (status == 1 && IsShowUserCurrentDictrictStudentPortal && (aData['IsTeacherLed'] == null || !aData['IsTeacherLed'])) {
            var hideShowIcon = '<span class="icon icon-review-hide"></span>';
            var hideText = 'Hide Test on Student Portal';

            if (aData['IsHide']) {
                hideShowIcon = '<span class="icon icon-review-show"></span>';
                hideText = 'Show Test on Student Portal';
            }

            var hideShowIconString = '<a href="javascript:void(0)" title="' + hideText + '" operation="0"'
                + ' qtiTestClassAssignmentID = "' + qtiTestClassAssignmentID + '"'
                + ' type="' + aData['AssignmentType'] + '"'
                + ' status="' + aData['Status'] + '"'
                + ' isHide="' + aData['IsHide'] + '"'
                + ' IsTeacherLed = ' + aData['IsTeacherLed'] + '"'
                + ' class="with-tip jsHideShowAssignment btn-review-assignment">' + hideShowIcon + '</a>';
        if (IsShowUserCurrentDictrictStudentPortal && (aData['IsTeacherLed'] == null || !aData['IsTeacherLed']))
            iconString += hideShowIconString;
        }

        return iconString;
    }

    function setIconCheckbox(qtiTestClassAssignmentID, status, isHide, isTeacherLed) {
        var html = '<input type="checkbox" data-qtitestclassassignmentid="' + qtiTestClassAssignmentID + '" data-status="' + status + '"  data-ishide="' + isHide + '"  data-isteacherled="' + isTeacherLed + '" class="rcode" onchange = "rcode_onchange(this,' + qtiTestClassAssignmentID + ',' + status + ',' + isHide + ',' + isTeacherLed + ')" /> ';

        return html;
    }

    function setReviewText(aData, isZero) {
        var waitingForReview = aData['WaitingForReview'];
        var qtiTestClassAssignmentId = aData['QTITestClassAssignmentID'];
        var virtualTestId = aData['VirtualTestID'];
        var iconString = '<span class="js-tooltip js-pending-review" data-assignmentid="' + qtiTestClassAssignmentId + '" data-status="WaitingForReview"><span class="table-assignment-waiting-review">' + waitingForReview + '</span></span>';

        if (isZero) {
            iconString = '<span class="js-pending-review is-zero" data-assignmentid="' + qtiTestClassAssignmentId + '" data-status="WaitingForReview"><span class="table-assignment-waiting-review">0</span></span>';
        }

        var reviewButton = '';
        if (aData.IsAllowReview) {
            reviewButton = '<div style="padding-top: 5px;"><a href="javascript:void(0);" class="big-button btn-review jsTeacherReview"'
                + ' qtiTestClassAssignmentID="' + qtiTestClassAssignmentId + '"'
                + ' virtualTestID="' + virtualTestId + '"'
                + ' className="' + aData['ClassName'] + '"'
                + ' districtID="' + aData['DistrictID'] + '"'
                + ' teacherName="' + aData['TeacherName'] + '"'
                + ' selectFirstStudentForReview="1"'
                + ' >Review</a></div>';
        }


        return iconString + reviewButton;
    }

    function getTooltipStudents(assignmentid, data, status) {
        return '<span class="js-tooltip" data-assignmentid="' + assignmentid + '" data-status="' + status + '">' + data + '</span>';
    }

    function DisplayStudents(studentNames, assignmentType) {
        var studentElement = '';
        if (studentNames == null) return studentElement;
        if (assignmentType && (assignmentType == 1 || assignmentType == 3)) {
            var studentTitle = getStudentsTitleWithIcon(studentNames);
            studentElement = '<span class="js-tooltip-students"><span class="icon icon-24 icon-students"></span></span>';
        } else if (assignmentType && (assignmentType == 2)) {
            studentElement = studentNames;
            studentElement = WrapTextInSpan(studentElement, 15);
        }

        return studentElement;
    }

    $('#classDataTable').on('click', '.jsViewDetail', function (event) {
        event.preventDefault();
        selectedClassAssignmentID = $(this).attr('qtiTestClassAssignmentID');
        var virtualTestID = $(this).attr('virtualTestID');

        PopupTestAssignmentRegrader(selectedClassAssignmentID, null, virtualTestID, 0);
    });

    $('#classDataTable').on('click', '.jsTeacherReview', function (event) {
        // Cache test assignment variables
        var $self = $(this);
        var teacherReviewerQtiTestClassAssignmentID = $self.attr('qtiTestClassAssignmentID');
        var teacherReviewerVirtualTestID = $self.attr('virtualTestID');
        var teacherReviewerSelectFirstStudent = $self.attr('selectFirstStudentForReview');
        var teacherReviewerClassName = $self.attr('className');
        var teacherReviewerTeacherName = $self.attr('teacherName');
        var districtId = $self.attr('districtId');

        var url = '@Url.Action("Index", "TeacherReview")';
        url += '?qtiTestClassAssignmentID=' + teacherReviewerQtiTestClassAssignmentID;
        url += '&virtualTestID=' + teacherReviewerVirtualTestID;
        url += '&selectFirstStudentForReview=' + teacherReviewerSelectFirstStudent;
        url += '&ClassName=' + teacherReviewerClassName;
        url += '&TeacherName=' + teacherReviewerTeacherName;
        url += '&districtId=' + districtId;

        $self.attr('href', encodeURI(url));
    });

    $('#classDataTable').on('click', '.jsReviewPopup', function (event) {
        event.preventDefault();
        var selectedClassAssignmentId = $(this).attr('qtiTestClassAssignmentID');
        var virtualTestId = $(this).attr('virtualTestID');

        PopupTestAssignmentRegrader(selectedClassAssignmentId, null, virtualTestId, 1);
    });

    $('#classDataTable').on('click', '.jsChangeStatus', function (event) {       
        event.preventDefault();
        var qtiTestClassAssignmentID = $(this).attr('qtiTestClassAssignmentID');
        var operationType = $(this).attr("operation");
        var isRetakeAssignment = $(this).attr("isRetakeAssignment") == 'true';
        var testName = $(this).attr("testName");
        var type = $(this).attr('type');
        var isHide = $(this).attr('isHide');
        ConfirmClassMessage("Are you sure you want to " + (operationType == 1 ? "deactivate" : "activate") + " this assignment?", qtiTestClassAssignmentID, operationType, testName, isRetakeAssignment, type);
    });

    $('#classDataTable').on('click', '.jsViewPreference', function (event) {
        event.preventDefault();
        ShowBlock($('#classDataTable'), 'Loading');

        var url = '@Url.Action("GetTestAssignmentSetting", "TestAssignment")';
        testSchedule.testClassAssignmentId = $(this).attr('qtiTestClassAssignmentID');

        $.ajax({
            url: url,
            data: { testAssingmentId: testSchedule.testClassAssignmentId },
            cache: false
        }).done(function (html) {
            $('#classDataTable').unblock();
            $("#dvTestAssignmentDefaultSetting").html(html);
            $('#dvTestAssignmentDefaultSettingPanel').show();
            $('#dvTestAssignmentDefaultSettingPanel').dialog({
                title: "",
                open: function () {
                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }
                    //Create overlay for popup
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                        $('#accordion-preferences-setting').removeClass('w-700')
                },
                beforeclose: function () {
                    return true;
                },
                close: function () {
                    $('#dvTestAssignmentDefaultSettingPanel').hide();
                    $("body .my-overlay").remove();
                },
                modal: false,
                width: 954,
                resizable: false
            });
        });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    });

    $('#classDataTable').on('click', '.jsHideShowAssignment', function (event) {
        var $self = $(this);
        event.preventDefault();
        vueModel.isHide = $self.attr('isHide') == 'true' ? true : false;
        vueModel.qtiTestassingmentId = $self.attr('qtiTestClassAssignmentID');
        vueModel.isShowModalHideShow = true;
    });

    function ConfirmClassMessage(message, qtiTestClassAssignmentID, operationType, testName, isRetakeAssignment, type) {       
        var hbody = $("body").height() - 109;      
        var strHtml = '<section class="grid_5" style="height:200px;">' +
            '<div class="block-border" style="width: 440px;">' +
            '<div class="block-content form" style="padding-bottom:78px">' +
            '<table cellpadding="0" cellspacing="0"><tr><td><p class="styleMessage" style="margin-bottom:0px;">' + message +
            '</p></td></tr><tr><td>' +
            '<p class="plButton"  style="margin-bottom:0px;">' +
            '<button id="btnOk" type="button" name="ok">OK</button>' +
            '<button id="btnCancel" type="button" name="cancel" onclick="HandleClassCancelClick()">Cancel</button>' +
            '</p></td></tr></table></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "messageClassDialog")
            .appendTo("body")
            .dialog({
                close: function () { $(this).remove(); },
                open: function () {
                    $(this).find('#btnOk').click(function () {
                        HandleClassOKClick(qtiTestClassAssignmentID, operationType, testName, isRetakeAssignment, type ) }); },
                modal: true,
                width: 500,
                maxheight: 400,
                resizable: false
            });

        $(".ui-dialog").css("height", hbody);
        //$(window).scrollTop(0);
    }

    function HandleClassOKClick(qtiTestClassAssignmentID, operationType, testName, isRetakeAssignment, type) {
        $("#messageClassDialog").dialog("close");
        if (isRetakeAssignment && operationType != 1) {
            $.post('@Url.Action("CanActive")', { qtiTestClassAssignmentID: qtiTestClassAssignmentID, operation: operationType, studentStr: '', type: type, IsOldUI: true }, function (response) {
                if (response == false) {
                    popupAlertMessageV2('alert', 'This student has an existing ' + testName + ' assignment or has already completed the test', 500, 500)
                } else {
                    SetupFilters();
                }
            });
        } else {
            $.post('@Url.Action("ChangeStatus")', { qtiTestClassAssignmentID: qtiTestClassAssignmentID, operation: operationType, studentStr: '', type: type, IsOldUI: true }, function (response) {
                SetupFilters();
            });
        }
    }

    function HandleClassCancelClick() {
        $("#messageClassDialog").dialog("close");
    }

    function TextAbstract(text, length) {
        if (text == null) {
            return "";
        }
        if (text.length <= length) {
            return text;
        }
        text = text.substring(0, length);
        var last = text.lastIndexOf(" ");
        if (last > 0) text = text.substring(0, last);

        text = $.trim(text);
        if (text.indexOf(",") == text.length - 1) text = text.substring(0, text.length - 1);

        return text + "...";
    }

    function WrapTextInSpan(text, length) {
        var shortText = TextAbstract(text, length);
        var result = '<span title="' + text + '">' + shortText + '</span>';
        return result;
    }

    function portalLinkTestCode(code, districtId, isTeacherLed, status) {
        if (isTeacherLed == true && status == 1) {
            var extractedCode = code;
            var isTutorial = code.search(" Tutorial") != -1;
            if (isTutorial) {
                extractedCode = code.substring(0, code.search("Tutorial"));
            }

            var testTakerUrl = $('#hdfUrlTestTaker').val();
            var result = '<a target="_blank" href="' + testTakerUrl + extractedCode + '">' + extractedCode + '</a > ';
            if (isTutorial)
                result = result + "<br> Tutorial";
            return result;
        }
        return code;
    }
    function openUrl(url) {
        window.location.href = url;
    }

    function ExportTestAssignments() {
        var schoolID = 0;
        if ($('#selectSchool').val() != 'select' && $('#selectSchool').val() > 0) {
            schoolID = $('#selectSchool').val();
        }

        var utcOffset = new Date().getTimezoneOffset() != undefined ? new Date().getTimezoneOffset() / 60 : '';
        var url = '@Url.Action("ExportTestAssignments")';
        ShowBlock($('#divClassTestAssignments'), "Exporting");
        $.ajax({
            url: url,
            data: {
                DateTime: $('#dateTime option:selected').val(),
                OnlyShowPendingReview: showPendingReviewClassTestAssignment,
                ShowActiveClassTestAssignment: showActiveClassTestAssignment,
                DistrictID: $('#selectDistrict').val(),
                AssignmentCodes: $('#hdAssignmentCodes').val(),
                Grade: $('#selectGrade').val(),
                Subject: $('#selectSubject').val(),
                Bank: $('#selectBank').val(),
                Class: $('#selectClass').val(),
                Teacher: $('#selectTeacher').val(),
                TestName: $('#selectTest').val(),
                Student: $('#selectStudent').val(),
                Code: $('#selectTestCode').val(),
                SearchBox: $('#classDataTable_filter input').val(),
                SchoolID: schoolID,
                UtcOffsetClient: utcOffset
            },
            cache: false
        }).done(function (url) {
            $('#divClassTestAssignments').unblock();
            popupAlertExportInfoMessage('ui-popup-exportInfo', 240, 125, url);
        });
    }

    function ExportStudentSessions() {
        var schoolID = 0;
        if ($('#selectSchool').val() != 'select' && $('#selectSchool').val() > 0) {
            schoolID = $('#selectSchool').val();
        }

        var url = '@Url.Action("ExportTestStudentSessions")';
        ShowBlock($('#divClassTestAssignments'), "Exporting");
        $.ajax({
            url: url,
            data: {
                DateTime: $('#dateTime option:selected').val(),
                OnlyShowPendingReview: showPendingReviewClassTestAssignment,
                ShowActiveClassTestAssignment: showActiveClassTestAssignment,
                DistrictID: $('#selectDistrict').val(),
                AssignmentCodes: $('#hdAssignmentCodes').val(),
                Grade: $('#selectGrade').val(),
                Subject: $('#selectSubject').val(),
                Bank: $('#selectBank').val(),
                Class: $('#selectClass').val(),
                Teacher: $('#selectTeacher').val(),
                TestName: $('#selectTest').val(),
                Student: $('#selectStudent').val(),
                Code: $('#selectTestCode').val(),
                SearchBox: $('#classDataTable_filter input').val(),
                SchoolID: schoolID
            },
            cache: false
        }).done(function (url) {
            $('#divClassTestAssignments').unblock();
            popupAlertExportInfoMessage('ui-popup-exportInfo', 240, 125, url);
        });
    }


    function popupAlertExportInfoMessage(contentClass, w, h, url) {
        var contentHtml = '';
        var $div = $('<div />');

        w = w !== undefined ? w : 400;
        h = h !== undefined ? h : 100;

        contentHtml += '<div class="popup-exportInfo">';
        contentHtml += '<div class="u-m-t-15 u-m-b-15 u-text-center">';
        contentHtml += '<p>Your export is ready. <br/ > Click OK to download.</p>';
        contentHtml += '</div>';
        contentHtml += '<div class="u-text-center">';
        contentHtml += '<a target="_blank" onclick="CloseExportPopup()" href="' + url + '" class="big-button">OK</a>';
        contentHtml += '</div>';
        contentHtml += '</div>';

        $div.html(contentHtml)
            .attr('id', 'popup-exportInfo')
            .appendTo('body')
            .dialog({
                modal: true,
                width: w,
                minHeight: h,
                resizable: false,
                dialogClass: contentClass,
                close: function () {
                    $(document).find('#popup-exportInfo').dialog('destroy').remove();
                }
            });
    };

    function CloseExportPopup() {
        $(document).find('#popup-exportInfo').dialog('destroy').remove();
    }
</script>

<script>
    var testPreferenceModel = null;

    function BuildDistrictSettings() {

    }

    var vDurationType = $('#hdfDurationType').val();
    var sDurationType = vDurationType == '2' ? 'Time Spent' : 'Time Remaining';
    function BuildFormatDeadline() {
        try {
            var tmp = new Date($('#hdfDdeadlineId').val());
            var vMonth = parseInt(tmp.getMonth()) + 1;
            var vMinutes = parseInt(tmp.getMinutes());
            var strMinutes = vMinutes.toString();
            if (vMinutes < 10) {
                strMinutes = '0' + strMinutes;
            }
            var strAPM = 'AM';
            var vHouse = tmp.getHours();
            if (vHouse > 12) {
                vHouse = vHouse - 12;
                strAPM = 'PM';
            }
            var vString = tmp.toLocaleDateString() + ' ' + vHouse + ':' + strMinutes + ' ' + strAPM;
            return vString;
        } catch (e) {
            CustomAlert(e);
        }
    }

    function DisplayRate(rate) {
        if (rate === '0.8')
            return 'Normal';
        if (rate === '0.7')
            return 'Slow';
        return '';
    }

    function DisplayVolume(volume) {
        return volume * 10;
    }
</script>
