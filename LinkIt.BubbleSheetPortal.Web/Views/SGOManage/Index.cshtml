@model LinkIt.BubbleSheetPortal.Web.ViewModels.SGO.SGOHomeViewModel
@*@MvcHtmlString.Create(
            Bundle.Css()
                .Add(@Url.Content("~/Content/css/custom.css"))
                .Add(@Url.Content("~/Content/css/sgohome.css"))
                .Render("/Content/themes/Constellation/css/c_combined_#.css")
             )*@

@*@MvcHtmlString.Create(
    Bundle.JavaScript()
        .Add("/Content/themes/TestMaker/ckeditor_utils.js")
             .Add("/Scripts/jquery.listSplitter.js")
                 .Add("/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")
                     .Add("/Scripts/custom.js")
        .Render("/Content/themes/Constellation/js/SGOList_combined_#.js")
    )*@

@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleSGOManageIndexBundle()
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.ScriptSGOManageIndexBundle()

@{
    ViewBag.Title = "SGO Manager";
}

<style>
    .sgo-selector select{
        min-width: 250px;
        max-width: 250px;
    }
</style>

@if (Model.IsPublisher || Model.IsNetworkAdmin)
{
    <article class="container_12" style="margin-bottom: 0px;">
        <section class="grid_12 sgo-selector box-shadow" style="margin-bottom: 0px;">
            <div class="block-border">
                <div class="block-content form">
                    <fieldset id="idPublisherOrDistrictAdmin">
                        <div class="columns">
                            <div class="colx2-left">
                                <p>
                                    <label>State</label>
                                    <select id="selectState"></select>
                                </p>
                            </div>
                            <div class="colx2-right">
                                <div>
                                    <label>@LabelHelper.DistrictLabel</label>
                                    <div class="block-text-name">
                                        <select id="selectDistrict"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
        </section>
    </article>
}
else
{
    <input id="idhdfDistrictId" type="hidden" value="@Model.CurrentDistrictId" />
    <input id="idhdfSchoolId" type="hidden" value="@Model.CurrentSchoolId" />
}

<article class="container_12" style="margin-bottom: 0px;">
    <section class="grid_12 sgo-selector box-shadow" style="margin-bottom: 0px;">
        <div class="block-border">
            <div class="block-content form">
                <h1>
                    SGO Filter
                </h1>
                <fieldset id="idPublisherOrDistrictAdmin">
                    @if (Model.IsPublisher || Model.IsNetworkAdmin || Model.IsDistrictAdmin)
                    {
                        <div class="columns">
                            <div class="colx2-left">
                                <div>
                                    <label>School</label>
                                    <div class="block-text-name">
                                        <select id="selectSchool"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="colx2-right">
                                <div>
                                    <label>Teacher</label>
                                    <div class="block-text-name">
                                       <select id="selectTeacher"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (Model.IsSchoolAdmin)
                    {
                        <div class="columns">
                            <div class="colx2-left">
                                <div>
                                    <label>Teacher</label>
                                    <div class="block-text-name">
                                       <select id="selectTeacher"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="colx2-right">
                                <p>

                                </p>
                            </div>
                        </div>
                    }

                    @if (Model.IsPublisher || Model.IsNetworkAdmin || Model.IsDistrictAdmin || Model.IsSchoolAdmin)
                    {
                        <div class="columns">
                            <div class="colx2-left">
                                <div>
                                    <label>Reviewer</label>
                                     <div class="block-text-name">
                                        <select id="selectReviewer"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div class="colx2-right">
                                <p>
                                </p>
                            </div>
                        </div>


                        <div class="columns">
                            <div class="colx2-left">
                                <p>
                                    <label>Instruction Period From</label>
                                    <span class="sgo-datetime" style="display: inline-block">
                                        <input name="instructionPeriodFrom" style="font-size: 1.083em; padding: 0.385em; width: 235px;" readonly="readonly" id="instructionPeriodFrom" />
                                        <span class="icon-sgo-calendar"></span>
                                    </span>
                                </p>
                            </div>
                            <div class="colx2-right">
                                <p>
                                    <label>To</label>
                                    <span class="sgo-datetime" style="display: inline-block">
                                        <input name="instructionPeriodTo" style="font-size: 1.083em; padding: 0.385em; width: 235px;" readonly="readonly" id="instructionPeriodTo" />
                                        <span class="icon-sgo-calendar"></span>
                                    </span>
                                </p>
                            </div>
                        </div>
                    }


                    <div class="columns">
                        <span class="sgo-filter-title">Archived Status</span>
                        <label class="sgo-filter-checkbox"><input type="checkbox" id="chArchivedStatusActive" @if (Model.SgoFilter.IsArchivedStatusActive) { <text>checked</text>}/> Active</label>
                        <label class="sgo-filter-checkbox"><input type="checkbox" id="chArchivedStatusArchived" @if (Model.SgoFilter.IsArchivedStatusArchived) { <text>checked</text>}/> Archived</label>
                    </div>
                    <div class="columns">
                        <span class="sgo-filter-title">Effective Status</span>
                        <div class="colx3-left">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusCanlled" value="5" /> Cancelled</label>
                        </div>
                        <div class="colx3-center">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusDraft" value="1" /> Draft</label>
                        </div>
                        <div class="colx3-right">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusPreparationSubmittedForApproval" value="2" /> Preparation Submitted for Approval</label>
                        </div>

                        <div class="colx3-left">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusPreparationDenied" value="4" /> Preparation Denied</label>
                        </div>
                        <div class="colx3-center">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusPreparationApproved" value="3" /> Preparation Approved</label>
                        </div>
                        <div class="colx3-right">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusEvaluationSubmittedForApproval" value="6" /> Evaluation Submitted for Approval</label>
                        </div>

                        <div class="colx3-left">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusSGODenied" value="8" /> SGO Denied</label>
                        </div>
                        <div class="colx3-center">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusSGOApproved" value="7" /> SGO Approved</label>
                        </div>
                        <div class="colx3-right">
                            <label class="sgo-filter-checkbox"><input type="checkbox" name="chSgoFilterStatus" id="chSgoStatusTeacherAcknowledged" value="9" /> Teacher Acknowledged</label>
                        </div>
                    </div>
                </fieldset>
                <button id="btnFilterSubmit" class="float-right" style="margin-left: 10px;" type="button">Apply Filters</button>
                <button id="btnFilterClear" class="float-right grey" type="button">Clear Filters</button>
                <br /><br />
            </div>
        </div>
    </section>
</article>

<article class="container_12" id="idTopNavigation">
    <section class="grid_12">
        <div class="block-border">
            <div class="block-content form" id="divOnTop">
                <h1>
                    SGO Home
                    <div class="clearfix"></div>
                    <a href="javascript:void(0)" class="CreateNewSGO">
                        <img src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")" />
                        Add New SGO
                    </a>
                    @if (Model.IsDistrictAdmin || Model.IsSchoolAdmin)
                    {
                        <a href="javascript:void(0)" id="btnExtractTeacherData" style="margin-left: 145px" clickable="@Model.HasFinalAdministrativeSignoffSGO.ToString().ToLower()">
                            Extract Teacher Data
                        </a>
                    }

                </h1>
                <p>
                    <div id="idSGODirectionsHome" class="sgo-instruction">
                        @Html.Raw(Model.Directions)
                    </div>
                </p>
                <p style="height: 5px"></p>
                <div class="no-margin last-child">
                    <table id="dataTable" class="datatable table no-margin table-sgo-manager table-sgo-manager-home" width="100%">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">
                                    SGO Name
                                </th>
                                <th scope="col">
                                    V.
                                </th>
                                <th scope="col">
                                    Teacher
                                </th>
                                <th scope="col">
                                    School
                                </th>
                                <th scope="col">
                                    @LabelHelper.GradeLabel
                                </th>
                                <th scope="col">
                                    Course
                                </th>
                                <th scope="col">
                                    Number of Students
                                </th>
                                <th scope="col">
                                    Interval of instruction
                                </th>
                                <th scope="col">
                                    Created Date
                                </th>
                                <th scope="col">
                                    Effective Status
                                </th>
                                <th scope="col">
                                    Effective Status Date
                                </th>

                                <th scope="col">
                                    Reviewer
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </section>
    @Html.Partial("_ArchiveConfirmation")
    @Html.Partial("_UnarchiveConfirmation")
</article>
@section scripts {
<script src="/Scripts/SGO/App.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        if ('@Model.IsSignedOffSGO' != undefined && '@Model.IsSignedOffSGO' == 'True') {
            CustomAlert('There is no signed off SGO.');
        }
        $('#selectDistrict').marquee();
        $('#selectSchool').marquee();
        $('#selectTeacher').marquee();
        $('#selectReviewer').marquee();
    });

    var archived;
    var oTable;
    $(function () {
        populateSGOFilterStatus();
        callInitDataTable();

        @if (Model.IsPublisher || Model.IsNetworkAdmin || Model.IsDistrictAdmin || Model.IsSchoolAdmin)
        {
            <text>
                $('input[name="instructionPeriodFrom"]').datepicker({
                    dateFormat: jqueryDatePickerFormat(),
                    beforeShow: function (input, inst) {
                        $('#ui-datepicker-div').addClass('datepicker-sgo');
                    },
                    onSelect: function (selectedDate) {
                        var statDate = $(this).val();
                        $('input[name="instructionPeriodTo"]').datepicker('option', 'minDate', statDate);
                    }
                }).datepicker('setDate', '@Model.SgoFilter.InstructionPeriodFromString')
                .datepicker('option', 'maxDate', '@Model.SgoFilter.InstructionPeriodToString');

                $('input[name="instructionPeriodTo"]').datepicker({
                    dateFormat: jqueryDatePickerFormat(),
                    beforeShow: function (input, inst) {
                        $('#ui-datepicker-div').addClass('datepicker-sgo');
                    },
                    onSelect: function (selectedDate) {
                        var endDate = $(this).val();
                        $('input[name="instructionPeriodFrom"]').datepicker('option', 'maxDate', endDate);
                    }
                }).datepicker('setDate', '@Model.SgoFilter.InstructionPeriodToString')
                .datepicker('option', 'minDate', '@Model.SgoFilter.InstructionPeriodFromString');
            </text>
        }


    });

    function callInitDataTable() {
        setTimeout(function () {
            if ($.active == 0) { // Just call init datatables function when there is no active ajax request
                initDataTables()
            } else {
                callInitDataTable();
            }
        }, 500);
    }

    function initDataTables() {
        archived = false;
        var options = {
            bServerSide: true,
            bDestroy: true,
            sAjaxSource: getAjaxSource(),
            bStateSave: false,
            bAutoWidth: true,
            iDisplayLength: 25,
            aaSorting: [[9, 'desc']],
            aoColumns: [
                { sType: 'integer', sName: 'ID', bSearchable: false, bSortable: false, sWidth: '20px' },
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true },
                { sType: 'integer', sName: 'Version', bSearchable: true, bSortable: true, sWidth: '15px' },
                { sType: 'string', sName: 'Teacher', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'School', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'GradeIDs', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'Course', bSearchable: true, bSortable: true },
                { sType: 'integer', sName: 'TotalStudent', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'StartDate', bSearchable: true, bSortable: true, sWidth: '75px' },
                { sType: 'string', sName: 'CreatedDate', bSearchable: true, bSortable: true, sWidth: '75px' },
                { sType: 'string', sName: 'EffectiveStatus', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'EffectiveStatusDate', bSearchable: true, bSortable: true, sWidth: '75px' },
                { sType: 'string', sName: 'ApproverName', bSearchable: true, bSortable: true },
                { sType: 'bool', sName: 'IsArchived', bSearchable: false, bSortable: false, bVisible: false },
                { sType: 'bool', sName: 'IsOwner', bSearchable: false, bSortable: false, bVisible: false },
                { sType: 'bool', sName: 'NotEdit', bSearchable: false, bSortable: false, bVisible: false }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(setIconVisibility(aData[0], aData[13], aData[10], aData[12], aData[14], aData[15]));
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#idTopNavigation'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#idTopNavigation').unblock();
                $('.with-tip').tip();

                var dataTable = $('#dataTable').dataTable();
                dataTable.fnSetFilteringDelay(500);
            }
        };

        $("#dataTable").data("options", options);

        function setIconVisibility(sgoId, isArchived, sgoStatus, approverName, isOwner, isNotEdit) {

            var str = '';
            var editString = '';
            var archiveString = '';
            var unarchiveString = '';
            var print = '';
            var printNew = '';
            var reviewerString = '';
            var auditUrl = '';
            var auditString = '';
            if (isNotEdit == 'True') {
                if (sgoStatus != 'Draft') { // Do not allow non-owner user to review draft SGO
                    editString = '<a href="#" title="Review" class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-edit small">Edit SGO</span></a>';
                }
                archiveString = '<a href="#" title="Archive" class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-archive small">Archive SGO</span></a>';
                unarchiveString = '<a href="#" title="Unarchive"  class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-unarchive small">Unarchive SGO</span></a>';
                print = '<a href="#" title="Print PDF" class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-print disabled small">Print PDF</span></a>';
                reviewerString = '<a href="#" title="Change Reviewer" class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-changereviewer small">Change Reviewer</span></a>';
                auditString = '<a href="#" title="Display Audit Trail" class="with-tip sgo-icon-action disabled"><span class="icon icon-sgo-audittrail">Audittrail</span></a>';
                if (isArchived == "True") {
                    str = editString + unarchiveString;
                } else {
                    str = editString + archiveString;
                }
                str = str + print;
                if (approverName != '') {
                    str = str + reviewerString;
                }
                str += auditString;

            } else {

                if (isOwner == 'False') {
                    if (sgoStatus != 'Draft') { // Do not allow non-owner user to review draft SGO
                        editString = '<a href="javascript:void(0)" title="Review" SGOID="' + sgoId + '" class="with-tip EditSGO sgo-icon-action"><span class="icon icon-sgo-edit small">Edit SGO</span></a>';
                    }
                } else {
                    editString = '<a href="javascript:void(0)" title="Edit" SGOID="' + sgoId + '" class="with-tip EditSGO sgo-icon-action"><span class="icon icon-sgo-AddEdit small">Edit SGO</span></a>';
                }

                archiveString = '<a href="javascript:void(0)" title="Archive" operation="1" SGOID="' + sgoId + '" class="with-tip archiveSGO sgo-icon-action"><span class="icon icon-sgo-archive small">Archive SGO</span></a>';
                unarchiveString = '<a href="javascript:void(0)" title="Unarchive" operation="0" SGOID="' + sgoId + '"   class="with-tip unarchiveSGO sgo-icon-action"><span class="icon icon-sgo-unarchive small">Unarchive SGO</span></a>';
                printNew = '<div onclick="sgoPrintConfirm(' + sgoId + ')"  class="with-tip sgo-icon-action"><span class="icon icon-sgo-print small">Print PDF</span></div>';

                reviewerString = '<a href="javascript:void(0)" title="Change Reviewer" SGOID="' + sgoId + '" class="with-tip ChangeReviewer sgo-icon-action"><span class="icon icon-sgo-changereviewer small">Change Reviewer</span></a>';
                auditUrl = '@Url.Action("Index", "SGOAuditTrail")/index/' + sgoId;
                auditString = '<a href="' + auditUrl + '" title="Display Audit Trail" class="with-tip sgo-icon-action jsAudittrail"><span class="icon icon-sgo-audittrail">Audittrail</span></a>';

                if (isArchived == "True") {
                    str = editString + unarchiveString;
                } else {
                    str = editString + archiveString;
                }
                str = str + printNew;
                if (approverName != '') {
                    str = str + reviewerString;
                }
                str += auditString;
            }
            return str;
        }

        $('#dataTable').on('click', '.archiveSGO', function () {
            $('.with-tip').hideTip();
            SGOViewModel.sgoError = '';
            SGOViewModel.isShowModalArchive = true;
            SGOViewModel.sgoId = $(this).attr('SGOID');
        });

        $('#dataTable').on('click', '.unarchiveSGO', function () {
            $('.with-tip').hideTip();
            SGOViewModel.sgoError = '';
            SGOViewModel.isShowModalUnarchive = true;
            SGOViewModel.sgoId = $(this).attr('SGOID');
        });
    }

    function populateSGOFilterStatus() {
        var selectedStatus = '@Model.SgoFilter.SGOStatusIds';
        $.each(selectedStatus.split(','), function (index, value) {
            $('input[name="chSgoFilterStatus"][value="' + value + '"]').prop("checked", true)
        });
    }

    function getSelectedSgoFilterStatus() {
        return $('input[name="chSgoFilterStatus"]:checked').map(function () {
            return this.value;
        }).get().join(",");
    }


    var isDistrictAdmin = '@Model.IsDistrictAdmin'.toLowerCase() == 'true';
    var isSchoolAdmin = '@Model.IsSchoolAdmin'.toLowerCase() == 'true';
    var isPublisher = '@Model.IsPublisher'.toLowerCase() == 'true';
    var isNetworkAdmin = '@Model.IsNetworkAdmin'.toLowerCase() == 'true';

    $('#btnFilterSubmit').click(function () {
        setupFilters();
    });

    $('#btnFilterClear').click(function () {
        // populateSGOFilterStatus();
        // Check all checkboxes
        $('input[name="chSgoFilterStatus"]').each(function (index, element) {
          $(element).attr('checked', true);
        })

        if (isDistrictAdmin || isSchoolAdmin) {
          $('#chSgoStatusDraft').attr('checked', false);
          $('#selectReviewer').val(selectedReviewerID);
        }
        else {
          $('#selectReviewer').val('');
        }

        if (isSchoolAdmin) {
          $('#selectTeacher').val('select');
        }
        else {
          $("#selectTeacher option").remove();
          $('#selectSchool').val('select');
        }

        var defaultPeriod = getDefaultPeriod();
        $('#instructionPeriodFrom').val(defaultPeriod.fromDate);
        $('#instructionPeriodTo').val(defaultPeriod.toDate);

        $('#chArchivedStatusArchived').attr('checked', false);
        $('#chArchivedStatusActive').attr('checked', true);
    })

    function getAjaxSource() {
        var url = '@Url.Action("GetSGOInstance")/?stateId=' + GetStateId() + '&districtId=' + GetDistrictId() + '&isArchivedStatusActive=' + $('#chArchivedStatusActive').is(':checked')
            + '&isArchivedStatusArchived=' + $('#chArchivedStatusArchived').is(':checked')
            + '&sGOStatusIds=' + getSelectedSgoFilterStatus();

        @if (Model.IsPublisher || Model.IsNetworkAdmin || Model.IsDistrictAdmin || Model.IsSchoolAdmin) {
            <text>
                url += '&schoolId=' + $('#selectSchool').val()
                    + '&teacherId=' + $('#selectTeacher').val()
                    + '&reviewerId=' + $('#selectReviewer').val()
                    + '&instructionPeriodFrom=' + $('#instructionPeriodFrom').val()
                    + '&instructionPeriodTo=' + $('#instructionPeriodTo').val();
            </text>
        }

        return url;
    }
    $('.EditSGO').live('click', function () {
        var sgoId = $(this).attr('SGOID');
        AddEditSGO(sgoId);
    });

    $('#btnExtractTeacherData').live('click', function () {
        var self = $(this);
        var clickable = self.attr('clickable') === 'true';
        if (clickable) {

            var url = '@Url.Action("ExportTeacherData")/?stateId=' + GetStateId() + '&districtId=' + GetDistrictId() + '&isArchivedStatusActive=' + $('#chArchivedStatusActive').is(':checked')
            + '&isArchivedStatusArchived=' + $('#chArchivedStatusArchived').is(':checked')
            + '&sGOStatusIds=' + getSelectedSgoFilterStatus();
            url += '&schoolId=' + $('#selectSchool').val()
                + '&teacherId=' + $('#selectTeacher').val()
                + '&reviewerId=' + $('#selectReviewer').val()
                + '&instructionPeriodFrom=' + $('#instructionPeriodFrom').val()
                + '&instructionPeriodTo=' + $('#instructionPeriodTo').val();

            window.location.href = url;
        } else {
            CustomAlert('There is no signed off SGO');
        }
    });

    $('.DeleteSGO').live('click', function () {
        ShowBlock($('#divOnTop'), 'Archive');
        var sgoId = $(this).attr('SGOID');
        $.post('@Url.Action("ArchiveSGO", "SGOManage")', { sgoId: sgoId }, function (response) {
            if (response.Success == true) {
                if (isContinue == '1') {
                    var url = "/SGOManage/StudentPopulation/" + response.Id;
                    window.location.href = url;
                } else {
                    $("#dataTable").dataTable().fnReloadAjax();
                }
                $('#divOnTop').unblock();
            } else {
                $('#divOnTop').unblock();
                var alertMessage = '<div class="text-left">Create SOG Error, Please try again.</div>';
                popupAlertMessage('alert', alertMessage, 310, 500);
            }
        });
    });

    $('.CreateNewSGO').live('click', function () {
        AddEditSGO(0);
    });

    //Change Reviewer /////////////////////////////////////////////////
    $('.ChangeReviewer').live('click', function () {
        var sgoId = $(this).attr('SGOID');
        var url = '@Url.Action("ChangeReviewer", "SGOManage")?sgoId=' + sgoId;
        $.ajax({ url: url, cache: false })
            .done(function (html) {
                $("#divOnTop").append('<div id="PopupChangeReviewer" class="dialog"></div>');
                $("#PopupChangeReviewer").append(html);
                $('#PopupChangeReviewer').dialog({
                    title: "",
                    open: function () {
                        $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').remove();
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        //TODO if you want do anything after close popup.
                        return true;
                    },
                    close: function () {
                        $('#PopupChangeReviewer').remove();
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 555,
                    resizable: false
                });
            });
    });

    function SubmitReviewer(sgoId) {
        ShowBlock($('#SubmitForReviewSection'), "Save");
        var data = { SGOID: sgoId, DistrictAdminID: $('#DistrictAdminID').val() };
        var url = '@Url.Action("SubmitForReviewPost", "SGOManage")';
        $.ajax({
            type: 'post',
            url: url,
            data: data,
            datatype: 'json'
        }).success(function (data) {
            if (data.Status === 'success') {
                $('#success-message').show();
                setTimeout(CancelSubmitForReview, 3000); // check again in a second
            } else if (data.Status === 'error') { }
        }).always(function () {
            $('#SubmitForReviewSection').unblock();
        });
    }

    function ChangeReviewer(sgoId) {
        ShowBlock($('#SubmitForReviewSection'), "Save");
        var data = { SGOID: sgoId, DistrictAdminID: $('#DistrictAdminID').val() };
        var url = '@Url.Action("ChangeReviewerPost", "SGOManage")';
        $.ajax({
            type: 'post',
            url: url,
            data: data,
            datatype: 'json'
        }).success(function (data) {
            if (data.Status === 'success') {
                $('#success-message').show();
                setTimeout(CancelSubmitForReview, 3000); // check again in a second
            } else if (data.Status === 'fail') {
                $('#error-messages').text(data.Error);
                $('#error-messages').show();
                //setTimeout(CancelSubmitForReview, 3000); // check again in a second
            }
        }).always(function () {
            $('#SubmitForReviewSection').unblock();
        });
    }

    function CancelSubmitForReview() {
        $("#PopupChangeReviewer").dialog("close");
    }

    function CancelChangeReviewer() {
        $("#PopupChangeReviewer").dialog("close");
    }

    //End Change Reviewer /////////////////////////////////////////////////

    function AddEditSGO(id) {
        var url = '@Url.Action("LoadCreateSGO", "SGOManage")?id=' + id;
        $.ajax(
            {
                url: url,
                cache: false
            })
            .done(function (html) {
                $("#divOnTop").append('<div id="PopupCreateNewSGO" class="dialog"></div>');
                $("#PopupCreateNewSGO").append(html);
                $('#PopupCreateNewSGO').dialog({
                    title: "",
                    open: function () {
                        $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').remove();
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        //TODO if you want do anything after close popup.
                        return true;
                    },
                    close: function () {
                        $('#PopupCreateNewSGO').remove();
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 555,
                    resizable: false
                });
            });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    }

    function SaveAndReturn() {
        $('#idhdfIsUpdate').val('0');
        if (ValidSGOStartAndEndDate()) {
            SaveSGO($('#idhdfIsUpdate').val());
        }
    }
    function createSGO() {
        $('#idhdfIsUpdate').val('1');
        if (ValidSGOStartAndEndDate()) {
            SaveSGO($('#idhdfIsUpdate').val());
        }
    }

    function SaveSGO(isContinue) {
        if ($('#idhdfIsUpdate').val() == '1') {
            ShowBlock($('#divOnTop'), "Update");
        } else {
            ShowBlock($('#divOnTop'), "Create");
        }
        var vSGOId = $('#idhdfSGOID').val();
        var vName = htmlEncode($('#idSGOinputName').val());
        var vStartDate = $('#idSGOStartDate').val();
        var vEndDate = $('#idSGOEndDate').val();
        var assosiatedSchoolId = $('#selectAssociatedSchool').val();

        var vGrade = [];
        $('#idPopulateGrade input:checked').each(function () {
            vGrade.push($(this).attr('key'));
        });
        var vGradeIds = vGrade.join(',');

        var isUnstructuredSgo = $('#IsUnstructuredSgo').is(":checked");

        if (isUnstructuredSgo && (assosiatedSchoolId == '' || assosiatedSchoolId == 'select')) {
            popupAlertMessage('alert', 'Please select Associated School.', 310, 500);
            return;
        }

        $.post('@Url.Action("CreateSGOByName", "SGOManage")', { ListGradeIds: vGradeIds, SGOId: vSGOId, StrName: vName, StrStartDate: vStartDate, StrEndDate: vEndDate, IsUnstructuredSgo: isUnstructuredSgo, assosiatedSchoolId: assosiatedSchoolId }, function (response) {

            if (response.Success == true) {
                if (isContinue == '1') {
                    var url = "/SGOManage/StudentPopulation/" + response.sgoId;
                    if (isUnstructuredSgo) {
                        url = "/SGOScoringPlanTarget/Index?sgoId=" + response.sgoId;
                    }
                    window.location.href = url;
                } else {
                    $("#dataTable").dataTable().fnReloadAjax();
                }
                $('#divOnTop').unblock();
            } else {
                $('#divOnTop').unblock();
                var alertMessage = '<div class="text-left">Create SOG Error, Please try again.</div>';
                if (response.ErrorMessage != '') {
                    alertMessage = '<div class="text-left">' + response.ErrorMessage + '</div>';
                }
                popupAlertMessage('alert', alertMessage, 310, 500);
            }
        });
        $("#PopupCreateNewSGO").dialog("close");
    }

    function cancelCreateSGO() {
        $("#PopupCreateNewSGO").dialog("close");
    }

    function ValidSGOStartAndEndDate() {
        var strSGOName = $('#idSGOinputName').val();
        strSGOName = strSGOName.trim();
        var vMessage = '';
        if (strSGOName == '') {
            vMessage += '<li>Name is required</li>';
        }

        var vStartDate = new Date($('#idSGOStartDate').val());

        var vEndDate = new Date($('#idSGOEndDate').val());

        if (vStartDate.toString() != 'Invalid Date' && vEndDate.toString() != 'Invalid Date' && vStartDate > vEndDate) {
            $('#error-messages').html('<li>Start Date cannot be greater than End Date</li>');
            vMessage += '<li>START DATE CANNOT BE GREATER THAN END DATE</li>';
        }

        if (vMessage.length > 0) {
            $('#error-messages').html(vMessage);
            $('#error-messages').show();
            return false;
        }

        //Validation Grdar
        var vGrade = [];
        $('#idPopulateGrade input:checked').each(function () {
            vGrade.push($(this).attr('key'));
        });
        if (vGrade.length == 0) {
            var alertMessage = '<div class="text-left">You must first select a @string.Format("{0}(s)",LabelHelper.GradeLabel).</div> ';
            popupAlertMessage('alert', alertMessage, 380, 500);
            return false;
        }

        return true;
    }

    function YesConfirmPopup(e) {
        SaveSGO($('#idhdfIsUpdate').val());
        var $self = $(e);
        $self.parents('.ui-dialog').remove();
    }

    $('#btnArchive').on('click', function () {
        archived = !archived;
        $("#archiveText").html(archived ? "on" : "off");
        $("#dataTable").dataTable().fnReloadAjax();
    });

    function htmlEncode(value) {
        //create a in-memory div, set it's inner text(which jQuery automatically encodes)
        //then grab the encoded contents back out.  The div never exists on the page.
        return $('<div/>').text(value).html();
    }

    $(function () {

        @if (Model.IsPublisher)
        {
            <text>
        $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
            populateStates(states);
        });
        </text>
        }
        else if (Model.IsNetworkAdmin)
        {
            <text>
        $.get('@Url.Action("GetStatesByDictricIds", "PopulateStateDistrict")', { dictricIds: '@Model.StrIds' }, function (states) {
            populateStates(states);
        });
        </text>
        }else if(Model.IsDistrictAdmin)
        {
            <text>
            populateSchools();
            populateReviewers();
            </text>
        }else if(Model.IsSchoolAdmin)
        {
            <text>
            populateTeachers();
            populateReviewers();
            </text>
        }else
        {
            <text>
            populateReviewers();
            </text>
        }
    });

    @if (Model.IsPublisher || Model.IsNetworkAdmin)
    {
        <text>
    $('#selectState').change(function () {
        populateDistricts();
    });
    $('#selectDistrict').change(function () {
        populateSchools();
        populateReviewers();
    });

    </text>
    }

    $('#selectSchool').change(function () {
        populateTeachers();
    });

    function populateStates(states) {
        addDefaultOption($('#selectState'), "State");
        addSelectListItemsWithSelectedValue($('#selectState'), states, '@Model.SgoFilter.StateId');
    }

    function populateDistricts() {
        $('#selectDistrict').empty();
        var stateValue = $('#selectState').val();
        if (stateValue != 'select') {
            if ('@Model.IsPublisher' === 'True') {
                $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItemsWithSelectedValue($('#selectDistrict'), districts, '@Model.SgoFilter.DistrictId');
                });
            }
            if ('@Model.IsNetworkAdmin' === 'True') {
                $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItemsWithSelectedValue($('#selectDistrict'), districts, '@Model.SgoFilter.DistrictId');
                });
            }
        }
    }


    function populateSchools() {
        $('#selectSchool').empty();
        var districtValue = GetDistrictId();
        if (districtValue != 'select') {
            $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', { districtId: districtValue }, function (schools) {
                addDefaultOption($('#selectSchool'), "School");
                addSelectListItemsWithSelectedValueIgnoreAutoSelectSingleOption($('#selectSchool'), schools, '@Model.SgoFilter.SchoolId');
            });
        }
    }

    var selectedReviewerID;
    function populateReviewers() {
        $('#selectReviewer').empty();
        var districtValue = GetDistrictId();
        if (districtValue != 'select') {
            $.get('@Url.Action("GetReviewers", "SGOManage")', { districtId: districtValue }, function (data) {
                addDefaultOption($('#selectReviewer'), "Reviewer");
                selectedReviewerID = '@Model.SgoFilter.ReviewerId';
                addSelectListItemsWithSelectedValueIgnoreAutoSelectSingleOption($('#selectReviewer'), data, '@Model.SgoFilter.ReviewerId');
            });
        }
    }

    function populateTeachers() {
        $('#selectTeacher').empty();
        var schoolValue = GetSchoolId();
        if (schoolValue != 'select' && schoolValue > '0') {
            $.get('@Url.Action("GetTeachersForSGO", "PopulateSchoolTeacher")', { schoolId: schoolValue, hasTermOnly: 'True' }, function (teachers) {
                addDefaultOption($('#selectTeacher'), "Teacher");
                addSelectListWithDefaultValue($('#selectTeacher'), teachers, 'select', function (item) {
                    return (item.FirstName) ? item.LastName + ", " + item.FirstName + " (" + item.Name + ")" : item.LastName + " (" + item.Name + ")";
                });
            });
        }
    }

    function setupFilters() {
        var dataTable = $('#dataTable').dataTable();
        dataTable.fnSettings().sAjaxSource = getAjaxSource();
        dataTable.fnDraw();
    }

    function GetDistrictId() {
        if ($('#idhdfDistrictId').length > 0 && $('#idhdfDistrictId').val() > 0) {
            return $('#idhdfDistrictId').val();
        } else {
            if ($('#selectDistrict').val() > 0)
                return $('#selectDistrict').val();
            else
                return 0;
        }
    }

    function GetSchoolId() {
        if ($('#idhdfSchoolId').length > 0 && $('#idhdfSchoolId').val() > 0) {
            return $('#idhdfSchoolId').val();
        } else {
            if ($('#selectSchool').val() > 0)
                return $('#selectSchool').val();
            else
                return 0;
        }
    }

    function GetStateId() {
        if ($('#selectState').length > 0 && $('#selectState').val() > 0) {
            return $('#selectState').val();
        }

        return 0;
    }

    //SGO Print Function /////////////////////////////////////////////////
    function sgoPrintConfirm(sgoId) {

        var url = '@Url.Action("LoadPrintConfirm", "SGOManage")?sgoId=' + sgoId;
        $.ajax({ url: url, cache: false })
            .done(function (html) {
                $("#divOnTop").append('<div id="idPopupSGOPrintConfirm" class="dialog"></div>');
                $("#idPopupSGOPrintConfirm").append(html);
                $('#idPopupSGOPrintConfirm').dialog({
                    title: "",
                    open: function () {
                        $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').remove();
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        //TODO if you want do anything after close popup.
                        return true;
                    },
                    close: function () {
                        $('#idPopupSGOPrintConfirm').remove();
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 360,
                    resizable: false
                });
            });
    }

    function closeSGOPrintPopup() {
        $("#idPopupSGOPrintConfirm").dialog("close");
    }

    function printreportSGO(sgoId, sgoName, userId) {
        $('#idbtSGOSentToPrinter').disableBt();
        $('#idbtnSGOSavePDFFile').disableBt();
        ShowBlock($('#idPopupSGOPrintConfirm'), "Generating PDF");

        var reportFileName = "SGO_" + sgoName + '_' + userId + '_' + (new Date()).getTime() + "_.pdf";
        var data = {
            SgoId: sgoId,
            ReportFileName: reportFileName,
            TimezoneOffset: new Date().getTimezoneOffset()
        };
        $.ajax({
            url: '@Url.Action("Generate", "SGOReport")',
            traditional: true,
            type: 'POST',
            data: data,
            success: function (response) {
                //TODO: Somethings
            },
            failure: function (response) {
                CustomAlert(response);
            },
            timeout: 300000
        });
        getSGOReportS3File(reportFileName);
    }

    function getSGOReportS3File(checkUrl) {

        $.ajax({
            url: '@Url.Action("GetSGOReportS3File", "SGOReport")',
            type: 'POST',
            data: { fileName: checkUrl },
            success: function (response) {
                if (response.Result != true) {
                    setTimeout(function () {
                        getSGOReportS3File(checkUrl);
                    }, 3000);
                } else {
                    $('#idlinkSGOFilePrint').attr('href', response.Url);
                    $('#idlinkSGOFilePrint').show();
                    $('#idPopupSGOPrintConfirm').unblock();
                }
            }
        });
    }

    function getDefaultPeriod() {
        var currentDate = new Date();
        var curMonth = currentDate.getMonth();
        var curYear = Number(currentDate.getFullYear().toString().substr(2,2));
        if (curMonth <= 6) {
            return {
                fromDate: '01-Aug-'+(curYear-1),
                toDate: '31-Jul-'+curYear
            }
        }
        return {
            fromDate: '01-Aug-'+curYear,
            toDate: '31-Jul-'+(curYear+1)
        }
    }

    //End - SGO Print Function /////////////////////////////////////////////////
</script>
}
