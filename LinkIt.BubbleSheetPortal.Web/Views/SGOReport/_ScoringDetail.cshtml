@using LinkIt.BubbleSheetPortal.Models.SGO
@model LinkIt.BubbleSheetPortal.Web.ViewModels.SGO.SGOReportMasterViewModel

<style>
    .linkit-checkbox {
        display: inline-block;
        border: 1px solid #ccc;
        width: 16px;
        height: 16px;
        position: relative;
        box-shadow: inset 1px 1px 3px rgba(0, 0, 0, .15);
    }

    .linkit-checkbox::after {
        content: '';
        width: 9px;
        height: 5px;
        position: absolute;
        top: 3px;
        left: 3px;
        border: 3px solid #666;
        border-top: none;
        border-right: none;
        background: transparent;
        visibility: hidden;
        -webkit-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
        transform: rotate(-45deg);
    }

    .linkit-checkbox.is-checked::after {
        visibility: visible;
    }
</style>

<div class="sgoPrintBreakNewPage"></div>
<table class="table table-guidance">
    <tr>
        <td class="u-size-185">
            <strong>Scoring Details</strong>            
        </td>
    </tr>    
</table>

<table class="table table-scoring-detail u-text-center">
    <thead>
    <tr>
        <td style="width: 140px;"><strong>Preparedness Group</strong></td>
        <td><strong>Student</strong></td>
        @if (!string.IsNullOrEmpty(Model.ScoringDetailPreAssessmentTestName))
        {
            <td>
                <strong>
                    Pre-Assessment - @Model.ScoringDetailPreAssessmentTestName
                </strong>
            </td>
        }
        <td>
            <strong>
                @if (!string.IsNullOrEmpty(@Model.ScoringDetailPostAssessmentTestName))
                {
                    @Html.Raw(string.Format("Post - Assessment - {0}", @Model.ScoringDetailPostAssessmentTestName))
                }
                else
                {
                    <text>
                        Post - Assessment
                    </text>
                }
            </strong>
        </td>        
        <td><strong>Achieved Target?</strong></td>
    </tr>
    </thead>
    <tbody>
    @{
        int currentGroupOrder = 0;
    }
    @foreach (var sgoScoringDetail in Model.SgoScoringDetails)
    {
        if (currentGroupOrder != 0 && currentGroupOrder != sgoScoringDetail.GroupOrder)
        {
            <tr style="background: gainsboro;">
                <td></td>
                <td></td>
                @if (!string.IsNullOrEmpty(Model.ScoringDetailPreAssessmentTestName))
                {
                    <td></td>
                }
                <td></td>
                <td></td>
            </tr>
        }
        currentGroupOrder = sgoScoringDetail.GroupOrder.GetValueOrDefault();

        <tr>
            <td>
                @sgoScoringDetail.GroupOrder - @sgoScoringDetail.GroupName
            </td>
            <td>
                @sgoScoringDetail.LastName, @sgoScoringDetail.FirstName
            </td>
            @if (!string.IsNullOrEmpty(Model.ScoringDetailPreAssessmentTestName))
            {
                <td>
                    @sgoScoringDetail.BasedScore
                </td>
            }
            <td>
                @sgoScoringDetail.PostScore
            </td>
            <td>
                @if (sgoScoringDetail.AchievedTarget == 1)
                {
                    <div class="linkit-checkbox is-checked"></div>
                }
                @if (Model.TargetScoreType != (int)SGOTargetScoreTypeEnum.ManualScoring)
                {
                    <!--<div class="linkit-checkbox"></div>-->
                }
            </td>
        </tr>        
    }
        @if (!Model.SgoScoringDetails.Any())
        {
            <tr>
                <td  ></td>
                <td></td>
                @if (!string.IsNullOrEmpty(Model.ScoringDetailPreAssessmentTestName))
                {
                    <td>
                    </td>
                }
                <td>
                </td>
                <td></td>
            </tr>
        }
    </tbody>
</table>