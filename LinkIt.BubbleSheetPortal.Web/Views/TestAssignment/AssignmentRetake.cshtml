@model LinkIt.BubbleSheetPortal.Web.ViewModels.AssignmentRetake.AssignmentRetakeViewModel
@using LinkIt.BubbleSheetPortal.Web.Helpers
@using LinkIt.BubbleSheetPortal.Common
@{ ViewBag.Title = "Test Retake";

    var cookie = Request.Cookies[Constanst.LKARCookie];
    var token = string.Empty;
    if (cookie != null) { token = cookie.Value; }
}

<script src="@Url.Content("~/Scripts/jquery.listSplitter.js")" type="text/javascript"></script>
<script src="@Url.Content("~/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/TestDesign/testSchedule.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/constants.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/test-schedule.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/TestPreferences/testPreferences.js")" type="text/javascript"></script>

<style>
    .no-margin {
        margin: 0 !important;
    }

    .d-inline-block {
        display: inline-block !important;
    }

    .block-text-name > select {
        border: none !important;
    }

    .test-info .test-name,
    .test-info .test-status {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        text-align: center;
    }

    .test-info .test-name-item,
    .test-info .test-status-item {
        -webkit-box-flex: 0;
        -ms-flex: 0 0 75px;
        flex: 0 0 75px;
        padding: 2px 4px;
        border-bottom: 1px solid #BEBEBE;
        border-right: 1px solid #BEBEBE;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
    }

    .test-info .test-name-item {
        border-bottom: none;
    }

    .table-container {
        max-height: 100px;
        overflow: auto;
        position: relative;
    }
    .student-table .table-container {
        max-height: 600px;
        max-width: 835px;
    }

    thead tr th {
        height: 30px;
    }

    #studentsDataTable thead th {
        position: sticky;
        top: 0;
        z-index: 2;
    }

        tbody td:last-child, thead th:last-child {
            border-right: none !important;
        }

    #studentsDataTable .test-info-cell {
        padding: 0 !important;
        overflow: auto;
        text-align: center;
        vertical-align: middle;
    }

    .coolfieldset, .coolfieldset.expanded {
        border: 1px solid #aaa;
    }

        .coolfieldset.collapsed {
            border: 0;
            border-top: 1px solid #aaa;
        }

        .coolfieldset legend {
            padding-left: 13px;
            font-weight: bold;
            cursor: pointer;
        }

        .coolfieldset legend, .coolfieldset.expanded legend {
            background: transparent url(/Content/themes/base/images/expanded.gif) no-repeat center left;
            background-size: 10px 10px;
        }

        .coolfieldset.collapsed legend {
            background: transparent url(/Content/themes/base/images/collapsed.gif) no-repeat center left;
            background-size: 10px 10px;
        }

    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

    .note {
        margin-top: 1rem;
    }

        .note ul {
            list-style: inherit;
        }

            .note ul li {
                margin-top: .5rem;
                margin-left: 1.5rem;
            }

    #btnTestSettingCancel {
        margin-right: 1rem;
    }

    .status-description {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        background-color: #BEBEBE;
        font-weight: bold;
        margin-bottom: 16px;
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;
        padding: 4px 8px;
    }

        .status-description .column p {
            margin-bottom: 0px;
        }

    table.datatable {
        border-left: 1px solid #BEBEBE !important;
        border-right: 1px solid #BEBEBE !important;
    }

    .form-header {
        text-transform: capitalize;
    }

    .custom-checkbox-disabled {
        position: relative;
    }

    input[type="checkbox"]:disabled ~ span {
        background-color: #b6b6b6;
        border: 1px solid #b6b6b6;
        width: 10px;
        height: 10px;
        display: block;
        position: absolute;
        top: 1px;
    }
    #divContentPrint{
        margin-top: 50px;
    }
    a.is-disabled,
    a.is-disabled:hover,
    a.is-disabled:focus {
        color: white;
        text-shadow: rgba(0, 0, 0, 0.6) 0 1px 2px;
        box-shadow: rgba(0, 0, 0, 0.2) 0 1px 4px;
        border-color: rgb(161, 167, 174) rgb(144, 148, 152) rgb(107, 112, 118);
        background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), color-stop(0.05, rgb(197, 203, 206)), to(rgb(159, 167, 176)));
        cursor: default;
        pointer-events: none;
    }
    .block-controls{
        margin: 0;
    }
</style>
<article class="container_12">
    <section class="grid_12">
        <div id="generateContent" class="block-border">
            @using (Html.BeginForm("AssignmentRetake", "TestAssignment", FormMethod.Post, new { id = "TestRetakeForm", @class = "block-content form bubbleSheetSelector" }))
            {
                <h1 class="form-header">Assign @(Model.RetakeType) Retake</h1>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                <fieldset class="grey-bg" id="fsSelectTest">
                    <legend>@LocalizeHelper.Localized("AssignOnlineTest.SelectTest")</legend>
                    <div class="columns">
                        <div class="colx2-left">
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Grade")</label>
                                <div class="block-text-name">
                                    <select id="selectGrade">
                                        <option selected>@Model.GradeName</option>
                                    </select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Subject")</label>
                                <div class="block-text-name">
                                    <select id="selectSubject">
                                        <option selected>@Model.SubjectName</option>
                                    </select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="colx2-right">
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Bank")</label>
                                <div class="block-text-name">
                                    <select id="selectBank">
                                        <option selected>@Model.BankName</option>
                                    </select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Test")</label>
                                <div class="block-text-name test-name">
                                    <select id="selectTest">
                                        <option selected>@Model.TestName</option>
                                    </select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </fieldset>
                <div class="clear"></div>
                <fieldset class="grey-bg" id="fsStudentSelect">
                    <legend>@LocalizeHelper.Localized("AssignOnlineTest.SelectStudents")</legend>
                    <div id="studentContent">
                        @Html.Partial("_AssigmentRetakeStudentTable")
                    </div>
                </fieldset>
                <fieldset class="grey-bg coolfieldset" id="fsSelectOption">
                    <legend style="text-transform: capitalize;" id="lgSelectOption">Preferences in Effect</legend>
                    <input type="hidden" id="hdfChangedDefaultSetting" value="0" />
                    <div id="divDefaultSetting"></div>
                    <div class="columns" id="divButtonOption">
                        <div class="colx2-left">
                        </div>
                        <div class="colx2-right">
                            <p>
                                <a style="display: none; margin-top: 10px; float: right; text-align: center;" id="aDistrictSetting" class="openDialog addGroupButton LinkitStypeButton big-button" data-dialog-id="SettingsDialog" data-dialog-title="" title="Change">Change</a>
                                <button id="btnChangeSettingGray" disabled="disabled" style="display: none; margin-top: 10px; float: right;">Change</button>
                            </p>
                        </div>
                    </div>
                    <div class="clear"></div>
                </fieldset>

                <button class="float-right" id="btnSubmitAssignmentRetake" type="submit">@LocalizeHelper.Localized("AssignOnlineTest.AssignRetake")</button>

                <div class="clear"></div>
                <div id="divPopupTestResult">
                </div>
                <input type="hidden" value="0" id="hdfLoadExistAssingment" />
                <input type="hidden" value="" id="hdfPreferenceLevel" />
                <input type="hidden" value="TestAssignmentPage" id="hdfTestAssignmentPage" />
            }
        </div>
    </section>
</article>

<script>
    var dictrictId = @Model.DistrictId;
    var virtualTestId = @Model.OriginalVirtualTestID;
    var testPreferenceModel = null;
    var testExtractOptions = null;
    var testSchedule = new testSchedule('@ViewBag.DateFormat');
    var studentsSelected = [];
    var assignmentsSelected = [];
    var $studentsTable = $('#studentsDataTable');
    var $studentsTableContainer = $('.table-container');
</script>
<script>
    $(document).ready(function () {
        $('#selectTest').marquee();
        $('#selectBank').marquee();
        $('#selectTest').change();
        $('#selectBank').change();
        $('#divDefaultSetting').load('@Url.Action("DefaultSettings", "TestAssignment")', { districtId: dictrictId, testId: virtualTestId }, function (response) {
            $('#lgSelectOption').html('Preferences in Effect');
            if (response == false) {
                addErrorMessages(response);
            }
            
            if (typeof response == 'string') {
                try {
                    var result = JSON.parse(response);
                    $('#btnSubmitAssignmentRetake').attr('disabled', !!result.error)
                } catch { }
            }
        });
        $('#fsSelectOption').coolfieldset({ collapsed: true });
        @if ((bool)ViewBag.HasPrintResultRetake)
        {
            <text>LoadAssignmentResult();</text>
        }

    });
</script>
<script>
    $(document).ready(function () {
        initStudentTable();
        $('#TestRetakeForm').on('submit', handleFormSubmit);
        $(".openDialog").on("click", handleOpenPreferences);
    });
</script>
<script>
    function handleSelectAllStudents() {
        var allStudents = [];
        _.forEach($studentsTable.find('tbody tr'), function (item) {
            if ($(item).data('student-id')) {
                allStudents.push({
                    studentId: $(item).data('student-id'),
                    classId: $(item).data('class-id')
                });
            }
        });
        studentsSelected = allStudents;
        selectStudents();
    }
    function handleSelectNoneStudents() {
        studentsSelected = [];
        selectStudents();
    }
    function handleInvertSelectedStudents() {
        var notSelectStudents = [];
        _.forEach($studentAssignTable.find('tbody tr input.select-student').not(':checked'), function (item) {
             var tr = $(item).closest('tr');
             if (tr.data('id')) {
                 notSelectStudents.push({
                     studentId: tr.data('id'),
                 })
             }
        });
        studentsSelected = notSelectStudents;
        selectStudents();
    }
    function handleCheckAll() {
        if ($(this).is(':checked')) {
            var allStudent = [];
            _.forEach($studentsTable.find('tbody tr'), function (item) {
                if ($(item).data('student-id')) {
                    allStudent.push({
                        studentId: $(item).data('student-id'),
                        classId: $(item).data('class-id')
                    })
                }
            });
            studentsSelected = allStudent;
        } else {
            studentsSelected = [];
        }
        selectStudents();
    }
    function handleCheckSingle() {
        var $checkbox = $(this);
        var studentId = $checkbox.closest('tr').data('student-id');
        var classId = $checkbox.closest('tr').data('class-id');
        if ($checkbox.is(':checked')) {
            studentsSelected.push({ studentId: studentId, classId: classId });
        } else {
            studentsSelected = studentsSelected.filter(function (stu) { return stu.studentId != studentId; });
        }
        studentsSelected = _.union(studentsSelected);
        selectStudents();
    }
    function setActiveDeactiveButton() {
        if (assignmentsSelected && assignmentsSelected.length) {
            $('#btnDeactiveTestClassAssignment').removeClass('is-disabled')
        }
        else {
            $('#btnDeactiveTestClassAssignment').addClass('is-disabled')
        }
    }
    function selectAssignments() {
        $('#tableStudentAssign').find('input.select-assignment').attr('checked', false);
        assignmentsSelected.forEach(function (item) {
            $('#tableStudentAssign').find('tr[data-assignment-id="' + item + '"] input.select-assignment').attr('checked', true);
        });
        var isCheckAll = assignmentsSelected.length > 0 && assignmentsSelected.length == $('#tableStudentAssign').find('tbody tr[data-assignment-id]').length;
        $('#tableStudentAssign').find('input#chkAllAssignments').attr('checked', isCheckAll);

        setActiveDeactiveButton();
    }
    function handleAssignmentCheckAll(checkInput) {
        var allAssignment = [];

        if ($(checkInput).is(':checked')) {
            var allAssignment = [];
            _.forEach($('#tableStudentAssign').find('tbody tr'), function (item) {
                if ($(item).attr('data-assignment-id')) {
                    allAssignment.push($(item).attr('data-assignment-id'));
                }
            });
            assignmentsSelected = allAssignment;
        } else {
            assignmentsSelected = [];
        }

        selectAssignments();
    }
    function handleAssignmentCheckSingle(checkInput) {
        var $checkbox = $(checkInput);
        var assignmentId = $checkbox.closest('tr').attr('data-assignment-id');
        if ($checkbox.is(':checked')) {
            assignmentsSelected.push(assignmentId);
        } else {
            assignmentsSelected = assignmentsSelected.filter(function (assignment) { return assignment != assignmentId; });
        }
        assignmentsSelected = _.union(assignmentsSelected);

        selectAssignments()
    }
    function handleFormSubmit(ev) {
        ev.preventDefault();
        if (studentsSelected.length == 0) {
            CustomAlert("Please select at least a student.");
            return;
        }
        var deadlineValue;
        $.each(testPreferenceModel.OptionTags, function (index, tag) {
            if (tag.Key == 'deadline') {
                deadlineValue = tag.Value;
            }
        });
        var today = new Date();
        deadlineValue = deadlineValue == '0' ? '' : deadlineValue;
        var deadline = new Date(deadlineValue);
        if (deadline < today) {
            CustomAlert('The time limit preference set for this assignment shows that the deadline for test taking has expired. You must adjust or remove the deadline prior to assigning the test. This expired deadline is likely a date that had been established as your default preference sometime in the past, but is no longer applicable. You should check your default preferences to make the proper updates.', true);
            return;
        }
        ShowBlock($('#generateContent'), 'Assign retake');
        var vAssignmentDatadata = getAssignmentData();
        $.ajax({
                url: '@Url.Action("AssignmentRetake")',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: vAssignmentDatadata,
                cache: false,
                success: function (response) {
                    $('#generateContent').unblock();
                    $('#btnSubmit').enableBt();
                    //TODO: Replace UTCTime to LocalTime
                    if (response.error) {
                        CustomAlert(response.error);
                    }
                    LoadAssignmentResult();
                    LoadStudenTable();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status === 504) {
                        CustomAlert("This assignment will continue to generate. Please allow a few minutes for the process to complete.");
                    }
                    else {
                        CustomAlert(errorThrown);
                    }
                    $('#generateContent').unblock();
                },
                failure: function (response) {
                    CustomAlert(response);
                }
            })
    }
    function handleOpenPreferences(e) {
        e.preventDefault();
        $("<div></div>")
            .addClass("dialog")
            .attr("id", $(this)
                .attr("data-dialog-id"))
            .appendTo("body")
            .dialog({
                title: $(this).attr("data-dialog-title"),
                close: function () {
                    $(this).remove();
                    $("body .my-overlay").remove();
                },
                open: function (event, ui) {
                    //Create overlay for Jquery dialog
                    $(this).dialog({ position: 'top' });
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:100%;height:' + $('body').height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                },
                modal: false,
                width: 1000,
                resizable: false
            })
            .load(this.href, function () { });
    }
</script>
<script>
    function ReplaceLocalTime() {
        //Set Local Time
        $('.toLocalTime').each(function () {
            var element = $(this);
            var currentValue = element.attr('data-value');
            if (!currentValue) {
                currentValue = element.text().trim();
                element.attr('data-value', currentValue);
            }
            var localTimeUtc = moment.utc(currentValue).toDate();
            element.html(displayDateWithFormat(localTimeUtc.valueOf(), true));
        });
    }

    function DisplayRate(rate) {
        if (rate === '0.8')
            return 'Normal';
        if (rate === '0.7')
            return 'Slow';
        return '';
    }

    function DisplayVolume(volume) {
        return volume * 10;
    }
    function selectStudents() {
        $studentsTable.find('input.select-student').attr('checked', false);
        studentsSelected.forEach(function (item) {
            $studentsTable.find('tr[data-student-id="' + item.studentId + '"] input.select-student').attr('checked', true);
        });
        var isCheckAll = studentsSelected.length > 0 && studentsSelected.length == $studentsTable.find('tbody tr[data-student-id]').length;
        $studentsTable.find('input#chkAllStudents').attr('checked', isCheckAll);
        $('#btnSubmitAssignmentRetake').attr('disabled', studentsSelected.length == 0)
    }
    function BuildDistrictSettings() {
        var urlDistrictSetting = '@Url.Action("TestSettings")?districtId=' + dictrictId + '&virtualTestID=' + virtualTestId;
        $("#aDistrictSetting").attr("href", urlDistrictSetting);
        $("#aDistrictSetting").show();
    }
    function getAssignmentData() {
        var vdata = {
            TestName: '@HttpUtility.HtmlDecode(HttpUtility.UrlDecode(Model.TestName))',
            SubjectName: '@Model.SubjectName',
            GradeName: '@Model.GradeName',
            DistrictId: dictrictId,
            StudentList: studentsSelected,
            TestId: @Model.CurrentVirtualTestID,
            OriginalTestId: @Model.OriginalVirtualTestID,
            AssignmentType: 2, // assign student
            TestRetakeNumber: testRetakeNumber || '@Model.TestRetakeNumber',
            RetakeType: '@Model.RetakeType',
            GUID: '@Model.GUID',
        };
        var dataReturn = JSON.stringify({ data: vdata, testPreferenceModel: testPreferenceModel });
        return dataReturn;
    }

    function LoadAssignmentResult() {
        var $divPopupTestResult = $('#divPopupTestResult');
        ShowBlock($divPopupTestResult, 'Loading');
        $.get('@Url.Action("LoadExistAssignmentForRetake", "TestAssignment", new { guid = Model.GUID })', function (html) {

            $divPopupTestResult.show();
            $divPopupTestResult.html(html);
            $divPopupTestResult.unblock();
            ReplaceLocalTime();
        });
    }
    function LoadStudenTable() {
        var $studentContent = $('#studentContent');
        ShowBlock($studentContent, 'Loading');
        $.get('@Url.Action("GetAssignmentRetakeStudentTable", "TestAssignment", new { guid = Model.GUID })', function (html) {

            $studentContent.html(html);
            initStudentTable();
            $studentContent.unblock();
            ReplaceLocalTime();
        });
    }

    function initStudentTable() {
        studentsSelected = [];
        $studentsTable = $('#studentsDataTable');
        $studentsTable.on('click', '#chkAllStudents', handleCheckAll);
        $studentsTable.on('click', '.select-student', handleCheckSingle);
        handleSelectAllStudents();
    }
</script>
