@model LinkIt.BubbleSheetPortal.Web.ViewModels.TestAssignmentViewModel
@using LinkIt.BubbleSheetPortal.Web
@using LinkIt.BubbleSheetPortal.Common
@{
    ViewBag.Title = "Test Assignment";

    var cookie = Request.Cookies[Constanst.LKARCookie];
    var token = string.Empty;
    if (cookie != null) { token = cookie.Value; }
}
<style type="text/css">
    .positionAdd {
        position: relative;
        right: -6px;
        top: 26px;
    }

    button {
        margin-left: 30px;
    }

    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

    #studentContent {
        position: relative;
    }

    .coolfieldset, .coolfieldset.expanded {
        border: 1px solid #aaa;
    }

        .coolfieldset.collapsed {
            border: 0;
            border-top: 1px solid #aaa;
        }

        .coolfieldset legend {
            padding-left: 13px;
            font-weight: bold;
            cursor: pointer;
        }

        .coolfieldset legend, .coolfieldset.expanded legend {
            background: transparent url(/Content/themes/base/images/expanded.gif) no-repeat center left;
            background-size: 10px 10px;
        }

        .coolfieldset.collapsed legend {
            background: transparent url(/Content/themes/base/images/collapsed.gif) no-repeat center left;
            background-size: 10px 10px;
        }

    #ui-datepicker-div {
        z-index: 1051 !important;
    }

    /* css for timepicker */
    .ui-datepicker .ui-datepicker-header {
        top: 0px;
    }

    .ui-datepicker .ui-datepicker-prev span,
    .ui-datepicker .ui-datepicker-next span {
        background-image: url("/Content/themes/base/images/ui-icons_222222_256x240.png");
    }

    .ui-datepicker .ui-icon {
        width: 16px;
        height: 16px;
    }

    .ui-timepicker-div .ui-widget-header {
        margin-bottom: 8px;
    }

    .ui-timepicker-div dl {
        text-align: left;
    }

        .ui-timepicker-div dl dt {
            float: left;
            clear: left;
            padding: 0 0 0 5px;
        }

        .ui-timepicker-div dl dd {
            margin: 0 10px 10px 63px;
        }

    .ui-timepicker-div td {
        font-size: 90%;
    }

    .ui-tpicker-grid-label {
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    .ui-timepicker-rtl {
        direction: rtl;
    }

        .ui-timepicker-rtl dl {
            text-align: right;
            padding: 0 5px 0 0;
        }

            .ui-timepicker-rtl dl dt {
                float: right;
                clear: right;
            }

            .ui-timepicker-rtl dl dd {
                margin: 0 45% 10px 10px;
            }

    .ui-timepicker-div .ui-widget-header {
        top: 0px;
        background: url("images/ui-bg_highlight-soft_75_cccccc_1x100.png") repeat-x scroll 50% 50% #CCCCCC !important;
    }

    .colx2-left .lblrepeat {
        line-height: 0px;
        padding-top: 7px;
    }

    .colx2-left .lblend {
        line-height: 0px;
        padding-top: 5px;
    }

    .clear10 {
        clear: both;
        height: 10px;
    }

    .tr-odd td {
        background: none repeat scroll 0 0 #F2F2F2 !important;
    }

    .tr-even td {
        background: none repeat scroll 0 0 #E6E6E6 !important;
    }

    #divDeadline select[disabled] {
        background: #f2f2f2;
    }
    #selectTest {
        word-break: break-word;
        white-space: break-spaces;
        border-color: transparent;
    }
    #studentContent #expandCollapse {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
        font-weight: bold;
        color: #808080;
    }

        #studentContent #expandCollapse:after {
            content: ' ';
            background: #e7e7e7 url(/Content/themes/base/images/expanded.gif) no-repeat center right;
            background-size: 10px 10px;
            display: inline-block;
            width: 10px;
            height: 10px;
            margin-left: 2px;
        }

        #studentContent #expandCollapse:hover {
            color: #333333;
        }

        #studentContent #expandCollapse.collapsed:after {
            -webkit-transform: rotate(90deg);
            -ms-transform: rotate(90deg);
            transform: rotate(90deg);
        }
        .block-text-name.test-name {
            float: left;
        }
        #btnPreview {
            margin-top: -3px !important;
        }

        .tutorial-mode-tooltip {
            max-width: 800px !important;
            border-radius: 0px !important;
        }

</style>
<style>
    #generateContent .blockElement {
        position: fixed !important;
        width: 30% !important;
        left: 35% !important;
        top: 45% !important;
    }
</style>
<script src="@Url.Content("~/Scripts/jquery.listSplitter.js")" type="text/javascript"></script>
<script src="@Url.Content("~/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/TestDesign/testSchedule.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/constants.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/test-schedule.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/TestPreferences/testPreferences.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Qtip/jquery.qtip.js")"></script>
<link href="@Url.Content("~/Scripts/Qtip/jquery.qtip.css")" rel="stylesheet" type="text/css">

<article class="container_12">
    <section class="grid_12">
        <div id="generateContent" class="block-border">
            @using (Html.BeginForm("index", "TestAssignment", FormMethod.Post, new { id = "TestAssignmentForm", @class = "block-content form bubbleSheetSelector" }))
            {
                <h1>@LocalizeHelper.Localized("AssignOnlineTest")</h1>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                if (Model.IsPublisher || Model.IsNetworkAdmin)
                {
                    <fieldset id="publisherContent" class="grey-bg">
                        <legend>Select State/@LabelHelper.DistrictLabel</legend>
                        <div class="columns">
                            <div class="colx2-left">
                                <div class="margin-bottom-dropdown">
                                    <label>State</label>
                                    <div class="block-text-name">
                                        <select id="selectState"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="colx2-right">
                                <div class="margin-bottom-dropdown">
                                    <label>@LabelHelper.DistrictLabel</label>
                                    <div class="block-text-name">
                                        <select id="selectDistrict"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </fieldset>
                }
                else
                {
                    <input id="hdfDistrictId" value="@Model.DistrictId" type="hidden" />
                }
                <fieldset class="grey-bg" id="fsSelectTest">
                    <legend>@LocalizeHelper.Localized("AssignOnlineTest.SelectTest")</legend>
                    <div class="columns">
                        <div class="colx2-left">
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Grade")</label>
                                <div class="block-text-name">
                                    <select id="selectGrade"></select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Subject")</label>
                                <div class="block-text-name">
                                    <select id="selectSubject"></select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="colx2-right">
                            <div class="margin-bottom-dropdown">
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Bank")</label>
                                <div class="block-text-name">
                                    <select id="selectBank"></select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label>@LocalizeHelper.Localized("AssignOnlineTest.Test")</label>
                                <div class="block-text-name test-name">
                                    <select id="selectTest"></select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>


                                <button id="btnPreview" type="button" onclick="previewTest()" style="margin-left:0px" disabled="disabled">@LocalizeHelper.Localized("AssignOnlineTest.PreviewTest")</button>
                            </div>
                        </div>
                    </div>
                    <div>
                        @if (Model.IsShowTutorialMode)
                        {
                            <p>
                                <input type="checkbox" id="chkTutorialMode" />
                                <label for="chkTutorialMode"><b>Tutorial Mode:</b></label> I do not want this test to be graded or shown in Reporting. I only want to administer it for practice purposes.
                            </p>
                        }
                    </div>
                </fieldset>
                <div class="clear"></div>
                <fieldset class="grey-bg" id="fsStudentSelect">
                    <legend>@LocalizeHelper.Localized("AssignOnlineTest.SelectStudents")</legend>
                    <div class="columns">
                        <div>
                            <p>
                                <input id="radioSingleClass" type="radio" name="classSelection" checked="checked" onclick="ChooseSingleClass();" />
                                <label for="radioSingleClass"><b>Class Assignment: </b></label>
                                Assign test to all or some students in a selected class.
                            </p>
                            <p>
                                <input id="radioMultiClass" type="radio" name="classSelection" onclick="ChooseMultiCLass();" />
                                <label for="radioMultiClass"><b>Group Assignment: </b></label>
                                Select this option to bulk assign the selected test to multiple classes. Once a group is defined,
                                a test assignment can be generated for each class or each student depending on whether the "Student Level Assignment" box is checked.
                            </p>
                            <fieldset style="border: 1px solid gray;">
                                <legend>@LocalizeHelper.Localized("AssignOnlineTest.Options")</legend>
                                @{ string cssStyle = Model.EnableStudentLevelAssignment == true ? "block" : "none"; }
                                <p style="display: @cssStyle;">Select at most one of the following options:</p>

                                <p style="display: @cssStyle;">
                                    <input id="cbStudentLevelAssignment" type="checkbox" onclick="checkStudentLevelAssignment();" title="Student Level Test Assignment" />
                                    <label for="cbStudentLevelAssignment"><b>Student Level Assignment</b></label>
                                    Check this box to generate individual test assignments for each student in the class or group. Uncheck this box to generate a single test assignment for each class.
                                </p>
                                <p>
                                    @if (Model.UseRostersAtTimeOfTestTaking)
                                    {
                                        <input type="checkbox" id="chkUseRoster" checked="checked" onclick="checkUseRoster();" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="chkUseRoster" onclick="checkUseRoster();" />
                                    }
                                    <label for="chkUseRoster"><b>@Model.UseRostersAtTimeOfTestTakingWording</b></label>
                                    Check this box if you want students to be automatically determined at the time of test taking, or uncheck this box to make changes to your assignment list.
                                </p>
                            </fieldset>
                        </div>
                    </div>
                    <div class="columns" id="divMultibleClasses" style="display: none;">
                        <p id="selectedPrintingGroupContainer" style="float: left; margin-bottom: -10px; display: none">
                            <strong>Currently Selected Group: </strong><span id="currentlySelectedPrintingGroup"></span>
                        </p>
                        <div id="divbtnAddNewGroup" class="colx2-right" style="display: none;">
                            <p style="margin-top: -30px; float: right; margin-bottom: -10px;">
                                <img class="positionAdd" src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")" alt="#" />
                                @Html.ActionLink("ADD NEW GROUP", "AddEditPrintingGroup", "GroupPrinting", null, new { id = "addNewGroup", @class = "openDialog addGroupButton", data_dialog_id = "printingGroupDialog", data_dialog_title = "" })
                            </p>
                        </div>
                    </div>
                    <div id="divSingleClass" class="columns">
                        <div class="columns">
                            <div class="colx2-left">
                                <div class="margin-bottom-dropdown">
                                    <label>@LocalizeHelper.Localized("AssignOnlineTest.School")</label>
                                    <div class="block-text-name">
                                        <select id="selectSchool"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                                @if (Model.CanSelectTeachers || Model.IsSchoolAdmin)
                                {
                                    <div class="margin-bottom-dropdown">
                                        <label>@LocalizeHelper.Localized("AssignOnlineTest.Teacher")</label>
                                        <div class="block-text-name">
                                            <select id="selectTeacher"></select>
                                            <div class="box-select">
                                                <span class="overlay"></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="colx2-right">
                                <div class="margin-bottom-dropdown">
                                    <label>
                                        @LocalizeHelper.Localized("AssignOnlineTest.Term")
                                    </label>
                                    <div class="block-text-name">
                                        <select id="selectTerm"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="margin-bottom-dropdown">
                                    <label>@LocalizeHelper.Localized("AssignOnlineTest.Class")</label>

                                    <div class="block-text-name">
                                        <select id="selectClass"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="columns">
                        </div>
                    </div>
                    <div id="studentContent" style="display: none">
                        <div>
                            <span id="expandCollapse" class="float-right">Collapse</span>
                            <label>
                                Only students selected below will be able to take the test
                            </label>
                        </div>
                        <div class="tabs-content" style="margin-bottom: 10px;">
                            <div class="columns" id="studentsList">
                                <ul id="students" class="generate-student-list generate-student-list-custom with-icon icon-user student-col"></ul>
                            </div>
                            <div class="clear"></div>
                        </div>
                        <div id="btnControlSelectStudent" style="margin-top: 10px;">
                            <button id="btnSelectAll" type="button" name="select-all" onclick="selectAllStudents()">Select All</button>
                            <button id="btnSelectNone" type="button" name="select-none" onclick="selectNoStudents()">Select None</button>
                            <button id="btnInvertSelect" type="button" name="invert-select" onclick="invertSelectedStudents()">Invert Selection</button>
                        </div>
                        <div id="overStudentContent"></div>
                    </div>
                    <div id="divMultiClass" style="display: none;"></div>
                </fieldset>
                <fieldset class="grey-bg coolfieldset" id="fsSelectOption" style="display: none">
                    <legend style="text-transform: capitalize;" id="lgSelectOption">Preferences in Effect</legend>
                    <input type="hidden" id="hdfChangedDefaultSetting" value="0" />
                    <div id="divDefaultSetting"></div>
                    <div class="columns" id="divButtonOption">
                        <div class="colx2-left">
                        </div>
                        <div class="colx2-right">
                            <p>
                                <a style="display: none; margin-top: 10px; float: right; text-align: center;" id="aDistrictSetting" class="openDialog addGroupButton LinkitStypeButton big-button" data-dialog-id="SettingsDialog" data-dialog-title="" title="Change">Change</a>
                                <button id="btnChangeSettingGray" disabled="disabled" style="display: none; margin-top: 10px; float: right;">Change</button>
                            </p>
                        </div>
                    </div>
                    <div class="clear"></div>
                </fieldset>

                <button class="float-right" id="btnSubmit" type="submit" disabled="disabled">@LocalizeHelper.Localized("AssignOnlineTest.Assign")</button>

                <div class="clear"></div>
                <div id="divPopupTestResult"></div>
                <input type="hidden" value="0" id="hdfLoadExistAssingment" />
                <input type="hidden" value="" id="hdfPreferenceLevel" />
                <input type="hidden" value="TestAssignmentPage" id="hdfTestAssignmentPage" />
            }
        </div>
    </section>
</article>
<div id="popupConfirm111" style="display: none;">
    <section style='z-index: 2004'>
        <div class='block-border' style='z-index: 2004'>
            <div class='block-content' style='z-index: 1004'>
                <h1>Create PDF</h1>
                <p style='z-index: 1004; text-align: center'>
                    Successfully created PDF.
                </p>
                <br />
                <p style='z-index: 2004; text-align: center'>
                    <a id='aGeneratePDFSuccess' style='z-index: 2004; text-align: center' href='www.google.com' target='_blank' class='LinkitStypeButton big-button'>OK </a>
                </p>
            </div>
        </div>
    </section>
</div>

<script type="text/javascript">
    var nagivationMethod = {
        Linear: 1,
        NormalBranching: 2,
        SectionBasedBranching: 3,
        AlgorithmicBranching: 4
    }
    var amountOfCodesThatShouldShowWarning = 1000;
    var testPreferenceModel = null;
    var testExtractOptions = null;
    var testSchedule = new testSchedule('@ViewBag.DateFormat');
    $('#fsSelectOption').coolfieldset();
    var isRequestTeacherProcessing = false;

    $(function () {
        $("#selectDeadline").datepicker({
            dateFormat: '@ViewBag.DateFormat' ? '@ViewBag.DateFormat' : 'M d, yy',
            beforeShow: function (input) {
                $(input).css({
                    "position": "relative",
                    "z-index": '2000'
                });

                var tagActive = $(input).parents('body').find('#ui-datepicker-div');
                tagActive.find('.ui-state-highlight').css('min-height', 'auto');
                tagActive.addClass('customCssDataPickerPreference');
            }
        }); //TODO: for Edit Setting
        $('#fsSelectOption').coolfieldset({ collapsed: true });
        if ($('#radioMultiClass:checked').val() == 'on') {
            ChooseMultiCLass();
        } else {
            ChooseSingleClass();
        }

        $(document).ready(function () {
            $('#selectSchool').marquee();
            $('#selectTeacher').marquee();
            $('#selectDistrict').marquee();
            $('#selectBank').marquee();
            $('#selectTerm').marquee();
            $('#selectClass').marquee();
            $('#selectTest').marquee();
            $('#selectState').marquee();
            $('#selectGrade').marquee();
            $('#selectSubject').marquee();

            $(".openDialog").live("click", function (e) {
                e.preventDefault();
                $("<div></div>")
                    .addClass("dialog")
                    .attr("id", $(this)
                        .attr("data-dialog-id"))
                    .appendTo("body")
                    .dialog({
                        title: $(this).attr("data-dialog-title"),
                        close: function () {
                            $(this).remove();
                            $("body .my-overlay").remove();
                        },
                        open: function (event, ui) {
                            //Create overlay for Jquery dialog
                            $(this).dialog({ position: 'top' });
                            $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:100%;height:' + $('body').height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                        },
                        modal: false,
                        width: 1000,
                        resizable: false
                    })
                    .load(this.href, function () {
                    });
            });

            $(".close").live("click", function (e) {
                e.preventDefault();
            });

            $("#btnCancel").live("click", function (e) {
                e.preventDefault();
                $(".dialog").dialog("close");
            });

            $("#btnRemove").live("click", function (e) {
                e.preventDefault();
                RemoveClassInGroupSelected();
            });

            $("#btnAddClass").live("click", function (e) {
                e.preventDefault();
                AddClassToGroup();
            });

            $("#btnContinue").live("click", function (e) {
                e.preventDefault();
                ValidGroupName();
            });

            if ('@Model.IsShowTutorialMode' == 'True') {
                $('#IsShowTutorialMode').show();
            }
        });

        @if (Model.IsPublisher||Model.IsNetworkAdmin)
        {
            <text>
        $('#selectState').change(function () {

            $('#fsSelectOption').hide();

            $('#selectDistrict').empty();
            $('#selectGrade').empty();
            $('#selectSubject').empty();
            $('#selectBank').empty();
            $('#selectTest').empty();

            $('#selectSchool').empty();
            $('#selectTeacher').empty();
            $('#selectTerm').empty();
            $('#selectClass').empty();
            $('#studentContent').hide();
            $('#students').html('');

            if ($('#selectState').val() != 'select') {
                populateDistricts();
            }
            //LoadSettingDefault(false);
            //TODO: Check Valid Assign
            CheckValidToAssign();
            // Reload printing group list ( when Group Assignment is checked)
            $('#selectDistrict').trigger("change");

        });

        function populateDistricts() {
            $('#selectDistrict').empty();
            var stateValue = $('#selectState').val();
            if (stateValue != 'select') {
                if ('@Model.IsPublisher' === 'True') {
                    $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                        addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                        addSelectListItems($('#selectDistrict'), districts);
                    });
                }
                if ('@Model.IsNetworkAdmin' === 'True') {
                    $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                        addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                        addSelectListItems($('#selectDistrict'), districts);
                    });
                }
            }
        }
        </text>
        }

        @if (Model.IsAdmin || Model.CanSelectTeachers || Model.IsSchoolAdmin)
        {
            <text>
        $('#selectSchool').change(function () {
            $('#selectTeacher').empty();
            $('#selectTerm').empty();
            $('#selectClass').empty();
            $('#studentContent').hide();
            $('#students').html('');
            if ($('#selectSchool').val() != 'select') {
                populateTeachers();
            }
            //LoadSettingDefault(false);
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectTeacher').change(function () {
            $('#selectClass').empty();
            $('#selectTerm').empty();
            $('#selectClass').empty();
            $('#studentContent').hide();
            $('#students').html('');
            populateTermsByTeacherAndSchool();
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        function populateTermsByTeacherAndSchool() {
            $('#selectTerm').empty();
            var teacherValue = $('#selectTeacher').val();
            var schoolValue = $('#selectSchool').val();
            if (teacherValue != 'select') {
                $.get('@Url.Action("GetTerms", "PopulateStudent")', { userId: teacherValue, schoolId: schoolValue }, function (terms) {
                    var teacherValue = $('#selectTeacher').val();
                    if (teacherValue != 'select' && !isRequestTeacherProcessing) {
                        addDefaultOption($('#selectTerm'), "@LabelHelper.Term");
                        addSelectListItems($('#selectTerm'), terms);
                    }
                });
            }
        }
        </text>
        }
        else
        {
            <text>
        $('#selectSchool').change(function () {
            $('#studentContent').hide();
            $('#students').html('');
            $('#selectClass').empty();
            $('#selectTerm').empty();
            var schoolValue = $('#selectSchool').val();
            if (schoolValue != 'select') {
                $.get('@Url.Action("GetTerms", "PopulateStudent")', { userId: null, schoolId: schoolValue }, function (terms) {
                    var teacherValue = $('#selectTeacher').val();
                    if (teacherValue != 'select' && !isRequestTeacherProcessing) {
                        populateTerms(terms);
                    }
                });
            }
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });
        </text>
        }

        @if (Model.IsPublisher)
        {
            <text>
        $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
            populateStates(states);
        });
        </text>
        }
        else
        {
            if(Model.IsNetworkAdmin)
             {
                 <text>
        $.get('@Url.Action("GetStatesByDictricIds", "PopulateStateDistrict")', { dictricIds: '@Model.StrIds' }, function (states) {
            populateStates(states);
        });
        </text>
             }
            <text>
        if ('@Model.IsNetworkAdmin' == 'False') {
            $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', function (schools) {
                populateSchools(schools);
                var schoolValue = $('#selectSchool').val();
                if (schoolValue != 'select') {
                    $.get('@Url.Action("GetTerms", "PopulateStudent")', { userId: null, schoolId: schoolValue }, function (terms) {
                        var teacherValue = $('#selectTeacher').val();
                        if (teacherValue != 'select' && !isRequestTeacherProcessing) {
                            $('#selectTerm').empty();
                            populateTerms(terms);
                        }
                    });
                }
            });
        }
        BuildDistrictSettings($('#hdfDistrictId').val());
        if ('@Model.IsNetworkAdmin' == 'False') {
            $.get('@Url.Action("GetGradesByDistrictCustomOrder", "PopulateTest")', { districtId: '-1' }, function (grades) {
                populateGrades(grades);
            });
        }
        </text>
        }

        @*$.get('@Url.Action("GetGrades", "PopulateTest")', function (grades) {
            populateGrades(grades);
        });*@

        function populateGradesByDistrict() {
            $('#selectGrade').empty();
            $('#selectSubject').empty();
            var districtValue = $('#selectDistrict').val();
            if (districtValue == null || districtValue == 'select' || districtValue <= 0) {
                return;
            }
            if (districtValue != 'select') {
                $.get('@Url.Action("GetGradesByDistrictCustomOrder", "PopulateTest")', { districtId: districtValue }, function (grades) {
                    //populateSchools(schools);
                    populateGrades(grades);
                });
            }
        }
        function setDefaultUseRoster(districtId) {
            if (districtId == null || districtId == 'select' || districtId <= 0) {
                return;
            }
            $.get('@Url.Action("GetDefaultUserRosterValue")', { districtId: districtId }, function (result) {
                if (result != undefined) {
                    $('#chkUseRoster').prop("checked", result);
                }
            });
        }

        function showHideTutorialMode(districtId) {
            if (districtId == null || districtId == 'select' || districtId <= 0) {
                return;
            }

            $.get('@Url.Action("GetIsShowTutorialMode")', { districtId: districtId }, function (isShowTutorialMode) {
                if (isShowTutorialMode)
                    $('#IsShowTutorialMode').show();
                else
                    $('#IsShowTutorialMode').hide();
            });
        }

        $('#selectDistrict').change(function () {
            $('#selectGrade').empty();
            $('#selectSubject').empty();
            $('#selectBank').empty();
            $('#selectTest').empty();

            $('#selectSchool').empty();
            $('#selectTeacher').empty();
            $('#selectTerm').empty();
            $('#selectClass').empty();

            $('#studentContent').hide();
            $('#students').html('');
            var districtId = $('#selectDistrict').val();
            showHideTutorialMode(districtId);
            setDefaultUseRoster(districtId);
            populateSchoolsByDistrict();
            populateGradesByDistrict();

            var url = '@Url.Action("AddEditPrintingGroup", "GroupPrinting")';
            url += '?districtId=' + districtId;
            $('.addGroupButton').attr('href', url);
            //\Reload Grade
            $("#selectGrade").val($("#selectGrade option:first").val());
            LoadSettingDefault(false);
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectGrade').change(function () {
            populateSubjects();
            LoadSettingDefault(false);
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectSubject').change(function () {
            populateBanks();
            LoadSettingDefault(false);
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectBank').change(function () {
            populateTests();
            //LoadSettingDefault(false);
            $('#fsSelectOption').hide();
            CheckIfBankLocked($(this).val());
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectTerm').change(function () {
            $('#studentContent').hide();
            populateClasses();
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectClass').change(function () {
            if ($('#radioSingleClass').is(':checked')) {
                populateStudents();
            } else {
                $('#studentContent').hide();
            }
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#selectTest').change(function () {
            var testId = $('#selectTest').val();
            if (testId != 'select' && testId != '') {

                BuildDistrictSettings();
                $.get('@Url.Action("CheckIfTestRequiresCorrection", "PopulateTest")', { testId: testId }, function (response) {
                    if (response.Success == 1 || response.Success == 2) {
                        var vMessage = 'One or more question has point possible larger than 25. Please check the test or contact technology@linkit.com for help';
                        if (response.Success == 1) {
                            vMessage = 'Please contact technology@linkit.com and have them fix the question ordering associated with test id ' + testId;
                        }
                        $("<section><div class='block-border'><div class='block-content'><h1>Error With Test</h1><p>" + vMessage + ".</p></div></div></section>")
                            .appendTo("article")
                            .dialog({
                                title: $(this).attr("data-dialog-title"),
                                close: function () { $(this).remove(); },
                                modal: true,
                                width: 500,
                                resizable: false
                            })
                            .load(this.href, function () {
                            });

                    }
                });
                $('#btnPreview').disableBt();
                LoadSettingDefault(false);
                CheckAuthorOfTest(testId, () => {
                    HandleTutorialModeVisibility();
                    CheckValidToAssign();
                });
            } else {
                $('#fsSelectOption').hide();
            }

            DisplayTeacherLed();
        });

        $('#selectSheetStyle').change(function () {
            if ($(this).val() == 2) {
                $('#divBubbleSize').hide();
                $('#bubbleFormat').hide();
            } else {
                $('#divBubbleSize').show();
                $('#bubbleFormat').show();
            }
        });

        $('#chkTutorialMode').change(function () {
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });

        $('#TestAssignmentForm').submit(function (e) {
            e.preventDefault();

            if (!allowAssigning()) {
                return;
            }

            //clear error message
            $("#error-messages").html('');
            $("#error-messages").hide();
            $('#btnSubmit').disableBt();
            ShowBlock($('#generateContent'), "Test Assignment");

            //check timeLimit
            var deadlineValue;
            $.each(testPreferenceModel.OptionTags, function (index, tag) {
                if (tag.Key == 'deadline') {
                    deadlineValue = tag.Value;
                }
            });
            //if (!!deadlineValue) {
                var today = new Date();
                deadlineValue = deadlineValue === '0' ? '': deadlineValue;
                var deadline = new Date(deadlineValue);
                if (deadline < today) {
                    CustomAlert('The time limit preference set for this assignment shows that the deadline for test taking has expired. You must adjust or remove the deadline prior to assigning the test. This expired deadline is likely a date that had been established as your default preference sometime in the past, but is no longer applicable. You should check your default preferences to make the proper updates.', true);
                    $('#generateContent').unblock();
                    CheckValidToAssign();
                    return;

                }
            //}

            var isTeacherLed = ($('#selectTest option:selected').attr('isTeacherLed') == 'true');
            var isLaunchTeacherLed = '@Model.IsLaunchTeacherLedTest' == 'True';
            if (isTeacherLed && isLaunchTeacherLed && $('#radioSingleClass').is(':checked')) {
                CheckTeacherLedAssignSameTest(isTeacherLed);
            } else {
                CheckAssignTest();
            }

            return;
        });

        $('#addNewGroup').click(function (event) {
            if ('@Model.IsPublisher' == 'True' || '@Model.IsNetworkAdmin' == 'True') {
                //Publisher and NetworkAdmin must select a @LabelHelper.DistrictLabel before adding new group
                var selectedDistrictId = $('#selectDistrict').val();
                if (selectedDistrictId == null || selectedDistrictId <= 0 || selectedDistrictId == 'select') {
                    CustomAlert('Please select a @LabelHelper.DistrictLabel first.');
                    if (event.stopPropagation) {
                        event.stopPropagation();
                    } else if (window.event) {
                        window.event.cancelBubble = true;
                    }
                    $('.addGroupButton').attr('href', "javascript:void(0)");
                } else {
                    var url = '@Url.Action("AddEditPrintingGroup", "GroupPrinting")';
                    url += '?districtId=' + selectedDistrictId;
                    $('.addGroupButton').attr('href', url);
                }
            }

        });

        $('#studentContent #expandCollapse').click(function () {
            var $btn = $(this);
            var $content = $btn.closest('#studentContent').find('.tabs-content');
            if ($btn.hasClass('collapsed')) {
                $btn.removeClass('collapsed');
                $content.show();
                $btn.text('Collapse');
            } else {
                $btn.addClass('collapsed');
                $content.hide();
                $btn.text('Expand');
            }
        })
    });

    function ChangeBtnSubmitText() {
        var btnTextBeforeChange = $('#btnSubmit').text();
        var isTeacherLed = $('#selectTest option:selected').attr('isTeacherLed');
        if (isTeacherLed === "true"
            && $('#radioSingleClass').prop('checked') == true
            && '@Model.IsDistrictAdmin' == 'False'
            && '@Model.IsNetworkAdmin' == 'False'
            && '@Model.IsLaunchTeacherLedTest' == 'True') {
            $('#btnSubmit').text("Launch");
        }
    }

    function CheckIfBankLocked(bankValue) {
        if (bankValue != 'select') {
            $.get('@Url.Action("CheckIfBankLocked", "Bank")', { bankId: bankValue }, function (response) {
                $('#selectBank').data('locked', response.Locked);
            });
        }
    }

    function CheckAuthorOfTest(virtualTestId, callback) {
        $.get('@Url.Action("CheckIfCurrentUserIsAuthor", "VirtualTest")', { virtualTestId }, function (response) {
            $('#selectTest').data('isAuthor', response.IsAuthor);
            callback && callback();
        });
    }

    function allowAssigning() {
        var isLocked = $('#selectBank').data('locked');
        var isAuthor = $('#selectTest').data('isAuthor');
        return isAuthor || !isLocked || $('#chkTutorialMode').length === 0 || !$('#chkTutorialMode').is(':checked') || ('@Model.IsTeacher' !== '@true' && '@Model.IsSchoolAdmin' !== '@true') ;
    }

    function HandleTutorialModeVisibility() {
        var tutorialMode = $('#chkTutorialMode');
        if (tutorialMode.length) {
            var isLocked = $('#selectBank').data('locked');
            var isAuthor = $('#selectTest').data('isAuthor');
            var enableTutorialMode = isAuthor || !isLocked || '@Model.IsTeacher' !== '@true' && '@Model.IsSchoolAdmin' !== '@true';
            tutorialMode.prop("disabled", !enableTutorialMode);
            if (enableTutorialMode) {
                tutorialMode.qtip('destroy', true);
            }
            else {
                tutorialMode.qtip({
                    content: {
                        text: 'The test that you have selected is in a locked bank. Tutorial Mode is not available.'
                    },
                    position: {
                        my: 'top left',
                        at: 'bottom center'
                    },
                    show: {
                        event: 'mouseover'
                    },
                    hide: {
                        event: 'mouseout',
                        fixed: true,
                        delay: 300
                    },
                    style: {
                        classes: 'qtip-bootstrap tutorial-mode-tooltip'
                    }
                });

                if (tutorialMode.is(':checked')) {
                    tutorialMode.prop("checked", false);
                    tutorialMode.trigger('change');
                }
            }
        }
    }

    function CheckAssignTestData() {
        var studentsIdSelected = [];
        var assignmentType = 1; //TODO: assign Class ( uncheck studen level )
        var groupId = 0;

        if ($('#radioMultiClass:checked').val() == 'on') {
            groupId = GetCurrentGroupSelected();

            if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
                assignmentType = 4; //TODO: test assign mulitible class
            } else {
                assignmentType = 3; //TODO: test assign mulitible class student (check student level)
            }
        } else if ($('#radioSingleClass:checked').val() == 'on') {
            $(".student-item[isSelected=yes]").each(function () {
                studentsIdSelected.push($(this).attr('studentId'));
            });
            if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
                assignmentType = 2; //TODO: test assign class student

            } else {

                assignmentType = 1; //TODO: test assign Single Class ( uncheck student level )
            }
        } else {
            assignmentType = 5; //TODO: Teacher Preview
        }
        var districtId = $('#hdfDistrictId').val();
        if (districtId == null || districtId === undefined) {
            districtId = $('#selectDistrict').val();
        }
        var vUseRoster = false;
        if (($('#radioSingleClass').is(":checked") && $('#chkUseRoster').is(":checked"))
            || ($('#radioMultiClass').is(":checked") && $('#chkUseRoster').is(":checked"))) {
            vUseRoster = true;
        }

        var vTutorialMode = 1;

        if ($('#chkTutorialMode').is(":checked")) {
            vTutorialMode = 2;
        }
        var vdata = {
            TestName: $("#selectTest option:selected").text(),
            SubjectName: $("#selectSubject option:selected").text(),
            GradeName: $("#selectGrade option:selected").text(),
            StateId: $('#selectState').val(),
            DistrictId: districtId,
            SchoolId: $('#selectSchool').val(),
            UserId: $('#selectTeacher').val() == null ? 0 : $('#selectTeacher').val(),
            GradeId: $('#selectGrade').val(),
            SubjectId: $('#selectSubject').val() != 'select' ? 1 : 0,
            BankId: $('#selectBank').val(),
            TestId: $('#selectTest').val(),
            DistrictTermId: $('#selectTerm').val(),
            ClassId: $('#selectClass').val(),
            StudentIdList: studentsIdSelected,
            AssignmentType: assignmentType,
            GroupId: groupId,
            IsUseRoster: vUseRoster,
            IsTutorialMode: vTutorialMode,
            IsLaunchTeacherLedTest:  '@Model.IsLaunchTeacherLedTest' == 'True'
        };
        return vdata;
    }

    // assignmentType values:
    // 1: Class assignment
    // 2: Class assignment (student level)
    // 3: MultiClass (group) assignment
    // 4: MultiClass (group) assignment (student level)
    // 5: Teacher preview
    function GetAssignmentData(assignmentType, vTutorialMode) {
        var studentsIdSelected = [];
        var groupId = 0;

        vTutorialMode = typeof vTutorialMode !== 'undefined' ?  vTutorialMode : 1;

        if (assignmentType == 1 || assignmentType == 2) {
            $(".student-item[isSelected=yes]").each(function () {
                studentsIdSelected.push($(this).attr('studentId'));
            });
        }

        if (assignmentType == 3 || assignmentType == 4) {
            groupId = GetCurrentGroupSelected();
        }

        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }

        var vUseRoster = false;
        if (($('#radioSingleClass').is(":checked") && $('#chkUseRoster').is(":checked"))
            || ($('#radioMultiClass').is(":checked") && $('#chkUseRoster').is(":checked"))) {
            vUseRoster = true;
        }

        var vdata = {
            TestName: $("#selectTest option:selected").text(),
            SubjectName: $("#selectSubject option:selected").text(),
            GradeName: $("#selectGrade option:selected").text(),
            StateId: $('#selectState').val(),
            DistrictId: districtId,
            SchoolId: $('#selectSchool').val(),
            UserId: $('#selectTeacher').val() == null ? 0 : $('#selectTeacher').val(),
            GradeId: $('#selectGrade').val(),
            SubjectId: $('#selectSubject').val() != 'select' ? 1 : 0,
            BankId: $('#selectBank').val(),
            TestId: $('#selectTest').val(),
            DistrictTermId: $('#selectTerm').val(),
            ClassId: $('#selectClass').val(),
            StudentIdList: studentsIdSelected,
            AssignmentType: assignmentType,
            GroupId: groupId,
            IsUseRoster: vUseRoster,
            IsTutorialMode: vTutorialMode,
            IsLaunchTeacherLedTest:  '@Model.IsLaunchTeacherLedTest' == 'True'
        };
        var dataReturn = JSON.stringify({ data: vdata, objTestPreferenceModel: testPreferenceModel });
        return dataReturn;
    }

    function UnAuthorizeLockedTestDialog() {
        var okButton = '<button style="width:63px;" onclick="UnAuthorizeClick();">Ok</button>';
        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>The test that you have selected is in a locked bank. Teacher Preview is not available.' +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + okButton + '</div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "unAuthorizeLockedTestDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $(this).remove();
                    $('#generateContent').unblock();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });
    }

    function ConfirmAssignTest(message, shouldShowGenerateCodeWarning) {
        var yesButton = '<button style="width:63px;" onclick="ConfirmedAssignTestClick(' + shouldShowGenerateCodeWarning+');">Yes</button>';
        var noBotton = '<button style="width:63px;" onclick="NoClick();">No</button>';
        var note = '<div style="font-size: 11px; line-height: 14px;padding-top:10px;">Note: If you are trying to assign this as a post-test, please have the original test author uncheck the "Overwrite Test Results" option in Test Design -> Test Properties</div>';
        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div>' + note + '<div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + '&nbsp;&nbsp;' + noBotton + '</div></div></div></section>';
        $('#generateContent .blockElement').hide();
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "confirmSubmitDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $(this).remove();
                    $('#generateContent').unblock();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });
    }

    function UnAuthorizeClick() {
        $('#generateContent').unblock();
        $('#btnSubmit').enableBt();
        $("#unAuthorizeLockedTestDialog").dialog("close");
    }

    function NoClick() {
        $('#generateContent').unblock();
        $('#btnSubmit').enableBt();
        $("#confirmSubmitDialog").dialog("close");
    }

    function ConfirmedAssignTestClick(shouldShowGenerateCodeWarning) {
        $("#confirmSubmitDialog").dialog("close");
        ShowBlock($('#generateContent'), "Test Assignment");
        AssignTest(shouldShowGenerateCodeWarning);
    }

    // assignmentType values:
    // 1: Class assignment
    // 2: Class assignment (student level)
    // 3: MultiClass (group) assignment
    // 4: MultiClass (group) assignment (student level)
    // 5: Teacher preview
    function GetAssignmentType() {
        var assignmentType = 0;

        if ($('#radioSingleClass:checked').val() == 'on') {
            if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
                assignmentType = 2;
            } else {
                assignmentType = 1;
            }
        } else if ($('#radioMultiClass:checked').val() == 'on') {
            if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
                assignmentType = 4;
            } else {
                assignmentType = 3;
            }
        } else
            assignmentType = 5;

        return assignmentType;
    }

    function AssignTest(shouldShowGenerateCodeWarning) {
        var vTestHaveGroup = $('#selectTest option:selected').attr('totalquestiongroup');
        if (($('#idNavigationMethodID').val() === nagivationMethod.NormalBranching || $('#idNavigationMethodID').val() === nagivationMethod.SectionBasedBranching || $('#idNavigationMethodID').val() === nagivationMethod.AlgorithmicBranching)
            && $('#lblbranchingTest').length && $('#lblbranchingTest').html() !== 'OFF'
            && vTestHaveGroup !== '0') {
            var vQuestionGroupBranchingMessage = 'When test branching is enabled, Question Group items will not appear on the same Test Taker screen. Each item in the Question Group will appear on a separate screen with the Question Group common content.';
            CustomAlert(vQuestionGroupBranchingMessage, true);
        }
        //--------------------------------------------

        var waitingMessage = shouldShowGenerateCodeWarning + '' === 'true' ? "This assignment may take a few minutes, please do not leave this page until it completes" : "Test Assignment";
        ShowBlock($('#generateContent'), waitingMessage);
        var assignmentType = GetAssignmentType();
        var vTutorialMode = 1;
        if ($('#chkTutorialMode').is(":checked")) {
            vTutorialMode = 2;
        }

        var vAssignmentDatadata = GetAssignmentData(assignmentType, vTutorialMode);

            $.ajax({
                url: '@Url.Action("Index")',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: vAssignmentDatadata,
                cache: false,
                success: function (response) {
                    $('#generateContent').unblock();
                    $('#btnSubmit').enableBt();
                    //TODO: Replace UTCTime to LocalTime
                    ReplaceLocalTime();
                    if (response.Success == true
                        && response.IsTeacherLed == true
                        && response.HyperLink !== ''
                        && '@Model.IsLaunchTeacherLedTest' == 'True') {
                        $('#generateContent').unblock();
                        if ('@Model.IsDistrictAdmin' == 'False' && '@Model.IsNetworkAdmin' == 'False') {
                            PopUpOnlineTearcherLed(response.HyperLink, response.TestCode);
                        }
                    }
                    else if (response.error) {
                        CustomAlert(response.error);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.status === 504) {
                        CustomAlert("This assignment will continue to generate. Please allow a few minutes for the process to complete.");
                    }
                    else {
                        CustomAlert(errorThrown);
                    }
                    $('#generateContent').unblock();
                },
                failure: function (response) {
                    CustomAlert(response);
                }
            }).done(function (response) {
                LoadAssignmentResult();
            });

    }

    function LoadAssignmentResult() {
        $('#hdfLoadExistAssingment').val('1');
        $.get('@Url.Action("LoadExistAssignment", "TestAssignment")', function (html) {
            var $divPopupTestResult = $('#divPopupTestResult');

            $divPopupTestResult.show();
            $divPopupTestResult.html(html);

            //TODO: Replace UTCTime to LocalTime
            ReplaceLocalTime();
        });
    }

    function ChooseSingleClass() {
        CheckStudentLevel();
        // Need disable for Localize Asssgin Button
        //$('#btnSubmit').html("Assign");
        HideGroupPrintingFunctionality();
        //keep status single class
        if ($('#selectClass').val() != null && $('#selectClass').val().length > 0) {
            populateStudents();
        }
        LoadSettingDefault(false);
        //TODO: Check Valid Assign
        CheckValidToAssign();
        ChangeBtnSubmitText();
    }

    function ChooseMultiCLass() {
        CheckStudentLevel();
        ShowBlock($('#generateContent'), "Loading Group List");
        $('#btnSubmit').html("Assign");
        $('#divMultiClass').load('@Url.Action("LoadListPrintingGroup", "GroupPrinting")', function (response) {
            $('#generateContent').unblock();
            if (response == false) {
                addErrorMessages(response);
            }
            $('#divUseRosterGroupId').show();

            $("#studentContent").hide();
            $("#divSingleClass").hide();
            $('#divMultibleClasses').show();
            $("#divMultiClass").show();
            $("#divbtnAddNewGroup").show();
            var districtId = $('#hdfDistrictId').val();
            if (districtId == null) {
                districtId = $('#selectDistrict').val();
            }
            //TODO: Check Valid Assign
            CheckValidToAssign();
        });
        LoadSettingDefault(false);
    }

    function previewTest() {
        var vAssignmentDatadata = GetAssignmentData(5);

        $.ajax({
                url: '@Url.Action("OnlineTestPreview", "TestAssignment")',
                traditional: true,
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: vAssignmentDatadata,
                cache: false,
                success: function (response) {
                    $('#generateContent').unblock();
                    if (response.error) {
                        CustomAlert(response.error);
                    }
                    else {
                        $('#divPopupTestResult').html('');
                        PopUpOnlineTearcherPreview(response.testtakerUrl);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    CustomAlert(errorThrown);
                    $('#generateContent').unblock();
                },
                failure: function (response) {
                    $('#generateContent').unblock();
                    CustomAlert(response.error);
                }
            });
    }

    function HideGroupPrintingFunctionality() {
        $('#divUseRosterGroupId').hide();

        $("#selectedPrintingGroupContainer").hide();
        $('#currentlySelectedPrintingGroup').html('');
        $("#divMultiClass").html("");
        $("#divSingleClass").show();
        $("#divMultiClass").hide();
        $("#divMultibleClasses").hide();
        $("#btnSubmit").show();
        $("#divbtnAddNewGroup").hide();
    }

    $.ajaxSetup({ cache: false });

    function populateSchoolsByDistrict() {
        $('#selectSchool').empty();
        var districtValue = $('#selectDistrict').val();
        if (districtValue == null || districtValue == 'select' || districtValue <= 0) {
            return;
        }
        if (districtValue != 'select') {
            $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', { districtId: districtValue }, function (schools) {
                populateSchools(schools);
            });
        }
    }

    function populateTeachers() {
        $('#selectTeacher').empty();
        var schoolValue = $('#selectSchool').val();
        if (schoolValue != 'select') {
            isRequestTeacherProcessing = true;
            $.get('@Url.Action("GetTeachers", "PopulateSchoolTeacher")', { schoolId: schoolValue, hasTermOnly: 'True' }, function (teachers) {
                isRequestTeacherProcessing = false;
                addDefaultOption($('#selectTeacher'), "Teacher");
                addSelectListWithDefaultValue($('#selectTeacher'), teachers, 'select', function (item) {
                    return (item.FirstName) ? item.LastName + ", " + item.FirstName + " (" + item.Name + ")" : item.LastName + " (" + item.Name + ")";
                });
            });
        }
    }

    function populateStates(states) {
        addDefaultOption($('#selectState'), "State");
        addSelectListItems($('#selectState'), states);
    }

    function populateDistricts(districts) {
        addDefaultOption($('#selectDstrict'), "@LabelHelper.DistrictLabel");
        addSelectListItems($('#selectDistrict'), districts);
    }

    function populateSchools(schools) {
        addDefaultOption($('#selectSchool'), "School");
        addSelectListItems($('#selectSchool'), schools);
    }

    function populateTerms(terms) {
        addDefaultOption($('#selectTerm'), "@LabelHelper.Term");
        addSelectListItems($('#selectTerm'), terms);
    }

    function populateGrades(grades) {
        $('#selectGrade').empty();
        addDefaultOption($('#selectGrade'), "@LabelHelper.GradeLabel");
        addSelectListItems($('#selectGrade'), grades);
    }

    function populateSubjects() {
        resetSubjects();
        var gradeValue = $('#selectGrade').val();
        var districtValue = 0;
        if ($('#selectDistrict').length && $('#selectDistrict').val() != null && $('#selectDistrict').val() != 'select') {
            districtValue = $('#selectDistrict').val();
        }
        if (gradeValue != 'select') {
            $.get('@Url.Action("GetSubjectsByGradeIdAndAuthorCustomOrder", "SearchBank")', { gradeId: gradeValue, districtId: districtValue }, function (subjects) {
                addDefaultOption($('#selectSubject'), "@LabelHelper.Subject");
                addSelectListItems($('#selectSubject'), subjects);
            });
        }
    }

    function populateBanks() {
        resetBanks();
        var subjectValue = $('#selectSubject').val();
        var districtValue = 0;
        if ($('#selectDistrict').length) {
            districtValue = $('#selectDistrict').val();
        }
        var gradeValue = $('#selectGrade').val();
        if (subjectValue != 'select') {
            $.get('@Url.Action("GetBanksBySubjectNameCustomOrder", "SearchBank")', { subjectName: subjectValue, districtId: districtValue, gradeId: gradeValue, moduleCode : RestrictionModule.ASSIGNTEST }, function (banks) {
                addDefaultOption($('#selectBank'), "Bank");
                addSelectListItems($('#selectBank'), banks);
            });
        }
    }

    function populateTests() {
        $('#selectTest').empty();
        var bankValue = $('#selectBank').val();
        var districtId = $('#selectDistrict').val();

        if (!districtId) districtId = 0;
        if (bankValue != 'select') {

            $.get('@Url.Action("GetTestsForTestAssignmentCustomOrder", "PopulateTest")', { bankId: bankValue, districtId: districtId, moduleCode: RestrictionModule.ASSIGNTEST }, function (tests) {
                addDefaultOption($('#selectTest'), "Test");
                addSelectListItemsForTestAssignment($('#selectTest'), tests);
            });
        }
    }

    function populateClasses() {
        $('#selectClass').empty();
        var termValue = $('#selectTerm').val();
        var teacherValue = $('#selectTeacher').val();
        var schoolValue = $('#selectSchool').val();
        if (termValue != 'select' && teacherValue != 'select' && schoolValue != 'select') {
            $.get('@Url.Action("GetClassesBySchoolTermUser", "PopulateStudent")', { termId: termValue, userId: teacherValue, schoolId: schoolValue }, function (classes) {
                var termValue = $('#selectTerm').val();
                var teacherValue = $('#selectTeacher').val();
                var schoolValue = $('#selectSchool').val();
                if (termValue != 'select' && teacherValue != 'select' && schoolValue != 'select') {
                    addDefaultOption($('#selectClass'), "Class");
                    addSelectListItems($('#selectClass'), classes);
                }
            });
        }
    }

    function resetSubjects() {
        $('#selectSubject').empty();
        resetBanks();
    }

    function resetBanks() {
        $('#selectBank').empty();
        $('#selectTest').empty();
    }

    function populateStudents() {
        var classValue = $('#selectClass').val();
        var $studentContent = $('#studentContent');

        $studentContent.show();

        if (classValue != 'select') {
            $.ajax({
                method: 'GET',
                url: '@Url.Action("GetStudentsActive", "PopulateStudent")',
                data: { classId: classValue },
                beforeSend: function () {
                    ShowBlock($('#fsStudentSelect'), 'Loading student');
                },
                success: function (students) {
                    $('#students').empty();
                    addStudentsToList($('#students'), students);

                    if ($('#chkUseRoster').is(":checked") || !$('#cbStudentLevelAssignment').is(":checked")) {
                        selectAllStudents();
                        onChangeRosterAndDisableButtons($('#chkUseRoster').is(":checked"));
                    }

                    CheckStudentLevel();

                    //TODO: enable button Assign
                    CheckValidToAssign();

                    $('#fsStudentSelect').unblock();
                },
                error: function () {
                    $('#fsStudentSelect').unblock();
                }
            });

            if ($('#radioMultiClass:checked').val() == 'on') {
                $studentContent.hide();
            }
        } else {
            $studentContent.hide();
        }
    }

    function addStudentsToList(el, students) {
        var $el = $(el);
        var studentHtml = [];

        for (var i = 0, len = students.length; i < len; i++) {
            var student = students[i];
            studentHtml.push('<li studentId="' + student.StudentId + '" class="student-item"><a href="javascript:void(0)">' + student.FullName + '</a></li>');
        }

        $el.html(studentHtml.join(''));
    }

    function selectAllStudents() {
        $('.student-col').children().attr('isselected', "yes");
        $('.student-col').children().css('background-color', "#82CAFA");
        //TODO: check Valid Assignment
        CheckValidToAssign();
    }

    function selectNoStudents() {
        $('.student-col').children().attr('isselected', "no");
        $('.student-col').children().css('background-color', "#f2f2f2");
        //TODO: check Valid Assignment
        CheckValidToAssign();
    }

    function invertSelectedStudents() {
        $('.generate-student-list li').each(function () {
            if ($(this).attr('isselected') == "yes") {
                $(this).attr('isselected', "no");
                $(this).css('background-color', "#f2f2f2");
            } else {
                $(this).attr('isselected', "yes");
                $(this).css('background-color', "#82CAFA");
            }
        });
        //TODO: check Valid Assignment
        CheckValidToAssign();
    }

    $('.generate-student-list li').live({
        mouseenter: function () {
            if ($(this).attr('isselected') == "yes") {
                $(this).css('background-color', "#75B6E1");
            }
            else {
                $(this).css('background-color', "#e0e0e0");
            }
        },
        mouseleave: function () {
            if ($(this).attr('isselected') == "yes") {
                $(this).css('background-color', "#82CAFA");
            }
            else {
                $(this).css('background-color', "#f2f2f2");
            }
        },
        click: function () {
            //TODO: Click Student Item
            if ($('#chkUseRoster').is(":checked")) {
                return;
            }
            if ($(this).attr('isselected') == "yes") {
                $(this).attr('isSelected', "no");
                $(this).css('background-color', "#e0e0e0");
            }
            else {
                $(this).attr('isSelected', "yes");
                $(this).css('background-color', "#75B6E1");
            }
            //TODO: check Valid Assignment
            CheckValidToAssign();
        }
    });

    function BuildDistrictSettings() {
        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }

        var isMulticlass = false;
        if ($('#radioMultiClass:checked').val() == 'on') {
            isMulticlass = true;
        }
        var vTestId = $('#selectTest').val();
        var bankId = $('#selectBank').val();

        var selectedVirtualTestID = $("#selectTest").val();
        var urlDistrictSetting = '@Url.Action("TestSettings")?districtId=' + districtId + '&virtualTestID=' + selectedVirtualTestID;
        $("#aDistrictSetting").attr("href", urlDistrictSetting);
        $("#aDistrictSetting").show();
    }

    function SelectAssignClassOrStudent() {
        if ($('#selectClass').val() != null && $('#selectClass').val().length > 0) {
            if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
                $('#chkUseRoster').prop('checked', false);

                if ($('#radioSingleClass').is(':checked')) {
                    $('#studentContent').show();
                } else {
                    $('#studentContent').hide();
                }
            }
        }

        CheckValidToAssign();

        if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
            selectNoStudents();
        }
        else {
            selectAllStudents();
        }
        onChangeRosterAndDisableButtons($('#chkUseRoster').is(":checked"));
    }

    function checkStudentLevelAssignment() {
        if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
            popUpStudentAssignmentConfirmation();
        } else {
            SelectAssignClassOrStudent();
        }
    }

    function checkUseRoster() {
        if ($('#chkUseRoster').is(':checked')) {
             $("#cbStudentLevelAssignment").prop("checked", false);
        }
    }

    function enableStudentLevelAssignment() {
        $('#chkUseRoster').prop("checked", false);
        SelectAssignClassOrStudent();
        closePopUpStudentAssignmentConfirmation();
    }

    function cancelStudentCheckbox() {
        $("#cbStudentLevelAssignment").prop("checked", false);
        closePopUpStudentAssignmentConfirmation();
    }

    function CheckStudentLevel() {
        if ($('#cbStudentLevelAssignment:checked').val() == 'on') {
            selectNoStudents();
            $('#chkUseRoster').prop('checked', false);

            $('#studentContent').show();
        }
    }

    function LoadSettingDefault(reload) {
        var vtestId = $('#selectTest').val();
        if (vtestId == 'select' || vtestId == '' || vtestId == null) {
            $('#fsSelectOption').hide();
            return;
        }

        var districtId = $('#hdfDistrictId').val();
        if (districtId == null) {
            districtId = $('#selectDistrict').val();
        }
        var bankId = $('#selectBank').val();
        var isMultiClass = false;
        if ($('#radioMultiClass:checked').val() == 'on') {
            isMultiClass = true;
        }
        var schoolId = $('#selectSchool').val();
        schoolId = (schoolId == 'select' || $('#radioMultiClass:checked').val() == 'on') ? 0 : schoolId;
        var groupClassId = GetCurrentGroupSelected();
        $('#divDefaultSetting').html('');
        $('#divButtonOption').hide();
        if (bankId > 0) {
            $('#divButtonOption').show();
            $.ajaxSetup({
                // Disable caching of AJAX responses
                cache: false
            });
            $('#divDefaultSetting').load('@Url.Action("DefaultSettings", "TestAssignment")', { districtId: districtId, testId: vtestId, schoolId: schoolId, groupClassId: groupClassId, isOldUI: true }, function (response) {
                $('#lgSelectOption').html('Preferences in Effect');

                $('#fsSelectOption').show();
                $('#btnPreview').enableBt();
                if (response == false) {
                    addErrorMessages(response);
                }
            });
        }
    }

    $(document).ready(function () {
        if ($('#hdfLoadExistAssingment').val() == '0') {
            $('#hdfLoadExistAssingment').val('1');
            $.get('@Url.Action("LoadExistAssignment", "TestAssignment")', function (html) {
                var $divPopupTestResult = $('#divPopupTestResult');

                $divPopupTestResult.show();
                $divPopupTestResult.html(html);

                //TODO: Replace UTCTime to LocalTime
                ReplaceLocalTime();
            });
        }
    });
</script>

<script>
    var dialog;
    $("#btnCreatePDF").live("click", function (e) {
        e.preventDefault();
        ShowBlock($('#divconfigGenerateTest'), "Creating PDF");
        var vColumns = 'single';
        if ($('#idTowColumns:checked').val() == 'on') {
            vColumns = 'double';
        }
        var vIncludePageNumbers = 0;
        if ($('#idcbIncludePageNumber:checked').val() == 'on') {
            vIncludePageNumbers = 1;
        }
        var vStartCountingOnCover = 0;
        if ($('#idStartCounting:checked').val() == 'on') {
            vStartCountingOnCover = 1;
        }
        var vIncludeCoverPage = 0;
        if ($('#idIncludeCoverPage:checked').val() == 'on') {
            vIncludeCoverPage = 1;
        }

        var vShowSectionHeadings = 0;
        if ($('#idShowSelectionHeading:checked').val() == 'on') {
            vShowSectionHeadings = 1;
        }
        var vShowQuestionBorders = 0;
        if ($('#idShowBorderAroundQuestion:checked').val() == 'on') {
            vShowQuestionBorders = 1;
        }
        var vDrawReferenceBackground = 0;
        if ($('#idShadeReference:checked').val() == 'on') {
            vDrawReferenceBackground = 1;
        }
        var vExtendedTextAreaAnswerOnSeparateSheet = 0;
        if ($('#idAnswerOn:checked').val() == 'on') {
            vExtendedTextAreaAnswerOnSeparateSheet = 1;
        }
        var vExtendedTextAreaShowLines = 0;
        if ($('#idShowLine:checked').val() == 'on') {
            vExtendedTextAreaShowLines = 1;
        }

        var vAnswerLabelFormat = 'LA';
        if ($('#idNumberic:checked').val() == 'on') {
            vAnswerLabelFormat = 'LN';
        }
        var vIncludeStandards = 0;
        if ($('#idIncludeStandards:checked').val() == 'on') {
            vIncludeStandards = 1;
        }
        var vIncludeTags = 0;
        if ($('#idIncludeTags:checked').val() == 'on') {
            vIncludeTags = 1;
        }
        //"http://portal.linkitdev.com/Content/FlashModules/ModuleLaunch/proc/linkit.php/printVirtualTestAnswerKey";
        //"http://portal.linkitdev.com/Content/FlashModules/ModuleLaunch/proc/linkit.php/printVirtualTest";
        var vURLPrintTest = $('#hdfPrintAnswerKeyURL').val();
        var vPrintType = $('#hdfPDFType').val();
        if (vPrintType == 'test') {
            vURLPrintTest = $('#hdfPrintTestURL').val();
        }

        var testDataPost =
        {
            StartCountingOnCover: vStartCountingOnCover,
            TestTitle: $('#TestTitle').val(),
            TeacherName: $('#idTeacherName').val(),
            IncludePageNumbers: vIncludePageNumbers,
            IncludeCoverPage: vIncludeCoverPage,
            Columns: vColumns,
            AnswerLabelFormat: vAnswerLabelFormat,
            IncludeStandards: vIncludeStandards,
            ShowQuestionBorders: vShowQuestionBorders,
            TestInstructions: $('#idTestInstructions').val(),
            ExtendedTextAreaShowLines: vExtendedTextAreaShowLines,
            IncludeTags: vIncludeTags,
            VirtualTestID: $('#VirtualTestID').val(),
            Instruction: '',
            ClassName: $('#idClassName').val(),
            DrawReferenceBackground: vDrawReferenceBackground,
            ExtendedTextAreaAnswerOnSeparateSheet: vExtendedTextAreaAnswerOnSeparateSheet,
            ShowSectionHeadings: vShowSectionHeadings,
            PrintingType: 1,
            QuestionPrefix: $('#idQuestionPrefix').val(),
            ExtendedTextAreaNumberOfLines: $('#idSelectLines').val(),
            Token: '@token'
        };
        $.support.cors = true;
        $.ajax({
            crossDomain: true,
            url: vURLPrintTest,
            type: 'POST',
            data: testDataPost,
            dataType: 'xml',
            success: function (response) {
                var rp = response.getElementsByTagName('pdfurl')[0].textContent;

                $("#aGeneratePDFSuccess").live("click", function (e) {
                    $(this).attr("href", rp);
                    $("#popupConfirm111").dialog("close");
                });

                dialog = $("#popupConfirm111")
                    .dialog({
                        title: $(this).attr("data-dialog-title"),
                        close: function () {
                            //$(this).remove();
                        },
                        modal: true,
                        width: 330,
                        resizable: false
                    })
                    .load(this.href, function () { });
                $('#divconfigGenerateTest').unblock();
            },
            failure: function (response) {
                $('#divconfigGenerateTest').unblock();
                CustomAlert("failure: " + response);
            },
            error: function (response) {
                $('#divconfigGenerateTest').unblock();
                CustomAlert("Error: " + response);
            }
        });

    });

    function getCookie(name) {
        var ckList = document.cookie.split("; ");
        for (var i = 0; i < ckList.length; i++) {
            var ck = ckList[i].split("=");
            if (ck[0] == name) {
                return unescape(ck[1]);
            }
        }
        return "";
    }

    $("#btnTestSettingSubmit").unbind('click');
    $("#btnTestSettingSubmit").live("click", function (e) {
        e.preventDefault();
        //check deadline time must be equal or greater than current time
        var vdeadline = '';
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDeadline:checked').length > 0) {
            vdeadline = BuildLocalDateTimeToUTC();
            var today = new Date();
            var deadline = new Date(vdeadline);
            if (deadline < today) {
                alertMessageSetting('Deadline must be equal or greater than current time.');
                return;
            }
        }

        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDurationOption:checked').length > 0 && ($("#durationId").val() == '' || $("#durationId").val() == '0')) {
            alertMessageSetting('Value must be provided.');
            return;
        }

        $("#btnTestSettingSubmit").disableBt();

        var isMulticlass = false;
        if ($('#radioMultiClass:checked').val() == 'on') {
            isMulticlass = true;
        }

        var isLockedbank = $('#hdfIsLockedBankId').val();

        var vdistrictId = 0;
        if ($('#hdfDistrictId').length) {
            vdistrictId = $('#hdfDistrictId').val();
        } else {
            if ($('#selectDistrict').val() != 'select')
                vdistrictId = $('#selectDistrict').val();
        }
        var highlightTextOption = $('input[name=SupportHighlightText]:checked').val() == "OFF" ? 0 : 1;
        if (highlightTextOption == 1) {
            highlightTextOption = $('input[name=SupportHighlightText]:checked').val() == "ONLYSTUDENT" ? 2 : 1;
        }
        var vDurationValue = 0;
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDurationOption:checked').length > 0) {
            vDurationValue = $("#durationId").val();
        }
        var vDisplayAnswerLables = '0';
        if ($('#DisplayAnswerLabelSingleSelect').is(':checked')) {
            if ($('#DisplayAnswerLabelMultiselect').is(':checked')) {
                vDisplayAnswerLables = '1';
            } else {
                vDisplayAnswerLables = '2';
            }
        } else {
            if ($('#DisplayAnswerLabelMultiselect').is(':checked')) {
                vDisplayAnswerLables = '3';
            } else {
                vDisplayAnswerLables = '0';
            }
        }

        var vOptions1 = {
            IslockedBank: isLockedbank,
            IsAssignGroup: isMulticlass,
            DistrictId: vdistrictId,
            SettingType: $('#selectSettingType').val(),
            VerifyStudent: $('input[name=vStudent]:checked').val() == "ON" ? 1 : 0,
            RequireTestTakerAuthentication: $('input[name=RequireTestTakerAuthentication]:checked').val() == "ON" ? 1 : 0,
            ShuffleQuestions: $('input[name=ShuffleQuestions]:checked').val() == "ON" ? 1 : 0,
            ShuffleAnswers: $('input[name=ShuffleAnswers]:checked').val() == "ON" ? 1 : 0,
            AutoAdvanceTest: $('input[name=AutoAdvance]:checked').val() == "ON" ? 1 : 0,

            MustAnswerAllQuestions: $('input[name=AnswerAllQuestions]:checked').val() == "ON" ? 1 : 0,
            CanReviewTest: $('input[name=CanReviewTest]:checked').val() == "ON" ? 1 : 0,
            CanPauseTest: $('input[name=CanPauseTest]:checked').val() == "ON" ? 1 : 0,
            DisplayAnswerLabels: vDisplayAnswerLables,
            AnswerLabelFormat: $('input[name=AnswerLabelFormat]:checked').val() == "ON" ? 1 : 0,
            OverrideAutoGradedTextEntry: $('input[name=OverrideAutoGradedTextEntry]:checked').val() == "ON" ? 1 : 0,
            PassagePositioninTestTaker: $('input[name=PassagePositioninTestTaker]:checked').val() == "LEFT" ? 1 : 0,
            SupportHighlightText: highlightTextOption,
            EliminateChoiceTool: $('input[name=EliminateChoiceTool]:checked').val() == "ON" ? 1 : 0,
            FlagItemTool: $('input[name=FlagItemTool]:checked').val() == "ON" ? 1 : 0,
            TimeLimit: $('input[name=TimeLimit]:checked').val() == "ON" ? 1 : 0,
            Duration: vDurationValue,
            Deadline: vdeadline,
            ShowTimeLimitWarning: $('input[name=ShowTimeLimitWarning]:checked').val() == "ON" ? 1 : 0,
            MultipleChoiceClickMethod: $('input[name=MultipleChoiceClickMethod]:checked').val() == "ClickAnswer" ? 1 : 0,
            EnableVideoControls: $('input[name=EnableVideoControls]:checked').val() == "ON" ? 1 : 0,
            TestExtract: '',
            LockedDownTestTaker: $('input[name=LockedDownTestTaker]:checked').val() == "ON" ? 1 : 0,
            EnableAudio: $('input[name=EnableAudio]:checked').val() == "ON" ? 1 : 0,
            SectionBasedTesting: $('input[name=SectionBasedTesting]:checked').val() == "ON" ? 1 : 0,
            AdaptiveTest: $('input[name=AdaptiveTest]:checked').val() == "ON" ? 1 : 0,
        };

        if ($('input[name=TestExtract]') != undefined) {
            vOptions1.TestExtract = $('input[name=TestExtract]:checked').val() == "ON" ? 1 : 0;
        }

        var vTestId = $('#selectTest').val();
        var vTools1 = {
            SimplePalette: $('input[name=simplePalette]:checked').val() == "ON" ? 1 : 0,
            MathPalette: $('input[name=mathPalette]:checked').val() == "ON" ? 1 : 0,
            SpanishPalette: $('input[name=spanishPalette]:checked').val() == "ON" ? 1 : 0,
            FrenchPalette: $('input[name=frenchPalette]:checked').val() == "ON" ? 1 : 0,
            Protractor: $('input[name=protractor]:checked').val() == "ON" ? 1 : 0,
            SupportCalculator: $('input[name=supportCalculator]:checked').val() == "ON" ? 1 : 0,
            ScientificCalculator: $('input[name=scientificCalculator]:checked').val() == "ON" ? 1 : 0,
        };

        var data = JSON.stringify({ vOptions: vOptions1, vTools: vTools1, testId: vTestId });

        $.ajax({
            url: '@Url.Action("TestSettings")',
            traditional: true,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: data,
            success: function (response) {
                if (response.Success != false) {
                    $('#hdfChangedDefaultSetting').val(1);
                    LoadSettingDefault(true); //TODO: Reload Default Setting
                    $(".dialog").dialog("close");
                }
                else {
                    //alert("Update That Bai");
                }
                $("#btnTestSettingSubmit").enableBt();
            },
            failure: function (response) {
                CustomAlert(response);
            }
        });
    });

    //TODO: Check Valid Assign
    function CheckValidToAssign() {
        // Check Selected Test
        var isShowAssignmentButton = false;
        var testId = $('#selectTest').val();
        if (testId == 'select' || testId == '' || testId == null) {
            $('#btnSubmit').attr("disabled", "disabled");
            $('#btnPreview').disableBt();
            return;
        }

        if (!allowAssigning()) {
            $('#btnSubmit').attr("disabled", "disabled");
            return;
        }

        // If Single Class
        if ($('#radioSingleClass').is(':checked')) {
            //TODO: Class Assignment
            var classId = $('#selectClass').val();
            if (classId == 'select' || classId == '' || classId == null) {
                $('#btnSubmit').attr("disabled", "disabled");
                return;
            }

            var studentsIdSelected = [];
            $(".student-item[isSelected=yes]").each(function () {
                studentsIdSelected.push($(this).attr('studentId'));
            });

            if (studentsIdSelected.length > 0 || $('#chkUseRoster').is(":checked")) {
                isShowAssignmentButton = true;
            }
        } else if ($('#radioMultiClass').is(':checked')) {
            //TODO: Group Assignment
            var groupId = GetCurrentGroupSelected();
            if (groupId > 0) {
                isShowAssignmentButton = true;
            }
        } else {
            // Teacher Review
            isShowAssignmentButton = true;
        }
        if (isShowAssignmentButton) {
            $('#btnSubmit').removeAttr("disabled");
        } else {
            $('#btnSubmit').attr("disabled", "disabled");
        }
    }

    function BuildLocalDateTimeToUTC() {
        var vDate = $("#selectDeadline").datepicker("getDate");
        vDate.setHours($("#selectHouse").val());
        vDate.setMinutes($("#selectMunite").val());
        return vDate.toISOString();
    }

    function alertMessageSetting(message) {
        var oldzIndex = $('#SettingsDialog').parent('.ui-dialog').css('z-index');
        $('#SettingsDialog').parent('.ui-dialog').css({ 'z-index': '1000' });
        var overlayHeight = $('.my-overlayy').height();
        //set the height for overlay
        $('.my-overlay').height(2000);

        var okButton = '<button style="width:63px;" onclick="closeAlert();">OK</button>';

        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + okButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#SettingsDialog').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value
                    $('.my-overlay').height(overlayHeight);
                    $(this).remove();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });

        showModalDialogBG();
    }

    function closeAlert() {
        $('#alertDialog').dialog('close');
    }

    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

    function onChangeRosterAndDisableButtons(isUseRouterChecked) {
        if (isUseRouterChecked) {
            $("#btnSelectAll").trigger('click');
            $("#btnSelectAll").prop("disabled", true);
            $("#btnInvertSelect").prop("disabled", true);
            $("#btnSelectNone").prop("disabled", true);
        } else {
            $("#btnSelectAll").prop("disabled", false);
            $("#btnInvertSelect").prop("disabled", false);
            $("#btnSelectNone").prop("disabled", false);
        }

        $('#chkUseRoster').val(isUseRouterChecked);
    }

    $('#chkUseRoster').change(function () {
        onChangeRosterAndDisableButtons($(this).is(":checked"));
    });

    function PopUpOnlineTearcherPreview(strUrl) {
        var oldzIndex = $('#idPopUpOnlineTearcherPreview').parent('.ui-dialog').css('z-index');
        $('#idPopUpOnlineTearcherPreview').parent('.ui-dialog').css({ 'z-index': '1000' });
        //set the height for overlay
        var yesButton = '<a class="LinkitStypeButton big-button" href="' + strUrl + '" target="_blank" style="width:63px;" onclick="closePopUpOnlineTearcherPreview();" >OK</a>';
        var strHtml = '<section class="grid_5"><div class="block-border" style="width: 300px;">' +
            '<div class="block-content form" style="padding-bottom: 1em; text-align: center;"><div>Test is ready for preview' +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "idPopUpOnlineTearcherPreview")
            .appendTo("body")
            .dialog({
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#idPopUpOnlineTearcherPreview').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value

                    $(this).remove();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 360,
                maxheight: 500,
                resizable: false,
            });
        showModalDialogBG();
    }

    function popUpStudentAssignmentConfirmation() {
        var oldzIndex = $('#popUpStudentAssignmentConfirm').parent('.ui-dialog').css('z-index');
        $('#popUpStudentAssignmentConfirm').parent('.ui-dialog').css({ 'z-index': '1000' });

        var yesButton = '<button class="LinkitStypeButton big-button" onclick="enableStudentLevelAssignment()">Yes</button>';
        var cancelBtn = '<button class="LinkitStypeButton big-button" onclick="cancelStudentCheckbox()">No</button>';

        var strHtml = '<section class="grid_5"><div class="block-border" style="width: 300px;">' +
            '<div class="block-content form" style="padding-bottom: 1em; text-align: center;">' +
        '<div> Are you sure you want to generate a different test assignment for each student in the class?</div>' +
            '<div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + cancelBtn + '</div>' +
            '</div ></section > ';

        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "popUpStudentAssignmentConfirm")
            .appendTo("body")
            .dialog({
                open: function () {
                    $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').remove()
                },
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#popUpStudentAssignmentConfirm').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value

                    $(this).remove();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 360,
                maxheight: 500,
                resizable: false,
            });
        showModalDialogBG();

    }

    function closePopUpStudentAssignmentConfirmation() {
        $('.ui-widget-overlay:last').remove();
        $('#popUpStudentAssignmentConfirm').parent('.ui-dialog').css({ 'z-index': 1 });//recover the old value
        $('#popUpStudentAssignmentConfirm').dialog('close');
        CheckValidToAssign();
    }

    function closePopUpOnlineTearcherPreview() {
        $('.ui-widget-overlay:last').remove();
        $('#idPopUpOnlineTearcherPreview').parent('.ui-dialog').css({ 'z-index': 1 });//recover the old value
        $('#idPopUpOnlineTearcherPreview').dialog('close');
        CheckValidToAssign();
        $('#btnPreview').enableBt();
    }

    function BuildFormatDeadline() {
        try {
            var tmp = new Date($('#hdfDdeadlineId').val());
            var vMonth = parseInt(tmp.getMonth()) + 1;
            var vMinutes = parseInt(tmp.getMinutes());
            var strMinutes = vMinutes.toString();
            if (vMinutes < 10) {
                strMinutes = '0' + strMinutes;
            }
            var strAPM = 'AM';
            var vHouse = tmp.getHours();
            if (vHouse > 12) {
                vHouse = vHouse - 12;
                strAPM = 'PM';
            }

            var vString = tmp.toLocaleDateString() + ' ' + vHouse + ':' + strMinutes + ' ' + strAPM;
            return vString;
        } catch (e) {
            CustomAlert(e);
        }
    }

    function formatAMPM() {
        var date = new Date($('#hdfDdeadlineId').val());
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = date.toLocaleDateString()+ ' ' + hours + ':' + minutes + ' ' + ampm;
        return strTime;
    }
    function ReplaceLocalTime() {
        //Set Local Time
        $('.toLocalTime').each(function () {
            var element = $(this);
            var currentValue = element.text().trim();

            var localTimeUtc = moment.utc(currentValue).toDate();

            element.html(displayDateWithFormat(localTimeUtc.valueOf(), true));
        });
    }

    function DisplayRate(rate) {
        if (rate === '0.8')
            return 'Normal';
        if (rate === '0.7')
            return 'Slow';
        return '';
    }

    function DisplayVolume(volume) {
        return volume * 10;
    }

    function DisplayTeacherLed() {
        var isTeacherLed = $('#selectTest option:selected').attr('isTeacherLed');
        if (isTeacherLed === "true" && '@Model.IsLaunchTeacherLedTest' == 'True') {
            $('#chkUseRoster').prop("checked", true);
            $('#chkUseRoster').trigger("change");

            if ($('#radioMultiClass').prop('checked') == true) {
                $('#radioSingleClass').prop('checked', true);
                ChooseSingleClass();
                if ('@Model.IsDistrictAdmin' == 'False' && '@Model.IsNetworkAdmin' == 'False') {
                    $('#btnSubmit').text('Launch');
                }
            }

            $('#radioMultiClass').prop('disabled', true);
        } else {
            $('#radioMultiClass').prop('disabled', false);
        }

        ChangeBtnSubmitText();
    }

    function CheckTeacherLedAssignSameTest(isTeacherLed) {
        $.ajax({
            url: '@Url.Action("CheckTeacherLedAssignSameTest")',
            type: 'POST',
            data: { IsTeacherLed: isTeacherLed, AssignmentType: 1, TestId: $('#selectTest').val(), ClassId: $('#selectClass').val() },
            success: function (response) {
                if (response.Success == true) {
                    if (response.IsAssignSameTest == true && response.HyperLink !== '') {
                        if ('@Model.IsDistrictAdmin' == 'False' && '@Model.IsNetworkAdmin' == 'False') {
                            $('#generateContent').unblock();
                            PopUpOnlineTearcherLed(response.HyperLink, response.TestCode);
                        } else {
                            var message = "A test code " + response.TestCode + " has already been created for this assessment.Do you want to deactivate this code and assign a new one?";
                            ConfirmAssignTeacherLedTest(message);
                        }

                        $('#btnSubmit').enableBt();
                        return;
                    } else {
                        AssignTest();
                    }
                }
            },
            failure: function (data) {
                alert('Something went wrong! Please try again!')
            }
        });
    }
    function CheckAssignTest() {

        var vdata = CheckAssignTestData();
        $.ajax({
            url: '@Url.Action("CheckAssignTest")',
            traditional: true,
            type: 'POST',
            data: vdata,
            success: function (data) {

                var shouldShowGenerateCodeWarning = (data.CodesToBeGenerated || 0) >= amountOfCodesThatShouldShowWarning;

                if (data.IsMultipleTestResult || vdata.IsTutorialMode == 2) {
                    AssignTest();
                    return;
                }
                if (vdata.DistrictId != 2754 && data.IsCompatible == false) { //check ignored for Chyten
                    CustomAlert('The test you have selected is not compatible with online testing.');
                    $('#generateContent').unblock();
                    return;
                }

                if (data.IsTutorialLocked == true) {
                    CustomAlert('This test has been locked by an administrator and cannot be assigned as a student tutorial.');
                    $('#generateContent').unblock();
                    return;
                }

                if (data.AuthorizeForPreview != null) {
                    UnAuthorizeLockedTestDialog();
                } else if (data.StudentOnlineTest > 0 || data.StudentBBS > 0) {
                    var isGroupPrinting = false;
                    if ($('#radioMultiClass:checked').val() == 'on') {
                        isGroupPrinting = true;
                    }

                    var urlOnlineTest = '@Url.Action("TempAssignSameTest")';
                    urlOnlineTest += '?StudentIds=' + vdata.StudentIdList;
                    urlOnlineTest += '&TestId=' + vdata.TestId;
                    urlOnlineTest += '&DistrictID=' + vdata.DistrictId;
                    urlOnlineTest += '&GroupID=' + vdata.GroupId;
                    urlOnlineTest += '&ClassID=' + vdata.ClassId;

                    var urlBBS = '@Url.Action("TempAssignSameTest", "GenerateBubbleSheet")';
                    urlBBS += '?StudentIdList=' + vdata.StudentIdList;
                    urlBBS += '&TestId=' + vdata.TestId;
                    urlBBS += '&IsGroupPrinting=' + isGroupPrinting;
                    urlBBS += '&TestName=' + data.TestName;
                    urlBBS += '&GroupID=' + vdata.GroupId;
                    urlBBS += '&ClassId=' + vdata.ClassId;

                    if (data.StudentOnlineTest > 0 || data.StudentBBS > 0) {
                        var message = 'This test has already been assigned to';
                        if (data.StudentOnlineTest > 0)
                            message += ' <a style="color: #39c" href="' + urlOnlineTest + '" target="_blank"> ' + data.StudentOnlineTest + ' student(s) for Online testing</a>';
                        if (data.StudentBBS  > 0) {
                            if (data.StudentOnlineTest > 0)
                                message += ' and ';
                            message += ' <a style="color: #39c" href="' + urlBBS + '" target="_blank"> ' + data.StudentBBS + ' student(s) for Bubble Sheet testing</a>';
                        }

                        message += '. Any existing test results will be overridden if the test is submitted again. Are you sure you want to proceed?';
                        ConfirmAssignTest(message, shouldShowGenerateCodeWarning);
                    }
                } else {
                    AssignTest(shouldShowGenerateCodeWarning);
                }
            },
            failure: function (response) {
                CustomAlert(response);
            }
        });
    }

     function PopUpOnlineTearcherLed(strUrl, testCode) {
        var oldzIndex = $('#idPopUpOnlineTearcherLed').parent('.ui-dialog').css('z-index');
        $('#idPopUpOnlineTearcherLed').parent('.ui-dialog').css({ 'z-index': '1000' });
        //set the height for overlay
        var yesButton = '<a class="LinkitStypeButton big-button" href="' + strUrl + '" target="_blank" style="width:63px;" onclick="closePopUpOnlineTearcherLed();" >OK</a>';
        var strHtml = '<section class="grid_5"><div class="block-border" style="width: 300px;">' +
             '<div class="block-content form" style="padding-bottom: 1em; text-align: center;"><div>Test is ready for launch (' + testCode + ')' +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "idPopUpOnlineTearcherLed")
            .appendTo("body")
            .dialog({
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#idPopUpOnlineTearcherLed').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value

                    $(this).remove();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 360,
                maxheight: 500,
                resizable: false,
            });
        showModalDialogBG();
    }

    function closePopUpOnlineTearcherLed() {
        $('.ui-widget-overlay:last').remove();
        $('#idPopUpOnlineTearcherLed').parent('.ui-dialog').css({ 'z-index': 1 });//recover the old value
        $('#idPopUpOnlineTearcherLed').dialog('close');
        $('#btnSubmit').enableBt();
    }

    function ConfirmAssignTeacherLedTest(message) {
        var yesButton = '<button style="width:63px;" onclick="YesClickTeacherLed();">Yes</button>';
        var noButton = '<button style="width:63px;" onclick="NoClickTeacherLed();">No</button>';

        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + yesButton + '&nbsp;&nbsp;' + noButton + '</div>' + '</div></div></section>';

        $("<div></div>")
           .html(strHtml)
            .addClass("dialog")
            .attr("id", "confirmSubmitDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $(this).remove();
                    $('#generateContent').unblock();
                    $('#btnSubmit').enableBt();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });
    }

    function NoClickTeacherLed() {
        $('#generateContent').unblock();
        $('#btnSubmit').enableBt();
        $("#confirmSubmitDialog").dialog("close");
    }

    function YesClickTeacherLed() {
        $("#confirmSubmitDialog").dialog("close");
        ShowBlock($('#generateContent'), "Test Assignment");
        AssignTest();
    }

    function GetCurrentGroupSelected() {
        return $('.row_selected').attr('Id');
    }
</script>
