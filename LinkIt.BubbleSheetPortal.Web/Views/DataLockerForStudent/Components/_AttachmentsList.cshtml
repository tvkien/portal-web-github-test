<template id="attachments-list-template">
    <div class="attachments-list-container">
        <div class="list">
            <template v-for="(item, index) in items">
                <div v-if="!item.IsDeleted" :class="{ list__item: true, odd: index % 2 === 0, list__item__error: !!item.errorMessage }" :key="index">
                    <div class="list__item__title">
                        <div class="list__item__main-title">
                            <component :is="item.File ? 'span' : 'a'" href="#" @@click.prevent="handleItemClick(item)">
                                {{ item.Name }}
                            </component>
                        </div>
                        <div class="list__item__sub-title" v-if="!!item.errorMessage">{{item.errorMessage}}</div>
                    </div>
                    <div class="flex-grow-1"></div>
                    <div class="list__item__actions">
                        <a v-if="isPreviewable(item.Name)" class="btn-icon btn-icon--preview" :disabled="shared.isRecording" title="Preview" href="#" @@click.prevent="handlePrevewItem(item, index)"></a>
                        <a v-if="isDeleteable(item.CreatedBy)" class="btn-icon btn-icon--close" :disabled="shared.isRecording" title="Remove" href="#" @@click.prevent="handleRemoveItem(item, index)"></a>
                    </div>
                </div>
            </template>
        </div>
    </div>
</template>

<script>
    var attacmentList = {
        template: document.getElementById('attachments-list-template').innerHTML,
        mixins: [commonsMixin],
        props: {
            items: {
                type: Array,
                default: () => ([])
            }
        },
        computed: {
            shared: function () {
                return this.$root.shared;
            }
        },
        methods: {
            handleItemClick: function (item) {
                if (!item.File && !this.shared.isRecording) {
                    this.$emit('onItemClick', item);
                }
            },
            handleRemoveItem: function (item, index) {
                this.$emit('onRemoveItem', { item: item, index: index });
            },
            handlePrevewItem: function (item) {
                this.$emit('onPreviewItem', item);
            },
            isPreviewable: function (fileName) {
                var ext = this.getFileExtention(fileName);
                return !this.shared.isRecording &&
                    (prevewExtsSuport.audio.includes(ext) ||
                        prevewExtsSuport.image.includes(ext) ||
                        prevewExtsSuport.video.includes(ext));
            },
            isDeleteable: function (createdBy) {
                return !this.shared.isRecording && (globalConfig.CurrentUserId === createdBy || this.shared.config.allowModification);
            }
        },
    };
</script>

<style>
    .attachments-list-container .list {
        display: flex;
        flex-direction: column;
        margin: 1rem 0;
    }

    .attachments-list-container .list__item {
        display: flex;
        padding: 0.5rem;
        line-height: 1;
        align-items: center;
        gap: 1rem;
    }

    .attachments-list-container .list__item__title {
        overflow: hidden;
    }

    .attachments-list-container .list__item__actions {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .attachments-list-container .list__item.odd {
        background-color: #f2f2f2;
    }

    .attachments-list-container .list__item:hover {
        background-color: rgb(209, 229, 239);
    }
    .attachments-list-container .list__item__main-title {
        font-weight: bold;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: normal;
        color: var(--bs-blue);
    }
    .attachments-list-container .list__item__sub-title {
        font-size: 0.65rem;
        margin-top: 4px;
    }
    .attachments-list-container .list__item__error .list__item__sub-title {
        color: red;
    }
    .btn-icon {
        display: inline-block;
        width: 1.25rem;
        height: 1.25rem;
        border-radius: 0.5rem;
        cursor: pointer;
        background-repeat: no-repeat;
        background-position: center;
        background-size: 1rem;
    }

        .btn-icon:disabled {
            pointer-events: none;
        }

        .btn-icon:hover {
            background-color: rgb(0, 0, 0, 0.2);
        }

    .btn-icon--close {
        background-image: url(/Content/images/cancel.png);
    }

    .btn-icon--preview {
        background-image: url(/Content/images/icons/preview-eye.png);
    }
</style>
