<template id="tab-add-attachments-template">
    <div>
        <div class="add-attachements-containter">
            <label @@drop.prevent="handleDropFile"
                   @@dragover.prevent
                   @@dragenter.prevent="isDrag = true"
                   @@dragleave.prevent="isDrag = false"
                   :class="isDrag ? 'drag' : ''">
                {{ message }}
                <input type="file" @@change="handleChange" :accept="accept" />
            </label>
            <div v-if="isV2" class="mx-2" style="font-weight:700;">
                Or
            </div>
            <div v-if="isV2" class="link-artifact-input" style="max-width: 280px;">
                <div class="form" style="flex: 1;">
                    <input placeholder="Insert Link..." type="text" v-model="inputLink" class="w-100">
                </div>
                <a style="cursor:pointer;" v-on:click="addLinkArtifact()">
                    <i class="fa-solid fa-plus ms-2 icon-red"></i>
                </a>
            </div>
        </div>
        <div v-if="errorMessage" class="u-c-light-red u-fw-700 mt-3">{{errorMessage}}</div>
    </div>
</template>

<script>
    var tabAddAttachments = {
        template: document.getElementById('tab-add-attachments-template').innerHTML,
        data: function () {
            return {
                isDrag: false,
                inputLink: '',
                errorMessage: '',
                isV2: !!window.IS_V2
            }
        },
        props: ['items'],
        computed: {
            message: function() {
                if (this.isDrag) {
                    return 'Drop here.'
                }
                return 'Select or Drop file(s) for upload.';
            },
            accept: function () {
                return this.$root.config.suportFileTypes.join(',')
            }
        },
        methods: {
            handleChange: function (ev) {
                if (ev.target.files.length) {
                    var files = Array.prototype.slice.call(ev.target.files);
                    this.$emit('onAddItems', files);
                    ev.target.value = "";
                    this.inputLink = '';
                }
            },
            handleDropFile: function (ev) {
                this.isDrag = false;
                if (ev.dataTransfer.files) {
                    var files = Array.prototype.slice.call(ev.dataTransfer.files);
                    this.$emit('onAddItems', files);
                    this.inputLink = '';
                }
            },
            isUrl: function (str) {
                var matcher = /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;
                return matcher.test(str);
            },
            validateLink: function (inputLink) {
                var regex = /\w+\.([A-Za-z0-9]{3,4})(?=\?|$)/;
                var execFile = 'exe,bat,msi';
                if (inputLink && !this.isUrl(inputLink)) {
                    this.errorMessage = 'Invalid link.';
                    return false;
                } else if (inputLink) {
                    var matchs = inputLink.match(regex);
                    if (!!matchs && execFile.indexOf(matchs[1]) > -1) {
                        this.errorMessage = 'Invalid link. You should not upload URLs that link to executable files.';
                        return false;
                    }
                }
                for (var i = 0, length = this.items.length; i < length; i++) {
                    if (this.items[i].Name.toLowerCase() == inputLink.toLowerCase()) {
                        this.errorMessage = 'This link has been added.';
                        return false;
                    }
                }
                this.errorMessage = '';
                return true;
            },
            addLinkArtifact: function () {
                if (this.inputLink.trim() && this.validateLink(this.inputLink)) {
                    this.$emit('onAddItems', this.inputLink.trim());
                    this.inputLink = '';
                    this.errorMessage = '';
                }
            }
        },
    };
</script>
<style>
    .add-attachements-containter label {
        padding: 1rem;
        padding-top: 2rem;
        padding-bottom: 2rem;
        border-radius: 0.5rem;
        border: 2px dashed #909498;
        cursor: pointer;
        font-weight: bold;
    }
    .add-attachements-containter label:hover,
    .add-attachements-containter label.drag{
        background-color: rgb(209, 229, 239);
    }
    .add-attachements-containter label input[type=file] {
        display: none;
    }
    .add-attachements-containter, .link-artifact-input {
        display: flex;
        align-items: center;
        justify-content: center;
        flex: 1;
    }
</style>
