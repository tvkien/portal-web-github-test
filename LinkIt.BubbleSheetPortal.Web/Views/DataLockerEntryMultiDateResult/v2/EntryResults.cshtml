@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Models.DataLocker.EntryResultModel
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.ResultsEntryDataLocker, "Enter Results");
    var currentUser = HttpContext.Current.GetCurrentUser();
    if (currentUser != null)
    {
        var isUseNewDesign = HelperExtensions.IsUseNewDesign(currentUser.DistrictId ?? 0);
        if (isUseNewDesign)
        {
            Layout = "~/Views/Shared/_Layout_v2.cshtml";
        }
    }
}

@section jQuery {
    @BundleHelper.jQueryUpgrade()
}

@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleDataLockerTemplateBundle()
<link href="@BundleHelper.Version("~/Content/css/v2/data-docker.css")" rel="stylesheet" type="text/css" />
<link href="@BundleHelper.Version("~/Content/css/v2/data-docker-multidate-result.css")" rel="stylesheet" type="text/css" />
<link href="@BundleHelper.Version("~/Content/css/v2/data-docker-entry-result.css")" rel="stylesheet" type="text/css" />

@section meta {
    <script src="@Url.Content("~/Scripts/Lib/fastclick.min.js")"></script>
    <script>
        // Support mobile click avoid case 300ms
        if ('addEventListener' in document) {
            document.addEventListener('DOMContentLoaded', function () {
                FastClick.attach(document.body);
            }, false);
        }
    </script>
}
@BundleHelper.StyleDataLockerMultiDateEntryResultBundle()
@BundleHelper.ScriptDataLockerMultiDateEntryResultBundle()
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/RecordRTC.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/RecordRTCBase.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/RecordRTC/plugin.js")"></script>
<script src="@BundleHelper.Version("~/Scripts/ckeditor4/ckeditor.js")" type="text/javascript"></script>
<script src="@BundleHelper.Version("~/Scripts/DataLockerEntryResult/Common.js")" type="text/javascript"></script>
<script src="@BundleHelper.Version("~/Scripts/Lib/handsontable/fix-html-cell.js")" type="text/javascript"></script>

<article class="container_12 fullPage" id="studentEntry">
    <section class="grid_12" id="sectionStudentEntry">
        <div>
            <div class="block-section-custom mb-4">
                <h1 class="page-title">@Model.VirtualTestName &nbsp; @Model.ClassName</h1>
                <div id="top-panel-filter" class="form bubbleSheetSelector">
                    <div id="publisherContent">
                        <p class="title-large mb-4">Learning Progression</p>
                        <div class="row g-3">
                            <div class="col flex-grow-1">
                                <div class="row">
                                    <div class="col-3">
                                        <div>
                                            <label>@LocalizeHelper.Localized("EnterResult.Grade")</label>
                                            <select id="selectGrade"></select>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div>
                                            <label>@LocalizeHelper.Localized("EnterResult.Subject")</label>
                                            <select id="selectDomain"></select>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div>
                                            <label>@LocalizeHelper.Localized("EnterResult.Bank")</label>
                                            <select id="selectLanguage"></select>
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div>
                                            <label>@LocalizeHelper.Localized("EnterResult.Test")</label>
                                            <select id="selectLearning"></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col wrapper-width-btn"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="block-section-custom align-items-start">
                <div class="d-flex justify-content-between mb-3">
                    <div class="me-5">
                        <b>Note:</b> (*) <i>This student has an existing result for this form in another class.</i>
                    </div>

                    <div class="d-flex flex-shrink-0">
                        <div style="display: none" class="icon-test-report" id="btn-student-result">
                            <button onclick="handleNavSR()" data-name="studentResults" title="Student Results" class="btn-icon-select icon student-results">
                                <i class="fas fa-child"></i>
                            </button>
                        </div>
                        <span class="sgo-datetime custom me-3">
                            <input type="text" name="resultDate" id="resultDate" readonly="readonly" class="field-datepicker needsclick" />
                            <span class="icon-sgo-calendar"></span>
                        </span>
                        <button class="btn-blue" onclick="handleFullScreen()">
                            <span v-html="fullscreen.icon" class="studententry-icon-fullscreen"></span>
                            <span v-text="fullscreen.text"></span>
                        </button>
                    </div>
                </div>

                <div name="studentEntryResult" class="student-entry-result custom mb-4"></div>
                <input type="hidden" id="virtualTestId" value="@Model.VirtualTestId" />
                <input type="hidden" id="classId" value="@Model.ClassId" />
                <input type="hidden" id="studentsIdSelectedString" value="@Model.StudentsIdSelectedString" />

                <div class="d-flex align-items-center group-footer responsive-multidate-btn mt-4">
                    <button class="btn-blue d-block" id="btnCancelEnterResults" v-on:click="toggleCancelEntryResult()">@LocalizeHelper.Localized("EnterResult.Cancel")</button>
                    <button class="btn-blue d-block" id="btnClearChanges" onclick="ClearUnsavedChanges()">@LocalizeHelper.Localized("EnterResult.ClearChange")</button>
                    <button class="btn-blue ms-auto" v-on:click="showRubricDescription" v-bind:disabled="isDisabledViewRubricDescription">@LocalizeHelper.Localized("EnterResult.ViewRubric")</button>
                    <button class="btn-blue d-block" id="btnviewsupportingdocument" v-on:click="viewSupportingDocument" v-bind:disabled="isDisabledViewSupportingDocument">
                        @LocalizeHelper.Localized("EnterResult.ViewDocs")
                    </button>
                    <button class="btn-blue d-block" id="btnPrintResults" v-on:click="checkWarningPrint()">@LocalizeHelper.Localized("EnterResult.Print")</button>
                    <button class="btn-blue d-block" id="btnSaveAndCloseResults" onclick="saveAndCloseResults()">Save and Close</button>
                    <button class="btn-red d-block" id="btnSaveResults" onclick="preSaveResults();">@LocalizeHelper.Localized("EnterResult.SaveResults")</button>

                </div>
            </div>
        </div>
    </section>
    @Html.Partial("v2/_EnterResultsModalClearAllScore")
    @Html.Partial("v2/_EnterResultsModalCancel")
    @Html.Partial("v2/_EnterResultsModalWarning")
    @Html.Partial("v2/_EnterResultsModalFilterWarning")
    @Html.Partial("v2/_EnterResultsModalPrint")
    @Html.Partial("v2/_ModalNote")
    @Html.Partial("v2/_ArtifactFolderModal")
    @Html.Partial("v2/_ViewDescriptionModal")
    @Html.Partial("v2/_ModalNoteDate")
    @Html.Partial("v2/_ItemPreviewDialog")
    <iframe id="frame" class="custom"></iframe>
</article>
@section scripts {
    <script type="text/javascript">
        window.global = {
            dateFormat: '@Model.DateFormatModel.HandsonTableDateFormat'
        };
        if (navigator.userAgent.match(/iPad/i)) {
            // Disable pinch zoom on document on iPad
            document.documentElement.addEventListener('touchstart', function(event) {
                if (event.touches.length > 1) {
                    event.preventDefault();
                }
            }, false);
            // Disable double tap on document on iPad
            var lastTouchEnd = 0;
            document.documentElement.addEventListener('touchend', function(event) {
                var now = (new Date()).getTime();
                if (now - lastTouchEnd <= 300) {
                    event.preventDefault();
                }
                lastTouchEnd = now;
            }, false);
        }
        setInterval('document.body.style.zoom=1', 1);
        var viewport = document.createElement('meta');
        viewport.id = 'viewport';
        viewport.name = 'viewport';
        viewport.content = 'width=device-width, initial-scale=1';
        document.body.parentElement.children[0].appendChild(viewport);
    </script>
    <script src=@BundleHelper.Version("~/Scripts/edm-helper.js")></script>
    <script src=@BundleHelper.Version("/Scripts/DataLockerEntryResult/App.js")></script>
    <script src=@BundleHelper.Version("/Scripts/DataLockerEntryResult/DataLockerEnterResult.js")></script>
    <script type="text/javascript">
        StudentEntryModel.generatePdfUrl = '@Url.Action("GeneratePdf")';
        StudentEntryModel.downloadSupportDocumentUrl = '@Url.Action("DownloadRubricFile", "Notification")' + '?key=';
        StudentEntryModel.virtualTestId = '@Model.VirtualTestId';
        StudentEntryModel.classId = '@Model.ClassId';
        StudentEntryModel.studentsIdSelectedString = '@Model.StudentsIdSelectedString';
        StudentEntryModel.virtualtestFileKey = '@Model.VirtualtestFileKey';
        StudentEntryModel.rubricDescriptionContent = @Html.Raw(Json.Encode(Model.RubricDescription));
        StudentEntryModel.virtualTestName = '@Model.VirtualTestName';

        window.onbeforeunload = function(e) {
            if (checkUnsavedData(true) && !isSaveAndClose) {
                return "";
            } else {
                return null;
            }
        };

        function checkUnsavedData() {
            if (hansonStudentData && oldHandsonStudentData) {
                return oldHandsonStudentData != JSON.stringify(hansonStudentData);
            }
            return false;
        }

        CKEDITOR.replace('editor1', {
            toolbar: [
                ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
            ],
            removePlugins: 'elementspath',
            on: {
                key: function(evt) {
                    var currentLength = $('<div>' + this.getData() + '</div>').text().length;
                    var maxLength = 1001;
                    var skipCheck = false;
                    var keycode = evt.data.keyCode;

                    if (keycode === 8 || keycode === 13 || keycode === 46 ||
                        keycode === 37 || keycode === 38 || keycode === 39 || keycode === 40) {
                        skipCheck = true;
                    }

                    if ((currentLength >= parseInt(maxLength) && skipCheck === false) || keycode === 1114129) {
                        return false;
                    }
                },

            }
        });

        CKEDITOR.replace('editorNoteDate', {
            toolbar: [
                ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
            ],
            removePlugins: 'elementspath',
            on: {
                key: function(evt) {
                    var currentLength = $('<div>' + this.getData() + '</div>').text().length;
                    var maxLength = 1001;
                    var skipCheck = false;
                    var keycode = evt.data.keyCode;

                    if (keycode === 8 || keycode === 13 || keycode === 46 ||
                        keycode === 37 || keycode === 38 || keycode === 39 || keycode === 40) {
                        skipCheck = true;
                    }

                    if ((currentLength >= parseInt(maxLength) && skipCheck === false) || keycode === 1114129) {
                        return false;
                    }
                },

            }
        });

        function confirmClearAllScore() {
            var $sectionStudentEntry = $('#sectionStudentEntry');
            $.each(hansonStudentData, function(i, item) {
                if (!!item.overallScore) {
                    item.overallScore.ScorePercent = null;
                    item.overallScore.ScorePercentage = null;
                    item.overallScore.ScoreRaw = null;
                    item.overallScore.ScoreScaled = null;
                    item.overallScore.ScoreCustomN_1 = null;
                    item.overallScore.ScoreCustomN_2 = null;
                    item.overallScore.ScoreCustomN_3 = null;
                    item.overallScore.ScoreCustomN_4 = null;
                    item.overallScore.ScoreCustomA_1 = '';
                    item.overallScore.ScoreCustomA_2 = '';
                    item.overallScore.ScoreCustomA_3 = '';
                    item.overallScore.ScoreCustomA_4 = '';
                    item.overallScore.Artifacts = [];
                    item.overallScore.Notes = [];
                }

                for (var j = 0; j < subScoreLength; j++) {
                    var name = "subScore_" + j;
                    if (hansonStudentData[i][name] != 'undefined') {
                        if (!!item[name]) {
                            item[name].ScorePercent = null;
                            item[name].ScorePercentage = null;
                            item[name].ScoreRaw = null;
                            item[name].ScoreScaled = null;
                            item[name].ScoreCustomN_1 = null;
                            item[name].ScoreCustomN_2 = null;
                            item[name].ScoreCustomN_3 = null;
                            item[name].ScoreCustomN_4 = null;
                            item[name].ScoreCustomA_1 = '';
                            item[name].ScoreCustomA_2 = '';
                            item[name].ScoreCustomA_3 = '';
                            item[name].ScoreCustomA_4 = '';
                            item[name].Artifacts = [];
                            item[name].Notes = [];
                        }
                    }
                }
                StudentEntryModel.resetArtifactModalData();
            });

            if (hansonStudentData.length) {
                var hotStudentEntryResult = $('div[name="studentEntryResult"]').handsontable('getInstance');
                Vue.nextTick(function() {
                    var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                    var arrData = [];
                    for (var m = 0; m < hansonStudentData.length; m++) {
                        hansonStudentData[m].overallScore.ResultDate = moment(moment(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
                        arrData.push([m, 0, false]);
                    }
                    $('div[name="studentEntryResult"]').handsontable('setDataAtCell', arrData);
                    $('input.checker').attr('checked', false);

                    hotStudentEntryResult.loadData(hansonStudentData);
                    $sectionStudentEntry.find('div[name="studentEntryResult"] td').qtip('destroy', true);
                    afterScrollUpdateTooltip();
                    $('div[name="studentEntryResult"]').handsontable('deselectCell');
                    $sectionStudentEntry.unblock();
                });
            }
        }

        function convertToDecimal(input) {
            if (typeof input === 'undefined' || input === null || input === "") {
                return null;
            }
            if (input.toString().indexOf(".") != -1) {
                var arr = input.toString().split('.');
                return parseFloat(input).toFixed(arr[1].length);
            }
            return parseFloat(input).toString();
        }

        function preSaveResults() {
            var $studentEntryResult = $('.student-entry-result');

            if ($studentEntryResult.find('td.htInvalid').length) {
                StudentEntryModel.isShowModalWarning = false;
                StudentEntryModel.isShowModalFilterWarning = false;
                StudentEntryModel.isShowModalPrint = true;
                StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
                return;
            }
            var interval = setInterval(function() {
                if (completedChange) {
                    saveResults();
                    clearInterval(interval);
                    completedChange = false;
                }
            }, 500);

        }

        function saveResults() {
            return new Promise(function (resolve, reject) {
                var $studentEntryResult = $('.student-entry-result');

                if ($studentEntryResult.find('td.htInvalid').length) {
                    StudentEntryModel.isShowModalWarning = false;
                    StudentEntryModel.isShowModalFilterWarning = false;
                    StudentEntryModel.isShowModalPrint = true;
                    StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
                    return;
                }
                var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                var postData = [];
                $.each(hansonStudentData, function(k, item) {
                    var inputData = {};
                    var overallScore = JSON.parse(JSON.stringify(item.overallScore));

                    if (overallScore != null) {
                        overallScore.ResultDate = overallScore.ResultDate ? moment(overallScore.ResultDate, resultDateFormat).format('lll') : '';
                        overallScore.ScorePercent = convertToDecimal(overallScore.ScorePercent);
                        overallScore.ScorePercentage = convertToDecimal(overallScore.ScorePercentage);
                        overallScore.ScoreRaw = convertToDecimal(overallScore.ScoreRaw);
                        overallScore.ScoreScaled = convertToDecimal(overallScore.ScoreScaled);
                        overallScore.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1"));
                        overallScore.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2"));
                        overallScore.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3"));
                        overallScore.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4"));
                    }

                    var subScores = [];
                    for (var i = 0; i < subScoreLength; i++) {
                        var name = "subScore_" + i;
                        var subscore = JSON.parse(JSON.stringify(item[name]));
                        if (subscore != null) {
                            subscore.ScorePercent = convertToDecimal(subscore.ScorePercent);
                            subscore.ScorePercentage = convertToDecimal(subscore.ScorePercentage);
                            subscore.ScoreRaw = convertToDecimal(subscore.ScoreRaw);
                            subscore.ScoreScaled = convertToDecimal(subscore.ScoreScaled);
                            subscore.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1"));
                            subscore.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2"));
                            subscore.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3"));
                            subscore.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4"));
                        }

                        subScores.push(subscore);
                    }
                    inputData["TestResultScore"] = overallScore;
                    inputData["TestResultSubScores"] = subScores;
                    inputData["VirtualTestCustomScoreId"] = virtualTestCustomScoreId;
                    if (inputData.TestResultScore.FullName != null) {
                        postData.push(inputData);
                    }
                });
                postData.entryResultDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);

                ShowBlock($("#sectionStudentEntry"), "Save score");

                var studentNumber = 300;

                if (postData.length < studentNumber) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SaveResults")',
                        contentType: 'application/json',
                        data: JSON.stringify({ 'scores': postData }),
                        beforeSend: function () {
                            StudentEntryModel.msgInvalid = '';
                            StudentEntryModel.isShowModalWarning = false;
                            StudentEntryModel.isShowModalFilterWarning = false;
                        },
                        success: function (response) {
                            loadStudentEntryResult(true, false)
                            resolve(true);
                        },
                        error: function (xhr, status, error) {
                            reject(error)
                            console.log(error);
                        }
                    });
                }
                else {

                    var dataChunk = chunkArray(postData, studentNumber);
                    var arr = []
                    for (i = 0; i < dataChunk.length; i++) {
                        arr.push(CallSaveResult(dataChunk[i]));
                    }

                    $.when.apply($, arr).done(function (respones) {
                        if (errorSave !== '') {
                            $('#sectionStudentEntry').unblock();
                            popupAlertMessageV1('alert', 'Something went wrong! Please try again!', 400, 100, 'ClosePopup', '', 'OK');
                        }
                        else {
                            loadStudentEntryResult(true, false)
                        }
                        resolve(true)
                    });
                    resolve(true)
                }

            })
        }

        function ClosePopup() {
            $(document).find('.ui-dialog').remove();
        }


        var errorSave = '';
        function CallSaveResult(data) {
            return $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveResults")',
                contentType: 'application/json',
                 data: JSON.stringify({ 'scores': data }),
                beforeSend: function() {
                    StudentEntryModel.msgInvalid = '';
                    StudentEntryModel.isShowModalWarning = false;
                    StudentEntryModel.isShowModalFilterWarning = false;
                },
                success: function (response) {
                    if (!response.Success) {
                        errorSave = response.Error;
                    }
                },
                error: function (xhr, status, error) {

                  console.log(error);
                }
            });
        }

        function chunkArray(myArray, chunk_size) {
            var results = [];

            while (myArray.length) {
                results.push(myArray.splice(0, chunk_size));
            }

            return results;
        }

        function autoSaveResults() {
            if (oldHandsonStudentDataAutoSave === JSON.stringify(hansonStudentData))
                return;

            var studentTestResultScores = [];
            var studentTestResultSubScores = [];
            var classId = 0;
            var virtualTestId = 0;
            var resultDate = null;
            $.each(hansonStudentData, function(k, item) {
                var firstName = item.overallScore.FullName.split(', ')[0];
                var lastName = item.overallScore.FullName.split(', ')[1];
                var studentId = item.overallScore.StudentID;
                var testResultId = item.overallScore.TestResultID;
                var testResultScoreId = item.overallScore.TestResultScoreID;
                virtualTestId = item.overallScore.VirtualTestID;
                classId = item.overallScore.ClassID;

                if (item.overallScore != null) {
                    var overallScore = {};
                    resultDate = item.overallScore.ResultDate;
                    overallScore.ResultDate = resultDate ? moment(resultDate, resultDateFormat).format('lll') : '';
                    overallScore.ScorePercent = item.overallScore.ScorePercent;
                    overallScore.ScorePercentage = item.overallScore.ScorePercentage;
                    overallScore.ScoreRaw = item.overallScore.ScoreRaw;
                    overallScore.ScoreScaled = item.overallScore.ScoreScaled;
                    overallScore.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1"));
                    overallScore.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2"));
                    overallScore.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3"));
                    overallScore.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(item.overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4"));
                    overallScore.ScoreCustomA_1 = item.overallScore.ScoreCustomA_1;
                    overallScore.ScoreCustomA_2 = item.overallScore.ScoreCustomA_2;
                    overallScore.ScoreCustomA_3 = item.overallScore.ScoreCustomA_3;
                    overallScore.ScoreCustomA_4 = item.overallScore.ScoreCustomA_4;
                    overallScore.Artifacts = item.overallScore.Artifacts;
                    overallScore.Notes = item.overallScore.Notes;
                    overallScore.LastName = firstName;
                    overallScore.FirstName = lastName;
                    overallScore.StudentID = studentId;
                    overallScore.TestResultID = testResultId;
                    overallScore.TestResultScoreID = testResultScoreId;
                    overallScore.VirtualTestID = virtualTestId;
                    overallScore.ClassID = classId;
                    overallScore.Code = item.overallScore.Code;

                    studentTestResultScores.push(overallScore);
                }

                for (var i = 0; i < subScoreLength; i++) {
                    var name = "subScore_" + i;
                    var subscore = item[name];
                    if (subscore != null) {

                        var subScoreAutoSave = {}
                        resultDate = subscore.ResultDate;
                        subScoreAutoSave.ResultDate = resultDate ? moment(resultDate, resultDateFormat).format('lll') : '';
                        subScoreAutoSave.ScorePercent = subscore.ScorePercent;
                        subScoreAutoSave.ScorePercentage = subscore.ScorePercentage;
                        subScoreAutoSave.ScoreRaw = subscore.ScoreRaw;
                        subScoreAutoSave.ScoreScaled = subscore.ScoreScaled;
                        subScoreAutoSave.ScoreCustomN_1 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1"));
                        subScoreAutoSave.ScoreCustomN_2 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2"));
                        subScoreAutoSave.ScoreCustomN_3 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3"));
                        subScoreAutoSave.ScoreCustomN_4 = convertToDecimal(getValueFromLabelDropdown(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4"));
                        subScoreAutoSave.ScoreCustomA_1 = subscore.ScoreCustomA_1;
                        subScoreAutoSave.ScoreCustomA_2 = subscore.ScoreCustomA_2;
                        subScoreAutoSave.ScoreCustomA_3 = subscore.ScoreCustomA_3;
                        subScoreAutoSave.ScoreCustomA_4 = subscore.ScoreCustomA_4;
                        subScoreAutoSave.Artifacts = subscore.Artifacts;
                        subScoreAutoSave.Notes = subscore.Notes;

                        subScoreAutoSave.StudentID = studentId;
                        subScoreAutoSave.TestResultID = testResultId;
                        subScoreAutoSave.TestResultScoreID = testResultScoreId;
                        subScoreAutoSave.VirtualTestID = virtualTestId;
                        subScoreAutoSave.ClassID = classId;
                        subScoreAutoSave.TestResultScoreSubID = subscore.TestResultScoreSubID;
                        subScoreAutoSave.Name = subscore.Name;
                        subScoreAutoSave.Code = subscore.Code;
                        studentTestResultSubScores.push(subScoreAutoSave);
                    }
                }
            });
            var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
            var entryResultDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AutoSaveResult")',
                contentType: 'application/json',
                dataType: "json",
                data: JSON.stringify({
                    'virtualTestId': virtualTestId,
                    'classId': classId,
                    'studentTestResultScores': JSON.stringify(studentTestResultScores),
                    'studentTestResultSubScores': JSON.stringify(studentTestResultSubScores),
                    'actualTestResultScoresJson': JSON.stringify(oldHandsonStudentData),
                    'resultDate': resultDate
                }),
                success: function(response) {
                    if (response) {
                        oldHandsonStudentDataAutoSave = JSON.stringify(hansonStudentData);
                    }
                }
            });
        }

        function mousewheelfn(e) {
            if (e.ctrlKey) {
                e.preventDefault();
                e.stopPropagation();
            }
        };

        window.onmousewheel = document.onmousewheel = mousewheelfn;
    </script>
    <script type="text/javascript">
        var oldHandsonStudentData = '';
        var oldHandsonStudentDataAutoSave = '';
        var hansonStudentData = [];
        var colGroupHeaderData = [];
        var colHeaderData = [];
        var columnData = [];
        var metaData = {};
        var metaDataCals = [];
        var virtualTestCustomScoreId = 0;
        var subScoreLength = 0;
        var completedChange = false;
        var numericDropdownCol = [];
        var scoreJsonDataGlobal = [];
        var studentResultDates = [];
        var isShowDupScorePopup = true;
        var isSaveAndClose = false;
        var indexCheckedBox = [];

        var isInit = true;
        var districtId = '@Model.DistrictId';
        var gradeId = '@Model.GradeId';
        var domainId = '@Model.SubjectId';
        var languageId = '@Model.BankId';
        var learningId = '@Model.VirtualTestId';
        var resultDate = '@Model.ResultDate';

        $(function () {
            if ('@Model.AllowChangeResultDate' === "0") {
                $('#resultDate').prop('disabled', true);
            }
            initFilter();
            $('#btn-student-result .btn-icon-select').tip({ position: 'bottom' })
            setInterval(autoSaveResults, 60000);
            $('.datalocker').addClass('current');
            $('#datalockerEnterResult').addClass('current');
            $('#resultDate').datepicker({
                changeMonth: true,
                changeYear: true,
                showOtherMonths: true,
                selectOtherMonths: true,
                maxDate: 0,
                dateFormat: jqueryDatePickerFormat(),
                beforeShowDay: function(date) {
                    var highlight_dates = [];
                    for (var i = 0; i < StudentEntryModel.arrEntryResultDate.length; i++) {
                        var dateResult = StudentEntryModel.arrEntryResultDate[i];
                        var dayResult = new Date(dateResult).getDate();
                        var monthResult = new Date(dateResult).getMonth() + 1;
                        var yearResult = new Date(dateResult).getFullYear();
                        var newResultDate = dayResult + "-" + monthResult + '-' + yearResult;
                        highlight_dates.push(newResultDate);
                    }

                    var month = date.getMonth() + 1;
                    var year = date.getFullYear();
                    var day = date.getDate();
                    var newdate = day + "-" + month + '-' + year;
                    if (jQuery.inArray(newdate, highlight_dates) != -1) {
                        return [true, 'event', ''];
                    }
                    $('#ui-datepicker-div').addClass('custom-calendar-multi-picker');
                    return [true];
                },
                onChangeMonthYear: function(year, month, inst) {
                    StudentEntryModel.highlightDatePickerResultDate(year, StudentEntryModel.arrEntryResultDate);
                },
                onSelect: function(date) {

                    StudentEntryModel.checkFilterWarning();
                    var newDate = new Date(date);
                    StudentEntryModel.highlightDatePickerResultDate(newDate.getFullYear(), StudentEntryModel.arrEntryResultDate);
                }
            });
            $('#resultDate').datepicker('setDate', resultDate ? new Date(resultDate) : new Date());
            $("#resultDate").click(function() {
                $("#resultDate").datepicker("show");
            });
            var $studentEntryResult = $('div[name="studentEntryResult"]');
            $studentEntryResult.on('mousedown', 'input.checker', function(event) {
                event.preventDefault();
                var isChecked = $('input.checker').is(':checked');
                var arrData = [];
                indexCheckedBox = [];
                for (var m = 0; m < hansonStudentData.length; m++) {
                    if (isChecked == false) {
                        arrData.push([m, 0, true]);
                        indexCheckedBox.push(m);
                    } else {
                        arrData.push([m, 0, false]);
                    }
                }
                $studentEntryResult.handsontable('setDataAtCell', arrData);

                if (isChecked == false) {
                    $('input.checker').attr('checked', true);
                } else {
                    $('input.checker').attr('checked', false);
                }

                $studentEntryResult.handsontable('deselectCell');
            });

            $studentEntryResult.on('mousedown', 'input.htCheckboxRendererInput', function (event) {
                var dataRow = $(this).attr('data-row');
                if (!this.checked) {
                    indexCheckedBox.push(dataRow);
                }
                else {
                    var index = indexCheckedBox.indexOf(dataRow);
                    indexCheckedBox.splice(index, 1);
                }
            });

            $($('#frame')[0].contentWindow).resize(function() {
                afterInitTooltip();
            });

            $(document.body).on('mouseover', 'th', function() {
                afterInitTooltip();
            });
            $(document.body).on('mouseover', '.autocompleteEditor td', function(e) {
                var text = e.target.innerText;
                $(e.target).attr('title', text);
            });

            $('#noteDate').datepicker({
                changeMonth: true,
                changeYear: true,
                showOn: 'both',
                showOtherMonths: true,
                selectOtherMonths: true,
                dateFormat: 'yy-mm-dd',
                beforeShowDay: function(date) {
                    var highlight_dates = [];
                    for (var i = 0; i < StudentEntryModel.arrayNoteDate.length; i++) {
                        var dateNote = StudentEntryModel.arrayNoteDate[i].NoteDate;
                        var dayNote = parseInt(dateNote.substring(8, 10));
                        var monthNote = parseInt(dateNote.substring(5, 7));
                        var yearNote = parseInt(dateNote.substring(0, 4));
                        var newNoteDate = dayNote + "-" + monthNote + '-' + yearNote;
                        highlight_dates.push(newNoteDate);
                    }

                    var month = date.getMonth() + 1;
                    var year = date.getFullYear();
                    var day = date.getDate();
                    var newdate = day + "-" + month + '-' + year;
                    if (jQuery.inArray(newdate, highlight_dates) != -1) {
                        return [true, 'event', ''];
                    }
                    return [true];
                },
                onChangeMonthYear: function(year, month, inst) {
                    StudentEntryModel.highlightDatePicker(year);
                },
                onSelect: function(date) {
                    StudentEntryModel.noteDate = date;
                    StudentEntryModel.loadNoteDate(date);
                    StudentEntryModel.highlightDatePicker(date.substring(0, 4));
                }
            });
            var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
            var entryResultDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckAutoSaveData")',
                data: {
                    virtualTestid: $('#selectLearning').val() !== null && $('#selectLearning').val() !== 'select' ? $('#selectLearning').val() : $('#virtualTestId').val(),
                    classId: @Model.ClassId,
                    datetime: entryResultDate
                },
                success: function(hasAutoSaveData) {
                    if (hasAutoSaveData) {
                        CustomAlert('There are previously entered results that were not saved. When you click on Save Results, these changes will become permanent. Alternatively, click Clear Changes to remove any unsaved changes.', true);
                        loadStudentEntryResult();
                    } else {
                        loadStudentEntryResult();
                    }
                }
            });
        });
        function loadStudentEntryResult(isClearChange, dateSelectedFromStudent) {
            StudentEntryModel.isShowModalFilterWarning = false;
            StudentEntryModel.isShowModalPrint = false;
            var $sectionStudentEntry = $('#sectionStudentEntry');
            ShowBlock($sectionStudentEntry, 'Loading');
            var studentsIdSelectedString = $('#studentsIdSelectedString').val();
            if (isClearChange) {
                var studentIdArr = hansonStudentData.map(function(stData) {
                    return stData["overallScore"]["StudentID"];
                });
                studentsIdSelectedString = studentIdArr.join();
            }
            var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
            var resultDate = StudentEntryModel.dateFilter != null ? StudentEntryModel.dateFilter : $('#resultDate').val();
            var entryResultDate = moment(resultDate, convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
            StudentEntryModel.entryResultDate = dateSelectedFromStudent ? dateSelectedFromStudent : entryResultDate;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEntryStudents")',
                cache: false,
                data: {
                    virtualTestid: $('#selectLearning').val() !== null && $('#selectLearning').val() !== 'select' ? $('#selectLearning').val() : $('#virtualTestId').val(),
                    classId: $('#classId').val(),
                    studentsIdSelectedString: studentsIdSelectedString,
                    entryResultDate: dateSelectedFromStudent ? dateSelectedFromStudent : entryResultDate
                },
                success: function (response) {
                    if (StudentEntryModel.dateFilter != null) {
                        $('#resultDate').datepicker('setDate', new Date(StudentEntryModel.dateFilter));
                        StudentEntryModel.dateFilter = null;
                    }
                    var isExistOverallScore = response.CustomScore.ScoreInfos.length > 0 ? true : false;
                    hansonStudentData = [];
                    virtualTestCustomScoreId = response.CustomScore.VirtualTestCustomScoreId;
                    var isResultDateResultScores = false;
                    var isDateTimeNull = function(element, index, array) {
                        return element.ResultDate == null;
                    };
                    var studentTestResultScores = JSON.parse(response.StudentTestResultScores);
                    var studentTestResultSubScores = JSON.parse(response.StudentTestResultSubScores);

                    const dupScoreStudents = studentTestResultScores.filter(x => x.HasOtherScore).length;
                    if (isShowDupScorePopup && dupScoreStudents > 0) {
                        CustomAlert(`${dupScoreStudents} student(s) already have results for this form in another class.<br/><br/>Note: Any newly entered results will NOT override the existing results in other classes. Duplicates may be created.`, true);
                        isShowDupScorePopup = false;
                    }

                    isResultDateResultScores = studentTestResultScores.every(isDateTimeNull);
                    studentResultDates = response.StudentResultDates;
                    $.each(studentTestResultScores, function(i, item) {
                        var isStudentHaveResultDate = false;
                        var numberResultDates = '';
                        for (var s = 0; s < studentResultDates.length; s++) {
                            if (item["StudentID"] == studentResultDates[s].StudentId) {
                                if (studentResultDates[s].ResultDates.length == 1) {
                                    if (moment(studentResultDates[s].ResultDates[0], 'M/D/YYYY').format(resultDateFormat) == entryResultDate) {
                                        isStudentHaveResultDate = false;
                                        numberResultDates = '';
                                    } else {
                                        isStudentHaveResultDate = true;
                                        numberResultDates = studentResultDates[s].ResultDates.length + '  result';
                                    }

                                } else {
                                    isStudentHaveResultDate = true;
                                    numberResultDates = studentResultDates[s].ResultDates.length + '  results';
                                }
                                break;
                            }
                        }

                        var styleStudent = '';
                        if (isStudentHaveResultDate) {
                            styleStudent = 'color: cornflowerblue; text-decoration: underline; cursor: pointer;'
                        } else {
                            styleStudent = 'text-decoration: none; pointer-events: none'
                        }

                        var fullNameDisplay =[
                            '<div onclick="getMultiDate(event,',
                                item["StudentID"],
                                ',' + isStudentHaveResultDate,
                                ')" class="popup" style="' + styleStudent + '" title="' + numberResultDates + '">',
                                item["LastName"] + ", " + item["FirstName"] + (item["HasOtherScore"] === true ? "*" : ""),
                                '<div class="popuptext bottom-arrow myPopup-',
                                item["StudentID"],
                                '"></div></div>'
                        ];
                        var strFullNameDisplay = '';
                        for (var i = 0; i < fullNameDisplay.length; i++) {
                            strFullNameDisplay += fullNameDisplay[i];
                        }
                        var scoreJsonData = {
                            StudentID: item["StudentID"],
                            ClassID: @Model.ClassId,
                            VirtualTestID: $('#selectLearning').val() !== null && $('#selectLearning').val() !== 'select' ? $('#selectLearning').val() : $('#virtualTestId').val(),
                            FullNameDisplay: strFullNameDisplay,
                            FullName: item["LastName"] + ", " + item["FirstName"],
                            ResultDate: dateSelectedFromStudent ? dateSelectedFromStudent : entryResultDate,
                            TestResultID: item["TestResultID"],
                            TestResultScoreID: item["TestResultScoreID"],
                            ScorePercent: item["ScorePercent"] != null ? "" + item["ScorePercent"] : item["ScorePercent"],
                            ScorePercentage: item["ScorePercentage"] != null ? "" + item["ScorePercentage"] : item["ScorePercentage"],
                            ScoreRaw: item["ScoreRaw"] != null ? "" + item["ScoreRaw"] : item["ScoreRaw"],
                            ScoreScaled: item["ScoreScaled"] != null ? "" + item["ScoreScaled"] : item["ScoreScaled"],
                            ScoreCustomN_1: item["ScoreCustomN_1"] != null ? "" + item["ScoreCustomN_1"] : item["ScoreCustomN_1"],
                            ScoreCustomN_2: item["ScoreCustomN_2"] != null ? "" + item["ScoreCustomN_2"] : item["ScoreCustomN_2"],
                            ScoreCustomN_3: item["ScoreCustomN_3"] != null ? "" + item["ScoreCustomN_3"] : item["ScoreCustomN_3"],
                            ScoreCustomN_4: item["ScoreCustomN_4"] != null ? "" + item["ScoreCustomN_4"] : item["ScoreCustomN_4"],
                            ScoreCustomA_1: item["ScoreCustomA_1"],
                            ScoreCustomA_2: item["ScoreCustomA_2"],
                            ScoreCustomA_3: item["ScoreCustomA_3"],
                            ScoreCustomA_4: item["ScoreCustomA_4"]
                        };
                        scoreJsonDataGlobal = scoreJsonData.StudentID;

                        if (item.Artifacts && item.Artifacts.length > 0) {
                            scoreJsonData.Artifacts = item.Artifacts;
                        } else {
                            scoreJsonData.Artifacts = [];
                        }

                        if (item.Notes) {
                            for (var i = 0; i < item.Notes.length; i++) {
                                var noteItem = item.Notes[i];
                                scoreJsonData[noteItem["NoteColumnName"]] = noteItem["NoteValue"];
                            }
                            scoreJsonData.Notes = item.Notes;
                        } else {
                            scoreJsonData.Notes = [];
                        }

                        var jsonData = { overallScore: scoreJsonData };

                        if (response.CustomSubScores != 'undefined' && response.CustomSubScores.length > 0) {
                            for (var j = 0; j < response.CustomSubScores.length; j++) {
                                var exist = false;
                                $.each(studentTestResultSubScores, function(k, subItem) {
                                    if (subItem["StudentID"] == item["StudentID"] && (subItem["Name"] == null || subItem["Name"] == response.CustomSubScores[j]["Name"])) {
                                        var subScoreJsonData = {
                                            TestResultScoreSubID: subItem["TestResultScoreSubID"],
                                            Name: response.CustomSubScores[j]["Name"],
                                            ScorePercent: subItem["ScorePercent"] != null ? "" + subItem["ScorePercent"] : subItem["ScorePercent"],
                                            ScorePercentage: subItem["ScorePercentage"] != null ? "" + subItem["ScorePercentage"] : subItem["ScorePercentage"],
                                            ScoreRaw: subItem["ScoreRaw"] != null ? "" + subItem["ScoreRaw"] : subItem["ScoreRaw"],
                                            ScoreScaled: subItem["ScoreScaled"] != null ? "" + subItem["ScoreScaled"] : subItem["ScoreScaled"],
                                            ScoreCustomN_1: subItem["ScoreCustomN_1"] != null ? "" + subItem["ScoreCustomN_1"] : subItem["ScoreCustomN_1"],
                                            ScoreCustomN_2: subItem["ScoreCustomN_2"] != null ? "" + subItem["ScoreCustomN_2"] : subItem["ScoreCustomN_2"],
                                            ScoreCustomN_3: subItem["ScoreCustomN_3"] != null ? "" + subItem["ScoreCustomN_3"] : subItem["ScoreCustomN_3"],
                                            ScoreCustomN_4: subItem["ScoreCustomN_4"] != null ? "" + subItem["ScoreCustomN_4"] : subItem["ScoreCustomN_4"],
                                            ScoreCustomA_1: subItem["ScoreCustomA_1"],
                                            ScoreCustomA_2: subItem["ScoreCustomA_2"],
                                            ScoreCustomA_3: subItem["ScoreCustomA_3"],
                                            ScoreCustomA_4: subItem["ScoreCustomA_4"]
                                        };
                                        var name = "subScore_" + j;
                                        jsonData[name] = subScoreJsonData;
                                        exist = true;

                                        if (subItem.Artifacts && subItem.Artifacts.length) {
                                            jsonData[name].Artifacts = subItem.Artifacts;
                                        } else {
                                            jsonData[name].Artifacts = [];
                                        }

                                        if (subItem.Notes) {
                                            for (var i = 0; i < subItem.Notes.length; i++) {
                                                var noteItem = subItem.Notes[i];
                                                jsonData[name][noteItem["NoteColumnName"]] = noteItem["NoteValue"];
                                            }
                                            jsonData[name].Notes = subItem.Notes;
                                        } else {
                                            jsonData[name].Notes = [];
                                        }
                                    }
                                });

                                if (!exist) {
                                    var subScoreJsonData = {
                                        TestResultScoreSubID: 0,
                                        Name: response.CustomSubScores[j]["Name"],
                                        ScorePercent: null,
                                        ScorePercentage: null,
                                        ScoreRaw: null,
                                        ScoreScaled: null,
                                        ScoreCustomN_1: null,
                                        ScoreCustomN_2: null,
                                        ScoreCustomN_3: null,
                                        ScoreCustomN_4: null,
                                        ScoreCustomA_1: null,
                                        ScoreCustomA_2: null,
                                        ScoreCustomA_3: null,
                                        ScoreCustomA_4: null,
                                        Artifacts: []
                                    };
                                    var name = "subScore_" + j;
                                    jsonData[name] = subScoreJsonData;
                                    jsonData[name].Notes = null;
                                }
                            }
                        }

                        StudentEntryModel.handleSetValueExpression(jsonData, response.CustomScore, response.CustomSubScores);
                        hansonStudentData.push(jsonData);
                    });
                    columnData = [];
                    columnData.push(
                        { data: '', type: 'checkbox', className: 'htCenter htMiddle htCheckBox' },
                        { data: 'overallScore.FullNameDisplay', readOnly: true, renderer: "html" },
                        {
                            data: 'overallScore.ResultDate',
                            dateFormat: '@Model.DateFormatModel.HandsonTableDateFormat',
                            correctFormat: true,
                            readOnly: true,
                            width: 100,
                            className: 'htCenter text-end'
                        }
                    );
                    StudentEntryModel.arrEntryResultDate = response.EntryResultDates;
                    // $("#resultDate").datepicker("destroy");
                    $( "#resultDate" ).datepicker("refresh");
                    StudentEntryModel.printResult.customScore = response.CustomScore;
                    StudentEntryModel.printResult.customSubScores = response.CustomSubScores;

                    for (var i = 0, len = response.CustomSubScores.length; i < len; i++) {
                        var scoreSub = StudentEntryModel.printResult.customSubScores[i];

                        scoreSub.ScoreInfos = scoreSub.ScoreInfos.map(function(score) {
                            score.Id = scoreSub.Name + '::' + score.ScoreName;
                            return score;
                        });
                    }

                    colHeaderData = [
                        '<input type="checkbox" class="checker needsclick me-0">',
                        'Student',
                        'Result Date'
                    ];
                    colGroupHeaderData = [];
                    colGroupHeaderData.push({
                        label: '',
                        colspan: 3
                    });

                    if (isExistOverallScore) {
                        colGroupHeaderData.push({
                            label: '<span title="Overall Score">@LocalizeHelper.Localized("EnterResult.OverallScore")</span>',
                            colspan: response.CustomScore.ScoreInfos.length
                        });
                    }
                    var response = response;
                    $.each(response.CustomScore.ScoreInfos, function (i, item) {
                        var scoreName = item['ScoreName'];
                        var scoreLable = item['ScoreLable'];
                        var scoreDescription = item.MetaData != null ? item.MetaData.Description : '';

                        if (!scoreLable) {
                            scoreLable = '';
                        }

                        var scoreFormatNumeric = {
                            'Percent': 'overallScore.ScorePercent',
                            'Percentile': 'overallScore.ScorePercentage',
                            'Raw': 'overallScore.ScoreRaw',
                            'Scaled': 'overallScore.ScoreScaled',
                            'CustomN_1': 'overallScore.ScoreCustomN_1',
                            'CustomN_2': 'overallScore.ScoreCustomN_2',
                            'CustomN_3': 'overallScore.ScoreCustomN_3',
                            'CustomN_4': 'overallScore.ScoreCustomN_4'
                        };

                        var scoreFormatCustomText = {
                            'CustomA_1': 'overallScore.ScoreCustomA_1',
                            'CustomA_2': 'overallScore.ScoreCustomA_2',
                            'CustomA_3': 'overallScore.ScoreCustomA_3',
                            'CustomA_4': 'overallScore.ScoreCustomA_4'
                        };

                        Object.keys(scoreFormatNumeric).forEach(function(score) {
                            if (scoreName == score) {
                                var settings = response.PerformanceBandSettingScores;
                                settings && settings.forEach(function (setting) {
                                    if (compareScoreName(scoreName, setting.ScoreType)) {
                                        item.MetaData.ColorRule = {
                                            Bands: setting.Bands,
                                            Color: setting.Color,
                                            Cutoffs: setting.Cutoffs,
                                        }
                                    }
                                });
                                formatNumeric(item.MetaData, scoreFormatNumeric[score], scoreLable);
                            }
                        });

                        Object.keys(scoreFormatCustomText).forEach(function(score) {
                            if (scoreName == score) {
                                formatCustomText(item.MetaData, scoreFormatCustomText[score], scoreLable);
                            }
                        });

                        if (scoreName == 'Artifact') {
                            var colName = 'overallScore.ArtifactFileName';
                            if (item.MetaData != null) {
                                metaData[colName] = item.MetaData;
                            }
                            columnData.push({
                                data: colName,
                                renderer: artifactFolderButtonRender,
                                editor: false,
                                disableVisualSelection: true,
                                width: 160,
                                scoreDisplayName: 'Overallscore'
                            });
                        }

                        if (scoreName.indexOf('note') != -1) {
                            var colName = 'overallScore.' + scoreName;
                            if (item.MetaData != null) {
                                metaData[colName] = item.MetaData;
                            }
                            columnData.push({
                                data: colName,
                                renderer: noteButtonRenderer,
                                editor: false,
                                disableVisualSelection: true,
                                label: scoreLable,
                                width: Math.max(calculateTextRealWidth(scoreLable), 160)
                            });
                        }

                        if (item.MetaData != null && item.MetaData.IsAutoCalculation) {
                            metaDataCals.push({ scoreId: `${0}&${scoreName}`, expression: item.MetaData.Expression });
                        }

                        scoreLable = getHeaderString(scoreLable);
                        //TODO consider show massUpload in multiDateResult
                        //var massUpload = '<button class="btn-entry-result-score is-small mass-upload u-fw-400">Upload File(s)</button>';
                        var massUpload = ''
                        if (hasIconInfo(item)) {
                            var isCustomSubScores = false;
                            var infoIcon = buildIconInfo(item, response, isCustomSubScores);
                            var iconInfoContent = '<span class="icon icon-info js-info-action with-tip align-middle d-inline-block ms-2" title="' + infoIcon + '"></span>'

                            if (scoreLable === "Artifact") {
                                if (infoIcon.length) {
                                    colHeaderData.push('<span">' + scoreLable + ' ' + iconInfoContent + '</span >' + massUpload);
                                }
                                else {
                                    colHeaderData.push(scoreLable + massUpload);
                                }
                            }
                            else {
                                colHeaderData.push('<span>' + scoreLable + iconInfoContent + '</span>');
                            }
                        } else {
                            if (scoreLable === "Artifact") {
                                colHeaderData.push(scoreLable + massUpload);
                            } else {
                                colHeaderData.push(scoreLable);
                            }
                        }
                    });

                    subScoreLength = 0;

                    if (response.CustomSubScores != 'undefined' && response.CustomSubScores.length > 0) {
                        subScoreLength = response.CustomSubScores.length;
                        for (var i = 0; i < subScoreLength; i++) {
                            var subScore = 'subScore_' + i;

                            if (response.CustomSubScores[i].ScoreInfos.length > 0) {
                                colGroupHeaderData.push({
                                    label: '<span class="subscore-name"' + (i === subScoreLength - 1 ? 'padding: 0px 19px 0px 8px;' : 'padding: 0px 8px;') + ' display: inline-block" title="' + response.CustomSubScores[i].Name + '">' + getHeaderString(response.CustomSubScores[i].Name) + '</span>',
                                    colspan: response.CustomSubScores[i].ScoreInfos.length
                                });
                            }

                            $.each(response.CustomSubScores[i].ScoreInfos, function(index, item) {
                                var subScoreName = item['ScoreName'];
                                var subScoreLable = item['ScoreLable'];
                                var subScoreDescription = item.MetaData != null ? item.MetaData.Description : '';

                                if (!subScoreLable) {
                                    subScoreLable = '';
                                }

                                var subScoreFormatNumeric = {
                                    'Percent': subScore + '.ScorePercent',
                                    'Percentile': subScore + '.ScorePercentage',
                                    'Raw': subScore + '.ScoreRaw',
                                    'Scaled': subScore + '.ScoreScaled',
                                    'CustomN_1': subScore + '.ScoreCustomN_1',
                                    'CustomN_2': subScore + '.ScoreCustomN_2',
                                    'CustomN_3': subScore + '.ScoreCustomN_3',
                                    'CustomN_4': subScore + '.ScoreCustomN_4'
                                };

                                var subScoreFormatCustomText = {
                                    'CustomA_1': subScore + '.ScoreCustomA_1',
                                    'CustomA_2': subScore + '.ScoreCustomA_2',
                                    'CustomA_3': subScore + '.ScoreCustomA_3',
                                    'CustomA_4': subScore + '.ScoreCustomA_4'
                                };

                                Object.keys(subScoreFormatNumeric).forEach(function(score) {
                                    if (subScoreName == score) {
                                        var subscoreName = item.Id.split('::')[0];
                                        var settings = response.PerformanceBandSettingSubScores;
                                        settings && settings.forEach(function (setting) {
                                            if (compareScoreName(score, setting.ScoreType) && subscoreName === setting.SubScoreName) {
                                                item.MetaData.ColorRule = {
                                                    Bands: setting.Bands,
                                                    Color: setting.Color,
                                                    Cutoffs: setting.Cutoffs,
                                                }
                                            }
                                        });
                                        formatNumeric(item.MetaData, subScoreFormatNumeric[score], subScoreLable);
                                    }
                                });

                                Object.keys(subScoreFormatCustomText).forEach(function(score) {
                                    if (subScoreName == score) {
                                        formatCustomText(item.MetaData, subScoreFormatCustomText[score], subScoreLable);
                                    }
                                });

                                if (subScoreName == 'Artifact') {
                                    var colName = subScore + '.ArtifactFileName';

                                    if (item.MetaData != null) {
                                        metaData[colName] = item.MetaData;
                                    }
                                    columnData.push({
                                        data: colName,
                                        renderer: artifactFolderButtonRender,
                                        editor: false,
                                        disableVisualSelection: true,
                                        width: 160,
                                        scoreDisplayName: response.CustomSubScores[i].Name
                                    });
                                }

                                if (subScoreName.indexOf('note') != -1) {
                                    var colName = subScore + '.' + subScoreName;
                                    if (item.MetaData != null) {
                                        metaData[colName] = item.MetaData;
                                    }
                                    columnData.push({
                                        data: colName,
                                        renderer: noteButtonRenderer,
                                        editor: false,
                                        disableVisualSelection: true,
                                        label: subScoreLable,
                                        width: Math.max(calculateTextRealWidth(subScoreLable), 160)
                                    });
                                }

                                if (item.MetaData != null && item.MetaData.IsAutoCalculation) {
                                    var scoreMetaId = `${response.CustomSubScores[i].VirtualTestCustomSubScoreId}&${subScoreName}`;
                                    metaDataCals.push({ scoreId: scoreMetaId, expression: item.MetaData.Expression });
                                }

                                subScoreLable = getHeaderString(subScoreLable);
                                 //TODO consider showing massUpload in multiDateResult
                                //var massUpload = '<button class="btn-entry-result-score is-small mass-upload u-fw-400">Upload File(s)</button>';
                                var massUpload = ''
                                if (hasIconInfo(item)) {
                                    var isCustomSubScores = true;
                                    var infoIcon = buildIconInfo(item, response.CustomSubScores[i].ScoreInfos, isCustomSubScores, response);
                                    var iconInfoContent = '<span class="icon icon-info js-info-action with-tip align-middle d-inline-block ms-2" title="' + infoIcon + '"></span>'

                                    if (subScoreLable === "Artifact") {
                                        if (infoIcon.length) {
                                            colHeaderData.push('<span>' + subScoreLable + ' ' + iconInfoContent + '</span >' + massUpload);
                                        }
                                        else {
                                            colHeaderData.push(subScoreLable + massUpload);
                                        }
                                    }
                                    else {
                                        colHeaderData.push('<span>' + subScoreLable + iconInfoContent + '</span>');
                                    }
                                } else {
                                    if (subScoreLable === "Artifact") {
                                        colHeaderData.push(subScoreLable + massUpload);
                                    } else {
                                        colHeaderData.push(subScoreLable);
                                    }
                                }
                            });
                        }
                    }


                    var $studentEntryResult = $('div[name="studentEntryResult"]');
                    var studentEntryResultHeight = $(window).width() >= 1600 ? 530 : 410;

                    if ($('body').hasClass('data-locker-fullscreen')) {
                        var HEIGHT_FULLSCREEN = 410;
                        studentEntryResultHeight = window.innerHeight - HEIGHT_FULLSCREEN;
                    }
                    //convert value to label or both for dropdown numeric
                    convertValueToLabelDropdownNumeric();

                    // recalculate dropdown position/height
                    var recalculateDropdownCss = function () {
                        var dropDown = document.querySelector('.handsontableInputHolder[style*="display: block"] .autocompleteEditor');
                        if (dropDown) {
                            var defaultHeightDropdown = 120;

                            var contentHeight = +dropDown.querySelector('.wtHider').style.height.replace('px', '');
                            var holder = dropDown.querySelector('.wtHolder');
                            var handsontable = document.querySelector('div[name="studentEntryResult"] .handsontable.ht_master');
                            var handsontableRect = handsontable.getBoundingClientRect();
                            var headerHeight = handsontable.querySelector('thead').getBoundingClientRect().height;
                            var tableBox = {
                                y: handsontableRect.y + headerHeight,
                                height: handsontableRect.height - headerHeight
                            }
                            var tableCenterY = tableBox.y + tableBox.height / 2;
                            var inputRect = dropDown.parentElement.querySelector('.handsontableInput').getBoundingClientRect();
                            var showOnTop = inputRect.y + inputRect.height / 2 >= tableCenterY;
                            var height = contentHeight;
                            if (showOnTop) {
                                height = Math.min(height, inputRect.y - tableBox.y);
                                if (height > defaultHeightDropdown) {
                                    dropDown.style.setProperty('position', 'absolute', 'important');
                                    dropDown.style.setProperty('top', (-height + 'px'), 'important');
                                }
                            } else {
                                height = Math.min(height, tableBox.y + tableBox.height - inputRect.height - inputRect.y);
                                dropDown.style.setProperty('position', 'absolute', 'important');
                                dropDown.style.setProperty('top', 'unset', 'important');

                                if ((tableBox.y + tableBox.height - inputRect.height - inputRect.y) <= defaultHeightDropdown) {
                                    height = defaultHeightDropdown + 30;
                                    dropDown.style.setProperty('position', 'fixed ', 'important');
                                    dropDown.style.setProperty('top', 'unset', 'important');
                                    dropDown.style.setProperty('transform', 'translateY(-' + (window.pageYOffset || document.documentElement.scrollTop) + 'px)', 'important');
                                }
                            }

                            dropDown.style.height = height + 'px';
                            holder.style.height = height + 'px';
                            $(holder).scrollTop(2)
                            $(holder).scrollTop(0)
                        }
                    }

                    var table = $studentEntryResult.handsontable({
                        data: hansonStudentData,
                        observeChanges: true,
                        beforeChange: function(changes, source) {
                            if (source === 'edit' && changes.length > 0) {
                                for (var i = 0, len = changes.length; i < len; i++) {
                                    var colName = changes[i][1];
                                    // Format uppercase
                                    var rule = metaData[colName];
                                    if (rule != null && rule.UpperCaseOnly != null &&
                                        rule.UpperCaseOnly && changes[i][3] != null && changes[i][3] != '') {
                                        changes[i][3] = changes[i][3].toUpperCase();
                                    }

                                    // Format escape html for dropdown
                                    if (rule != null && rule.DataType != null && changes[i][3] != null && changes[i][3] != '') {
                                        if (rule.DataType === 'SelectList') {
                                            changes[i][3] = unescapeHtml(changes[i][3]);
                                        }
                                    }
                                }
                            }
                        },

                        nestedHeaders: [colGroupHeaderData, colHeaderData],
                        columns: columnData,
                        minSpareRows: 0,
                        height: studentEntryResultHeight,
                        formulas: false,
                        fixedColumnsLeft: 3,
                        manualColumnResize: true,
                        rowHeights: [31],
                        contextMenu: false,
                        fillHandle: false,
                        afterInit: afterInitTooltip,
                        afterLoadData: afterInitTooltip,
                        afterScrollHorizontally: afterScrollUpdateTooltip,
                        afterScrollVertically: afterScrollUpdateTooltip,
                        afterChange: afterChangeUpdateTooltipAndAutoCalcu,
                        afterColumnResize: afterInitTooltip,
                        licenseKey: 'a70f6-b55ab-a3862-0471e-e915a',
                        afterBeginEditing: function () {
                            // delay for handsontable dropdown content rendering. then recalculate
                            setTimeout(recalculateDropdownCss, 10);
                        },
                        afterRender: function () {
                            var realHeight = $studentEntryResult.find('.ht_master .wtHider .htCore').height() + 2;
                            if (realHeight <= ($(window).width() >= 1600 ? 530 : 410)) {
                                $studentEntryResult.css('height', realHeight + 17 + 'px');
                                $studentEntryResult.find('.ht_master .wtHolder').css('height', realHeight + 17 + 'px');
                            }
                            if (hansonStudentData.every(function (item) { return item[""] === true })) {
                                $('input.checker').attr('checked', true);
                            } else {
                                $('input.checker').attr('checked', false);
                            }
                        },
                        afterSelection: function () {
                            setTimeout(function () {
                                toggleShowBtnStudentResult();
                            }, 200)
                        },
                        beforeRenderer: function (td, row, col, prop, value, cp) {
                            var hot = this;
                            var rule = metaData[prop];
                            var colorRule = rule ? rule.ColorRule : null;
                            if (rule) {
                                if (rule.FormatOption === "LabelValueText") {
                                    var matchValue = value ? value.toString().match(/\(([^)]+)\)/) : null;
                                    if (rule.DisplayOption === "both") {
                                        value = matchValue ? parseFloat(matchValue[1]) : NaN;
                                    } else if (rule.DisplayOption === "label") {
                                        var selectedOption = rule.SelectListOptions.filter(function (item) {
                                            return item.Label === value;
                                        });
                                        if (selectedOption.length > 0) {
                                            value = parseFloat(selectedOption[0].Option);
                                        }
                                    } else {
                                        value = parseFloat(value);
                                    }
                                } else {
                                    value = parseFloat(value || hot.getDataAtCell(row, col));
                                }
                                if (value !== '' && value !== null && !isNaN(value) && colorRule) {
                                    var colors = colorRule.Color ? colorRule.Color.split(";") : [];
                                    var bands = colorRule.Bands ? colorRule.Bands.split(";") : [];
                                    var cutoffs = colorRule.Cutoffs ? colorRule.Cutoffs.split(",").map(function (cutoff) { return parseFloat(cutoff) }) : [];
                                    if (colors.length === 0) {
                                        bands.forEach(function (band, index) {
                                            var colorStyle = getPerformanceStyle({
                                                scoreIndex: index,
                                                colorBand: bands.length
                                            });
                                            colors.push(colorStyle.bgColor);
                                        });
                                    }
                                    colors.forEach(function (color, index) {
                                        if (value >= cutoffs[0]) {
                                            hot.setCellMetaObject(row, col, {
                                                bgColor: colors[0],
                                                color: getContrastColor(colors[0]),
                                                bandText: bands[0],
                                            });
                                        } else if (value < cutoffs[cutoffs.length - 1]) {
                                            hot.setCellMetaObject(row, col, {
                                                bgColor: colors[colors.length - 1],
                                                color: getContrastColor(colors[colors.length - 1]),
                                                bandText: bands[colors.length - 1],
                                            });
                                        } else if (value >= cutoffs[index + 1] && value < cutoffs[index]) {
                                            hot.setCellMetaObject(row, col, {
                                                bgColor: colors[index + 1],
                                                color: getContrastColor(colors[index + 1]),
                                                bandText: bands[index + 1],
                                            });
                                        }
                                    })
                                    if (!rule.IsAutoCalculation && ((rule.MaxValue !== null && value > rule.MaxValue) || (rule.MinValue !== null && value < rule.MinValue))) {
                                        hot.setCellMetaObject(row, col, {
                                            bgColor: null,
                                            color: null,
                                            bandText: null,
                                        });
                                    }
                                } else {
                                    hot.setCellMetaObject(row, col, {
                                        bgColor: null,
                                        color: null,
                                        bandText: null,
                                    });
                                }
                            }
                        },
                        afterRenderer: function (td, row, col, pro, value, cp) {
                            if ('@Model.AllowChangeResultDate' === "0") {
                                var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                                var studentDateResult = hansonStudentData[row].overallScore.ResultDate;
                                var testResultID = hansonStudentData[row].overallScore.TestResultID;
                                var dateSelected = $('#resultDate').val();
                                if (moment().format(resultDateFormat) != moment(dateSelected).format(resultDateFormat) && '@Model.HasTestResult' === "True" && pro != "overallScore.FullNameDisplay" && !$(td).hasClass('htCheckBox')) {
                                    var checkExistTestReultID = hansonStudentData.filter(function (testResult) { return testResult.overallScore.TestResultID != null && testResult.overallScore.TestResultID > 0 });
                                    if (checkExistTestReultID.length > 0) {
                                        this.setCellMeta(row, col, 'readOnly', true);
                                        $(td).css('pointer-events', 'none');
                                    }
                                    else {
                                        var studentID = hansonStudentData[row].overallScore.StudentID;
                                        if (testResultID != null && testResultID > 0) {
                                            if (studentResultDates == null || studentResultDates.length === 0) {
                                                if (moment(studentDateResult).format(resultDateFormat) === moment(dateSelected).format(resultDateFormat)) {
                                                    this.setCellMeta(row, col, 'readOnly', true);
                                                    $(td).css('pointer-events', 'none');
                                                }
                                            }
                                            else {
                                                var studentResultDatesFilter = studentResultDates.find(function (student) { return student.StudentId === studentID });
                                                if (studentResultDatesFilter != null) {
                                                    var resultDatesFilter = studentResultDatesFilter.ResultDates;
                                                    if (resultDatesFilter != null) {
                                                        var dateFilter = resultDatesFilter.filter(function (resultDate) { return moment(resultDate).format(resultDateFormat) == moment(dateSelected).format(resultDateFormat) })
                                                        if (dateFilter.length > 0) {
                                                            this.setCellMeta(row, col, 'readOnly', true);
                                                            $(td).css('pointer-events', 'none');
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        stretchH: 'all'
                    });

                    $sectionStudentEntry.unblock();

                    if (!!response.ActualTestResultScoresJson) {
                        oldHandsonStudentData = JSON.parse(response.ActualTestResultScoresJson);
                    } else {
                        oldHandsonStudentData = JSON.stringify(hansonStudentData);
                    }
                    oldHandsonStudentDataAutoSave = JSON.stringify(hansonStudentData);
                    $studentEntryResult.handsontable('validateCells');

                    if (StudentEntryModel.isWarningPrint) {
                        StudentEntryModel.showPrintResults();
                    }

                    initializeTooltip('.student-entry-result thead th span[title]', {
                        attr: 'title',
                        classes: 'qtip-yellow qtip-custom'
                    });
                    $('.qtip-red').remove();
                    toggleShowBtnStudentResult();
                }
            });
        }

        function toggleShowBtnStudentResult() {
            var rowSelected = $('div[name="studentEntryResult"] table tbody .htCheckBox input[type=checkbox]:checked');
            var dataRowSelected = hansonStudentData.some(function (item) { return item[""] });
            if (rowSelected.length || dataRowSelected) {
                $('#btn-student-result').show();
            } else {
                $('#btn-student-result').hide();
                indexCheckedBox = [];
            }
        }

        function convertValueToLabelDropdownNumeric() {
            $.each(hansonStudentData, function(k, item) {
                var overallScore = item.overallScore;
                if (overallScore != null) {
                    overallScore.ScoreCustomN_1 = getDisplayFromValue(overallScore.ScoreCustomN_1, "overallScore.ScoreCustomN_1");
                    overallScore.ScoreCustomN_2 = getDisplayFromValue(overallScore.ScoreCustomN_2, "overallScore.ScoreCustomN_2");
                    overallScore.ScoreCustomN_3 = getDisplayFromValue(overallScore.ScoreCustomN_3, "overallScore.ScoreCustomN_3");
                    overallScore.ScoreCustomN_4 = getDisplayFromValue(overallScore.ScoreCustomN_4, "overallScore.ScoreCustomN_4");
                }

                for (var i = 0; i < subScoreLength; i++) {
                    var name = "subScore_" + i;
                    var subscore = item[name];
                    if (subscore != null) {
                        subscore.ScoreCustomN_1 = getDisplayFromValue(subscore.ScoreCustomN_1, name + ".ScoreCustomN_1");
                        subscore.ScoreCustomN_2 = getDisplayFromValue(subscore.ScoreCustomN_2, name + ".ScoreCustomN_2");
                        subscore.ScoreCustomN_3 = getDisplayFromValue(subscore.ScoreCustomN_3, name + ".ScoreCustomN_3");
                        subscore.ScoreCustomN_4 = getDisplayFromValue(subscore.ScoreCustomN_4, name + ".ScoreCustomN_4");
                    }
                }
            });
        }

        function hasIconInfo(item) {
            if (item.MetaData) {
                if (item.MetaData.MaxLength
                    || item.MetaData.MaxValue != null
                    || item.MetaData.MinValue != null
                    || item.MetaData.Description
                    || item.MetaData.DecimalScale != null
                    || item.MetaData.MaxFileSize
                    || item.MetaData.IsAutoCalculation) {
                    return true;
                }
            }
            return false;
        }

        function afterScrollUpdateTooltip() {
            afterInitTooltip();
            afterValidateTooltip();
            recalculateHeightTableHeader();
        }

        function initializeTooltip(element, settings) {
            $(element).qtip({
                overwrite: false,
                content: {
                    attr: settings.attr
                },
                position: {
                    my: 'bottom center',
                    at: 'top center'
                },
                show: {
                    event: 'mouseover'
                },
                hide: {
                    event: 'mouseout'
                },
                style: {
                    classes: settings.classes
                },
                hide: {
                    fixed: true,
                    delay: 300
                },
                events: {
                    show: function() {
                        var $self = $(this);
                        var qtipId = $self.attr('data-qtip-id');
                        var iconEl = $(`.icon-info[data-hasqtip=${qtipId}]`);
                        var arrowHeight = 6;
                        if (iconEl.length > 0) {
                            var maxHeightTooltip = iconEl.offset().top - $('html').scrollTop() - 18;
                            $self.addClass('custom-top');
                            $self.find('.qtip-content').css('max-height', maxHeightTooltip);
                        }
                    }
                }
            });

        }

        function afterInitTooltip() {
            initializeTooltip('.student-entry-result thead th span[title]', {
                attr: 'title',
                classes: 'qtip-yellow qtip-custom'
            });
        }
        function afterValidateTooltip() {
            initializeTooltip('.student-entry-result tbody td.htInvalid', {
                attr: 'data-invalid',
                classes: 'qtip-red'
            });
        }

        function afterChangeUpdateTooltipAndAutoCalcu(changes, source) {
            completedChange = false;
            var eventSources = ['edit', 'CopyPaste.paste', 'UndoRedo.redo', 'UndoRedo.undo'];
            if (eventSources.includes(source) && changes.length) {
                var dataCheckbox = $('div[name="studentEntryResult"]').handsontable('getDataAtCol', 0);
                //Update data multiple row
                updateMultiData(changes, source);
                dataCheckbox = dataCheckbox.map(function(cb) {
                    return cb;
                });



                autoCalcuData(changes, dataCheckbox);

                var $sectionStudentEntry = $('#sectionStudentEntry');
                $sectionStudentEntry.find('div[name="studentEntryResult"] td').qtip('destroy', true);
                afterScrollUpdateTooltip();


            }

            completedChange = true;
            toggleShowBtnStudentResult();
        }

        function getValueFromLabelDropdown(label, prop) {
            if (!!label && !!metaData[prop].FormatOption && metaData[prop].FormatOption.toLowerCase() === 'labelvaluetext') {
                var value = label;
                if (!!metaData[prop].DisplayOption && metaData[prop].DisplayOption == "label") {
                    var result = metaData[prop].SelectListOptions.filter(function(option) {
                        return option.Label == value;
                    });
                    if (!!result && result.length > 0) {
                        value = result[0].Option;
                    }
                }
                if (!!metaData[prop].DisplayOption && metaData[prop].DisplayOption == "both") {
                    value = value.substring(value.indexOf('(') + 1, value.indexOf(')'));
                }

                return value;
            }

            return label;
        }

        function getDisplayFromValue(value, prop) {
            if (!!value && !!metaData[prop].DisplayOption && !! metaData[prop].SelectListOptions && !!metaData[prop].FormatOption && metaData[prop].FormatOption.toLowerCase() === 'labelvaluetext') {
                var label = value;
                var result = metaData[prop].SelectListOptions.filter(function(option) {
                    return parseFloat(option.Option) == parseFloat(value);
                });
                if (!!result && result.length > 0) {
                    if (metaData[prop].DisplayOption == "label") {
                        label = result[0].Label;
                    }
                    if (metaData[prop].DisplayOption == "both") {
                        label = result[0].Label + ' (' + result[0].Option + ')';
                    }
                }
                return label;
            }

            return value;
        }

        function validatorAutoCalculation(value, callback) {
            var rule = metaData[this.prop];
            var ruleDataType = rule.DataType;
            var cell = this.instance.getCell(this.row, this.col);
            var $selected = $(cell);

            if (value === 'NaN') {
                $selected.attr('data-invalid', 'The formula used is dividing by zero or empty cells.');
                callback(false);
            } else {
                $selected.removeAttr('data-invalid');
                callback(true);
            }
        }

        function validatorRangeByNumber(value, callback) {
            var rule = metaData[this.prop];
            var cell = this.instance.getCell(this.row, this.col);
            var $selected = $(cell);

            if (value === '' || value == null) {
                $selected.removeAttr('data-invalid');
                callback(true);
            } else if (!/^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$/.test(value)) {
                $selected.attr('data-invalid', 'You can only enter numbers here');
                callback(false);
            } else {
                var format = 0;

                if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 1) {
                    format = 1;
                } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 2) {
                    format = 2;
                } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 3) {
                    format = 3;
                }

                if (rule.MinValue != null && rule.MaxValue != null && (rule.MinValue > value || rule.MaxValue < value)) {
                    $selected.attr('data-invalid', 'You can only enter a score between ' + rule.MinValue.toFixed(format) + ' and ' + rule.MaxValue.toFixed(format));
                    callback(false);
                } else if (rule.MinValue != null && rule.MinValue > value) {
                    $selected.attr('data-invalid', 'You can only enter a score more than ' + rule.MinValue.toFixed(format));
                    callback(false);
                } else if (rule.MaxValue != null && rule.MaxValue < value) {
                    $selected.attr('data-invalid', 'You can only enter a score less than ' + rule.MaxValue.toFixed(format));
                    callback(false);
                } else {
                    $selected.removeAttr('data-invalid');
                    callback(true);
                }
            }
        }

        function validatorAlphabet(value, callback) {
            var rule = metaData[this.prop];
            var ruleDataType = rule.DataType;
            var cell = this.instance.getCell(this.row, this.col);
            var $selected = $(cell);

            if (!/^[a-zA-Z0-9]*$/.test(value) && ruleDataType === 'Alphanumeric') {
                $selected.attr('data-invalid', 'You can only enter letters and/or numbers here. No spaces, symbols and special characters are allowed');
                callback(false);
            } else if (!/^[a-zA-Z]*$/.test(value) && ruleDataType === 'Alphabetic') {
                $selected.attr('data-invalid', 'You can only enter letters here. No numbers, spaces, symbols and special characters are allowed');
                callback(false);
            } else if (rule.MaxLength != null && value != null && value.length > rule.MaxLength) {
                $selected.attr('data-invalid', 'You cannot enter more than ' + rule.MaxLength + ' characters');
                callback(false);
            } else {
                $selected.removeAttr('data-invalid');
                callback(true);
            }
        }

        function validatorDropDown(value, callback) {
            callback(true);
        }

        function validatorAutoComplete(value, callback) {
            var customParameter = this.customParameter;
            var cell = this.instance.getCell(this.row, this.col);
            var $selected = $(cell);
            var result = false;
            if (value) {
                for (var i = 0; i < customParameter.length; i++) {
                    if (customParameter[i] == value) {
                        result = true;
                        break;
                    }
                }
            }

            if (!result && value) {
                $selected.attr('data-invalid', 'You can enter the value listed in the dropdown only');
                callback(false);
            } else {
                $selected.removeAttr('data-invalid');
                callback(true);
            }
        }

        function buttonRendererClick(button, cp) {
            Handsontable.dom.addEvent(button, 'click', function(e) {
                e.preventDefault();
                var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
                var selection = hot.getSelectedLast();
                var row = selection[0];
                var col = selection[1];
                var $button = $(this);

                $button.siblings().removeClass('selected');

                if ($button.hasClass('selected')) {
                    $button.removeClass('selected');
                    hot.setDataAtCell(row, col, '');
                } else {
                    $button.addClass('selected');
                    hot.setDataAtCell(row, col, $button.text());
                    $button[0].style.backgroundColor = cp.bgColor || '#50a3c8';
                    $button[0].style.borderColor = cp.bgColor || '#50a3c8';
                    $button[0].style.color = cp.color || '#fff';
                }
            });
        }

        function buttonRenderer(instance, td, row, col, prop, value, cp) {
            Handsontable.dom.empty(td);

            for (var i = metaData[prop].MinValue; i <= metaData[prop].MaxValue; i++) {
                var button = document.createElement('button');
                var value = parseInt(value, 10);

                button.className = 'btn-entry-result-score is-small u-fw-400';
                button.textContent = i;

                if (i === value) {
                    button.className = button.className + ' ' + 'selected';
                    button.style.backgroundColor = cp.bgColor || '#50a3c8';
                    button.style.borderColor = cp.bgColor || '#50a3c8';
                    button.style.color = cp.color || '#fff';
                }

                buttonRendererClick(button, cp);

                td.appendChild(button);
            }
            $(td).addClass('text-nowrap');

            return td;
        }

        function artifactFolderButtonRender(instance, td, row, col, prop) {
            Handsontable.dom.empty(td);
            var lengthArtifacts = hansonStudentData[row].overallScore
            var uploadBtn = document.createElement('button');
            uploadBtn.className = 'btn-entry-result-score icon-red border-0';
            uploadBtn.innerHTML = "Upload File <i class='fa-solid fa-upload ms-2'></i>";

            var folderBtn = document.createElement('a');
            folderBtn.className = 'with-tip artifact-folder-btn';
            folderBtn.title = "";

            td.classList.add('htCenter');
            td.classList.add('htMiddle');

            td.appendChild(folderBtn);
            td.appendChild(uploadBtn);
            artifactFolderButtonEventClick(folderBtn, td, row, col, prop);
            artifactFolderButtonEventClick(uploadBtn, td, row, col, prop);

            if (columnData[col].data.indexOf('overallScore') > -1) {
                if (hansonStudentData[row].overallScore.Artifacts.length > 0) {
                    var length = hansonStudentData[row].overallScore.Artifacts.length;
                    var folderIconHtml = getArtifactsHTML(length);
                    folderBtn.appendChild(folderIconHtml);
                    $(uploadBtn).hide()
                } else {
                    $(folderBtn).hide();
                }
            } else {
                var topScoreName = columnData[col].data.split('.')[0];
                if (hansonStudentData[row][topScoreName].Artifacts.length > 0) {
                    var length = hansonStudentData[row][topScoreName].Artifacts.length;
                    var folderIconHtml = getArtifactsHTML(length);
                    folderBtn.appendChild(folderIconHtml);
                    $(uploadBtn).hide();
                } else {
                    $(folderBtn).hide();
                }
            }


        }

        function getArtifactsHTML(numberOfArtifacts) {
            if (!numberOfArtifacts) {
                numberOfArtifacts = 0;
            }

            var artifactsHtml = document.createElement('span');
            var artifactsNumber = document.createElement('span');
            var artifactsIcon = document.createElement('img');

            artifactsNumber.className = 'count-artifacts';
            artifactsNumber.textContent = '[' + numberOfArtifacts + ']';

            artifactsIcon.className = 'image-folder';
            artifactsIcon.src = '@BundleHelper.Version("~/Content/themes/Constellation/images/icons/folderIconV2.svg")';
            artifactsIcon.style.width = '16px';
            artifactsIcon.style.height = '16px';

            artifactsHtml.appendChild(artifactsIcon);
            artifactsHtml.appendChild(artifactsNumber);


            return artifactsHtml;
        }

        function artifactFolderButtonEventClick(button, td, row, col, prop) {
            Handsontable.dom.addEvent(button, 'click', function(e) {
                e.preventDefault();
                StudentEntryModel.tagList = metaData[prop].ListArtifactTag;
                if (StudentEntryModel.tagList != null && StudentEntryModel.tagList[0] != "") {
                    StudentEntryModel.tagList.unshift("");
                }
                StudentEntryModel.isShowModalArtifactFolder = true;
                StudentEntryModel.selectedTD = td;
                StudentEntryModel.selectedRow = row;
                StudentEntryModel.selectedCol = col;

                StudentEntryModel.studentName = hansonStudentData[row].overallScore.FullName;
                StudentEntryModel.artifactFolderModalVM.currentScore = columnData[col].scoreDisplayName;
                if (columnData[col].data.indexOf('overallScore') > -1) {
                    StudentEntryModel.artifactFolderModalVM.isOverallScore = true;
                    StudentEntryModel.artifactFolderModalVM.artifacts = JSON.parse(JSON.stringify(hansonStudentData[row].overallScore.Artifacts));

                } else {
                    StudentEntryModel.artifactFolderModalVM.isOverallScore = false;
                    var topScoreName = columnData[col].data.split('.')[0];
                    StudentEntryModel.artifactFolderModalVM.artifacts = JSON.parse(JSON.stringify(hansonStudentData[row][topScoreName].Artifacts));
                }

                var fileUploadMeta = metaData[columnData[col].data];
                if (fileUploadMeta) {
                    var arrTypeUploadsFilter = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel.filter(function (item) { return fileUploadMeta.UploadFileTypes.includes(item.Name) });
                    StudentEntryModel.artifactFolderModalVM.allowFileTypes = arrTypeUploadsFilter?.map(function (item) { return item.DisplayName }).join(', ');
                    StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups = arrTypeUploadsFilter;
                    StudentEntryModel.artifactFolderModalVM.maxFileSize = fileUploadMeta.MaxFileSize;
                    StudentEntryModel.artifactFolderModalVM.artifactFileTypeGroup = fileUploadMeta.EntryResultArtifactFileTypeGroupViewModel;
                }

                StudentEntryModel.initArtifactFolderModal();

                setUploadifive(StudentEntryModel.artifactFolderModalVM.allowFileTypeInGroups, StudentEntryModel.artifactFolderModalVM.maxFileSize);
            });
        }

        function formatNumeric(rule, colName, label) {
            var colorRule = rule.ColorRule;
            if (colorRule) {
                var bands = colorRule.Bands ? colorRule.Bands.split(';') : [];
                var cutoffs = colorRule.Cutoffs ? colorRule.Cutoffs.split(',') : [];
                var maxTextLabel = label;
                bands.forEach(function (band) { if (band.length > maxTextLabel.length) maxTextLabel = band });
                maxTextLabel += rule.MaxValue + cutoffs[0];
                if (typeof rule.DecimalScale !== 'undefined') {
                    for (i = 0; i < rule.DecimalScale; i++) {
                        maxTextLabel += "0";
                    }
                }
            }

            var format = '0';
            var toFormat = 0;
            if (rule != null && rule.DataType != null && rule.DataType == "Numeric") {
                if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 1) {
                    format = '0.0';
                    toFormat = 1;
                } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 2) {
                    format = '0.00';
                    toFormat = 2;
                } else if (typeof rule.DecimalScale !== 'undefined' && rule.DecimalScale == 3) {
                    format = '0.000';
                    toFormat = 3;
                }
            }

            if (rule != null && rule.DataHostPot != null && rule.DataHostPot === 'clickable') {
                columnData.push({
                    data: colName,
                    renderer: buttonRenderer,
                    editor: false,
                    disableVisualSelection: true,
                    width: Math.max(((rule.MaxValue - rule.MinValue + 1) * calculateTextRealWidth(rule.MaxValue, true)) + 24, calculateTextRealWidth(label))
                });
            } else if (rule != null && (rule.DataHostPot != null && rule.DataHostPot === 'dropdownlist' && rule.FormatOption?.toLowerCase() != 'labelvaluetext')) {
                var sourceDataList = [];
                if (rule.MinValue != null && rule.MaxValue != null) {
                    for (var i = rule.MinValue; i <= rule.MaxValue; i++) {
                        sourceDataList.push(i.toFixed(toFormat));
                    }
                    if (rule.DataType != null && rule.DataType == "Numeric") {
                        setFormatForDropdowValue(colName, toFormat);
                    }
                }

                columnData.push({
                    data: colName,
                    type: 'autocomplete',
                    source: sourceDataList,
                    strict: true,
                    filter: false,
                    allowInvalid: true,
                    validator: validatorAutoComplete,
                    customParameter: sourceDataList,
                    width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel, true)) : calculateTextRealWidth(label),
                    className: 'htRight needsclick',
                    renderer: colorDropdownRenderer,
                });
            } else if (rule != null && rule.DataType == "Numeric" && rule.SelectListOptions != null && rule.SelectListOptions.length > 0) {
                var sourceValList = [];
                if (!!rule.DisplayOption && !!rule.FormatOption && rule.FormatOption.toLowerCase() === 'labelvaluetext') {
                    if (rule.DisplayOption == "value") {
                        for (var i = 0; i < rule.SelectListOptions.length; i++) {
                            sourceValList.push(rule.SelectListOptions[i].Option);
                        }
                        setFormatForDropdowValue(colName, toFormat);
                    }
                    if (rule.DisplayOption == "label") {
                        for (var i = 0; i < rule.SelectListOptions.length; i++) {
                            var lb = rule.SelectListOptions[i].Label;
                            sourceValList.push(lb);
                        }
                    }
                    if (rule.DisplayOption == "both") {
                        for (var i = 0; i < rule.SelectListOptions.length; i++) {
                            var lbBoth = rule.SelectListOptions[i].Label;
                            var val = lbBoth + ' (' + rule.SelectListOptions[i].Option + ')';
                            sourceValList.push(val);
                        }
                    }
                } else {
                    for (var i = 0; i < rule.SelectListOptions.length; i++) {
                        sourceValList.push(rule.SelectListOptions[i].Option);
                    }
                    setFormatForDropdowValue(colName, toFormat);
                }

                columnData.push({
                    data: colName,
                    type: 'autocomplete',
                    source: sourceValList,
                    strict: true,
                    filter: false,
                    validator: validatorAutoComplete,
                    customParameter: sourceValList,
                    allowInvalid: true,
                    width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel, true)) : calculateTextRealWidth(label),
                    className: 'htRight needsclick',
                    renderer: colorDropdownRenderer,
                    allowHtml: true
                });
            } else if (rule != null && rule.IsAutoCalculation) {
                columnData.push({
                    data: colName,
                    type: 'numeric',
                    readOnly: true,
                    numericFormat: {
                        pattern: format
                    },
                    validator: validatorAutoCalculation,
                    className: 'htRight',
                    renderer: colorNumericRenderer,
                    width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel)) : calculateTextRealWidth(label)
                });
            } else {
                columnData.push({
                    data: colName,
                    type: 'numeric',
                    numericFormat: {
                        pattern: format
                    },
                    validator: validatorRangeByNumber,
                    className: 'htRight',
                    renderer: colorNumericRenderer,
                    width: colorRule ? Math.max(calculateTextRealWidth(label), calculateCellHaveColorRealWidth(maxTextLabel)) : calculateTextRealWidth(label)
                });
            }

            metaData[colName] = rule;
        }

        function colorTextRenderer(hot, td, row, col, prop, value, cp) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            return colorRenderer(hot, td, row, col, prop, value, cp);
        }

        function colorNumericRenderer(hot, td, row, col, prop, value, cp) {
            Handsontable.renderers.NumericRenderer.apply(this, arguments);
            return colorRenderer(hot, td, row, col, prop, value, cp);
        }

        function colorDropdownRenderer(hot, td, row, col, prop, value, cp) {
            Handsontable.renderers.DropdownRenderer.apply(this, arguments);
            return colorRenderer(hot, td, row, col, prop, value, cp);
        }

        function colorRenderer(hot, td, row, col, prop, value, cp) {
            td.style.backgroundColor = cp.bgColor;
            td.style.color = cp.color;
            if ((value || typeof (value) === 'number') && cp.bandText) {
                var currentHtml = $(td).html();
                $(td).html(`<div class="d-flex justify-content-between"><span class='me-2'>${cp.bandText}</span><div>${currentHtml}</div></div>`);
            }
            return td;
        }

        function setFormatForDropdowValue(colName, toFormat) {
            for (var i = 0; i < hansonStudentData.length; i++) {
                var item = hansonStudentData[i];
                var colNameSplit = colName.split('.');
                var cellVal = item[colNameSplit[0]][colNameSplit[1]];

                if (!!cellVal) {
                    cellVal = parseFloat(cellVal);
                    item[colNameSplit[0]][colNameSplit[1]] = cellVal.toFixed(toFormat);
                }
            }
        }

        function formatCustomText(rule, colName, label) {
            var widthLabel = calculateTextRealWidth(label);

            if (rule != null && rule.DataType == 'SelectList' && rule.SelectListOptions != null && rule.SelectListOptions.length > 0) {
                var sourceDataList = [];
                for (var i = 0; i < rule.SelectListOptions.length; i++) {
                    var option = rule.SelectListOptions[i].Option;
                    sourceDataList.push(option);
                }
                columnData.push({
                    data: colName,
                    type: 'autocomplete',
                    source: sourceDataList,
                    strict: true,
                    filter: false,
                    allowInvalid: true,
                    validator: validatorAutoComplete,
                    customParameter: sourceDataList,
                    width: widthLabel,
                    className: 'htRight needsclick'
                });
            } else {
                columnData.push({
                    data: colName,
                    validator: validatorAlphabet,
                    width: widthLabel
                });
            }

            metaData[colName] = rule;
        }

        function getFileTye(extenstion) {
            return fileType[extenstion];
        }

        function setUploadifive(uploadFileType, maxFileSize) {
            if (StudentEntryModel.initialedUploadFile.file_upload_artifact) {
                $('#file_upload_artifact').uploadifive('destroy');
                StudentEntryModel.initialedUploadFile.file_upload_artifact = false;
            }
            var listFileTypeAllow = {
                '.pdf': 'application\/pdf',
                '.xls': 'application/vnd.ms-excel',
                '.xlsx': 'application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                '.doc': 'application\/msword',
                '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                '.ppt': 'application\/vnd.ms-powerpoint',
                '.pptx': 'application\/vnd.openxmlformats-officedocument.presentationml.presentation',
                '.rtf': 'application/rtf',
                '.txt': 'text/plain',
                '.png': 'image\/png',
                '.jpeg': 'image\/jpeg',
                '.jpg': 'image\/jpeg',
                '.gif': 'image/gif',
                '.bmp': 'image/bmp',
                '.mp3': 'audio/mpeg',
                '.wma': 'audio/x-ms-wma',
                '.webm': 'audio/webm',
                '.wav': 'audio/wav',
                '.aac': 'audio/aac',
                '.ogg': 'audio/ogg',
                '.mp4': 'audio/mp4',
                '.mp4': 'video/mp4',
                '.webm': 'video/webm',
                '.ogg': 'video/ogg'
            };
            var arrUploadFileType = uploadFileType.map(function (item) { return item.SupportFileType.join(",") })?.join();
            var fileType = [];
            var fileTypeAllowUpload = [];
            if (!!arrUploadFileType) {
                fileType = arrUploadFileType;
                var fileTypeOject = Object.keys(listFileTypeAllow)
                    .filter(function (key) { return arrUploadFileType.includes(key) })
                    .reduce(function (obj, key) {
                        return Object.assign(obj, {
                            [key]: listFileTypeAllow[key]
                        });
                    }, {});
                fileTypeAllowUpload = Object.values(fileTypeOject)
            }
            StudentEntryModel.artifactFolderModalVM.uploadFileTypeOject = uploadFileType;
            StudentEntryModel.warningFileSize = StudentEntryModel.handleFormatWarningFileSize(uploadFileType);
            var fileSizeLimit = maxFileSize + "MB";
            $('#file_upload_artifact').uploadifive({
                'uploadScript': '@Url.Action("UploadArtifactDataFile")',
                'overrideEvents': ['onDialogClose'],
                'buttonText': ' ',
                'fileObjName': 'postedFile',
                'multi': false,
                'removeCompleted': true,
                'width': 130,
                'height': 32,
                'auto': false,
                'fileType': fileTypeAllowUpload,
                'accept': fileType,
                //'fileSizeLimit': fileSizeLimit,
                'buttonClass': 'uploadifive-entry-result',
                'onInit': function() {
                    StudentEntryModel.initialedUploadFile.file_upload_artifact = true;
                    $("#uploadifive-file_upload_artifact-queue").hide();
                    $('#uploadifive-file_upload_artifact').click(function(e) {
                        validFile = true;
                    });
                    $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
                    $('#uploadifive-file_upload_artifact > input[type=file]').attr('title', '');
                    initializeTooltip('#tableArtifactFolder tbody tr a[title]', {
                        attr: 'title',
                    });
                },
                'onSelect': function(queue) {
                    var file = $('.uploadifive-queue-item').first().data('file');
                    if (file) {
                        if (StudentEntryModel.handleCheckFileExist(StudentEntryModel.artifactFolderModalVM.artifacts, file.name)) {
                            popUpModalDuplicateFileName(file.name);
                            $('body').find('.ui-dialog').css('z-index', 99999);
                        } else {
                            var doc = ".";
                            var sizeFile = file.size;
                            var extension = doc.concat(file.name.replace(/^.*\./, '').toLowerCase());
                            //check not file type
                            if (uploadFileType.find(o => o.SupportFileType.some(s => s.includes(extension))) === undefined) {
                                CustomAlert('The file you are trying to upload is not a ' + StudentEntryModel.artifactFolderModalVM.allowFileTypes + ' file. Please try again', true);
                                $('body').find('.ui-dialog').css('z-index', 99999);
                                resetItemUpload();
                                return false;
                            }
                            var fileSizeCheck = uploadFileType.find(function (item) { return item.SupportFileType.includes(extension) });
                            var getSizeAllow = fileSizeCheck?.MaxFileSizeInBytes;
                            if (getSizeAllow > 0 && (getSizeAllow < sizeFile)) {
                                CustomAlert('The file you are trying to upload exceed the file size limit: ' + StudentEntryModel.onBytesToSize(getSizeAllow) + ' . Please try again', true);
                                $('body').find('.ui-dialog').css('z-index', 99999);
                                resetItemUpload();
                                return false;
                            }
                            else {
                                StudentEntryModel.handleUploadFiles([file]);
                                resetItemUpload();
                            }
                        }
                    }
                },
                'onError': function (errorType, file) {
                    $('#uploadifive-file_upload_artifact > input[type=file]').attr('accept', fileType);
                    $("#uploadifive-file_upload_artifact-queue").hide();
                    $('.modalUploadFile').unblock();
                    validFile = false;
                    $('.uploadifive-queue-item').first().remove();
                    if (errorType == 'FORBIDDEN_FILE_TYPE') {
                        CustomAlert('The file you are trying to upload is not a ' + StudentEntryModel.artifactFolderModalVM.allowFileTypes + ' file. Please try again', true);
                    } else if (errorType == 'FILE_SIZE_LIMIT_EXCEEDED') {
                        CustomAlert('The file you are trying to upload exceed the file size limit: ' + fileSizeLimit + ' . Please try again', true);
                    } else {
                        CustomAlert('The file ' + file.name + ' returned an error and was not added to the queue.', true);
                    }
                    $('body').find('.ui-dialog').css('z-index', 99999);
                }
            });
        }

        function resetItemUpload() {
            $('#file_upload_artifact').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
            $('.uploadifive-queue-item').first().remove();
        }

        function checkFileExist(artifacts, fileName) {
            var exist = _.find(artifacts, function(art) {
                return art.DisplayName == fileName
            });
            return exist ? true : false;
        }

        function noteButtonRenderer(instance, td, row, col, prop) {
            Handsontable.dom.empty(td);
            var rule = metaData[prop];
            var noteType = rule.NoteType;

            var noteValue = '';
            var noteId = '';

            var colName = columnData[col].data;
            var subColName = colName.split('.');
            if (colName.indexOf('overallScore') > -1) {
                if (hansonStudentData[row].overallScore.Notes && hansonStudentData[row].overallScore.Notes.length > 0) {
                    for (var i = 0; i < hansonStudentData[row].overallScore.Notes.length; i++) {
                        var itemNote = hansonStudentData[row].overallScore.Notes[i];
                        if (itemNote.NoteKey == subColName[1]) {
                            noteId = itemNote.TestResultScoreNoteID;
                            noteValue = itemNote.Note;
                            break;
                        }
                    }
                }
            } else {
                var subNameArr = colName.split('.');
                if (subNameArr.length > 0) {
                    var subScoreName = subNameArr[0];
                    if (hansonStudentData[row][subScoreName].Notes) {
                        if (hansonStudentData[row][subScoreName].Notes.length > 0) {
                            for (var i = 0; i < hansonStudentData[row][subScoreName].Notes.length; i++) {
                                var itemNote = hansonStudentData[row][subScoreName].Notes[i];
                                if (itemNote.NoteKey == subColName[1]) {
                                    noteId = itemNote.TestResultSubScoreNoteID;
                                    noteValue = itemNote.Note;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            if (noteValue == undefined) {
                noteValue = '';
            }
            if (noteId == undefined) {
                noteId = '';
            }
            var link = document.createElement('a');
            link.className = 'note btn-link p-0';
            link.innerHTML = 'Add Note <i class="fa-solid fa-plus ms-2"></i>';
            link.setAttribute('note-value', noteValue);
            link.setAttribute('note-id', noteId);
            noteButtonRendererClick(link, td, row, col, noteType);
            td.appendChild(link);

            var button = document.createElement('a');
            button.className = 'note';
            if (noteType == 'date') {
                button.innerHTML = '<img src="/Scripts/DataLockerEntryResult/Images/date_note.png" height="16" width="16">';
            } else {
                button.innerHTML = '<img src="/Scripts/DataLockerEntryResult/Images/sticky_note.png" height="16" width="16">';
            }


            button.setAttribute('note-value', noteValue);
            button.setAttribute('note-id', noteId);
            noteButtonRendererClick(button, td, row, col, noteType);
            td.appendChild(button);

            if (noteType == 'date') {
                if (noteValue != '' && noteValue != null) {
                    $(link).hide();
                    $(button).show();

                    var objectNote = JSON.parse(noteValue);
                    if (objectNote.Notes.length < 1) {
                        $(link).show();
                        $(button).hide();
                    }
                } else {
                    $(button).hide();
                }
            } else {
                if (noteValue != '' && noteValue != null) {
                    $(link).hide();
                } else {
                    $(button).hide();
                }
            }


            td.className = 'htCenter htMiddle note';
            return td;
        }

        function noteButtonRendererClick(button, td, row, col, noteType) {
            Handsontable.dom.addEvent(button, 'click', function(e) {
                e.preventDefault();
                StudentEntryModel.selectedTD = td;
                StudentEntryModel.selectedRow = row;
                StudentEntryModel.selectedCol = col;
                StudentEntryModel.studentName = hansonStudentData[row].overallScore.FullName;
                StudentEntryModel.noteColumnName = columnData[col].label;

                var noteId = '';
                var noteValue = '';
                var $tag = $(td).find('.note');
                var link = $tag.get(0);
                var button = $tag.get(1);
                if ($(link).is(':visible')) {
                    noteValue = $(link).attr('note-value');
                    noteId = $(link).attr('note-id');
                } else if ($(button).is(':visible')) {
                    noteValue = $(button).attr('note-value');
                    noteId = $(button).attr('note-id');
                }

                if (noteType == 'date') {
                    StudentEntryModel.openPopupNoteDate(noteId, noteValue);
                } else {
                    StudentEntryModel.openPopupNote(noteId, noteValue);
                }
            });
        }

        function resetAllUpload() {
            $('.uploadifive-queue-item').each(function (indx, element) {
                $('#file_upload_artifact').uploadifive('cancel', $(element).first().data('file'));
                $(element).remove();
            })
        }

        function popUpModalDuplicateFileName(filename) {
            var message = 'A file with the same name exists for Student ' + StudentEntryModel.studentName + '. Do you want to replace?';
            customConfirm(message).then(function(result) {
                if (result) {
                    var file = $('.uploadifive-queue-item').first().data('file');
                    StudentEntryModel.handleUploadFiles([file]);
                    resetAllUpload();
                } else {
                    var fileUpload = StudentEntryModel.artifactFolderModalVM.fileUploads.filter(function (el) {
                        return !StudentEntryModel.artifactFolderModalVM.duplicateFile.map(function (item) { return item.name }).includes(el.name)
                    })
                    if (fileUpload && fileUpload.length > 0) {
                        StudentEntryModel.handleUploadFiles(fileUpload);
                    }
                    resetAllUpload();
                    StudentEntryModel.resetErrorUploadFile();
                }
            })
        }

        function getMaxZindexExist(modals) {
            var m = [];
            modals.each(function(i, modal) {
                var modalZindex = parseInt($(modal).css('z-index'), 10)
                m.push(modalZindex)
            })
            var result = Math.max(m)
            return result;
        }

        function showModalDialogBGCustom(zindex) {
            var win = $('body');
            $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index:' + zindex + ';"></div>');
        }

        function showModalDialogBG() {
            var win = $('body');
            $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
        }

        function formatDataForMultiUpdate(column, value) {
            var rule = metaData[column];
            var scoreFormatNumeric = [
                'ScorePercent',
                'ScorePercentage',
                'ScoreRaw',
                'ScoreScaled',
                'ScoreCustomN_1',
                'ScoreCustomN_2',
                'ScoreCustomN_3',
                'ScoreCustomN_4'
            ];

            for (var m = 0; m < scoreFormatNumeric.length; m++) {
                if (column.indexOf(scoreFormatNumeric[m]) != -1) {
                    if (rule && rule.DataType) {
                        if (rule.DataType == "Numeric") {
                            if (rule.DisplayOption && rule.FormatOption == "LabelValueText" && (rule.DisplayOption == "label" || rule.DisplayOption == "both")) {
                                break;
                            }
                            value = round(value, rule.DecimalScale);
                            break;
                        }

                    }
                }
            }
            return value;
        }

        function updateMultiData(changes, source) {
            var dataColCheckbox = $('div[name="studentEntryResult"]').handsontable('getDataAtCol', 0);
            var column = changes[0][1].split('.');
            var colIndex = $('div[name="studentEntryResult"]').handsontable('propToCol', changes[0][1]);
            var currentCell = $('div[name="studentEntryResult"]').handsontable('getCell', changes[0][0], colIndex);

            var isCurrentCellInValid = false;
            if (currentCell) {
                isCurrentCellInValid = currentCell.className.indexOf("htInvalid") != -1;
            }

            if (changes[0][1] != "") {
                for (var i = 0; i < dataColCheckbox.length; i++) {
                    if (dataColCheckbox[i] == true) {
                        hansonStudentData[i][""] = false;
                        hansonStudentData[i][column[0]][column[1]] = formatDataForMultiUpdate(changes[0][1], changes[0][3]);
                        autoRoundIntegerColumn(changes);
                        var cellMeta = $('div[name="studentEntryResult"]').handsontable('getCellMeta', i, colIndex);
                        if (isCurrentCellInValid) {
                            cellMeta.valid = false;
                            var cell = $('div[name="studentEntryResult"]').handsontable('getCell', i, colIndex, true);
                            if (cell) {
                                cell.setAttribute('data-invalid', $(currentCell).attr("data-invalid"));
                            }
                        } else {
                            cellMeta.valid = true;
                        }
                    }
                }
            }

            autoRoundIntegerColumn(changes);
            $('div[name="studentEntryResult"]').handsontable('render');
        }

        function autoRoundIntegerColumn(changes) {
            var rule = metaData[changes[0][1]];
            var row = changes[0][0];
            var column = changes[0][1].split('.');
            if (typeof rule !== 'undefined' && typeof rule.DataType !== 'undefined') {
                if (rule.DataType == "Numeric") {
                    var value = changes[0][3];
                    if (!Number.isInteger(value) && typeof value == 'number') {
                        value = round(value, rule.DecimalScale);
                        hansonStudentData[row][column[0]][column[1]] = value;
                    }
                }

            }
        }

        function round(value, decimals) {
            return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
        }

        function autoCalcuData(changes, dataCheckbox) {
            var changeProp = changes[0][1];
            if (!!changeProp && !!metaData[changeProp] && metaData[changeProp].DataType == "Numeric") {
                var row = changes[0][0];
                for (var j = 0; j < changes.length; j++) {
                    if (j == 0) {
                        calcuValue(row);
                    }
                    if (row != changes[j][0]) {
                        row = changes[j][0];
                        calcuValue(row);
                    }
                }
                var rowChecked = dataCheckbox.filter(function (isCheck) {
                    return isCheck;
                });

                if (rowChecked.length > 0) {
                    for (var i = 0; i < dataCheckbox.length; i++) {
                        if (dataCheckbox[i] == true) {
                            calcuValue(i);
                        }
                    }
                }
                var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
                hot.validateRows([row]);
                $('div[name="studentEntryResult"]').handsontable('render');
            }
        }

        function calcuValue(row) {
            var hot = $('div[name="studentEntryResult"]').handsontable('getInstance');
            Object.keys(metaData).forEach(function(prop) {
                var setting = metaData[prop];
                var level = prop.split('.')[0];
                var scoreName = prop.split('.')[1];
                var derivedName = setting.DerivedName;
                if (setting.IsAutoCalculation) {
                    var decimalScale = setting.DecimalScale;
                    var format = 0;

                    if (typeof decimalScale !== 'undefined' && decimalScale == 1) {
                        format = 1;
                    } else if (typeof decimalScale !== 'undefined' && decimalScale == 2) {
                        format = 2;
                    } else if (typeof decimalScale !== 'undefined' && decimalScale == 3) {
                        format = 3;
                    }

                    if (derivedName === 'calculation') {
                        var expression = setting.Expression;
                        expression = StudentEntryModel.handleUpdateExpressionOriginal(expression, metaDataCals);
                        var columnExpressions = StudentEntryModel.handlGetColumnByExpression(expression);
                        if (columnExpressions != null && columnExpressions.length > 0) {
                            var valueOfColumns = [];
                            columnExpressions.forEach(function (columnExpression) {
                                var value = hot.getDataAtRowProp(row, columnExpression.column);
                                if (!!metaData[columnExpression.column].DisplayOption && !!metaData[columnExpression.column].SelectListOptions) {
                                    value = getValueFromLabelDropdown(value, columnExpression.column);
                                }
                                let regex = new RegExp(`\\b${columnExpression.expression}\\b`, "g");
                                expression = expression.replace(regex, value);
                                valueOfColumns.push(value);
                            });
                            try {
                                var allValueNullOrEmtry = valueOfColumns.every(function (v) { return v == null || v === "" });
                                if (allValueNullOrEmtry && columnExpressions.length === valueOfColumns.length) {
                                    hansonStudentData[row][level][scoreName] = '';
                                } else {
                                    var calValue = Function(`'use strict'; return (${expression})`)();
                                    if (!isNaN(calValue)) {
                                        if (calValue === 'Infinity' || calValue === Infinity) {
                                            hansonStudentData[row][level][scoreName] = 'NaN';
                                        } if (calValue === null) {
                                            hansonStudentData[row][level][scoreName] = '';
                                        } else {
                                            calValueFormat = calValue.toFixed(format);
                                            hansonStudentData[row][level][scoreName] = calValueFormat;
                                        }
                                    }
                                }
                            } catch {
                                hansonStudentData[row][level][scoreName] = 'NaN';
                            }
                        }
                    }

                    if (derivedName === 'percent') {
                        var isRawNumber = false;
                        var rawNumberValue = 0;
                        var rawObj = 0;
                        var rawCol = `${level}.ScoreRaw`;
                        var rawMeta = metaData[rawCol];
                        var rawValueOriginal = hot.getDataAtRowProp(row, rawCol);
                        var rawValue = rawValueOriginal;
                        var maxValue = 0;

                        var listValue = rawMeta.SelectListOptions;

                        if (Array.isArray(listValue) && listValue.length > 0) {
                            for (var i = 0; i < listValue.length; i++) {
                                var numVal = parseFloat(listValue[i].Option);
                                if (!isNaN(numVal) && numVal > maxValue) {
                                    maxValue = numVal;
                                }
                            }
                        } else if (rawMeta.IsAutoCalculation) {
                            if (rawMeta.DerivedName === 'calculation') {
                                var expression = StudentEntryModel.handleUpdateExpressionOriginal(rawMeta.Expression, metaDataCals);
                                var columnExpressions = StudentEntryModel.handlGetColumnByExpression(expression);

                                if ((!columnExpressions || columnExpressions.length === 0) && !isNaN(expression) && expression.trim() !== '') {
                                    isRawNumber = true;
                                    rawNumberValue = parseFloat(expression);
                                }

                                maxValue = getMaxValueOfRawDerived(columnExpressions);
                                rawObj = getRawExpressionValue(row, columnExpressions, rawMeta.DerivedName, hot, expression);
                            }
                        } else {
                            maxValue = rawMeta.MaxValue;
                        }

                        function setScore(value) {
                            hansonStudentData[row][level][scoreName] = value;
                        }

                        if (rawValue == null || rawValue === '') {
                            setScore(null);
                        } else if (isRawNumber) {
                            setScore(rawNumberValue);
                        } else {
                            if (rawMeta.IsAutoCalculation && rawObj?.calValue != null && rawObj.calValue !== '') {
                                rawValue = parseFloat(rawObj.calValue);
                            } else {
                                rawValue = parseFloat(rawValue);
                            }

                            if (rawValue > 0 && maxValue > 0) {
                                var val = rawValue / maxValue;
                                if (rawMeta.IsAutoCalculation && rawMeta.Expression?.includes('Math.mean') && rawObj.countColumn) {
                                    val *= rawObj.countColumn;
                                }
                                setScore((val * 100).toFixed(format));
                            } else {
                                setScore(0);
                            }
                        }
                    }
                }
            });
        }

        function getMaxValueOfRawDerived(columnExpressions) {
            var maxValue = 0;
            if (columnExpressions.length > 0) {
                for (var i = 0; i < columnExpressions.length; i++) {
                    var column = columnExpressions[i].column;
                    var colMeta = metaData[column];
                    var mv = 0;

                    var options = colMeta.SelectListOptions;
                    if (Array.isArray(options) && options.length > 0) {
                        for (var j = 0; j < options.length; j++) {
                            var val = parseFloat(options[j].Option);
                            if (!isNaN(val) && val > mv) {
                                mv = val;
                            }
                        }
                    } else if (typeof colMeta.MaxValue === 'number') {
                        mv = colMeta.MaxValue;
                    }

                    maxValue += mv;
                }
            }
            return maxValue;
        }

        function getRawExpressionValue(row, columnExpressions, derivedName, hot, expression) {
            var valueOfColumns = [];
            var countColumn = 0;
            if (columnExpressions.length > 0) {
                columnExpressions.forEach(function (columnExpression) {
                    var value = hot.getDataAtRowProp(row, columnExpression.column);
                    if (!!metaData[columnExpression.column].DisplayOption && !!metaData[columnExpression.column].SelectListOptions) {
                        value = getValueFromLabelDropdown(value, columnExpression.column);
                    }
                    let regex = new RegExp(`\\b${columnExpression.expression}\\b`, "g");
                    if (value !== null && value !== '') {
                        countColumn++;
                    }
                    expression = expression.replace(regex, value);
                    valueOfColumns.push(value);
                });
            }
            try {
                var allValueNullOrEmtry = valueOfColumns.every(function (v) { return v == null || v === "" });
                if (allValueNullOrEmtry && columnExpressions && columnExpressions.length === valueOfColumns.length) {
                    return { calValue: 0, countColumn: 0 };
                } else {
                    var calValue = Function(`'use strict'; return (${expression})`)();
                    if (!isNaN(calValue) && calValue != 'Infinity' && calValue != Infinity) {
                        return { calValue: calValue, countColumn: countColumn };
                    }
                }
            } catch {
                return { calValue: 0, countColumn: 0 };
            }
            return { calValue: 0, countColumn: 0 };
        }

        function getHeaderString(label) {
            var maxChars = 50;
            if (label && label.length > maxChars) {
                let result = '';
                let currentLineLength = 0;
                const words = label.split(' ');

                for (let i = 0; i < words.length; i++) {
                    const word = words[i];
                    if (currentLineLength + word.length + 1 > maxChars) {
                        result += '<br>';
                        currentLineLength = 0;
                    }
                    result += (currentLineLength > 0 ? ' ' : '') + word;
                    currentLineLength += word.length + 1;
                }
                label = result;
            }
            return label;
        }
    </script>
    <script type="text/javascript">
        $('#selectGrade').change(function () {
            if (isInit == false) {
                $('#selectDomain').empty();
                $('#selectLanguage').empty();
                $('#selectLearning').empty();
                if ($('#selectGrade').val() != 'select') {
                    populateDomain();
                }
            }
        });
        $('#selectDomain').change(function () {
            if (isInit == false) {
                $('#selectLanguage').empty();
                $('#selectLearning').empty();
                if ($('#selectDomain').val() != 'select') {
                    populateLanguage();
                }
            }
        });
        $('#selectLanguage').change(function () {
            if (isInit == false) {
                $('#selectLearning').empty();
                if ($('#selectLanguage').val() != 'select') {
                    populateLearning();
                }
            }
        });
        $('#selectLearning').change(function () {
            if (isInit == false && $('#selectLearning').val() && $('#selectLearning').val() != 'select') {
                applyFilter();
            }
        });
        function populateGrade() {
            $('#selectGrade').empty();
            $.get('@Url.Action("GetGradesFormBankByDistrictId", "PopulateTest")', {
                districtId: this.districtId,
                isFromMultiDate: true
            }, function (response) {
                addDefaultOption($('#selectGrade'), "@LabelHelper.TestGrade");
                addSelectListItems($('#selectGrade'), response);
            });
        }
        function populateDomain() {
            $('#selectDomain').empty();
            var selectGrade = $('#selectGrade').val();
            if (selectGrade != 'select') {
                $.get('@Url.Action("GetSubjectsGroupedByNameFormBank", "PopulateTest")', {
                    gradeId: selectGrade,
                    districtId: this.districtId,
                    isFromMultiDate: true
                }, function (response) {
                    addDefaultOption($('#selectDomain'), "Domain");
                    addSelectListItems($('#selectDomain'), response);
                });
            }
        }
        function populateLanguage() {
            $('#selectLanguage').empty();
            var selectDomain = $('#selectDomain').val();
            var selectGrade = $('#selectGrade').val();
            if (selectDomain != 'select') {
                $.get('@Url.Action("LoadBankByMultipleSubjectIds", "DataLockerEntryResult")', {
                    SubjectIds: selectDomain,
                    gradeId: selectGrade,
                    districtId: this.districtId,
                    isFromMultiDate: true
                }, function (response) {
                    addDefaultOption($('#selectLanguage'), "Language");
                    addSelectListItems($('#selectLanguage'), response);
                });
            }
        }
        function populateLearning() {
            $('#selectLearning').empty();
            var selectLanguage = $('#selectLanguage').val();
            if (selectLanguage != 'select') {
                $.get('@Url.Action("GetTests", "DataLockerEntryForm")', {
                    bankId: selectLanguage,
                    isFromMultiDate: true
                }, function (response) {
                    addDefaultOption($('#selectLearning'), "Test");
                    addSelectListItems($('#selectLearning'), response);
                });
            }
        }
        function applyFilter() {
            var testName = $('#selectLearning option:selected').text();
            StudentEntryModel.virtualTestName = testName;
            StudentEntryModel.checkFilterWarning();
        }
        function initFilter() {
            var that = this;
            var $sectionStudentEntry = $('#sectionStudentEntry');
            ShowBlock($sectionStudentEntry, 'Loading');
            $.get('@Url.Action("GetGradesFormBankByDistrictId", "PopulateTest")', {
                districtId: that.districtId,
                isFromMultiDate: true
            }, function (response) {
                addDefaultOption($('#selectGrade'), "@LabelHelper.TestGrade");
                addSelectListItemsWithSelectedValue($('#selectGrade'), response, that.gradeId);
                $.get('@Url.Action("GetSubjectsGroupedByNameFormBank", "PopulateTest")', {
                    gradeId: that.gradeId,
                    districtId: that.districtId,
                    isFromMultiDate: true
                }, function (response) {
                        if (response && response.length > 0) {
                            var findRes = response.find((subject) => { return subject.Id === that.domainId });
                            if (!response.find((subject) => { return subject.Id === that.domainId })) {
                                that.domainId = response[0].Id;
                            }
                        }
                    addDefaultOption($('#selectDomain'), "Domain");
                    addSelectListItemsWithSelectedValue($('#selectDomain'), response, that.domainId);
                    $.get('@Url.Action("LoadBankByMultipleSubjectIds", "DataLockerEntryResult")', {
                        SubjectIds: that.domainId,
                        gradeId: that.gradeId,
                        districtId: that.districtId,
                        isFromMultiDate: true
                    }, function (response) {
                        addDefaultOption($('#selectLanguage'), "Language");
                        addSelectListItemsWithSelectedValue($('#selectLanguage'), response, that.languageId);
                        $.get('@Url.Action("GetTests", "DataLockerEntryForm")', {
                            bankId: that.languageId,
                            isFromMultiDate: true
                        }, function (response) {
                            addDefaultOption($('#selectLearning'), "Test");
                            addSelectListItemsWithSelectedValue($('#selectLearning'), response, that.learningId);
                            that.isInit = false;
                        });
                    });
                });
            });
        }
        function getMultiDate (e, studentId, isStudentHaveResultDate) {
            e.preventDefault();
            var resultDate = [];
            if (isStudentHaveResultDate == false) {
                return false;
            }
            var virtualTestId = $('#selectLearning').val()
            if (!virtualTestId) {
                virtualTestId = '@Model.VirtualTestId';
            }
            var url = '@Url.Action("GetDateHasResult")'
            const selecter = $('.ht_clone_left .myPopup-' + studentId);
            $(".ht_clone_left").find('.show').removeClass('show');

            for (var s = 0; s < this.studentResultDates.length; s++) {
                if (studentId == studentResultDates[s].StudentId) {
                    resultDate = studentResultDates[s].ResultDates
                    break;
                }
            }
            var elements = '';
            setTimeout(function() {
                if (resultDate.length > 0) {
                    resultDate.forEach(function(element){
                        var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
                        var listDate = moment(element, 'M/D/YYYY').format(resultDateFormat);
                        var selectedDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
                        if (listDate !== selectedDate) {
                            elements += '<div onclick="handleLoadStudentResult(event,false)">' + listDate +'</div>'
                        }
                    })
                    $('.myPopup-' + studentId).html(elements);
                    selecter.addClass('show');
                }
            }, 1)
        }
        function handleLoadStudentResult(e, isClearChange) {
            e.stopPropagation();
            var entryResultDate = e.currentTarget.textContent;
            StudentEntryModel.dateFilter = entryResultDate;
            StudentEntryModel.checkFilterWarning(entryResultDate);
        }
        $(document).on("click", function(e) {
            if ($(e.target).is(".popuptext") === false) {
                $(".popuptext").removeClass("show");
            }
        });
        function ClearUnsavedChanges() {
            var resultDateFormat = '@Model.DateFormatModel.HandsonTableDateFormat';
            var entryResultDate = moment($('#resultDate').val(), convertJqueryFormatToHandsonTableFormat()).format(resultDateFormat);
            StudentEntryModel.clearUnsavedChanges(entryResultDate);
        }
        function convertJqueryFormatToHandsonTableFormat() {
            var jQueryFormat = jqueryDatePickerFormat();
            var result =jQueryFormat;
            if ((jQueryFormat.match(/M/g)||[]).length = 1) {
                result = result.replace(/M/g, 'MMM')
            } else if ((jQueryFormat.match(/M/g)||[]).length = 2) {
                result = result.replace(/MM/g, 'MMMMM')
            }
            result = result.replace(/d/g, 'D').replace(/y/g, 'YY').replace(/m/g, 'M')
            return result;
        }

        function calculateTextRealWidth(text, isClickableButton = false) {
            var textEl = document.createElement("span");
            document.body.appendChild(textEl);
            textEl.classList.add(isClickableButton ? "text-clickable" : "calculator-text");
            textEl.innerHTML = !!text ? getHeaderString(text) : text;
            width = Math.ceil(textEl.clientWidth);
            document.body.removeChild(textEl);
            return width + (isClickableButton ? 16 : 30);
        }

        function calculateCellHaveColorRealWidth(text, isDropdown = false) {
            var textEl = document.createElement("span");
            document.body.appendChild(textEl);
            textEl.classList.add("cell-color-text");
            textEl.innerHTML = !!text ? getHeaderString(text) : text;
            width = Math.ceil(textEl.clientWidth);
            document.body.removeChild(textEl);
            return width + (isDropdown ? 38 : 8);
        }

        function getHeaderString(label) {
            var maxChars = 50;
            if (label && label.length > maxChars) {
                let result = '';
                let currentLineLength = 0;
                const words = label.split(' ');

                for (let i = 0; i < words.length; i++) {
                    const word = words[i];
                    if (currentLineLength + word.length + 1 > maxChars) {
                        result += '<br>';
                        currentLineLength = 0;
                    }
                    result += (currentLineLength > 0 ? ' ' : '') + word;
                    currentLineLength += word.length + 1;
                }
                label = result;
            }
            return label;
        }

        function saveAndCloseResults() {
            isSaveAndClose = true;
            var $studentEntryResult = $('.student-entry-result');

            if ($studentEntryResult.find('td.htInvalid').length) {
                StudentEntryModel.isShowModalWarning = false;
                StudentEntryModel.isShowModalFilterWarning = false;
                StudentEntryModel.isShowModalPrint = true;
                StudentEntryModel.msgInvalid = 'Some columns have data validation applied to them. If a cell is highlighted in red it means you entered an invalid value. If you hover-over that cell it will provide a hint as to what you did wrong. Please correct those cells prior to saving.';
                return;
            }
            var interval = setInterval(function () {
                if (completedChange) {
                    saveResults().then(function () {
                        window.location.href = StudentEntryModel.enterResultsUrl;
                    });
                    clearInterval(interval);
                }
            }, 500);

        }

        function handleFullScreen () {
            var $body = $('body');
            var hotStudentEntryResult = $('div[name="studentEntryResult"]').handsontable('getInstance');
            var HEIGHT_HS = 405;
            var HEIGHT_FULLSCREEN = 500;

            if ($body.hasClass('data-locker-fullscreen')) {
                $body.removeClass('data-locker-fullscreen');
                StudentEntryModel.fullscreen = {
                    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="20" viewBox="0 0 100 125"><path d="M26.947 86.098H5V64.151h6.997v14.95h14.95zM11.997 35.849H5V13.902h21.947v6.997h-14.95zM95 35.849h-6.997v-14.95h-14.95v-6.997H95zM95 86.098H73.053v-6.997h14.95v-14.95H95z"/><g><path d="M82.405 73.503h-64.81V26.498h64.81v47.005zm-57.812-6.998h50.815v-33.01H24.593v33.01z"/></g></svg>',
                    text: 'Fullscreen'
                };
                hotStudentEntryResult.updateSettings({
                    width: '100%',
                    height: HEIGHT_HS
                });
            } else {
                $body.addClass('data-locker-fullscreen');
                StudentEntryModel.fullscreen = {
                    icon: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="20" viewBox="0 0 100 125"><path d="M0 61.836h28.273v28.273h-7.774V69.611H0zM20.499 9.891h7.774v28.273H0v-7.775h20.499zM71.727 9.891h7.775v20.498H100v7.775H71.727zM71.727 61.836H100v7.775H79.502v20.498h-7.775z"/></svg>',
                    text: 'Exit fullscreen'
                };
                hotStudentEntryResult.updateSettings({
                    width: '100%',
                    height: HEIGHT_FULLSCREEN
                });
            }

            $('#main-nav').find('.menu-item').hideTip();
        }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            breadcrumbDetailPage('.datalocker', '#datalockerEnterResult');
        })

        function checkUnSaveSelected() {
            if (hansonStudentData && oldHandsonStudentData) {
                var listA = [];
                var listB = [];
                JSON.parse(JSON.stringify(hansonStudentData)).forEach(function (item, index) {
                    var isSelected = item[""];
                    if (isSelected) {
                        delete item[""];
                        listA.push(item);
                        listB.push(JSON.parse(oldHandsonStudentData)[index])
                    }
                });
                return JSON.stringify(listA) != JSON.stringify(listB);
            }
            return false;
        }

        function handleCancelNavSRDialog() {
            $('#datalockerNavSRDialog').dialog('close');
        }
        function wrapSaveClickNavSr() {
            handleCancelNavSRDialog();
            saveResults().then(function () {
                setTimeout(function () {
                    navigateDataLockerToSR();
                    toggleShowBtnStudentResult();
                }, 1000)
            })
        }
        function handleNavSR() {
            var dataChanged = checkUnSaveSelected();
            if (dataChanged) {
                confirmMessageV2(
                    {
                        message: 'Would you like to save your changes?',
                        cbYesBtnFuncName: 'wrapSaveClickNavSr()',
                        cbCancelBtnFuncName: 'handleCancelNavSRDialog()'
                    },
                    {
                        dialogAttr: {
                            attr: {
                                id: 'datalockerNavSRDialog'
                            }
                        }
                    }
                )
            } else {
                navigateDataLockerToSR()
            }
        }

        function navigateDataLockerToSR() {
             var dataRowSelected = []
             indexCheckedBox.forEach((item) => {
                 if (hansonStudentData[item]) {
                     dataRowSelected.push(hansonStudentData[item])
                 }
             });

             var dataRowValids = [];
             dataRowSelected.forEach(function (row) {
                var dataRowValid = false
                Object.keys(row).forEach(function (key) {
                    if (key == 'overallScore' || key.indexOf('subScore') !== -1) {
                        if (checkRowHasValue(row[key])) {
                            dataRowValid = true;
                            return;
                        }
                    }
                })
                if (dataRowValid) {
                    dataRowValids.push(row)
                }
            })

             var studentIdSelected = dataRowSelected.map(function (item) {
                 return item.overallScore.StudentID
             });

             var rowResultDate = dataRowValids.reduce(function (arr, item) {
                 var studentResultDate = studentResultDates.find(function (el) {
                     return el.StudentId == item.overallScore.StudentID
                 });

                 if (studentResultDate && Array.isArray(studentResultDate.ResultDates)) {
                     return arr.concat(studentResultDate.ResultDates)
                 }
                 return arr
             }, []);

             if (!rowResultDate.length) {
                 rowResultDate = hansonStudentData.map(function(item) {
                     return item.overallScore.ResultDate
                 })
             }

            rowResultDate.sort(function(a, b) {
                return new Date(a) - new Date(b);
            })
             var keyDataLockNavSR = `EntryResultFilterSRStudentId${new Date().getTime()}`;
             localStorage.setItem(keyDataLockNavSR, JSON.stringify(studentIdSelected));

             var virtualTestId = '@Model.VirtualTestId';
             var districtId = '@Model.DistrictId';
             if (!districtId || districtId == '0') {
                 districtId = '@Model.CurrentUserDistrictId'
             }
             var schoolid = '&schoolid=' + '@Model.SchoolId';
             var teacherid = '&teacherid='+ '@Model.TeacherId';
             var classid = '&classid=' + '@Model.ClassId';

             var href = `${location.origin}/Content/HtmlModules/studentReport`
            + `/#/student-results?virtualtestids=${virtualTestId}`
                 + `&districtid=${districtId + schoolid + teacherid + classid}&datefrom=${rowResultDate[0]}&dateto&keyDataLockNavSR=` + keyDataLockNavSR;
            window.open(href, '_blank')
        }

        function checkRowHasValue(row) {
            if (!row) return false;
            var hasValue = false;
            Object.keys(row).forEach(function (propKey) {
                var propArray = ['Artifacts', 'Notes'];
                var validKey = propArray.includes(propKey) || propKey.indexOf('Score') === 0;
                if (validKey) {
                    var hasRowValue = false
                    if (row[propKey] && Array.isArray(row[propKey]) && propArray.includes(propKey)) {
                        hasRowValue = Boolean(row[propKey].length)
                    } else {
                        hasRowValue = Boolean(row[propKey])
                    }
                    if (hasRowValue) {
                        hasValue = hasRowValue;
                        return;
                    }
                }
            });
            return hasValue;
        }

        function recalculateHeightTableHeader() {
            var $studentEntryResult = $('.student-entry-result');
            var realFirstRowColumnHeight = $studentEntryResult.find('.ht_clone_top thead tr:first-child th:first-child').height();
            var realSecondRowColumnHeight = $studentEntryResult.find('.ht_clone_top thead tr:last-child th:first-child').height();
            $studentEntryResult.find('.ht_clone_top_left_corner thead tr:first-child th:first-child').height(realFirstRowColumnHeight);
            $studentEntryResult.find('.ht_clone_left thead tr:first-child th:first-child').height(realFirstRowColumnHeight);
            $studentEntryResult.find('.ht_clone_top_left_corner thead tr:last-child th:first-child').height(realSecondRowColumnHeight);
            $studentEntryResult.find('.ht_clone_left thead tr:last-child th:first-child').height(realSecondRowColumnHeight);
        }
    </script>

    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-regular.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-shims.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/font-awesome-solid.min.js")"></script>
    <script src="@Url.Content("~/Content/libs/fontawesome5/fontawesome.min.js")"></script>
}
