@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Web.ViewModels.TestPreferenceViewModel
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.Onlinetesting, "Online Test Preferences");
    var currentUser = HttpContext.Current.GetCurrentUser();
    if (currentUser != null)
    {
        var isUseNewDesign = HelperExtensions.IsUseNewDesign(currentUser.DistrictId ?? 0);
        if (isUseNewDesign)
        {
            Layout = "~/Views/Shared/_Layout_v2.cshtml";
        }
    }
}
@section jQuery {
    @BundleHelper.jQueryUpgrade()
}
<link href="@BundleHelper.Version("~/Content/css/v2/testPreferenceSetting.css")" rel="stylesheet" />
<script src="@BundleHelper.Version("~/Scripts/TestDesign/v2/testSchedulePreV2.js")" type="text/javascript"></script> @*TestScheduleStep 2*@
<script src="@BundleHelper.Version("~/Scripts/TestPreferences/v2/testPreferences.js")" type="text/javascript"></script>
<script src="@BundleHelper.Version("~/Scripts/DialogNewSkin/index.js")" type="text/javascript"></script>
<link href="@BundleHelper.Version("~/Content/css/v2/dialog-custom.css")" rel="stylesheet" type="text/css" />

<article class="container_12">
    <section class="grid_12 test-preference-setting">
        <div id="TestPreferenceContent" class="block-border">
            @using (Html.BeginForm("Index", "TestPreference", FormMethod.Post, new { id = "TestPreferenceForm", @class = "block-content form bubbleSheetSelector" }))
            {
                <label class="page-label">Set Default Testing Preferences</label>
                <div class="select-district-state">
                    <div class="d-flex flex-column">
                        <div>
                            <div class="header">Select Preferences</div>
                            <label>Setting Type</label>
                            <div class="block-text-name">
                                <select id="selectSettingType">
                                    @if (Model.IsPublisher)
                                    {
                                        <text>
                                            <option value="1">Enterprise Settings</option>
                                            <option value="7">Survey Enterprise Settings</option>
                                        </text>
                                    }
                                    <option value="2">@LabelHelper.DistrictLabel Settings</option>
                                    <option value="8">Survey @LabelHelper.DistrictLabel Settings</option>
                                    <option value="3">School Settings</option>
                                    <option value="5">My Settings</option>
                                </select>
                            </div>
                        </div>
                        @if (Model.IsPublisher || Model.IsNetworkAdmin)
                        {
                            <div id="publisherContent" class="select-district-state mt-4">
                                <div class="header">Select State/@LabelHelper.DistrictLabel</div>
                                <div class="d-flex flex-row">
                                    <div>
                                        <div class="mb-3 block-content-dropdown-marquee">
                                            <label>State</label>
                                            <div class="block-text-name">
                                                <select id="selectState"></select>
                                                <div class="box-select">
                                                    <span class="overlay"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="ms-3">
                                        <div class="mb-3 block-content-dropdown-marquee">
                                            <label>@LabelHelper.DistrictLabel</label>
                                            <div class="block-text-name">
                                                <select id="selectDistrict"></select>
                                                <div class="box-select">
                                                    <span class="overlay"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="ms-3" id="grSchoolLevel" style="display: none">
                                        <div class="mb-3 block-content-dropdown-marquee">
                                            <label>School</label>
                                            <div class="block-text-name">
                                                <select id="selectSchool"></select>
                                                <div class="box-select">
                                                    <span class="overlay"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="mt-4">
                                <input id="hdfDistrictId" value="@Model.CurrentDistrictId" type="hidden" />
                                @if (Model.IsAdmin || Model.IsSchoolAdminOrTeacher)
                                {
                                    <div class="d-flex flex-row">
                                        <div class="" id="grSchoolLevel" style="display: none">
                                            <div class="mb-3 block-content-dropdown-marquee">
                                                <label>School</label>
                                                <div class="block-text-name">
                                                    <select id="selectSchool"></select>
                                                    <div class="box-select">
                                                        <span class="overlay"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="ms-3 clock-all-settings">
                        <div><input type="checkbox" id="chkAllSettings" class="d-none" /><label for="chkAllSettings" class="d-none">Lock/Unlock All Settings</label></div>
                        <div id="lastUpdateInfor" style="text-align: right"></div>
                    </div>
                    <div class="d-flex flex-column">
                        <div id="divSettingAreas" style="width: 100%;"></div>
                    </div>

                </div>
            }
        </div>
    </section>
</article>

<script>
    var testPreferenceModel = null;
    //TestScheduleStep 3
    var testSchedule = new testSchedule('@ViewBag.DateFormat');
    var CURRENT_USER_DISTRICT_ID = @Model.CurrentDistrictId
    $(function () {

        if ($('#selectSettingType').val() == 1 || $('#selectSettingType').val() == 7) {
            $('#publisherContent').hide();
            LoadSettingCurrentRole();
        }

            $('#grSchoolLevel').hide();
        if ($('#selectSettingType').val() == 1 || $('#selectSettingType').val() == 7) {
            $('#publisherContent').hide();
            LoadSettingCurrentRole();
        }
        @if (Model.IsPublisher)
        {
            <text>
                $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
                    populateStates(states);
                });
            </text>
        } else {
            if (Model.IsNetworkAdmin)
            {
                    <text>
                    $.get('@Url.Action("GetStatesByDictricIds", "PopulateStateDistrict")', { dictricIds: '@Model.StrIds' }, function (states) {
                        populateStates(states);
                    });
                </text>
            } else {
                if (Model.IsAdmin)
                {
                    <text>
                        LoadSettingType(1);
                    </text>
                } else {
                    if (Model.IsSchoolAdmin)
                    {
                        <text>
                            $('#selectSettingType option[value = "1"]').remove();
                            $('#selectSettingType option[value = "3"]').attr("selected", "selected");
                            $('#grSchoolLevel').show();
                            populateSchools();
                        </text>
                    }
                    else
                    {
                         <text>
                            LoadSettingType(2);
                        </text>
                    }

                }
            }
        }
    });

    function populateSchools() {
        $('#selectSchool').empty();
        var districtValue = $('#selectDistrict').val();
        if (districtValue != 'select') {
            $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', { districtId: districtValue }, function (schools) {
                addDefaultOption($('#selectSchool'), "School");
                addSelectListItems($('#selectSchool'), schools);
            });
        }
    }

    function populateDistricts() {
        $('#selectDistrict').empty();
        var stateValue = $('#selectState').val();
        if (stateValue != 'select') {
            if ('@Model.IsPublisher' === 'True') {
                $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItems($('#selectDistrict'), districts);
                });
            }
            if ('@Model.IsNetworkAdmin' === 'True') {
                $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItems($('#selectDistrict'), districts);
                });
            }
        } else {

        }
    }

    function populateStates(states) {
        addDefaultOption($('#selectState'), "State");
        addSelectListItems($('#selectState'), states);
    }

    $('#selectState').change(function () {
        if ($('#selectState').length > 0) {
            var widthSelected = $('#selectState').outerWidth();
            $('#selectState').marquee({ widthSelected });
        }
        $('#selectDistrict').empty();
        $('#selectSchool').empty();
        if ($('#selectState').val() != 'select') {
            populateDistricts();
        } else {
            $('#divSettingAreas').empty();
        }
    });

    $('#selectDistrict').change(function () {
        if ($('#selectDistrict').length > 0) {
            var widthSelected = $('#selectDistrict').outerWidth();
            $('#selectDistrict').marquee({ widthSelected });
        }
        if ($('#selectSettingType').val() == 3) {
            if ($('#selectDistrict').val() != 'select') {
                populateSchools();
            } else {
                $('#selectSchool').empty();
                $('#chkAllSettings').parent().children().addClass('d-none');
                $('#divSettingAreas').empty();
                $('#lastUpdateInfor').empty();
            }
        } else if ($('#selectDistrict').val() != 'select') {
            LoadSettingCurrentRole();
        } else {
            $('#divSettingAreas').empty();
            $('#lastUpdateInfor').empty();
        }
    });

    $('#selectSchool').change(function () {
        $('#chkAllSettings').parent().children().addClass('d-none');
        if ($('#selectDistrict').length > 0) {
            var widthSelected = $('#selectDistrict').outerWidth();
            $('#selectDistrict').marquee({ widthSelected });
        }
        if ($('#selectSchool').val() != 'select') {
            LoadSettingCurrentRole();
        } else {
            $('#divSettingAreas').empty();
            $('#lastUpdateInfor').empty();
        }
    });

    $('#selectSettingType').change(function () {
        $('#chkAllSettings').parent().children().addClass('d-none');
        $('#selectState').val('select');
        $('#selectDistrict').empty();
        $('#selectSchool').empty();
        const isMySettingType = +($('#selectSettingType').val() == 5)
        if ($('#selectSettingType').val() == 1 || $('#selectSettingType').val() == 7 || isMySettingType) {
            $('#publisherContent').hide();
            $('#grSchoolLevel').hide();
            LoadSettingCurrentRole();
        } else {
            if ($('#selectSettingType').val() == 3) {
                if ('@Model.IsAdmin' === 'True' || '@Model.IsSchoolAdminOrTeacher' === 'True') {
                    populateSchools();
                }
                $('#grSchoolLevel').show();
            } else {
                $('#grSchoolLevel').hide();
            }
            $('#publisherContent').show();
            $('#divSettingAreas').empty();
            $('#lastUpdateInfor').empty();
        }
        if (isMySettingType || $('#hdfDistrictId').length > 0 && $('#hdfDistrictId').val() && $('#selectSettingType').val() != 3) {
            LoadSettingCurrentRole();
        }
    });

    $('#divSettingAreas').on('click change', '.switch input:radio, .switch input:checkbox, .clock-settings-area input:checkbox, .lock-input input:checkbox, input:button, .group-input input:radio, .group-input input:checkbox, .datepicker', function () {
        setDisableTestSettingSubmit();
    });

    $('#chkAllSettings').change(function () {
        setDisableTestSettingSubmit();
    })

    function setDisableTestSettingSubmit() {
        if ($('#selectSettingType').val() == 3 && $('#selectSchool').val() == 'select') {
            $("#btnTestSettingSubmit").attr('disabled', true);
        } else {
            $("#btnTestSettingSubmit").attr('disabled', false);
        }
    }
    function LoadSettingType(userRole) {
        switch (userRole) {
            case 1: //TODO districtAdmin
                {
                    //$('#selectSettingType option[value = "1"]').hide();
                    $('#selectSettingType option[value = "1"]').remove();
                    $('#selectSettingType option[value = "2"]').attr("selected", "selected");
                } break;
            case 2: //TODO User
                {
                    $('#selectSettingType option[value = "1"]').remove();
                    $('#selectSettingType option[value = "5"]').attr("selected", "selected");
                } break;
            default:
        }
        LoadSettingCurrentRole();
    }

    function LoadSettingCurrentRole() {
        ShowBlock($('#TestPreferenceContent'), "Load Setting");
        $('#lastUpdateInfor').empty();
        var currentSettingType = $('#selectSettingType').val();
        var currentDistrictId = 0;
        if ($('#hdfDistrictId').length > 0) {
            currentDistrictId = $('#hdfDistrictId').val();
        } else if ($('#selectSettingType').val() == 1 || $('#selectSettingType').val() == 7) {
            currentDistrictId = 0;
        } else if ($('#selectDistrict').val() != null) {
            currentDistrictId = $('#selectDistrict').val();
        } else {
            currentDistrictId = CURRENT_USER_DISTRICT_ID
        }
        var currentSchoolId = $('#selectSchool').val() || 0;
        currentSchoolId = currentSchoolId === "select" ? 0 : currentSchoolId;
        $('#divSettingAreas').empty();
        portalV2SkinRadio()
        $('#divSettingAreas').load('@Url.Action("LoadSettings")', { levelSetting: currentSettingType, districtId: currentDistrictId, schoolId: currentSchoolId }, function (response) {
            if (!$('#divSettingAreas').html()) {
                $('#divSettingAreas').css('min-height', '750px')
            }
            @if (Model.IsSchoolAdminOrTeacher)
            {
                <text>
                    $('input[name="overrideAutoGradedTextEntry"]').attr('disabled', 'disabled');
                    $('#chklockOverrideAutoGradedTextEntry').attr('disabled', 'disabled');
                </text>
                if (Model.IsTeacher)
                {
                    <text>
                        initLockAllSettings(false);
                        if ($('#selectSettingType').val() != '5') {
                            $('#btnTestSettingSubmit').hide();
                            $("#divSettingAreas input:radio").attr('disabled', true);
                            $("#divSettingAreas input:checkbox").attr('disabled', true);
                            $('#chkAllSettings').attr('disabled', true);
                        } else {
                            $('#btnTestSettingSubmit').show();
                        }
                    </text>
                }
                else
                {
                     <text>
                        initLockAllSettings();
                        if ($('#selectSettingType').val() != '5' && $('#selectSettingType').val() != '3') {
                            $('#btnTestSettingSubmit').hide();
                            $("#divSettingAreas input:radio").attr('disabled', true);
                            $("#divSettingAreas input:checkbox").attr('disabled', true);
                            $('#chkAllSettings').attr('disabled', true);
                        } else {
                            $('#btnTestSettingSubmit').show();
                        }
                    </text>
                }
            }
            else
            {
                <text>
                    initLockAllSettings();
                </text>
            }

            $('#TestPreferenceContent').unblock();
            portalV2SkinCheckBox()
            portalV2SkinRadio()
        });
    }


    $("#btnTestSettingSubmitXXX").live("click", function (e) {
        e.preventDefault();
        //check deadline time must be equal or greater than current time
        var vdeadline = '';
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDeadline:checked').length > 0) {
            if ($("#selectDeadline").val() == '') {
                alertMessageSetting('Please select a date for the deadline.');
                return;
            }
            vdeadline = BuildLocalDateTimeToUTC();
            var today = new Date();
            var deadline = new Date(vdeadline);
            if (deadline < today) {
                alertMessageSetting('Deadline must be equal or greater than current time.');
                return;
            }
        }
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDurationOption:checked').length > 0 && ($("#durationId").val() == '' || $("#durationId").val() == '0')) {
            alertMessageSetting('Value must be provided.');
            return;
        }
        ShowBlock($('#TestPreferenceContent'), "Save Setting");
        $("#btnTestSettingSubmit").disableBt();
        var vdistrictId = 0;
        if ($('#hdfDistrictId').length) {
            vdistrictId = $('#hdfDistrictId').val();
        } else {
            if ($('#selectDistrict').val() != 'select')
                vdistrictId = $('#selectDistrict').val();
        }
        var highlightTextOption = $('input[name=SupportHighlightText]:checked').val() == "OFF" ? 0 : 1;
        if (highlightTextOption == 1) {
            highlightTextOption = $('input[name=SupportHighlightText]:checked').val() == "ONLYSTUDENT" ? 2 : 1;
        }
        var vdeadline = '';
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDeadline:checked').length > 0) {
            vdeadline = BuildLocalDateTimeToUTC();
            if (vdeadline == 'InvalidDate') {
                alert("Please input vadid date - mm/dd/yyyy");
                $('#TestPreferenceContent').unblock();
                $("#btnTestSettingSubmit").enableBt();
                return;
            }
        }
        var vDurationValue = 0;
        if ($('#rdTimeLimitON:checked').length > 0 && $('#enableDurationOption:checked').length > 0) {
            vDurationValue = $("#durationId").val();
        }
        var vDisplayAnswerLables = '0';
        if ($('#DisplayAnswerLabelSingleSelect').is(':checked')) {
            if ($('#DisplayAnswerLabelMultiselect').is(':checked')) {
                vDisplayAnswerLables = '1';
            } else {
                vDisplayAnswerLables = '2';
            }
        } else {
            if ($('#DisplayAnswerLabelMultiselect').is(':checked')) {
                vDisplayAnswerLables = '3';
            } else {
                vDisplayAnswerLables = '0';
            }
        }
        var vOptions1 = {
            DistrictId: vdistrictId,
            SettingType: $('#selectSettingType').val(),
            VerifyStudent: $('input[name=vStudent]:checked').val() == "ON" ? 1 : 0,
            RequireTestTakerAuthentication: $('input[name=RequireTestTakerAuthentication]:checked').val() == "ON" ? 1 : 0,
            ShuffleQuestions: $('input[name=ShuffleQuestions]:checked').val() == "ON" ? 1 : 0,
            ShuffleAnswers: $('input[name=ShuffleAnswers]:checked').val() == "ON" ? 1 : 0,
            AutoAdvanceTest: $('input[name=AutoAdvance]:checked').val() == "ON" ? 1 : 0,
            MustAnswerAllQuestions: $('input[name=AnswerAllQuestions]:checked').val() == "ON" ? 1 : 0,
            CanReviewTest: $('input[name=CanReviewTest]:checked').val() == "ON" ? 1 : 0,
            CanPauseTest: $('input[name=CanPauseTest]:checked').val() == "ON" ? 1 : 0,
            DisplayAnswerLabels: vDisplayAnswerLables,
            AnswerLabelFormat: $('input[name=AnswerLabelFormat]:checked').val() == "ON" ? 1 : 0,
            OverrideAutoGradedTextEntry: $('input[name=OverrideAutoGradedTextEntry]:checked').val() == "ON" ? 1 : 0,
            BrowserLockdownMode: $('input[name=browserLockdownMode]:checked').val() == "ON" ? 1 : 0,
            PassagePositioninTestTaker: $('input[name=PassagePositioninTestTaker]:checked').val() == "LEFT" ? 1 : 0,
            SupportHighlightText: highlightTextOption,
            EliminateChoiceTool: $('input[name=EliminateChoiceTool]:checked').val() == "ON" ? 1 : 0,
            FlagItemTool: $('input[name=FlagItemTool]:checked').val() == "ON" ? 1 : 0,
            TimeLimit: $('input[name=TimeLimit]:checked').val() == '1' ? 1 : 0,
            Duration: vDurationValue,
            Deadline: vdeadline,
            ShowTimeLimitWarning: $('input[name=ShowTimeLimitWarning]:checked').val() == "ON" ? 1 : 0,
            MultipleChoiceClickMethod: $('input[name=MultipleChoiceClickMethod]:checked').val() == "ClickAnswer" ? 1 : 0,
            EnableVideoControls: $('input[name=EnableVideoControls]:checked').val() == "ON" ? 1 : 0,
            TestExtract: '',
            LockedDownTestTaker: $('input[name=LockedDownTestTaker]:checked').val() == "ON" ? 1 : 0,
            EnableAudio: $('input[name=EnableAudio]:checked').val() == "ON" ? 1 : 0,
            SectionBasedTesting: $('input[name=SectionBasedTesting]:checked').val() == "ON" ? 1 : 0,
            AdaptiveTest: $('input[name=AdaptiveTest]:checked').val() == "ON" ? 1 : 0,
        };
        if ($('input[name=TestExtract]') != undefined) {
            vOptions1.TestExtract = $('input[name=TestExtract]:checked').val() == "ON" ? 1 : 0;
        }
        var vTools1 = {
            SimplePalette: $('input[name=simplePalette]:checked').val() == "ON" ? 1 : 0,
            MathPalette: $('input[name=mathPalette]:checked').val() == "ON" ? 1 : 0,
            SpanishPalette: $('input[name=spanishPalette]:checked').val() == "ON" ? 1 : 0,
            FrenchPalette: $('input[name=frenchPalette]:checked').val() == "ON" ? 1 : 0,
            Protractor: $('input[name=protractor]:checked').val() == "ON" ? 1 : 0,
            SupportCalculator: $('input[name=supportCalculator]:checked').val() == "ON" ? 1 : 0,
            ScientificCalculator: $('input[name=scientificCalculator]:checked').val() == "ON" ? 1 : 0,
        };
        var data = JSON.stringify({ vOptions: vOptions1, vTools: vTools1 });

        $.ajax({
            url: '@Url.Action("SaveSettings")',
            traditional: true,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: data,
            success: function (response) {
                if (response.Success == true) {
                    $('#lastUpdateInfor').empty();
                    $('#lastUpdateInfor').append('<label>Last Update: ' + response.InforUpdated.LastUpdatedDate + '</label>');
                }
                $('#TestPreferenceContent').unblock();
                $("#btnTestSettingSubmit").enableBt();
            },
            failure: function (response) {
                alert(response);
            }
        });
    });

    function BuildLocalDateTimeToUTC() {

        var vDateTime = $("#selectDeadline").val() + ' ' + $("#selectHouse").val() + ':' + $("#selectMunite").val();

        if (Date.parse(vDateTime)) {
            var vDate = $("#selectDeadline").datepicker("getDate");
            vDate.setHours($("#selectHouse").val());
            vDate.setMinutes($("#selectMunite").val());
            return vDate.toISOString();
        } else {
            return "InvalidDate";
        }

    }

    function alertMessageSetting(message) {
        var oldzIndex = $('#SettingsDialog').parent('.ui-dialog').css('z-index');
        $('#SettingsDialog').parent('.ui-dialog').css({ 'z-index': '1000' });
        var overlayHeight = $('.my-overlayy').height();
        //set the height for overlay
        $('.my-overlay').height(2000);

        var configData = {
            message,
            cbYesBtnFuncName: 'closeAlert();',
            cbCloseBtnFuncName: 'closeAlert();'
        }
        var strHtml = makeAnnounceDialog(configData)
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog dialog-custom-new-skin")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                open: function () {
                    $(this).parents('.ui-dialog').find('.ui-dialog-titlebar-close').remove()
                },
                close: function () {
                    $('.ui-widget-overlay:last').remove();
                    $('#SettingsDialog').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value
                    $('.my-overlay').height(overlayHeight);
                    $(this).remove();
                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });

        showModalDialogBG();
    }
    function closeAlert() {
        $('#alertDialog').dialog('close');
    }
    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }


    $("#btnTestSettingSubmit").unbind('click');
    $("#btnTestSettingSubmit").live("click", function (e) {
        $("#btnTestSettingSubmit").attr('disabled', true);
        if (!testSchedule.validateTestScheduleForm()) return;

        ShowBlock($('#TestPreferenceContent'), "Save Setting");

        UpdateTestPreferenceModel();

        var currentSettingType = $('#selectSettingType').val();
        var currentDistrictId = 0;
        if ($('#hdfDistrictId').length > 0) {
            currentDistrictId = $('#hdfDistrictId').val();
        } else if ($('#selectSettingType').val() == 1 || $('#selectSettingType').val() == 7) {
            currentDistrictId = 0;
        } else if ($('#selectDistrict').val() != null) {
            currentDistrictId = $('#selectDistrict').val();
        } else {
            currentDistrictId = CURRENT_USER_DISTRICT_ID
        }
        var schoolId = $('#selectSchool').val() || 0;
        var data = JSON.stringify({ obj: testPreferenceModel, settingLevel: currentSettingType, districtId: currentDistrictId, schoolId: schoolId });
        $.ajax({
            url: '@Url.Action("SaveSettings")',
            traditional: true,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: data,
            success: function (response) {
                if (response.Success == true) {
                    $('#lastUpdateInfor').empty();
                    $('#lastUpdateInfor').append('<label>Last Update: ' + response.InforUpdated.LastUpdatedDate + '</label>');
                }
                $('#TestPreferenceContent').unblock();
            },
            failure: function (response) {
                alert(response);
            }
        });
    });
</script>
<style type="text/css">
    .ui-widget-header {
        border: 0px solid var(--grey0) !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 30px;
        height: 42px;
    }

    .ui-widget-overlay {
        background: var(--dark) !important;
    }

    #TestPreferenceContent .clock-all-settings {
        display: flex;
        justify-content: end;
    }

        #TestPreferenceContent .clock-all-settings > div:first-child {
            margin-right: 50px;
        }
</style>
<style type="text/css">
    /* css for timepicker */
    .ui-datepicker .ui-datepicker-header {
        top: 0px;
    }

    .ui-datepicker .ui-datepicker-prev span,
    .ui-datepicker .ui-datepicker-next span {
        background-image: url("/Content/themes/base/images/ui-icons_222222_256x240.png");
    }

    .ui-datepicker .ui-icon {
        width: 16px;
        height: 16px;
    }

    .ui-timepicker-div .ui-widget-header {
        margin-bottom: 8px;
    }

    .ui-timepicker-div dl {
        text-align: left;
    }

        .ui-timepicker-div dl dt {
            float: left;
            clear: left;
            padding: 0 0 0 5px;
        }

        .ui-timepicker-div dl dd {
            margin: 0 10px 10px 63px;
        }

    .ui-timepicker-div td {
        font-size: 90%;
    }

    .ui-tpicker-grid-label {
        background: none;
        border: none;
        margin: 0;
        padding: 0;
    }

    .ui-timepicker-rtl {
        direction: rtl;
    }

        .ui-timepicker-rtl dl {
            text-align: right;
            padding: 0 5px 0 0;
        }

            .ui-timepicker-rtl dl dt {
                float: right;
                clear: right;
            }

            .ui-timepicker-rtl dl dd {
                margin: 0 45% 10px 10px;
            }

    .ui-timepicker-div .ui-widget-header {
        top: 0px;
        background: url("images/ui-bg_highlight-soft_75_cccccc_1x100.png") repeat-x scroll 50% 50% var(--grey0) !important;
    }

    .colx2-left .lblrepeat {
        line-height: 0px;
        padding-top: 7px;
    }

    .colx2-left .lblend {
        line-height: 0px;
        padding-top: 5px;
    }

    .clear10 {
        clear: both;
        height: 10px;
    }
</style>
