@using LinkIt.BubbleSheetPortal.Web.Helpers
@using LinkIt.BubbleSheetPortal.Web.ViewModels
@using LinkIt.BubbleSheetPortal.Models
@model LinkIt.BubbleSheetPortal.Web.ViewModels.TestDataUploadViewModel

@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.Techsupport, "Upload Test Data");
    var currentUser = HttpContext.Current.GetCurrentUser();
    if (currentUser != null)
    {
        var isUseNewDesign = HelperExtensions.IsUseNewDesign(currentUser.DistrictId ?? 0);
        if (isUseNewDesign)
        {
            Layout = "~/Views/Shared/_Layout_v2.cshtml";
        }
    }
}

@section jQuery {
    @BundleHelper.jQueryUpgrade()
}


@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleCustomBundle()
@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.ScriptCKEditorUtilsBundle()
<link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.0.45/css/materialdesignicons.min.css">
<link href="/Content/libs/select2/comboTreePlugin.css" rel="stylesheet" />
<link href="@BundleHelper.Version("~/Content/css/v2/generate-bubble-sheet.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    .walkme-player {
        position: fixed !important;
        z-index: 2147483640 !important;
        cursor: pointer !important;
    }

    .comboTreeArrowBtn {
        height: unset !important;
        top: 12px !important;
        right: 6px !important;
    }

    .uploadifive-button {
        background-image: unset;
        text-shadow: none;
        background-color: transparent;
        color: var(--navyColor);
        height: auto !important;
        line-height: normal !important;
        padding: 11px 32px;
        border: 2px solid var(--blue3);
        border-radius: 0;
        cursor: pointer;
        font-size: 1rem;
        text-transform: inherit;
        font-weight: 700;
        transition: all 0.2s ease-in-out;
        margin: 16px 0 16px 0;
        margin-left: auto;
        width: fit-content !important;
    }

        .uploadifive-button:hover {
            background: var(--blue3);
        }

    #btUploadTestData {
        margin-left: 1rem;
        float: right;
    }

    #notificationTimeout .modal-timeout {
        position: fixed !important;
        z-index: 1000 !important;
    }
</style>
<script src="/Content/libs/select2/comboTreePlugin.js"></script>

<article class="container_12">
    <section class="grid_12">
        <div class="block-border" id="divUploadContent">
            <div class="block-content form">
                <h1 class="mb-4">Upload Test Data</h1>
                <ul style="display: none" id="error-messages" class="message error no-margin"></ul>
                <div class="row g-3 mt-4">
                    @if (Model.IsPublisherUploading || (ViewBag.IsNetworkAdmin != null && ViewBag.IsNetworkAdmin))
                    {
                        <div id="states" class="col-3">
                            <label>Select State</label>
                            @Html.DropDownListFor(x => x.StateId, Model.AvailableStates, new { id = "selectState" })
                        </div>
                        <div id="districts" class="col-3">
                            <label>Select @LabelHelper.DistrictLabel</label>
                            <div class="block-text-name w-100">
                                @Html.DropDownListFor(x => x.DistrictId, Model.AvailableDistricts, new { id = "selectDistrict" })
                                <div class="box-select">
                                    <span class="overlay"></span>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="col-3">
                        <label>Category</label>
                        <input type="text" id="selectCategoryIDDropdown" placeholder="Select Category" autocomplete="off" class="u-full-width" />
                    </div>
                    <div id="pselectAchievementLevelId" class="col-3">
                        <label>Achievement Level</label>
                        <input type="text" id="selectAchievementLevelIDDropdown" placeholder="Select Achievement Level" autocomplete="off" class="u-full-width" />
                    </div>
                </div>
                <div id="idLACOption" class="mt-3">
                    <div id="idLACOptionBase">
                        <div>
                            <input type="checkbox" id="isIncludeProgramData" checked />
                            <label for="isIncludeProgramData">Include test file program data</label>
                        </div>
                        <div class="mt-2">
                            <input type="checkbox" id="isIncludeRosterProgramData" />
                            <label for="isIncludeRosterProgramData">Include roster program data</label>

                            <div id="divIncludeRosterProgramData" style="display:none;" class="mt-3">
                                <div id="idPopulateProgram">
                                </div>
                                <div class="my-3">
                                    <button id="btselectalllistedprograms" type="button" class="btn-blue" style="margin-right:1rem;">Select All Programs</button>
                                    <button id="btselectnoprogram" type="button" class="btn-blue">Select None</button>
                                </div>
                            </div>
                        </div>
                        <div class="mt-2">
                            <input type="checkbox" id="isOmitsubjectfromtestname" />
                            <label for="isOmitsubjectfromtestname">Omit subject from test name</label>
                        </div>
                    </div>
                    <div class="mt-2">
                        <input type="checkbox" id="isNotCreateNewStudent" />
                        <label for="isNotCreateNewStudent">Do not create new students</label>
                    </div>
                    <div class="mt-2">
                        <input type="checkbox" id="isApplyPerformanceBankds" checked />
                        <label for="isApplyPerformanceBankds">Apply automated performance bands</label>
                    </div>
                </div>

                <div>
                    <button id="btUploadTestData" class="btn-red">Submit</button>
                    <input id="file_upload" name="file_upload" type="file" />
                </div>
            </div>
        </div>
    </section>
</article>
<script type="text/javascript">
    var listAttendanceDistrict =  @Html.Raw(Json.Encode(@Model.ListAttendance));
    $(function ()
    {
        $('#selectDistrict').marquee();
        populateStates();

        $('.walkme-player').css({ 'z-index': 0 });
        $('div').css({ 'z-index': 'unset' });
        $('.comboTreeWrapper').css({ 'z-index': 'unset' });

        getDataSetAchievementLevel();

        $('#selectState').change(function ()
        {
            if ($(this).val() != 'select') {
                populateDistricts();
            }
            else {
                $('#selectDistrict').empty();
            }
        });

        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';

        if (window.FormData !== undefined)
        {
            $('#file_upload').uploadifive({
                'uploadScript': '@Url.Action("UploadTestData")',
                'overrideEvents': ['onDialogClose'],
                'buttonText': 'Select File(s)',
                'fileObjName': 'postedFile',
                'multi': true,
                'fileSizeLimit': '71680KB',
                'removeCompleted': true,
                'width': 100,
                'auto': false,
                'fileType': 'text/plain',
                'onUpload': function (file) {
                    $('#file_upload').data('uploadifive').settings.formData = getFormData(auth);
                    $('#error-messages').hide();
                    $('#error-messages').empty();
                },
                'onUploadComplete': function (file, data) {
                    var result = $.parseJSON(data);
                    if (result == undefined) {
                        var mess = '<div class="text-left"> An error has occured. Please try again </div>';
                        CustomAlert(mess);
                    }

                    if (result.success == true) {
                        return;
                    } else {
                        addErrorMessages(result);
                        $('#file_upload').uploadifive('cancel');
                    }
                },
                'onError': function (errorType, file) {
                    var alertMessage = '';
                    if (errorType == "FORBIDDEN_FILE_TYPE") {
                        alertMessage = '<div class="text-center">File is not an allowed file type. Please select a text (.txt) file.</div>';
                        CustomAlert(alertMessage, true);
                        setTimeout(function () {
                            $('#uploadifive-file_upload-queue .uploadifive-queue-item').remove();
                        }, 3000);
                    } else {
                        alertMessage = '<div class="text-center">The file ' + file.name + ' returned an error and was not added to the queue.</div>';
                        CustomAlert(alertMessage, true);
                    }
                }
            });

            $('#uploadifive-file_upload').css({ 'z-index': 0 });
        }

        function getFormData(auth)
        {
            var stateId = $("#selectState").val();
            var districtId = $("#selectDistrict").val();
            var includeProgram = $('#isIncludeProgramData').prop('checked');
            var listProgramSelected = getProgramIds();
            var excludeSubject = $('#isOmitsubjectfromtestname').prop('checked');
            var notCreateNewStudent = $('#isNotCreateNewStudent').prop('checked');
            var isApplyPerformanceBankds = $('#isApplyPerformanceBankds').prop('checked');
            if (comboTree1 && comboTree1._selectedItem) {
                categoryId = comboTree1._selectedItem.id;
            }
            if (comboTree2 && comboTree2._selectedItem) {
                achievementLevelId = comboTree2._selectedItem.id
            }
            return {
                'AUTHID': auth,
                'stateId': stateId,
                'districtId': districtId,
                'achievementLevelId': achievementLevelId,
                'categoryId': categoryId,
                'userProgram': includeProgram,
                'listProgramIds': listProgramSelected,
                'isExcludeSubject': excludeSubject,
                'isNotCreateNewStudent': notCreateNewStudent,
                'isApplyPerformanceBankds': isApplyPerformanceBankds
            };
        }

        function populateStates()
        {
            var stateSelect = $('#selectState');
            stateSelect.empty();
            if ('@ViewBag.IsNetworkAdmin' === 'True') {
                $.get('@Url.Action("GetStatesForNetworkAdmin", "PopulateStateDistrict")', function (states) {
                    addDefaultOption($('#selectState'), "State");
                    addSelectListItems($('#selectState'), states);
                    if('@ViewBag.StateId' != null)
                    {
                        $('#selectState').val(@ViewBag.StateId);
                        $('#selectState').trigger('change');
                    }
                });
            } else {
                $.get('@Url.Action("GetStates")', function (response) {
                    addDefaultOption(stateSelect, "State");
                    addSelectListItems(stateSelect, response);
                });
            }
        }

        function populateDistricts()
        {
            var districtSelect = $('#selectDistrict');
            districtSelect.empty();
            var stateValue = $('#selectState').val();
            if ('@ViewBag.IsNetworkAdmin' === 'True') {
                $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                    addDefaultOption($('#selectDistrict'), "@LabelHelper.DistrictLabel");
                    addSelectListItems($('#selectDistrict'), districts);
                });
            } else {
                $.get('@Url.Action("GetDistricts")', { stateId: stateValue }, function (response) {
                    addDefaultOption(districtSelect, "@LabelHelper.DistrictLabel");
                    addSelectListItems(districtSelect, response);
                });
            }
        }

        $('#selectDistrict').change(function () {
            if ($(this).val() != 'select') {
                populateProgram();
                GetDataSetCategories();
            }
            else {
                $('#divIncludeRosterProgramData').hide();
            }
        });
    });

    $("#btUploadTestData").click(function ()
    {
        if (window.FormData !== undefined) {
            var categoryId = 0;
            if ($('#selectCategoryIDDropdown').val() === '') {
                $('#error-messages').html('<li> Please select the category name. </li>');
                $('#error-messages').show();
                $('#success-message').hide();
                $(window).scrollTop($('#divUploadContent'));
                return;
            }
            if (comboTree1 && comboTree1._selectedItem) {
                categoryId = comboTree1._selectedItem.id;
            }
            if (!categoryId) {
                $('#error-messages').html('<li> Please select the category name. </li>');
                $('#error-messages').show();
                $('#success-message').hide();
                $(window).scrollTop($('#divUploadContent'));
                return;
            }
            if (comboTree2 && comboTree2._selectedItem) {
                achievementLevelId = comboTree2._selectedItem.id;
            }

            $('#error-messages').hide();
            $('#file_upload').uploadifive('upload');
        }
    });

    $("#btselectalllistedprograms").click(function () {
        $('#idPopulateProgram :checkbox:enabled').prop('checked', true);
    });

    $("#btselectnoprogram").click(function () {
        $('#idPopulateProgram :checkbox:enabled').prop('checked', false);
    });
    var comboTree1 = null;
    var categoryElementId = '#selectCategoryIDDropdown';

    function GetDataSetCategories() {

        $.get('@Url.Action("GetDataSetCategoriesToComboTreeByDistrictId", "CategoriesAPI")' + '?districtid=' + $('#selectDistrict').val(), function (categoryList) {
            //defaul linkit category

            if (!comboTree1) {
                comboTree1 = $(categoryElementId).comboTree({
                    source: categoryList,
                    isMultiple: false,
                    cascadeSelect: true,
                    collapse: false,
                    selected: []
                });
            $(categoryElementId).change(function(e) {
                $(this).val(comboTree1 ? comboTree1.getSelectedNames() : '');

                if (comboTree1 != null && (comboTree1.getSelectedIds() || []).length == 1) {
                    var districtId = $("#selectDistrict").val() || @Model.DistrictId;
                    var isAttendanceImport = listAttendanceDistrict.filter(function (x) {
                        return x.DistrictID == districtId && x.DataSetCategoryID == comboTree1.getSelectedIds()[0];
                    }).length > 0;
                    if (isAttendanceImport) {
                        $("#isIncludeProgramData").prop("checked", false);
                        $("#isIncludeRosterProgramData").prop("checked", false);
                        $("#isOmitsubjectfromtestname").prop("checked", true);
                        $('#pselectAchievementLevelId').hide();
                        $('#selectAchievementLevelId').hide();
                        $('#idLACOptionBase').hide();
                    }
                    else {
                        $("#isIncludeProgramData").prop("checked", true);
                        $("#isIncludeRosterProgramData").prop("checked", false);
                        $("#isOmitsubjectfromtestname").prop("checked", false);
                        $('#pselectAchievementLevelId').show();
                        $('#selectAchievementLevelId').show();
                        $('#idLACOptionBase').show();
                    }
                }
            });
            } else {
                comboTree1.setSource(categoryList);
            }
        });
    }
    function populateProgram ()
    {
        $('#idPopulateProgram').html('');
        var districtId = 0;
        if($('#selectDistrict').length > 0)
        {
            districtId = $('#selectDistrict').val();
            if (districtId == 'select' || districtId == null)
            {
                return;
            }
        }
        if($('#isIncludeRosterProgramData').is(":checked") && districtId > -1)
        {
            //TODO:
            $.get('@Url.Action("GetProgramLAC")', { districtId: districtId }, function (response)
            {
                if (response.Data != null)
                {
                    var vTable = "<table>";
                    var vRows = "";
                    $.each(response.Data, function (i, value)
                    {
                        //return $('<div />').text(value.Name).html();
                        //$('<div />').html(value.Name).text()
                        var vProgramName = $('<div />').text(value.Name).html();
                        if ((i + 1) % 3 === 0 )
                        {
                            vRows += "<td>"
                                  + "<input type=\"checkbox\" id=\"Program-" + value.Id + "\" value=\"" + vProgramName + "\" key='" + value.Id + "' />"
                                  + "<label for=\"Program-" + value.Id + "\">  " + vProgramName + "</label>"
                                  + "</td>";
                            vTable += "<tr>" + vRows + "</tr>";
                            vRows = "";
                        } else
                        {
                            vRows += "<td>"
                                  + "<input type=\"checkbox\" id=\"Program-" + value.Id + "\" value=\"" + vProgramName + "\" key='" + value.Id + "' />"
                                  + "<label for=\"Program-" + value.Id + "\">  " + vProgramName + "</label>"
                                  + "</td>";
                        }
                    });
                    if (vRows != "")
                    {
                        vTable += "<tr>" + vRows + "</tr>";
                        vRows = "";
                    }
                    vTable += "</table>";
                    $('#idPopulateProgram').html(vTable);
                    $('#divIncludeRosterProgramData').show();
                }
            });
        }
    }

    $("#isIncludeRosterProgramData").change(function () {
        if (this.checked) {
            populateProgram();
        }
        else
        {
            $('#idPopulateProgram').html('');
            $('#divIncludeRosterProgramData').hide();
        }
    });

    function getProgramIds()
    {
        var lstPrgIds = [];
        $('#idPopulateProgram input:checked').each(function ()
        {
            lstPrgIds.push($(this).attr('key'));
        });
        if (lstPrgIds.length > 0)
        {
            var vresult = lstPrgIds.join(",");
            return vresult;
        }
        else {
            return '';
        }
    }

    var comboTree2 = null;
    var achievementElementId = '#selectAchievementLevelIDDropdown';

    function getDataSetAchievementLevel() {

        if (!comboTree2) {
            comboTree2 = $(achievementElementId).comboTree({
                    source: @Html.Raw(ViewBag.AchievementLevelIds),
                    isMultiple: false,
                    cascadeSelect: true,
                    collapse: false,
                    selected: []
                });
            $(achievementElementId).change(function(e) {
                if (e.target.value === "") {
                    comboTree2._selectedItem = {}
                }
            });
        } else {
            comboTree2.setSource(categoryList);
        }
    }


</script>
