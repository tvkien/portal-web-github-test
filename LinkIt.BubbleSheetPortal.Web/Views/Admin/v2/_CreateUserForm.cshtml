@using LinkIt.BubbleSheetPortal.Models
@model LinkIt.BubbleSheetPortal.Web.ViewModels.CreateUserViewModel
@using LinkIt.BubbleSheetPortal.Web.Helpers
@{
    var networkAdminPermission = (int)Permissions.NetworkAdmin;
}
<link href="@BundleHelper.Version("~/Content/css/v2/create-user-form.css")" rel="stylesheet" type="text/css" />


<ul style="display: none" id="error-messages" class="message error"></ul>
<ul style="display: none" id="success-message" class="message success">
    <li>User successfully created.</li>
</ul>

<div>
    <div class="block-section-custom mb-4">
        <h1 style="padding: 0">Add Staff</h1>
        <fieldset>
            <p class="title-large">Select Role </p>
            <div class="columns style-wrapper">
                <div class="colx2-left">
                    <p>
                        <label>Role</label>
                        <span class="relative">
                            @Html.DropDownListFor(x => x.RoleId, Model.AvailableRoles, new { id = "selectAvailableRoles", @class = "full-width" })
                        </span>
                    </p>
                </div>
                <div class="colx2-right"></div>
            </div>
        </fieldset>
    </div>

    <div class="block-section-custom mb-4" id="locationFieldset" style="display: none">
        <fieldset>
            <p class="title-large">Location Info</p>
            <div class="columns style-wrapper">
                @if (Model.CanSelectState)
                {
                    <div class="colx2-left">
                        <p id="states">
                            <label>Select State</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.StateId, Model.AvailableStates, new { id = "selectState", @class = "full-width" })
                            </span>
                        </p>
                        <p id="schools">
                            <label>Select School</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.SchoolId, Model.AvailableSchools, new { id = "selectSchool", @class = "selectSchool" })
                            </span>
                        </p>
                    </div>
                    <div class="colx2-right">
                        <p id="districts">
                            <label>Select @LabelHelper.DistrictLabel</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.DistrictId, Model.AvailableDistricts, new { id = "selectDistrict", @class = "full-width" })
                            </span>
                        </p>
                    </div>
                }
                else if (Model.CanSelectDistrict)
                {
                    <div class="colx2-left">
                        <p id="districts">
                            <label>Select @LabelHelper.DistrictLabel</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.DistrictId, Model.AvailableDistricts, new { id = "selectDistrict", @class = "full-width" })
                            </span>
                        </p>
                    </div>
                    <div class="colx2-right">
                        <p id="schools">
                            <label>Select School</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.SchoolId, Model.AvailableSchools, new { id = "selectSchool", @class = "selectSchool" })
                            </span>
                        </p>
                    </div>
                }
                else
                {
                    <div class="colx2-left">
                        <p id="schools">
                            <label>Select School</label>
                            <span class="relative">
                                @Html.DropDownListFor(x => x.SchoolId, Model.AvailableSchools, new { id = "selectSchool", @class = "selectSchool" })
                            </span>
                        </p>
                    </div>
                    <div class="colx2-right"></div>
                }
            </div>
        </fieldset>
    </div>

    <div class="block-section-custom mb-4">
        <fieldset>
            <p class="title-large">Account Info</p>
            <div class="columns style-wrapper">
                <div class="colx2-left">
                    <p>
                        <label>Username</label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.UserName, new { @class = "full-width", tabindex = 1 })
                            @Html.ValidationMessageFor(x => x.UserName, " ")
                        </span>
                    </p>
                    <p>
                        <label>Password</label>
                        <span class="relative">
                            @Html.PasswordFor(x => x.Password, new { @class = "full-width", tabindex = 3 })
                            @Html.ValidationMessageFor(x => x.Password, " ")
                        </span>
                    </p>
                </div>
                <div class="colx2-right">
                    <p>
                        <label>Email Address <i>(Optional)</i></label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.EmailAddress, new { @class = "full-width", tabindex = 2 })
                            @Html.ValidationMessageFor(x => x.EmailAddress, " ")
                        </span>
                    </p>
                    <p>
                        <label>Confirm Password</label>
                        <span class="relative">
                            @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "full-width", tabindex = 4 })
                            @Html.ValidationMessageFor(x => x.ConfirmPassword, " ")
                        </span>
                    </p>
                </div>
            </div>
        </fieldset>
    </div>

    <div class="block-section-custom mb-4">
        <fieldset>
            <p class="title-large">Personal Info</p>
            <div class="columns style-wrapper">
                <div class="colx2-left">
                    <p>
                        <label>First Name</label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.FirstName, new { @class = "full-width", tabindex = 5 })
                            @Html.ValidationMessageFor(x => x.FirstName, " ")
                        </span>
                    </p>
                    <p>
                        <label>Phone Number <i>(Optional)</i></label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "full-width", tabindex = 7 })
                            @Html.ValidationMessageFor(x => x.PhoneNumber, " ")
                        </span>
                    </p>
                    <p>
                        <label>State Code <i>(Optional)</i></label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.StateCode, new { @class = "full-width", tabindex = 9 })
                            @Html.ValidationMessageFor(x => x.StateCode, " ")
                        </span>
                    </p>
                </div>
                <div class="colx2-right">
                    <p>
                        <label>Last Name</label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.LastName, new { @class = "full-width", tabindex = 6 })
                            @Html.ValidationMessageFor(x => x.LastName, " ")
                        </span>
                    </p>
                    <p>
                        <label>Local Code</label>
                        <span class="relative">
                            @Html.TextBoxFor(x => x.LocalCode, new { @class = "full-width", tabindex = 8 })
                            @Html.ValidationMessageFor(x => x.LocalCode, " ")
                        </span>
                    </p>
                </div>
            </div>
        </fieldset>

    </div>
        
    <div class="block-section-custom">
        <div class="btn-container">
            <button id="btnCancel" type="button" class="btn-blue">Cancel</button>
            <button id="btnSubmit" type="submit" name="Save" class="btn-red">Submit</button>
        </div>
    </div>

</div>

<script type="text/javascript">
    $(function () {
        breadcrumbDetailPage('.dataadmin', '#dtaManageuser');
        // #region Fields
        _historyData = {};
        _CURRENT_PAGE_NAME = "AddUser";
        // # endregion Fields

        // #region Page load
        $(function () {
            loadHistoryData();
        });
        // #endregion Page load

        // #region Functions
        function loadHistoryData() {
            if (sessionStorage.KEEP_SESSION) {
                var data = JSON.parse(sessionStorage.KEEP_SESSION);
                if (jQuery.inArray(_CURRENT_PAGE_NAME, data.subPages) != -1) {
                    if (data.payload) {
                        _historyData = data.payload;
                    }
                }
            }
        }

        function clearSelectBoxes() {
            $('#selectState').empty();
            $('#selectDistrict').empty();
            $('#selectSchool').empty();
        }

        function populateStates() {
            var stateSelect = $('#selectState');
            stateSelect.empty();
                $.get('@Url.Action("GetStates")', function(response) {
                    addDefaultOption(stateSelect, "State");
                    addSelectListItems(stateSelect, response);

                    if (_historyData.stateID) {
                        $("#selectState").val(_historyData.stateID);
                        $("#selectState").change();
                    }
                });
            }

        function populateDistricts(districtSelect) {
                districtSelect.empty();
                $('#selectSchool').empty();
                var stateValue = $('#selectState').val();
                if (stateValue != 'select') {
                    @*if ('@Model.IsPublisher' === 'True' || '@Model.IsNetworkAdmin' === 'True')*@
                    {
                        $.get('@Url.Action("GetDistricts")', { stateId: stateValue }, function(response) {
                            addDefaultOption(districtSelect, "@LabelHelper.DistrictLabel");
                            addSelectListItems(districtSelect, response);

                            if (_historyData.districtID) {
                                $("#selectDistrict").val(_historyData.districtID);
                                $("#selectDistrict").change();
                            }
                        });
                    }
                }
            }

        function populateSchools(schoolSelect) {
            schoolSelect.empty();
            var districtValue = $('#selectDistrict').val();
            $.get('@Url.Action("GetSchools")', { districtId: districtValue }, function (response) {
                addDefaultOption(schoolSelect, "School");
                addSelectListItems(schoolSelect, response);

                $("#selectSchool").val(_historyData.schoolID);
                $("#selectSchool").change();
            });
        }
        // #endregion Functioons

        // #region Events
        $('#selectAvailableRoles').change(function () {
            clearSelectBoxes();
            var rolesValue = $(this).val();
            if (rolesValue != 'select') {
                $('#locationFieldset').show();
                $('#schools').show();
                switch (rolesValue) {
                    case '3':
                        $('#selectSchool').empty();
                        $('#schools').hide();
                        break;
                    case '5':
                        clearSelectBoxes();
                        $('#locationFieldset').hide();
                        break;
                    case '@networkAdminPermission':
                        $('#selectSchool').empty();
                        $('#schools').hide();
                        break;
                }
                if ('@Model.CanSelectState' === 'True') {
                    populateStates();
                }
                else if ('@Model.CanSelectState' === 'False' && '@Model.CanSelectDistrict' === 'False') {
                    populateSchools($('#selectSchool'));
                }
                else if ('@Model.CanSelectDistrict' === 'True') {
                    populateDistricts($('#selectDistrict'));
                }
            }
        });

        $('#selectState').change(function () {
            if ($(this).val() != 'select') {
                populateDistricts($('#selectDistrict'));
            }
            else {
                $('#selectDistrict').empty();
                $('#selectSchool').empty();
            }
        });

        $('#selectDistrict').change(function () {
            if ($(this).val() != 'select') {
                populateSchools($('#selectSchool'));
            }
            else {
                $('#selectSchool').empty();
            }
            });
        });
        // #endregion Events
</script>
