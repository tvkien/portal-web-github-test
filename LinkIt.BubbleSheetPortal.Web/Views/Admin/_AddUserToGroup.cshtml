@model  LinkIt.BubbleSheetPortal.Models.XLIGroup
<style>
    .addUserToGroupBtn {
        margin-bottom: 36px;
        margin-left: -9px;
    }

    .ui-widget-content .ui-dialog-titlebar-close {
        right: 5px;
        top: 5px;
        z-index: 10;
    }

    .tag-editor {
        border: 1px solid #89bad3;
        border-radius: 0.417em;
        margin-bottom: 30px;
    }

</style>

<link href="/Content/themes/DataLocker/jquery.tag-editor.css" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Lib/jquery.tag-editor.js")" type="text/javascript"></script>
<style type="text/css">
    .tag-editor {
        border: 1px solid #89bad3;
        border-radius: 0.417em;
        margin-bottom: 30px;
    }
    .tag-editor-tag{
        height:20px;
    }
</style>
<section class="grid-12">
    <div class="block-border">
        <div class="block-content form">
            <h1>Add User To Group: @Model.Name</h1>
            <input type="hidden" value="@Model.XLIGroupID" id="xliGroupID" />
            <fieldset>
                <div class="columns">
                    <div class="colx2-left">
                        <p>
                            <label>School</label>
                            <select id="selectSchool" class="full-width" style="width: 300px"></select>
                        </p>
                    </div>
                    <div class="colx2-right">
                        <p>
                            <label>Role</label>
                            <select id="selectRole" class="full-width" style="width: 300px"></select>
                        </p>
                    </div>
                </div>
            </fieldset>

            <div class="no-margin last-child">
            </div>
        </div>

        <div class="block-content form">
            <div class="block-heading">
                <a href="javascript:void(0)" class="block-heading-item" style="text-transform:none">
                    Users
                </a>
                <a class="block-heading-item js-change-inactive-addusers" href="#" id="showActiveAddUsers">Show Inactive Users: <span>Off</span></a>
            </div>

            <div class="u-clearfix u-m-t-15 addUserToGroupBtn" style="margin:0">
                <button class="button" disabled="disabled" id="btnAddUsersToGroup">
                    <img alt="#" src="/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png">
                    Add <b>User(s)</b> to Group
                </button>
                <button class="button" disabled="disabled" id="btnClearAll">
                    <img alt="#" src="/Content/themes/Constellation/images/icons/fugue/cross-circle.png">
                    Clear all selected <b>User(s)</b>
                </button>
            </div>

            <div class="u-clearfix u-m-t-15" style="margin-bottom:40px;">
                <input type="text" id="selectedUserTags"/>
            </div>

            <div class="no-margin last-child">
                <table id="usersDataTable" class="datatable table no-margin datatable-add-user-group" width="100%">

                    <thead>
                        <tr>
                            <th scope="col" style="width: 2%; text-align:center">
                                <input type="checkbox" id="checkAllUsers" />
                            </th>

                            <th scope="col" style="width: 14%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                Last Name
                            </th>

                            <th scope="col" style="width: 12%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                First Name
                            </th>

                            <th scope="col" style="width: 14%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                Username
                            </th>

                            <th scope="col" style="width: 14%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                Role
                            </th>
                            <th scope="col" style="width: 17%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                Schools
                            </th>
                            <th scope="col" style="width: 10%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                Status
                            </th>
                            <th scope="col" style="width: 17%">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>
                                User Groups
                            </th>
                        </tr>
                    </thead>

                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<script type="text/javascript">
    var dataTable;
    var selectedUsers = [];

    function initDropDownList() {
        $.get('@Url.Action("GetSchoolsManageByCurrentUser", "Admin")', { districtID: @Model.DistrictID }, function (states) {
            addSelectListItemsWithDefaultValue($('#selectSchool'), states, 'Select School');
        });

        $.get('@Url.Action("GetManageRolesByCurrentUser", "Admin")', { xliGroupID: $('#xliGroupID').val() }, function (roles) {
            addSelectListItemsWithDefaultValue($('#selectRole'), roles, 'Select Role');
        });
    }

    function loadUsersToDatabale() {
        var options = {
            bServerSide: true,
            sServerMethod: "POST",
            bDestroy: true,
            sAjaxSource: '@Url.Action("GetUsersAddToGroup", "Admin")',
            fnServerParams: function (aoData) {
                var isShowInactive = $('#showActiveAddUsers').hasClass('show-inactive');
                aoData.push(
                    { name: "DistrictID", value: @Model.DistrictID },
                    { name: "SchoolId", value: $('#selectSchool').val() },
                    { name: "RoleId", value: $('#selectRole').val() },
                    { name: "IsShowInactiveUser", value: isShowInactive },
                    { name: "GroupID", value: $('#xliGroupID').val() }
                );
            },

            iDisplayLength: 10,
            aoColumns: [
                { mData: 'UserId', sName: 'UserId', bSearchable: false, bSortable: false },
                { mData: 'LastName', sName: 'LastName', bSearchable: true, bSortable: true },
                { mData: 'FirstName', sName: 'FirstName', bSearchable: true, bSortable: true },
                { mData: 'UserName', sName: 'UserName', bSearchable: true, bSortable: true },
                { mData: 'RoleName', sName: 'RoleName', bSearchable: true, bSortable: true },
                { mData: 'SchoolList', sName: 'SchoolList', bSearchable: true, bSortable: false },
                { mData: 'UserStatusId', sName: 'UserStatusId', bSearchable: false, bSortable: true },
                { mData: 'GroupName', sName: 'GroupName', bSearchable: false, bSortable: true },
            ],
            aaSorting: [[1, "asc"]],
            fnPreDrawCallback: function () {
                ShowBlock($('#usersDataTable'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#usersDataTable').unblock();
                $("#assignAvailableClasses").dialog('widget')
                                            .css({ top: '120px' });
                setCheckboxChecked();
            },
            fnRowCallback: function (nRow, aData) {
                if (aData['UserStatusId'] == '1')
                    $('td:eq(6)', nRow).html('Active');
                else
                    $('td:eq(6)', nRow).html('Inactive');

                $('td:eq(0)', nRow).html(setIconCheckBox(aData));

            }
        };

        $('#usersDataTable').data('options', options);

        dataTable = initializeDataTable($("#usersDataTable"));
    }

    function setCheckboxChecked() {
        var $checkboxes = $('input[name="chkUserId"][type="checkbox"]');
        var count = 0;

        $checkboxes.each(function () {
            var userId = $(this).val();
            var found = selectedUsers.find(element => element.userId === userId);
            if (typeof found !== "undefined") {
                $(this).prop('checked', true);
                $(this).parents('tr').addClass('is-selected');
                count++;
            }
        });

        if (count === 0) {
            $('#checkAllUsers').prop('checked', false);
            $('#btnAddUsersToGroup').prop('disabled', (selectedUsers.length === 0));
            $('#btnClearAll').prop('disabled', (selectedUsers.length === 0));
        }
        else {
            $('#btnAddUsersToGroup').prop('disabled', false);
            $('#btnClearAll').prop('disabled', false);
            $('#checkAllUsers').prop('checked', (count === $checkboxes.length));
        }
    }

    function ShowHideBtnAddUsersToGroup() {
        var anyCheck = false;
        var checkboxes = $('input[name="chkUserId"][type="checkbox"]');
        for (var i = 0; i < checkboxes.length; i++) {
            if ((checkboxes[i]).checked == true) {
                anyCheck = true;
                break;
            }
        }

        if (anyCheck || selectedUsers.length > 0) {
            $('#btnAddUsersToGroup').prop('disabled', false);
            $('#btnClearAll').prop('disabled', false);
        }
        else {
            $('#btnAddUsersToGroup').prop('disabled', true);
            $('#btnClearAll').prop('disabled', true);
        }
    }

    function setIconCheckBox(aData) {
        var checkboxString = '<div style="text-align: center;">' + '<input style="text-align: center;" type="checkbox" name="chkUserId" userName="' + aData['UserName'] + '" groupName="' + aData['GroupName'] + '" value="' + aData['UserId'] + '" /></div>';
        return checkboxString;
    }

    function drawDatatable() {
        var dataTable = $('#usersDataTable').dataTable();
        dataTable.fnDraw();
    }

    $(function () {

        setTimeout(function () {
            $(".dataadmin").trigger("click");
            $('#manageUserGroupsTab').addClass('current');
        }, 100);


        loadUsersToDatabale();

        $('#selectedUserTags').tagEditor({
            allowUserTags: false,
            forceLowercase: false,
            beforeTagDelete: function (field, editor, tags, val) {
                selectedUsers = selectedUsers.filter(function (item) { return item.userName !== val; });
                var $checkboxes = $('input[name="chkUserId"][type="checkbox"]');
                var found = false;
                $checkboxes.each(function () {
                    var userName = $(this).attr('userName');
                    if (userName === val) {
                        $(this).prop('checked', false);
                        found = true;
                        $(this).parents('tr').removeClass('is-selected');
                    }
                });

                ShowHideBtnAddUsersToGroup();
                $('#checkAllUsers').prop('checked', !found);
                
                return true;
            }
        });

        initDropDownList();

        $('#selectSchool').change(function () {
            drawDatatable();
        });

        $('#selectRole').change(function () {
            drawDatatable();
        });

        $('#checkAllUsers').live('click', function (e) {
            var $checkboxes = $('input[name="chkUserId"][type="checkbox"]');
            if (this.checked) {
                $checkboxes.prop('checked', true);
                $checkboxes.each(function () {
                    var userId = $(this).val();
                    var found = selectedUsers.find(element => element.userId === userId);
                    if (typeof found === "undefined") {
                        selectedUsers.push({
                            "userId": userId,
                            "groupName": $(this).attr('groupName'),
                            "userName": $(this).attr('userName')
                        });

                        $('#selectedUserTags').tagEditor('addTag', $(this).attr('userName'), true);
                    }

                    $(this).parents('tr').addClass('is-selected');
                });
            }
            else {
                $checkboxes.prop('checked', false);
                $checkboxes.each(function () {
                    var userId = $(this).val();
                    $(this).parents('tr').removeClass('is-selected');
                    selectedUsers = selectedUsers.filter(function (item) { return item.userId !== userId; });
                    $('#selectedUserTags').tagEditor('removeTag', $(this).attr('userName'), true);
                });
            }

            ShowHideBtnAddUsersToGroup();
        });

        $('.js-change-inactive-addusers').on('click', function (ev) {
            ev.preventDefault();
            var $self = $(this);
            if ($self.hasClass('show-inactive')) {
                $self.removeClass('show-inactive');
                $self.find('span').html('Off');
            }
            else {
                $self.addClass('show-inactive');
                $self.find('span').html('On');
            }

            drawDatatable();
        });

        $('input[name="chkUserId"][type=checkbox]').live("click", function (e) {
            var $chkAllUsers = $('#checkAllUsers');
            var $trRow = $(this).parents('tr');
            if (this.checked) {
                $trRow.addClass('is-selected');
                var checkboxes = $('input[name="chkUserId"][type="checkbox"]');
                var isCheckAll = true;
                for (var i = 0; i < checkboxes.length; i++) {
                    if ((checkboxes[i]).checked == false) {
                        $chkAllUsers.prop('checked', false);
                        isCheckAll = false;
                    }
                }

                if (isCheckAll) {
                    $chkAllUsers.prop('checked', true);
                }

                var userId = this.value;
                var found = selectedUsers.find(element => element.userId === userId);
                if (typeof found === "undefined") {
                    selectedUsers.push({
                        "userId": userId,
                        "groupName": $(this).attr('groupName'),
                        "userName": $(this).attr('userName')
                    });
                    $('#selectedUserTags').tagEditor('addTag', $(this).attr('userName'), true);
                }
            }
            else {
                var userId = this.value;
                $trRow.removeClass('is-selected');
                $chkAllUsers.prop('checked', false);
                selectedUsers = selectedUsers.filter(function (item) { return item.userId !== userId; });
                $('#selectedUserTags').tagEditor('removeTag', $(this).attr('userName'), true);
            }

            ShowHideBtnAddUsersToGroup();
        });

        $('#btnAddUsersToGroup').on('click', function (e) {
            var users = [];
            var userName = '';
            var message = "";

            if (selectedUsers.length === 1) {
                if (selectedUsers[0]["groupName"] !== 'null')
                    message = selectedUsers[0]["userName"] + ' is currently in Group ' + selectedUsers[0]["groupName"] + ', are you sure you want to move this user to @Model.Name?';
                else
                    message = 'Are you sure you want to add 1 user(s) to @Model.Name?';

                users.push(selectedUsers[0]["userId"]);
            }
            else {
                var count = 0;
                var found = false;
                for (var i = 0; i < selectedUsers.length; i++) {
                    if (userName !== '')
                        userName += ", " + selectedUsers[i]["userName"];
                    else
                        userName += selectedUsers[i]["userName"];

                    if (selectedUsers[i]["groupName"] !== 'null') {
                        found = true;
                        if (count > 0)
                            existUsername += ", " + selectedUsers[i]["userName"];
                        else
                            existUsername = selectedUsers[i]["userName"];
                        count++;
                    }

                    users.push(selectedUsers[i]["userId"]);
                }

                if (found) {
                    if (count < users.length) {
                        if (count > 1)
                            message = 'Users: ' + existUsername + ' are already in a User Group, are you sure you want to move them to @Model.Name and add ' + (users.length - count) + ' user(s) to this group?';
                        else
                            message = message = 'Users: ' + existUsername + ' is already in a User Group, are you sure you want to move them to @Model.Name and add ' + (users.length - count) + ' user(s) to this group?';
                    }
                    else
                        message = 'Users: ' + userName + ' are already in a User Group, are you sure you want to move them to to @Model.Name?';
                }
                else
                    message = 'Are you sure you want to add ' + (users.length) + ' user(s) to @Model.Name?';
            }

            users = JSON.stringify(users);

            CustomConfirm({
                message: message,
                textCenter: true,
                yes: function () {
                    var data = { userIDs: users, groupID: $('#xliGroupID').val() };

                    ShowBlock($('#usersDataTable'), "Adding");
                    $.post('@Url.Action("AddUsersToGroup", "Admin")', data, function (result) {
                        $('#usersDataTable').unblock();
                        if (result) {
                            var tags = $('#selectedUserTags').tagEditor('getTags')[0].tags;
                            for (i = 0; i < tags.length; i++) {
                                $('#selectedUserTags').tagEditor('removeTag', tags[i], true);
                            }
                            selectedUsers = [];
                            drawDatatable();
                        }
                    });
                },
                no: function () {

                },
                yesMessage: "OK",
                noMessage: "Cancel",
                noWidth: 77
            });
        });

        $('#btnClearAll').on('click', function (e) {
            CustomConfirm({
                message: 'Are you sure you want to remove all selected User(s)?',
                textCenter: true,
                yes: function () {
                    var tags = $('#selectedUserTags').tagEditor('getTags')[0].tags;
                    for (i = 0; i < tags.length; i++) {
                        $('#selectedUserTags').tagEditor('removeTag', tags[i], true);
                    }
                },
                no: function () {

                },
                yesMessage: "OK",
                noMessage: "Cancel",
                noWidth: 77
            });
        });
    });
</script>
