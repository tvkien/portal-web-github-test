@model LinkIt.BubbleSheetPortal.Models.DataLocker.ScoreTypeModel
@using LinkIt.BubbleSheetPortal.Models.DataLocker

<script src="@Url.Content("~/Scripts/TagIt/js/tag-it.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Lib/jquery.caret.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Lib/jquery.tag-editor.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/TagIt/css/jquery.tagit.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Scripts/TagIt/css/tagit.ui-zendesk.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/themes/DataLocker/jquery.tag-editor.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/css/tooltips-jquery.css")" rel="stylesheet" />

<style type="text/css">
    .width-label {
        width: 30%;
        padding: 5px;
        display: inline-flex;
    }

    .is-readonly-table,
    .is-readonly {
        position: relative;
    }

    .is-readonly::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(56, 17, 17, 0);
        visibility: visible;
    }

    .is-readonly-table::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 70%;
        background-color: rgba(56, 17, 17, 0);
        visibility: visible;
    }

    .form-body.disabled input,
    .form-body.disabled select,
    .form-body.disabled textarea,
    .form-body.disabled label[for] {
        pointer-events: none;
    }

    .form-body.disabled textarea {
        padding: 0.65rem !important;
        border: 2px solid var(--selectBorder);
        border-radius: 0;
        color: var(--selectColor);
        font-size: var(--fontSizeText);
        background: none;
    }

    #portal-v2-containter form .popup-score-column-btn button.btn-cancel {
        padding: 11px 32px;
    }

    .is-readonly-table-numeric-score {
        position: relative;
    }

    .is-readonly-table-numeric-score::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(56, 17, 17, 0);
        visibility: visible;
    }

    #divSelectColumns .width-label input[type=checkbox] {
        flex-shrink: 0;
    }
</style>

<section style='z-index: 2004'>
    <div class='block-border' style='z-index: 2004'>
        <div class='block-content divDefineTemplate' style='z-index: 1004; padding: 1.5rem 1rem 0' id="divCloneScoreType">
            <form class="form">
                <h1 class="title-large px-3 mb-4">Clone Score Column</h1>
                <div class="form-body @(Model.Disabled ? "disabled" : "")">
                    <ul style="display: none" id="error-message" class="message error"></ul>
                    <ul style="display: none" id="success-message" class="message success">
                        <li>Score column updated.</li>
                    </ul>
                    <div class="columns mb-4">
                        <label class="title-little-small mb-2" for="selectScoreType">Score Type</label>
                        <select id="selectScoreType" class="w-100">
                            <option value="@(ScoreTypeModel.RAW_SCORE)">Raw Score</option>
                            <option value="@(ScoreTypeModel.PERCENT_SCORE)">Percent Score</option>
                            <option value="@(ScoreTypeModel.PERCENTILE_SCORE)">Percentile Score</option>
                            <option value="@(ScoreTypeModel.SCALED_SCORE)">Scaled Score</option>
                            <option value="@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)">Numeric Custom Score</option>
                            <option value="@(ScoreTypeModel.TEXT_CUSTOM_SCORE)">Text Custom Score</option>
                            <option value="@(ScoreTypeModel.ARTIFACT_SCORE)">Artifact Score</option>
                            <option value="@(ScoreTypeModel.NOTE_COMMENT)">Notes/Comments</option>
                        </select>
                    </div>

                    <div class="columns mb-4" id="div-auto-calculation">
                        <div class="d-inline-block me-4">
                            <div class="d-flex align-items-center">
                                <input id="radioRawManualEntry" type="radio" name="autoCalculation" value="manualEntry" checked />
                                <label class="ms-2 title-small" for="radioRawManualEntry">Manual Entry</label>
                            </div>
                        </div>
                        <div class="d-inline-block me-4">
                            <div class="d-flex align-items-center">
                                <input id="calculation" type="radio" name="autoCalculation" value="calculation" />
                                <label class="ms-2 title-small" for="calculation">Calculation</label>
                            </div>
                        </div>
                    </div>

                    <div class="columns mb-4" id="div-auto-percent">
                        <div class="d-inline-block me-4">
                            <div class="d-flex align-items-center">
                                <input id="radioPercentManualEntry" type="radio" name="autoPercent" value="manualEntry" checked />
                                <label class="ms-2 title-small">Manual Entry</label>
                            </div>
                        </div>
                        <div class="d-inline-block">
                            <div class="d-flex align-items-center">
                                <input type="radio" name="autoPercent" value="percent" />
                                <label class="ms-2 title-small">Auto Calculation</label>
                            </div>
                        </div>
                    </div>

                    <div class="columns mb-4" id="divScoreName">
                        <label class="title-little-small mb-2">Score Name</label>
                        <input type="text" max="50" id="ScoreName" value="@Model.ScoreName" readonly="readonly" class="w-100" />
                    </div>

                    <div class="columns mb-4" id="divCustomScoreName" style="display: none">
                        <label class="title-little-small mb-2">Custom Score Name</label>
                        <input type="text" maxlength="200" id="CustomScoreName" value="@Model.CustomScoreName" class="w-100" />

                    </div>

                    <div class="columns mb-4 custom-desc">
                        <label class="title-small mb-2">Description</label>
                        <textarea rows="4" cols="40" id="Description" name="Description" class="w-100"></textarea>
                    </div>

                    <div class="columns multi-option mb-4">
                        <div class="d-inline-block me-4">
                            <div class="d-flex align-items-center">
                                <input type="radio" name="textType" value="FreeText" id="FreeText" checked>
                                <label class="ms-2 title-small p-0" for="FreeText">Free Format</label><br>
                            </div>
                        </div>
                        <div class="d-inline-block me-4">
                            <div class="d-flex align-items-center">
                                <input type="radio" name="textType" value="ListText" id="ListText">
                                <label class="ms-2 title-small p-0" for="ListText">Predefined List</label><br>
                            </div>
                        </div>
                        <div id="rdLabelValueText">
                            <div class="d-flex align-items-center">
                                <input type="radio" name="textType" value="LabelValueText" id="LabelValueText">
                                <label class="ms-2 title-small p-0" for="LabelValueText">Labels & Values</label><br>
                            </div>
                        </div>
                    </div>

                    <div class="columns numericInput mb-4" id="divDecimalPlaces">
                        <label class="title-little-small mb-2"># Of Decimal Places</label>
                        <select id="NumberOfDecimalPoint" class="d-inline-block me-2" style="width: 33.33%; min-width: auto">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                        </select>
                        <span id="NumberOfDecimalPointInfor" class="icon-info js-info-action with-tip d-inline-block align-middle" title="More Information"></span>
                    </div>

                    <div class="columns numericInput mb-4" id="divNumericRangeScore">
                        <div class="d-flex mb-4">
                            <div class="col-4 me-3">
                                <label class="title-little-small mb-2">Min Score</label>
                                <input type="text" id="MinScore" class="w-100 integer-inputOverallScore" value="@Model.MinScore" maxlength="15" />
                            </div>

                            <div class="col-8">
                                <label class="title-little-small mb-2">Max Score</label>
                                <input type="text" id="MaxScore" value="@Model.MaxScore" class="integer-inputOverallScore w-50 d-inline-block me-2" maxlength="15" />
                                <span id="MaxScoreInfor" class="icon-info js-info-action with-tip d-inline-block" title="More Information" "></span>
                            </div>
                        </div>

                        <div>
                            <div class="mb-4 align-items-center" style="display: flex;">
                                <input id="idrdManuallyenterresults" type="radio" name="RadioHostpot" value="manuall" />
                                <label class="ms-2 title-small" for="idrdManuallyenterresults">Manually enter results</label>
                            </div>
                            <div id="dividrdSelectfromdropdownlist" class="mb-4 align-items-center" style="display: flex;">
                                <input id="idrdSelectfromdropdownlist" type="radio" name="RadioHostpot" value="dropdownlist" />
                                <label class="ms-2 title-small" for="idrdSelectfromdropdownlist">Select from drop down list</label>
                            </div>
                            <div id="divSelectscoresfromclickablecells" class="align-items-center" style="display: flex;">
                                <input id="idrdSelectscoresfromclickablecells" type="radio" name="RadioHostpot" value="clickable" />
                                <label class="ms-2 title-small" for="idrdSelectscoresfromclickablecells">Select scores from clickable cells</label>
                            </div>
                        </div>
                    </div>

                    <div class="columns textInput freeText mb-4">
                        <div class="">
                            <label class="title-little-small">Max Characters </label>
                            <input type="text" id="MaxAllowedCharacterNumber" class="integer-input col-4" value="@Model.MaxAllowedCharacterNumber" />
                        </div>
                    </div>

                    <div class="columns textInput freeText row mb-4">
                        <div class="mb-3">
                            <div class="d-inline-block me-4">
                                <div class="d-flex align-items-center">
                                    <input type="radio" name="TextForm" value="AllowFreeForm" id="AllowFreeForm" @if (Model.AllowFreeForm.HasValue && Model.AllowFreeForm.Value) { <text> checked</text>}>
                                    <label class="ms-2 title-small" for="AllowFreeForm">Free-form</label>
                                </div>
                            </div>
                            <div class="d-inline-block">
                                <div class="d-flex align-items-center">
                                    <input type="radio" name="TextForm" value="AllowAlphanumericOnly" id="AllowAlphanumericOnly" @if (Model.AllowAlphanumericOnly.HasValue && Model.AllowAlphanumericOnly.Value) { <text> checked</text>}>
                                    <label class="ms-2 title-small" for="AllowAlphanumericOnly">Alphanumeric (0-9, A-Z, [a-z])</label>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex align-items-center mb-3">
                            <input type="radio" name="TextForm" value="AllowAlphabeticOnly" id="AllowAlphabeticOnly" @if (Model.AllowAlphabeticOnly.HasValue && Model.AllowAlphabeticOnly.Value) { <text> checked</text>}>
                            <label class="ms-2 title-small" for="AllowAlphabeticOnly">Alphabetic (A-Z, [a-z])</label>
                        </div>
                        <div class="d-flex align-items-center">
                            <input type="checkbox" name="AllowUpperCaseOnly" id="AllowUpperCaseOnly" value="AllowUpperCaseOnly" @if (Model.AllowUpperCaseOnly.HasValue && Model.AllowUpperCaseOnly.Value) { <text> checked</text>}>
                            <label class="ms-2 title-small" for="AllowUpperCaseOnly">Uppercase Only</label>
                        </div>
                    </div>

                    <div class="columns listText tag-editor-datalocker custom-tag-editor mb-4" id="divsingleFieldTags">
                        <label class="title-small mb-2" for="singleFieldTags">Enter Values </label>
                        <textarea id="singleFieldTags"></textarea>
                    </div>

                    @Html.Partial("_LabelValue", new LabelValueModel { Disabled = Model.Disabled })

                    <div class="columns mb-4" id="divSelectFileTypeArtifact">
                        <div class="columns">
                            <div>
                                <label class="title-small mb-3">Select File Types:</label>
                            </div>
                            <div>
                                @if (Model.AssessmentArtifactFileTypeGroupViewModel != null)
                                {
                                    var fileTypeList = Model.AssessmentArtifactFileTypeGroupViewModel;
                                    if (!string.IsNullOrEmpty(Model.UploadFileTypes))
                                    {
                                        for (int i = 0; i < fileTypeList.Count; i++)
                                        {
                                            var allFileTypes = Model.UploadFileTypes.Split(',').ToList();
                                            if (allFileTypes.IndexOf(fileTypeList[i].Name) > -1)
                                            {
                                                <text>
                                                    <div class="file-type-item me-3 mb-0" style="width: auto">
                                                        <input type="checkbox" name="artifactFileType" value="@fileTypeList[i].Name" checked="checked" id="ck-file-type-@i" />
                                                        @{
                                                            var titleSupportFileType = "";
                                                            for (int j = 0; j < ViewBag.UploadFileTypeList.Count; j++)
                                                            {
                                                                if (fileTypeList[i].Name == ViewBag.UploadFileTypeList[j].Name)
                                                                {
                                                                    for (int k = 0; k < ViewBag.UploadFileTypeList[j].SupportFileType.Count; k++)
                                                                    {
                                                                        titleSupportFileType += "*" + ViewBag.UploadFileTypeList[j].SupportFileType[k] + ", ";
                                                                    }
                                                                }
                                                            }
                                                            <span for="ck-file-type-@i" tooltip="@titleSupportFileType" tooltip-position="top" class="tooltips align-middle custom-ui-tooltip" title="">@fileTypeList[i].DisplayName</span>
                                                        }
                                                    </div>
                                                </text>
                                            }
                                            else
                                            {
                                                <text>
                                                    <div class="file-type-item me-3 mb-0" style="width: auto">
                                                        <input type="checkbox" style="display: inline-block;" name="artifactFileType" value="@fileTypeList[i].Name" id="ck-file-type-@i" />
                                                        @{
                                                            var titleSupportFileType = "";
                                                            for (int j = 0; j < ViewBag.UploadFileTypeList.Count; j++)
                                                            {
                                                                if (fileTypeList[i].Name == ViewBag.UploadFileTypeList[j].Name)
                                                                {
                                                                    for (int k = 0; k < ViewBag.UploadFileTypeList[j].SupportFileType.Count; k++)
                                                                    {
                                                                        titleSupportFileType += "*" + ViewBag.UploadFileTypeList[j].SupportFileType[k] + ", ";
                                                                    }
                                                                }
                                                            }
                                                            <span for="ck-file-type-@i" tooltip="@titleSupportFileType" tooltip-position="top" class="tooltips custom-ui-tooltip" title="">@fileTypeList[i].DisplayName</span>
                                                        }
                                                    </div>
                                                </text>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < fileTypeList.Count; i++)
                                        {
                                            <text>
                                                <div class="file-type-item me-3 mb-0" style="width: auto">

                                                    @{
                                                        var titleSupportFileType = "";
                                                        for (int j = 0; j < fileTypeList[i].SupportFileType.Count; j++)
                                                        {
                                                            titleSupportFileType += "*" + fileTypeList[i].SupportFileType[j] + ", ";
                                                        }
                                                        <input type="checkbox" style="display: inline-block;" name="artifactFileType" title="test" value="@fileTypeList[i].Name" id="ck-file-type-@i" checked="checked" />
                                                        <span for="ck-file-type-@i" tooltip="@titleSupportFileType" tooltip-position="top" class="tooltips align-middle custom-ui-tooltip" title="">@fileTypeList[i].DisplayName</span>
                                                    }
                                                </div>
                                            </text>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    <div class="columns tag-editor-datalocker custom-tag-editor mb-4" id="divPredefinedTags">
                        <label class="title-little-small mb-2" for="predefinedTags">Predefined Tag</label>
                        <textarea id="predefinedTags"></textarea>
                    </div>

                    <div class="columns mb-4 custom-desc" id="divNoteDefaultValue">
                        <label class="title-small mb-2" for="noteDefaultValue">Default Note</label>
                        <textarea rows="3" cols="40" id="noteDefaultValue" name="noteDefaultValue" class="w-100" maxlength="10"></textarea>
                        <div class="mt-3">
                            <input type="checkbox" id="isNoteDate" />
                            <label for="isNoteDate">Organize Notes By Date</label>
                        </div>
                    </div>

                    <div class="columns mb-4" id="divSelectColumns">
                        <label class="title-small mb-2">Select Columns</label>

                        @Html.Partial("_ScoreCalculator", Model)
                    </div>
                </div>

                <div class="columns d-flex justify-content-between align-items-center popup-score-column-btn">
                    <div>
                        <button class="btn-cancel" type="button" onclick="cancelCloneOverallScore()">Close</button>
                    </div>
                    <div>
                        <button class="btn-accept" type="button" onclick="saveCloneOverallScore()" @(Model.Disabled ? "disabled" : "")>Clone</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<input type="hidden" id="OldName" value="@Model.ScoreNameAbsolute" />
<input type="hidden" id="DescriptionText" value="@Model.Description" />
<input type="hidden" id="NoteDefaultValueText" value="@Model.NoteDefaultValue" />
<script src="/Scripts/DataLocker/DatalockerDefineTemplate.js"></script>

<script>
    $(function () {
        var model = @Html.Raw(Json.Encode(Model));

        ScoreCalculator.init({
            initialTags: model.Expression,
            overallScore: overalScoreColumnForCalculate,
            subScore: subScoreColumnForCalculate,
            subScoreId: model.SubscoreId,
            currentScoreType: currentScoreType,
            disabled: false
        });

        $('.tooltips').append("<span></span>");
        $('.tooltips:not([tooltip-position])').attr('tooltip-position', 'bottom');

        $(".tooltips").mouseenter(function () {
            $(this).find('span').empty().append($(this).attr('tooltip'));
        });
        $('#selectScoreType').val('@Model.ScoreTypeCode');

        var selectScoreType = '@Model.ScoreTypeCode';

        $('.freeText, .listText, .textInput, .numericInput, .multi-option, .labelValueText').hide();
        $('#div-auto-calculation, #div-auto-percent, #divSelectFileTypeArtifact, #divNoteDefaultValue, #divSelectColumns, #rdLabelValueText, #divPredefinedTags').hide();

        if (model.IsCustomScoreType) {
            $('#divScoreName').hide();
            $('#divCustomScoreName').show();
        } else {
            $('#divScoreName').show();
            $('#divCustomScoreName').hide();
        }

        @if (Model.IsFreeText.HasValue && Model.IsFreeText.Value)
        {
            <text>$("#FreeText").attr("checked", true); $('.freeText').show();</text>
        }
        @if (Model.IsListText.HasValue && Model.IsListText.Value)
        {
            <text>$("#ListText").attr("checked", true); $('.listText').show();</text>
        }

        if (model.IsNumeric) {
            if (model.ListText != null && model.ListText.length > 0) {
                if (model.FormatOption == "LabelValueText") {
                    $("#LabelValueText").attr("checked", true);
                    $('.labelValueText').show();
                    $('#divDecimalPlaces').show();
                    DefineTemplateModel.listLabelValue = JSON.parse(model.ListTextString);

                    if (model.DisplayOption == "value") {
                        $('#displayValue').prop('checked', true);
                    } else if (model.DisplayOption == "label") {
                        $('#displayLabel').prop('checked', true);
                    } else if (model.DisplayOption == "both") {
                        $('#displayBoth').prop('checked', true);
                    }
                } else {
                    $("#ListText").attr("checked", true);
                    $('.listText').show();
                    $('#divDecimalPlaces').show();
                }
            }
            else {
                $('.numericInput').show();
            }
        }

        if (model.ScoreTypeName == "Artifact") {
            $('#divSelectFileTypeArtifact').show();
            $('#divPredefinedTags').show();
        }

        if (model.ScoreTypeName == "Notes/Comments") {
           $('#divNoteDefaultValue').show();
           if(model.NoteType == "date") {
               $("#isNoteDate").attr("checked", true);
           }
            $('#divNoteDefaultValue').show();
        }

        $('#divCloneScoreType #singleFieldTags').tagEditor({
            initialTags: model.ListText,
            animateDelete: 0,
            maxLength: 50,
            forceLowercase: false,
            placeholder: 'Enter tags...',
            beforeTagSave: function (field, editor, tags, tag, val) {
                if (selectScoreType === '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)' || selectScoreType === '@(ScoreTypeModel.RAW_SCORE)') {
                    if (!isNumeric(val)) {
                        return false;
                    }
                    var num = formatDecimal(val);
                    return num.toString();
                }
                return val;
            }
        });

        $('#divCloneScoreType #predefinedTags').tagEditor({
            initialTags: model.ListArtifactTag,
            animateDelete: 0,
            maxLength: 50,
            forceLowercase: false,
            placeholder: 'Enter tags...'
        });

         $("#divCloneScoreType #singleFieldTags .tag-editor").keypress(function (e) {
            if (selectScoreType === '@(ScoreTypeModel.RAW_SCORE)' || selectScoreType === '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
                if (e.which != 45 && e.which != 46 && e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    return false;
                }
            }
        });

        function isNumeric(obj) {
            var realStringObj = obj && obj.toString();
            return realStringObj.slice(-1) != '.' && !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0;
        }

        $('#NumberOfDecimalPoint').val(@Model.NumberOfDecimal);
        var NoOfDecimalTootip = 'For example,' + '<br\>' +
            '0 decimal points: 3, 5, 12' + '<br\>' +
            '1 decimal points: 3.0, 5.0, 12.1' + '<br\>' +
            '2 decimal points: 3.00, 5.10, 12.13' + '<br\>' +
        '3 decimal points: 3.000, 5.120, 12.134' + '<br\>';
        displayOverallScoreTooltip($('#NumberOfDecimalPointInfor'), NoOfDecimalTootip, 100);

        var MaxScoreInforTooltip = 'We recommended that you set a minimum and maximum score* for ' +
            'validation when teachers entering data. For example,' + '<br\>' +
            'Raw Score - min:0, max:15' + '<br\>' +
            'Scaled Score - min:-150, max: 150' + '<br\>' +
            'Percent Score - min:0, max:100' + '<br\>' +
            'Percentile Score - min:1, max:100' + '<br\>' +
            ' ' + '<br\>' +
            '* Negative values are allowed.';
        displayOverallScoreTooltip($('#MaxScoreInfor'), MaxScoreInforTooltip, 110);


        $("#NumberOfDecimalPoint").change(function () {
            //If the user change the number of decimal points, the min and max scores should be updated reflect the change.
            if ($('#NumberOfDecimalPoint').val().length == 0) {
                return;
            }
            if ($('input[type=radio][name=textType]:checked').val() == 'ListText') {
                updateDecimalListText();
            } else if ($('input[type=radio][name=textType]:checked').val() == 'LabelValueText') {
                updateDecimalListLabelValue();
            } else {
                updateDecimalPointOfScore();
                dataHostpot();
            }
        });
        $("#MinScore").on('change', function () {
            //If the user change the number of decimal points, the min and max scores should be updated reflect the change.
            if ($('#NumberOfDecimalPoint').val().length == 0) {
                return;
            }
            updateDecimalPointOfScore();
            dataHostpot();
        });
        $("#MaxScore").on('change', function () {
            //If the user change the number of decimal points, the min and max scores should be updated reflect the change.
            if ($('#NumberOfDecimalPoint').val().length == 0) {
                return;
            }
            updateDecimalPointOfScore();
            dataHostpot();
        });

        $('.with-tip').tip();
        updateDecimalPointOfScore();

        var descriptionContent = $('#DescriptionText').val();
        descriptionContent = descriptionContent.replace(/&nbsp;/g, '&#160;');
        descriptionContent = unescapeHtml(descriptionContent);

        var noteContent = $('#NoteDefaultValueText').val();
        noteContent = noteContent.replace(/&nbsp;/g, '&#160;');
        noteContent = unescapeHtml(noteContent);

        var disabled = '@Model.Disabled' === '@true';

        CKEDITOR.replace('Description', {
            height: 150,
            readOnly: disabled,
            toolbar: [
                ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
            ],
            removePlugins: 'elementspath'
        });
        CKEDITOR.instances['Description'].setData(descriptionContent);

        CKEDITOR.replace('noteDefaultValue', {
            height: 150,
            readOnly: disabled,
            toolbar: [
                ['FontSize'], ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList']
            ],
            removePlugins: 'elementspath',
            on: {
                key: function (evt) {
                    var currentLength = $('<div>' + this.getData() + '</div>').text().length;
                    var maxLength = 1001;
                    var skipCheck = false;
                    var keycode = evt.data.keyCode;

                    if (keycode === 8 || keycode === 13 || keycode === 46 ||
                        keycode === 37 || keycode === 38 || keycode === 39 || keycode === 40) {
                        skipCheck = true;
                    }

                    if ((currentLength >= parseInt(maxLength) && skipCheck === false) || keycode === 1114129) {
                        return false;
                    }
                },

            }
        });
        CKEDITOR.instances['noteDefaultValue'].setData(noteContent);

        //Init Hostpot
        dataHostpot();
        if (model.DataHostPot == 'manuall') {
            $('#idrdManuallyenterresults').prop('checked', true);
        }
        if (model.DataHostPot == 'dropdownlist') {
            $('#idrdSelectfromdropdownlist').prop('checked', true);
        }
        if (model.DataHostPot == 'clickable') {
            $('#idrdSelectscoresfromclickablecells').prop('checked', true);
        }

        if (model.ScoreTypeCode == 'TEXT_CUSTOM_SCORE' || model.ScoreTypeCode == 'RAW_SCORE' || model.ScoreTypeCode == 'NUMERIC_CUSTOM_SCORE') {
            $(".multi-option").show();
        };

        if (model.ScoreTypeCode == "RAW_SCORE" || model.ScoreTypeCode == "NUMERIC_CUSTOM_SCORE") {
            $('#div-auto-calculation').show();
            if(model.IsAutoCalculation == true) {
                $('#divSelectColumns').show();
                $('.numericInput').hide();
                $(".multi-option").hide();
                $('#divDecimalPlaces').show();
                $('input[type=radio][name=autoCalculation]').filter('[value=@Model.DerivedName]').prop('checked', true);
                $('#divsingleFieldTags').hide();
            }

        }

        if (model.ScoreTypeCode == "PERCENT_SCORE") {
            $('#div-auto-percent').show();
            if(model.IsAutoCalculation == true) {
                $('.numericInput').hide();
                $('#divDecimalPlaces').show();
                $('input[type=radio][name=autoPercent]').filter('[value=@Model.DerivedName]').prop('checked', true);
                $('#divsingleFieldTags').hide();
            }
        }

        if (model.ScoreTypeCode == "NUMERIC_CUSTOM_SCORE") {
            $('#rdLabelValueText').css("display","inline-block");
        }
    });

    $('input[type=radio][name=autoCalculation]').change(function () {
        var model = @Html.Raw(Json.Encode(Model));
        var isListOption = '@(Model.ListText != null && Model.ListText.Count > 0)' === 'True';
        if (this.value == 'calculation') {
            $('#divSelectColumns').show();
            $('.numericInput').hide();
            $(".multi-option").hide();
            $('#divsingleFieldTags').hide();
            $('#idrdManuallyenterresults').prop('checked', true);
            $('#FreeText').prop('checked', true);
            resetTagEditor('#singleFieldTags');
            $('#divsingleFieldTags ul').html('');
            $('input[type=checkbox]').prop('checked', false);
            $('.labelValueText').hide();
        } else {
            $('#divSelectColumns').hide();
            $('#divDecimalPlaces').show();
            if (isListOption) {
                if (model.ListTextString.indexOf('Option') != -1 && model.ListTextString.indexOf('Label') != -1) {
                    $('#divsingleFieldTags').show();
                } else {
                    $('.labelValueText').show();
                }
            } else {
                $('.numericInput').show();
            }
            $(".multi-option").show();
        }
        clearInputNumeric();
    });

    $('input[type=radio][name=autoPercent]').change(function () {
        var model = @Html.Raw(Json.Encode(Model));
        if (this.value == 'percent') {
            if(model.SubscoreId == 0 || model.SubscoreId == null) {
                if ((overallRawMaxScore == null && hasRawOverallAuto == false) || overallRawMaxScore == 0) {
                    customAlertMessage({ message: "To automatically calculate 'percent', you must first define a raw score with a max Score greater than zero.", customClass: 'new-style-popup'});
                    $('.numericInput').show();
                    $('#radioPercentManualEntry').prop('checked', true);
                    return false;
                }
            }
            if(model.SubscoreId > 0) {
                var subScoreRawMaxScore = subScoreRawMaxScore_@(Model.SubscoreId);
                var hasRawSubAuto = hasRawSubAuto_@(Model.SubscoreId);
                if ((subScoreRawMaxScore == null && hasRawSubAuto == false) || subScoreRawMaxScore == 0) {
                    customAlertMessage({ message: "To automatically calculate 'percent', you must first define a raw score with a max Score greater than zero.", customClass: 'new-style-popup'});
                    $('.numericInput').show();
                    $('#radioPercentManualEntry').prop('checked', true);
                    return false;
                }
            }
            $('.numericInput').hide();
            $('#idrdManuallyenterresults').prop('checked', true);
        } else {
            $('.numericInput').show();
        }
        clearInputNumeric();
    });

    $('.integer-inputOverallScore').keypress(function (e) {
        return isNumberAllowNegative(e);
    });

    $('.integer-inputOverallScore').on('input propertychange paste blur', function (e) {
        var $self = $(this);
        var val = $self.val();
        // Remove non-numeric characters
        var cleaned = val.replace(/[^0-9.\-]/g, '');
        if (cleaned.indexOf('-') > 0) {
            cleaned = cleaned.replace(/-/g, '');
        }
        if ((cleaned.match(/\./g) || []).length > 1) {
            cleaned = cleaned.substring(0, cleaned.lastIndexOf('.'));
        }
        if (cleaned === '-') {
            $self.val('');
            setTimeout(() => $self.focus(), 0);
            return;
        }
        $self.val(cleaned);
    });

    $(".float-input").floatNumber(true);

    $("#selectScoreType").change(function () {
        var model = @Html.Raw(Json.Encode(Model));
        clearInput();
        var scoreTypeId = $("#selectScoreType").val();
        $('.numericInput').hide();
        $('.textInput').hide();
        $('#divCustomScoreName').hide();
        $('#divScoreName').hide();
        $('#divsingleFieldTags').hide();
        $('#divSelectFileTypeArtifact').hide();
        $('#divNoteDefaultValue').hide();
        $('.multi-option').hide();
        $('#div-auto-calculation').hide();
        $('#div-auto-percent').hide();
        $('#divSelectColumns').hide();
        $('.labelValueText').hide();
        $('#rdLabelValueText').hide();
        $('#divPredefinedTags').hide();

        if (scoreTypeId == '@(ScoreTypeModel.RAW_SCORE)' || scoreTypeId == '@(ScoreTypeModel.PERCENT_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.PERCENTILE_SCORE)' || scoreTypeId == '@(ScoreTypeModel.SCALED_SCORE)' || scoreTypeId == '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
            $('.numericInput').show();
        }

        if (scoreTypeId == '@(ScoreTypeModel.RAW_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.PERCENT_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.PERCENTILE_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.SCALED_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.ARTIFACT_SCORE)') {
            $('#divScoreName').show();
            if (scoreTypeId == '@(ScoreTypeModel.RAW_SCORE)') {
                $('#ScoreName').val('Raw');
            }
            if (scoreTypeId == '@(ScoreTypeModel.PERCENT_SCORE)') {
                $('#ScoreName').val('Percent');
            }
            if (scoreTypeId == '@(ScoreTypeModel.PERCENTILE_SCORE)') {
                $('#ScoreName').val('Percentile');
            }
            if (scoreTypeId == '@(ScoreTypeModel.SCALED_SCORE)') {
                $('#ScoreName').val('Scaled');
            }
            if (scoreTypeId == '@(ScoreTypeModel.ARTIFACT_SCORE)') {
                $('#ScoreName').val('Artifact');
            }
        }

        if (scoreTypeId == '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.TEXT_CUSTOM_SCORE)'
            || scoreTypeId == '@(ScoreTypeModel.NOTE_COMMENT)') {

            $('#divCustomScoreName').show();
            if (scoreTypeId == '@(ScoreTypeModel.NOTE_COMMENT)') {
                $('#lblCustomScoreName').text('Note Name');
                $('#divNoteDefaultValue').show();
            } else {
                $('#lblCustomScoreName').text('Custom Score Name');
            }
        };

        if (scoreTypeId == '@(ScoreTypeModel.TEXT_CUSTOM_SCORE)' || scoreTypeId == '@(ScoreTypeModel.RAW_SCORE)' || scoreTypeId == '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
            $('.multi-option').show();
        };

        if (scoreTypeId == '@(ScoreTypeModel.TEXT_CUSTOM_SCORE)') {
            $('.textInput').show();
        };
        if (scoreTypeId == '@(ScoreTypeModel.ARTIFACT_SCORE)') {
            $('#divSelectFileTypeArtifact').show();
            $('#divPredefinedTags').show();
            $('input[name="artifactFileType"][type=checkbox]').prop('checked', true);
        }
        if (scoreTypeId == '@(ScoreTypeModel.RAW_SCORE)' || scoreTypeId == '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
            $('#div-auto-calculation').show();
            var radioAutoCalculation = $('input[type=radio][name=autoCalculation]:checked').val()
            if (radioAutoCalculation == 'calculation') {
                $('.numericInput').hide();
                $(".multi-option").hide();
                $('#divSelectColumns').show();
            }
        }
        if (scoreTypeId == '@(ScoreTypeModel.PERCENT_SCORE)') {
            $('#div-auto-percent').show();
            var radioPercent = $('input[type=radio][name=autoPercent]:checked').val()
            if(radioPercent == 'percent') {
                $('.numericInput').hide();
            }
        }

        if (scoreTypeId == '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
            $('#rdLabelValueText').css("display","inline-block");
        }
    });

    function clearInput() {
        $('#MinScore').val('0');
        $('#MaxScore').val('0');
        $('#Description').val('');
        $('#CustomScoreName').val('');
        $('#NumberOfDecimalPoint').val(0);
        $('#FreeText').prop('checked', true); //default
        $('#AllowFreeForm').prop('checked', true); //default
        $('#AllowUpperCaseOnly').prop('checked', false); //default

        $('#divsingleFieldTags').hide();
        $('#divsingleFieldTags ul').html('');

        $('#idrdManuallyenterresults').prop('checked', true);

        $('#radioRawManualEntry').prop('checked', true); //default
        $('#calculation').prop('checked', false);
        $('#radioPercentManualEntry').prop('checked', true); //default
        $('input[type=checkbox]').prop('checked', false);
        $('#isNoteDate').prop('checked', false);
        resetTagEditor('#predefinedTags');
    }

    $('input[type=radio][name=textType]').change(function () {
        var selectScoreType = '@Model.ScoreTypeCode';
        if (selectScoreType === '@(ScoreTypeModel.TEXT_CUSTOM_SCORE)') {
            $('.freeText').hide();
            $('.listText').hide();
            $('.labelValueText').hide();

            if (this.value == 'FreeText') {
                $('.freeText').show();
            } else if (this.value == 'ListText') {
                $('.listText').show();
            }
        } else if (selectScoreType === '@(ScoreTypeModel.RAW_SCORE)') {
            $('.numericInput').hide();
            $('.listText').hide();
            $('.labelValueText').hide();
            $('#divDecimalPlaces').show();

            if (this.value == 'FreeText') {
                $('.numericInput').show();
            } else if (this.value == 'ListText') {
                $('.listText').show();
            }
        } else if (selectScoreType === '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)') {
            $('.numericInput').hide();
            $('.listText').hide();
            $('.labelValueText').hide();
            $('#divDecimalPlaces').show();

            if (this.value == 'FreeText') {
                $('.numericInput').show();
            } else if (this.value == 'ListText') {
                $('.listText').show();
            } else if (this.value == 'LabelValueText') {
                $('.labelValueText').show();
                DefineTemplateModel.listLabelValue = [
                    { Option: "", Label: "" }
                ];
            }
        }
        resetTagEditor('#singleFieldTags');
        $('#divsingleFieldTags ul').html('');
    });

    function saveCloneOverallScore() {
        var model = @Html.Raw(Json.Encode(Model));
        updateDecimalPointOfScore();
        var RAW_SCORE = '@(ScoreTypeModel.RAW_SCORE)';
        var PERCENT_SCORE = '@(ScoreTypeModel.PERCENT_SCORE)';
        var NUMERIC_CUSTOM_SCORE = '@(ScoreTypeModel.NUMERIC_CUSTOM_SCORE)';
        var TEXT_CUSTOM_SCORE = '@(ScoreTypeModel.TEXT_CUSTOM_SCORE)';
        var NOTE_COMMENT = '@(ScoreTypeModel.NOTE_COMMENT)';
        var selectScoreType = $('#selectScoreType').val();
        var selectScoreTypeText = $("#selectScoreType option:selected").text();
        selectScoreType = (selectScoreType == undefined || selectScoreTypeText == '') ? '@Model.ScoreTypeCode' : selectScoreType;
        var scoreName = $('#ScoreName').val();
        var customScoreName = $('#CustomScoreName').val();
        if (selectScoreType == NUMERIC_CUSTOM_SCORE || selectScoreType == TEXT_CUSTOM_SCORE || selectScoreType == NOTE_COMMENT) {
            if (customScoreName.length == 0) {
                customAlertMessage({ message: 'Please input custom score name.', customClass: 'new-style-popup'});
                return;
            }
        }
        var maxFileSize = $('#txtMaxFileSize').val();
        var fileType = [];
        var listArtifactTagString = null;
        if (selectScoreType == '@(ScoreTypeModel.ARTIFACT_SCORE)') {
            $('input[name="artifactFileType"][type=checkbox]:checked').each(function (i, e) {
                fileType.push($(e).val());
            });
            if (!fileType.length) {
                customAlertMessage({ message: 'Please select file types.', customClass: 'new-style-popup'});
                return;
            }
            listArtifactTagString = getSelectedTagName('#predefinedTags');

            $('#FreeText').attr('checked', false);
            $('#ListText').attr('checked', false); //default
        }
        var description = CKEDITOR.instances['Description'].getData();
        description = convertTexttoHTML(description);
        description = description.replace(/&nbsp;/g, '&#160;');
        var minScore = $('#MinScore').val();
        if (minScore.length > 0) {
            minScore = parseFloat(minScore);
        }
        var MaxScore = $('#MaxScore').val();
        if (MaxScore.length > 0) {
            MaxScore = parseFloat(MaxScore);
        }

        if (selectScoreType != TEXT_CUSTOM_SCORE) {
            if ($('#MinScore').val().length > 0 && $('#MaxScore').val().length > 0) {
                if (parseFloat(MaxScore) < parseFloat(minScore)) {
                    customAlertMessage({ message: 'Max Score must be greater than or equal to Min Score.', customClass: 'new-style-popup'});
                    return;
                }
            }

            if ($('#MaxScore').val().length > 0) {
                if (parseFloat(MaxScore) > 10000) {
                    customAlertMessage({ message: 'Max Score must be smaller than 10000.', customClass: 'new-style-popup'});
                    return;
                }
            }
        }

        var numberOfDecimalPoint = $('#NumberOfDecimalPoint').val();
        if (numberOfDecimalPoint.length > 0 && minScore && MaxScore) {
            numberOfDecimalPoint = parseInt(numberOfDecimalPoint);
            minScore = minScore.toFixed(numberOfDecimalPoint);
            MaxScore = MaxScore.toFixed(numberOfDecimalPoint);
        }

        var isFreeText = $('#FreeText').is(':checked');
        var isListText = $('#ListText').is(':checked');
        var isLabelValue = $('#LabelValueText').is(':checked');
        var listTextString = getSelectedTagName('#singleFieldTags');
        if (isListText) {
            if (listTextString == null || listTextString == '') {
                customAlertMessage({ message: 'You have to enter at least one predefined value.', customClass: 'new-style-popup'});
                return;
            }
            var tags = $('#singleFieldTags').tagEditor('getTags')[0].tags;
            minScore = parseFloat(tags[0]);
            MaxScore = parseFloat(tags[0]);
            for (var i = 0; i < tags.length; i++) {
                if (parseFloat(tags[i]) > MaxScore) {
                    MaxScore = tags[i];
                }
                if (parseFloat(tags[i]) < minScore) {
                    minScore = tags[i];
                }
            }
        } else if (isLabelValue) {
            var values = DefineTemplateModel.listLabelValue.map(e => isNaN(e.Option) ? 0 : +e.Option);
            minScore = Math.min(...values);
            MaxScore = Math.max(...values);
        }
        var maxAllowedCharacterNumber = $('#MaxAllowedCharacterNumber').val().trim();

        if (selectScoreType === TEXT_CUSTOM_SCORE && isFreeText) {
            if (maxAllowedCharacterNumber === '' || parseInt(maxAllowedCharacterNumber, 10) > 100) {
                customAlertMessage({ message: 'The maximum number of characters allowed on custom text scores is 100. Please enter a value smaller than 100.', customClass: 'new-style-popup'});
                return;
            }
        }

        if (maxAllowedCharacterNumber.length) {
            maxAllowedCharacterNumber = parseFloat(maxAllowedCharacterNumber);
        }

        var allowFreeForm = $('#AllowFreeForm').is(':checked');
        var allowAlphanumericOnly = $('#AllowAlphanumericOnly').is(':checked');
        var allowUpperCaseOnly = $('#AllowUpperCaseOnly').is(':checked');
        var allowAlphabeticOnly = $('#AllowAlphabeticOnly').is(':checked');

        var datahostpot = $('#divNumericRangeScore input[name=RadioHostpot]:checked').val();
        var noteType = '';

        if (selectScoreType == NOTE_COMMENT) {
            var noteDefaultValue = CKEDITOR.instances['noteDefaultValue'].getData();
            noteDefaultValue = convertTexttoHTML(noteDefaultValue);
            noteDefaultValue = noteDefaultValue.replace(/&nbsp;/g, '&#160;');
            noteType = $('#isNoteDate').is(':checked') == true ? 'date' : 'default';
        }

        var isAutoCalculation = false;
        var derivedName = null;
        var Expression = [];
        var expressionCalculation = '';

        if (selectScoreType == RAW_SCORE || selectScoreType == NUMERIC_CUSTOM_SCORE) {
            var model = @Html.Raw(Json.Encode(Model));
            isAutoCalculation = !$('#radioRawManualEntry').is(':checked');
            derivedName = $('input[type=radio][name=autoCalculation]:checked').val();
            if (derivedName == 'calculation') {
                if(!ScoreCalculator.isCorrectCalculation()) {
                    customAlertMessage({ message: 'Please enter a valid calculation.', customClass: 'new-style-popup'});
                    return;
                }

                expressionCalculation = ScoreCalculator.getCalculationData();
            }
        }
        if (selectScoreType == PERCENT_SCORE) {
            isAutoCalculation = !$('#radioPercentManualEntry').is(':checked');
            derivedName = $('input[type=radio][name=autoPercent]:checked').val();
        }

        var displayOption = $('input[type=radio][name=displayOption]:checked').val();
        var formatOption = $('input[type=radio][name=textType]:checked').val();
        var selectListOptions = [];
        if (formatOption == "LabelValueText") {
            var arrToCheckDuplicate = [];
            for (var i = 0; i < DefineTemplateModel.listLabelValue.length; i++) {
                var item = DefineTemplateModel.listLabelValue[i];
                if ((item.Option != "" && item.Label == "") || (item.Option == "" && item.Label != "")) {
                    CustomAlert('Please input both label and value.');
                    return;
                }
                if (item.Option != "" && item.Label != "") {
                    item.Order = i;
                    selectListOptions.push(item);
                    arrToCheckDuplicate.push(item.Option);
                }
            }
            var isArrayDuplicate = findDuplicateInArray(arrToCheckDuplicate);
            if (isArrayDuplicate.length > 0) {
                CustomAlert('The value has been assigned. Please create a new value.');
                return;
            }
            if (selectListOptions.length < 1) {
                CustomAlert('You have to enter at least one value.');
                return;
            }

            listTextString = JSON.stringify(selectListOptions);
        }

        var url = '@Url.Action("CloneScoreType")';
        var data = {
            TemplateId: '@Model.TemplateID',
            SubscoreId: '@Model.SubscoreId',
            ScoreTypeCode: selectScoreType,
            scoreName: scoreName,
            customScoreName: encodeURIComponent(customScoreName),
            description: encodeURIComponent(description),
            minScore: minScore.toString(),
            maxScore: MaxScore.toString(),
            numberOfDecimal: numberOfDecimalPoint,
            isFreeText: isFreeText,
            isListText: isListText,
            maxAllowedCharacterNumber: maxAllowedCharacterNumber,
            allowFreeForm: allowFreeForm,
            allowAlphanumericOnly: allowAlphanumericOnly,
            allowUpperCaseOnly: allowUpperCaseOnly,
            allowAlphabeticOnly: allowAlphabeticOnly,
            listTextString: listTextString.indexOf('Option') != -1 ? listTextString : encodeURIComponent(listTextString),
            DataHostPot: datahostpot,
            UploadFileTypes: fileType.toString(),
            MaxFileSize: maxFileSize,
            noteDefaultValue: noteDefaultValue,
            IsAutoCalculation: isAutoCalculation,
            DerivedName: derivedName,
            Expression: expressionCalculation,
            NoteType: noteType,
            DisplayOption: displayOption,
            FormatOption: formatOption,
            listArtifactTagString: listArtifactTagString,
            displayOrder: '@Model.DisplayOrder'
        };

        $('#success-message').hide();
        $('#error-message').hide();
        ShowBlock($('#divCloneScoreType'), 'Creating');
        $.ajax({
            type: "POST",
            contentType: 'application/json',
            url: url,
            data: JSON.stringify({ 'model': data, 'scoreId': '@Model.TemplateID', 'subScoreId': '@Model.SubscoreId' })
        })
        .done(function (response) {
            $('#divCloneScoreType').unblock();
            if (response.success == true) {
                $('#success-message').show();
                setTimeout(function () { $(".dialog").dialog("close"); }, 2000);
                var model = @Html.Raw(Json.Encode(Model));
                var rawIndex = 0;
                if (model.SubscoreId > 0) {
                    if (scoreTypeClone == '@(ScoreTypeModel.NOTE_COMMENT)') {
                        rawIndex = $('#dataTableOverallScore_@(Model.SubscoreId) tbody tr').filter(function () {
                            return $(this).find('[scoreType]').attr('scoreType') === scoreTypeClone && $(this).find('[name]').attr('name') === scoreNameClone;
                        }).index();
                    } else {
                        rawIndex = $('#dataTableOverallScore_@(Model.SubscoreId) tbody tr').filter(function () {
                            return $(this).find('[scoreType]').attr('scoreType') === scoreTypeClone;
                        }).index();
                    }
                    subScoreColumnForCalculate.SubscoreName_@(Model.SubscoreId) = [];
                    hasPercentScoreAutoSub_@(Model.SubscoreId) = false;
                    subScoreRawMaxScore_@(Model.SubscoreId) = null;
                    hasRawSubAuto_@(Model.SubscoreId) = false;
                    updateOrderSubScore('@(Model.SubscoreId)', response.scoreType, customScoreName, rawIndex + 2);
                } else {
                    if (scoreTypeClone == '@(ScoreTypeModel.NOTE_COMMENT)') {
                        rawIndex = $('#dataTableOverallScore tbody tr').filter(function () {
                            return $(this).find('[scoreType]').attr('scoreType') === scoreTypeClone && $(this).find('[name]').attr('name') === scoreNameClone;
                        }).index();
                    } else {
                        rawIndex = $('#dataTableOverallScore tbody tr').filter(function () {
                            return $(this).find('[scoreType]').attr('scoreType') === scoreTypeClone;
                        }).index();
                    }
                    overallCalculateDetail = [];
                    overalScoreColumnForCalculate = [];
                    hasPercentScoreAutoOverall = false;
                    overallRawMaxScore = null;
                    hasRawOverallAuto = false;
                    updateOrderOverallScore(response.scoreType, customScoreName, rawIndex + 2);
                }
            } else {
                $('#error-message').show();
                $('#error-message').html('<li>' + response.error + '</li>');
            }
        });
    }

    function cancelCloneOverallScore() {
        $(".dialog").dialog("close");
    }

    function getSelectedTagName(id) {
        var list = $(id).tagEditor('getTags')[0].tags.join(',');
        return list;
    }

    function displayOverallScoreTooltip(e, data, maxItemTooltipLength) {
        if (data == null) {
            data = '';
        }
        var width = '100px'; //default
        if (maxItemTooltipLength <= 50) {
            width = '200px';
        }
        else if (maxItemTooltipLength <= 100) {
            width = '300px';
        }
        else if (maxItemTooltipLength <= 150) {
            width = '450px';
        }
        else if (maxItemTooltipLength <= 200) {
            width = '600px';
        }
        else {
            width = '800px';
        }
        e.attr('title', '<p style="text-align:left;width:' + width + ';white-space: normal;word-break: break-all">' + data.split('|').join('<br />') + '</p>');
    }

    function updateDecimalPointOfScore() {
        var numberOfDecimalPoint = parseInt($('#NumberOfDecimalPoint').val());
        var minScore = $('#MinScore').val();
        var maxScore = $('#MaxScore').val();
        if (minScore != null && minScore.length > 0) {
            var minScoreFloat = parseFloat(minScore);
            minScoreFloat = minScoreFloat.toFixed(numberOfDecimalPoint);
            $('#MinScore').val(minScoreFloat);
        }
        if (maxScore != null && maxScore.length > 0) {
            var maxScoreFloat = parseFloat(maxScore);
            maxScoreFloat = maxScoreFloat.toFixed(numberOfDecimalPoint);
            $('#MaxScore').val(maxScoreFloat);
        }
    }

    function dataHostpot() {
        var vDecimal = $("#NumberOfDecimalPoint").val();
        if (vDecimal === '0')
        {
            $('#dividrdSelectfromdropdownlist').show();
            var vMaxScore = $("#MaxScore").val();
            var vMinScore = $("#MinScore").val();
            if ((vMaxScore - vMinScore) < 5) {
                $('#divSelectscoresfromclickablecells').show();
            }
            else {
                $('#divSelectscoresfromclickablecells').hide();
                if ($('#idrdSelectscoresfromclickablecells').is(':checked')) {
                    $('#idrdManuallyenterresults').prop('checked', true);
                }
            }
        } else
        {
            $('#dividrdSelectfromdropdownlist').hide();
            $('#divSelectscoresfromclickablecells').hide();
            $('#idrdManuallyenterresults').prop('checked', true);
        }
    }

    function clearInputNumeric() {
        $('#MinScore').val('0');
        $('#MaxScore').val('0');
        $('#NumberOfDecimalPoint').val(0);
        $('input[type=checkbox]').prop('checked', false);
        $(".listText").hide();
        $('#FreeText').prop('checked', true);
        $('#divDecimalPlaces').show();
        $('.labelValueText').hide();
    }

    function resetTagEditor(id) {
        var tags = $(id).tagEditor('getTags')[0].tags || [];
        for (var i = 0; i < tags.length; i++) {
            $(id).tagEditor('removeTag', tags[i]);
        }
    }

    function formatDecimal(item) {
        var result = parseFloat(item);
        var numberOfDecimalPoint = parseInt($('#NumberOfDecimalPoint').val());
        result = roundN(result, numberOfDecimalPoint)
        return result;
    }

    function roundN(num,n){
        return parseFloat(Math.round(num * Math.pow(10, n)) /Math.pow(10,n)).toFixed(n);
    }

    function updateDecimalListText() {
        var tags = $('#singleFieldTags').tagEditor('getTags')[0].tags;
        for (var i = 0; i < tags.length; i++) {
            $('#singleFieldTags').tagEditor('removeTag', tags[i]);
        }
        $('#divsingleFieldTags ul').html('');
        for (var i = 0; i < tags.length; i++) {
            var item = formatDecimal(tags[i]);
            $('#singleFieldTags').tagEditor('addTag', item);
        }
    }

    function updateDecimalListLabelValue() {
        for (var i = 0; i < DefineTemplateModel.listLabelValue.length; i++) {
            if (DefineTemplateModel.listLabelValue[i].Option != "") {
                DefineTemplateModel.listLabelValue[i].Option = formatDecimal(DefineTemplateModel.listLabelValue[i].Option);
            }
        }
    }

    function findDuplicateInArray(arra1) {
        var object = {};
        var result = [];

        arra1.forEach(function (item) {
          if(!object[item])
              object[item] = 0;
            object[item] += 1;
        })

        for (var prop in object) {
           if(object[prop] >= 2) {
               result.push(prop);
           }
        }
        return result;
    }
</script>
