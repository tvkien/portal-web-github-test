@model  LinkIt.BubbleSheetPortal.Models.SGO.VirtualTestCustomScore
<style type="text/css">
    tr.even.row_selected td {
        background-color: var(--blue7) !important;
    }

    tr.odd.row_selected td {
        background-color: var(--blue7) !important;
    }

    #dataTableOverallScore_wrapper {
        margin-left: 0;
        margin-right: 0;
        margin-bottom: 0;
    }

    #dataTableOverallScore tbody tr {
    }

    #dataTableOverallScore tr td {
        padding-left: 4px;
        padding-right: 4px;
    }

    #dataTableOverallScore_length {
        display: none;
    }

    #dataTableOverallScore {
        width: 100% !important;
    }

    .word-break {
        word-break: break-all;
    }

    .list-initial ul,
    .list-initial ol {
        list-style: initial;
        padding-left: 30px;
    }

    .qtip-content ul,
    .qtip-content ol {
        list-style: initial;
        padding-left: 30px;
    }

    #dataTableOverallScore_wrapper .sindu_dragger table td {
        padding: 0.75em 4px;
    }

    .new-style-popup .btn-yes {
        width: auto !important;
        color: var(--white) !important;
        border: 0 !important;
        padding: 11px 32px;
        margin-left: 0 !important;
        background-color: var(--btnAcceptBackground) !important;
    }

    .ui-sortable-helper {
        display: flex !important;
    }

    .disabled-drag {
        cursor: no-drop;
    }

    #dataTableOverallScore tbody tr td:first-child {
        text-align: left !important;
    }
</style>
<div class="form" id="divOverallScoreContainer">
    <div class="mb-3 d-flex justify-content-between">
        <span class="title-large">Overall Score</span>
        <div>
            <a href="javascript:void(0)" class="CreateOverallScore btn btn-link mr-4">
                Add Score Column
                <i class="fa-solid fa-plus ms-2"></i>
            </a>
            <a href="javascript:void(0)" id="conversionTableBtn" class="btn btn-link btnUploadConversionTable" onclick="showUploadConversionTablePopup()">
                Upload Conversion Table
            </a>
        </div>
    </div>
    <table id="dataTableOverallScore" class="datatable table" table-id="@Model.VirtualTestCustomScoreId" table-scoreid="@(Model.VirtualTestCustomScoreId)" table-type="overall">
        <thead>
            <tr>
                <th scope="col">Actions</th>
                <th scope="col">
                    <span class="column-sort">
                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                    </span>
                    Name
                </th>
                <th scope="col">Type</th>
                <th scope="col">Description</th>
                <th scope="col">Validation Properties</th>
            </tr>
        </thead>
        <tbody class="connectedSortable" style="cursor: pointer"></tbody>
    </table>
</div>

<script type="text/javascript">
    var overalScoreColumnForCalculate = [];
    var overallCalculateDetail = [];
    var subScoreCalculateDetails = [];
    var overallRawMaxScore = null;
    var oTableOverallScore;
    var keepCurrentPageOverallScore = 0;
    var displayStartOverallScore = 0;
    var hasPercentScoreAutoOverall = false;
    var hasRawOverallAuto = false;
    var hasAssociatedTestResult = '@Model.HasAssociatedTestResult';
    var hasAssociatedAutoSave = '@Model.HasAssociatedAutoSave';
    var listDisableScore = [];
    var listDisableSub = [];
    var listSubScoreNeedReload = [];
    var hasCustomScoreType = false;
    var hasConversionSet = '@Model.HasConversionSet' === 'True';
    var currentScoreType = "";
    var scoreTypeClone = '';
    var scoreNameClone = '';

    $(function() {
        removeTips();

        if (hasConversionSet) {
            showReplaceConversionTableBtn();
        } else {
            $('.CreateOverallScore').show();
        }

        var options = {
            bServerSide: true,
            bDestroy: true,
            bStateSave: false,
            bFilter:false,
            sAjaxSource: '@Url.Action("LoadScoreTypeList")?templateId=@Model.VirtualTestCustomScoreId',
            ajax: {
                url: '@Url.Action("LoadScoreTypeList")',
                dataSrc: 'data'  // Adjust this to match the actual key in the response
            },
            fnServerParams: function(aoData) {
                //TuanVo:encode text in filter searchbox
                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''"); // when user type " or "", or """,...in searchbox, system will issue an error, this code fix that error
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;
                    }
                }
                hasCustomScoreType = false;
            },
            bAutoWidth: false,
            iDisplayLength: 1000,
            aaSorting: [[0, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'Id', bSearchable: false, bSortable: false, sWidth: "60px" },
                { sType: 'string', sName: 'ScoreTypeName', bSearchable: true, bSortable: false, sWidth: "150px" },
                { sType: 'string', sName: 'ScoreName', bSearchable: true, bSortable: false, sWidth: "150px" },
                { sType: 'string', sName: 'Description', bSearchable: true, bSortable: false, sWidth: "450px" },
                { sType: 'string', sName: 'Overview', bSearchable: convertTrueFalse, bSortable: false, sWidth: "350px" },
                { sType: 'string', sName: 'ShortOverview', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'ScoreTypeCode', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'VirtualTestCustomSubScoreID', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'IsPredefinedList', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'ShortScoreType', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'IsAutoCalculation', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'MaxScore', bSearchable: false, bSortable: false,bVisible:false, sWidth: "0px" },
                { sType: 'string', sName: 'VirtualTestCustomMetaDataID', bSearchable: false, bSortable: false, bVisible: false, sWidth: "0px" },
            ],
            fnRowCallback: function (nRow, aData) {
                var itemForCalculate = {
                    type: aData[6],
                    name: aData[2],
                    id: aData[0],
                    column: aData[9],
                    expressionKey: `${0}&${aData[9]}`,
                    expressionColumns: "",
                    expressionValue: "",
                    isAutoCalculation: false
                }
                if(['TEXT_CUSTOM_SCORE', 'NUMERIC_CUSTOM_SCORE'].includes(itemForCalculate.type)) {
                    hasCustomScoreType = true;
                }
                if(itemForCalculate.type == "PERCENT_SCORE" && aData[10] == "True") {
                    hasPercentScoreAutoOverall = true;
                }
                if(itemForCalculate.type == "RAW_SCORE" && aData[10] != "True") {
                    overallRawMaxScore = aData[11];
                }
                if(itemForCalculate.type == "RAW_SCORE" && aData[10] == "True") {
                    hasRawOverallAuto = true;
                }
                if(itemForCalculate.type == "RAW_SCORE" || itemForCalculate.type == "NUMERIC_CUSTOM_SCORE") {
                    if (aData[10] === 'True') {
                        itemForCalculate.expressionValue = aData[4].replace('calculation:', '');
                        itemForCalculate.isAutoCalculation = true;
                        overallCalculateDetail.push(buildItemForCalculateDetail(0, aData[6], aData[4]));
                    }
                    overalScoreColumnForCalculate.push(itemForCalculate);
                }
                $(nRow).children().addClass('handle');
                if (aData[4].indexOf('List value') != -1) {
                    aData[4] = aData[4].replace('<', '&lt;');
                    aData[5] = aData[5].replace('<', '&lt;');
                    aData[4] = aData[4].replace('&lt;/br>', '</br>');
                    aData[5] = aData[5].replace('&lt;/br>', '</br>');
                }

                $('td:eq(0)', nRow).html(setIconVisibilityOverallScore(aData[2], aData[1], aData[9]));
                $('td:eq(1)', nRow).html(truncateText($('td:eq(1)', nRow),aData[2],35));
                $('td:eq(1)', nRow).attr('name', aData[2]);
                $('td:eq(2)', nRow).html(truncateText($('td:eq(2)', nRow),aData[1],35));
                $('td:eq(3)', nRow).html(truncateText($('td:eq(3)', nRow),aData[3],85));
                $('td:eq(3)', nRow).addClass('word-break list-initial');
                $('td:eq(4)', nRow).html(showShortOverview($('td:eq(4)', nRow),aData[4],aData[5],aData[8],aData[2],aData[10]));
                $(nRow).attr('table-id', '@Model.VirtualTestCustomScoreId');
                $(nRow).attr('table-scoreid', '@Model.VirtualTestCustomScoreId');
                $(nRow).attr('virtualTestCustomMetaDataID', aData[12]);
            },
            fnPreDrawCallback: function (oSettings) {
                ShowBlock($('#dataTableOverallScore'), "Loading");
                var scoreNameOverall = 'Overall';
                listDisableScore = [];
                listDisableScore[scoreNameOverall] = [];
                overalScoreColumnForCalculate = [];
                var aData = oSettings.aoData;
                aData.forEach(function(rowData) {
                    var data = rowData._aData;
                    if (data[10] === "True") {
                        listDisableScore[scoreNameOverall].push(data[9]);
                        if (data[2] === 'Percent') listDisableScore[scoreNameOverall].push("Raw");

                        var overview = data[4].split("calculation:");
                        var expressions = overview[1];
                        // Overall sum/average with others score columns in Overall
                        if (expressions) {
                            var overallScoreRelateds = getColumnFromExpression(expressions).filter(function (item) { return item.scoreid == 0 });
                            if (overallScoreRelateds && overallScoreRelateds.length > 0) {
                                var scoreRelateds = overallScoreRelateds.map(function (item) { return item.column });
                                listDisableScore[scoreNameOverall] = listDisableScore[scoreNameOverall].concat(scoreRelateds);
                            }
                            // Overall sum/average with others score columns of others Subscore
                            var subscoreRelateds = getColumnFromExpression(expressions).filter(function (item) { return item.scoreid != 0 });
                            if (subscoreRelateds && subscoreRelateds.length > 0) {
                                subscoreRelateds.forEach(function (score) {
                                    listDisableScore['SubscoreName_' + score.scoreid] = listDisableScore['SubscoreName_' + score.scoreid] || [];
                                    listDisableScore['SubscoreName_' + score.scoreid].push(score.column);
                                });
                            }
                        }
                    }
                });
                overallCalculateDetail = [];
                listDisableScore[scoreNameOverall] = uniqueArray(listDisableScore[scoreNameOverall]);
                return true;
            },
            fnDrawCallback: function () {
                //Reload related table
                if (listSubScoreNeedReload.length > 0) {
                    listSubScoreNeedReload.forEach(function (scoreId) {
                        $("#dataTableOverallScore_" + scoreId).dataTable().fnDraw();
                    });
                    listSubScoreNeedReload = [];
                }

                $('#dataTableOverallScore').unblock();
                $('.with-tip').tip();
                $('#dataTableOverallScore_length').hide();
                $('#dataTableOverallScore_wrapper .block-footer').hide();
                $('#dataTableOverallScore').css('width', 'auto');
                var table = document.querySelector("#dataTableOverallScore");
                if('@Model.HasAssociatedTestResult' == 'False' && '@Model.HasAssociatedAutoSave' == 'False') {
                    $("#dataTableOverallScore tbody").sortable({
                        connectWith: ".connectedSortable",
                        cancel: ".dataTables_empty, .disabled-drag",
                        helper: function (event, ui) {
                            var $clone = $(ui).clone();
                            $clone.css('position', 'absolute');
                            $clone.addClass('ui-sortable-helper');
                            return $clone.get(0);
                        },
                        start: function (event, ui) {
                            const width = $('.ui-sortable-placeholder').width();
                            $('.ui-sortable-helper').css('width', width + 'px');
                            $('.ui-sortable-helper').css('background-color', 'white');
                            $(".ui-sortable-placeholder").parents("table").find("thead th").each(function (index, el) {
                                $(`.ui-sortable-helper td:nth-child(${index + 1})`).css('flex-basis', el.clientWidth + 'px');
                            });
                        },
                        receive: function (event, ui) {
                            var $currentTarget = ui.item;
                            var $senderTableInstance = $(ui.sender);
                            var $targetTableInstance = $(this);
                            var isFromOverallTable = $senderTableInstance.parents("table").attr("table-type") === "overall";
                            var currentScore = $currentTarget.find("[class*=EditOverallScore]").attr("scoretype");
                            var scoreName = $currentTarget.find("[class*=EditOverallScore]").attr('name');
                            var scoreTypeName = $currentTarget.find("[class*=EditOverallScore]").attr('scoretypename');
                            function updateScoreData(nameReplace, typeReplace, isReplace) {
                                var scoreId = $currentTarget.attr('table-scoreid');
                                var name = $currentTarget.find("[class*=EditOverallScore]").attr('name');
                                var from = $currentTarget.attr('table-id');
                                var rawIndex = $(ui.item).parents('tbody').find('tr').toArray().indexOf(ui.item[0]);
                                var url = '@Url.Action("UpdateMetaDataRaw")';
                                $targetTableInstance.find(".dataTables_empty").parent('tr').remove();
                                $.ajax({
                                    type: 'POST',
                                    url: url,
                                    contentType: 'application/json',
                                    data: JSON.stringify({
                                        scoreId: scoreId,
                                        name: encodeURIComponent(name),
                                        scoreTypeName: currentScore,
                                        from: from, // ID of score from
                                        to: parseInt($targetTableInstance.parents('table').attr('table-id')), // ID of score to
                                        rawIndex: rawIndex + 1,
                                        isFromScore: isFromOverallTable,
                                        isSubSub: false, // if move score from sub to sub => true
                                        isReplace: isReplace,
                                        nameReplace: nameReplace,
                                        scoreTypeNameReplace: typeReplace
                                    })
                                }).done(function (response) {
                                    if (!response.success) {
                                        customAlert(response.error);
                                    }
                                    $senderTableInstance.parents("table").dataTable().fnDraw(false);
                                    $targetTableInstance.parents("table").dataTable().fnDraw(false);
                                });
                            }
                            var nameCompare = $targetTableInstance.find("[class*='EditOverallScore-" + parseInt($targetTableInstance.parents('table').attr('table-id')) + "']").filter((idx, ele) => ele.name.toLowerCase() === scoreName.toLowerCase())
                            if (listDisableSub['SubscoreName_' + $senderTableInstance.parents('table').attr('table-id')] && listDisableSub['SubscoreName_' + $senderTableInstance.parents('table').attr('table-id')].includes(currentScore)) {
                                customConfirm('You cannot move this column; it is being used by a calculation. Remove the calculation first.', {
                                    minWidth: '500px',
                                    textLeft: true,
                                    buttons: [
                                        {
                                            label: 'OK',
                                            color: 'red',
                                            callback: function () {
                                                $senderTableInstance.sortable("cancel");
                                            }
                                        }
                                    ]
                                });
                            } else if (nameCompare != null && nameCompare.length > 0) {
                                if (listDisableScore['Overall'] && listDisableScore['Overall'].includes($(nameCompare[0]).attr('scoretype'))) {
                                    customConfirm('You cannot replace this column. It is being used by a calculation.', {
                                        minWidth: '500px',
                                        textLeft: true,
                                        buttons: [
                                            {
                                                label: 'OK',
                                                color: 'red',
                                                callback: function () {
                                                    $senderTableInstance.sortable("cancel");
                                                }
                                            }
                                        ]
                                    });
                                } else {
                                    var name = nameCompare.attr("name");
                                    var type = nameCompare.attr("scoretype");
                                    CustomConfirm({
                                        message: 'This score type already exists. Do you want to replace it?',
                                        textLeft: true,
                                        customClass: 'new-style-popup',
                                        yes: function () {
                                            updateScoreData(name, type, true);
                                        },
                                        no: function () {
                                            $senderTableInstance.sortable("cancel");
                                        },
                                        yesMessage: "Replace",
                                        noMessage: "Cancel",
                                    });
                                }
                            } else if (($targetTableInstance.find("[class*='EditOverallScore-" + parseInt($targetTableInstance.parents('table').attr('table-id')) + "'][scoretypename='" + scoreTypeName + "']").length > 3)
                                && (currentScore.includes('CustomN_') || currentScore.includes('CustomA_'))) {
                                var message = 'You have created the maximum number of numeric custom score allowed (4). If you need to create more scores, you can set them up as new subscores.';
                                if (currentScore.includes('CustomA_')) {
                                    message = 'You have created the maximum number of text custom score allowed (4). If you need to create more scores, you can set them up as new subscores.';
                                }
                                customConfirm(message, {
                                    minWidth: '500px',
                                    textLeft: true,
                                    buttons: [
                                        {
                                            label: 'OK',
                                            color: 'red',
                                            callback: function () {
                                                $senderTableInstance.sortable("cancel");
                                            }
                                        }
                                    ]
                                });
                            } else {
                                updateScoreData(null, null, false);
                            }
                        },
                        update: function (event, ui) {
                            var overallScoreId = @Model.VirtualTestCustomScoreId;
                            var scoreType = $(ui.item).find("[scoreType]").attr("scoreType");
                            var scoreName = $(ui.item).find("[scoreType]").attr("name");
                            var rawIndex = $(ui.item).parents('tbody').find('tr').toArray().indexOf(ui.item[0]);

                            var idDatatableSubCoreSource = $(this).parent().attr('table-id');
                            var idDatatableSubCoreDestination = $(ui.item).parent().parent().attr('table-id');

                            if (idDatatableSubCoreSource == idDatatableSubCoreDestination && $(ui.item).attr("table-id") === $(ui.item).parents("table").attr("table-id")) {
                                var url = '@Url.Action("UpdateMetaDataOrder")';
                                $.ajax({
                                    type: 'POST',
                                    url: url,
                                    contentType: 'application/json',
                                    data: JSON.stringify({ scoreId: overallScoreId, scoreType: scoreType, name: scoreName, rawIndex: rawIndex + 1 })
                                });
                            }
                        }
                    });
                }
            }
        };

        $("#dataTableOverallScore").data("options", options);
        oTableOverallScore = $('#dataTableOverallScore').dataTable();
        oTableOverallScore.fnSetFilteringDelay(500);
        function setIconVisibilityOverallScore(name, scoreTypeName, scoreType) {
            var editIcon = '<span class="custom-icon fa-solid fa-pencil icon-grey"></span>';
            var editString = '<a href="javascript:void(0)" class="d-inline-block align-middle' +
                (hasConversionSet ? ' item-disabled' : ' EditOverallScore-@(Model.VirtualTestCustomScoreId)') +
                 '" Name="' + encodeURIComponent(name) + '" ScoreTypeName="' + scoreTypeName + '" scoreType="' + scoreType + '">' +
                 editIcon +
                 '</a>';

            var deleteIcon = '<span class="custom-icon fa-solid fa-circle-xmark icon-red"></span>';
            var deleteIconString = '<a href="javascript:void(0)" class="d-inline-block align-middle ms-2' +
                (hasConversionSet ? ' item-disabled' : ' DeleteOverallScore') +
                 '" Name="' + encodeURIComponent(name) + '" ScoreTypeName="' + scoreTypeName + '" scoreType="' + scoreType + '">' +
                deleteIcon +
                '</a>';


            var copyIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-copy-v2.svg")';
            var copyString = '<a href="javascript:void(0)" title="Clone" Name="' + encodeURIComponent(name) + '" ScoreTypeName="' + scoreTypeName + '" scoreType="' + scoreType + '"'
                + ' class="with-tip d-inline-block align-middle ms-2' + (hasConversionSet ? ' item-disabled' : ' CloneOverallScore-@(Model.VirtualTestCustomScoreId)') + '"> <img src="' + copyIcon + '" width="16"></a>';

            if ('@Model.HasAssociatedTestResult' == 'False' || hasConversionSet) {
                if (scoreType.includes('CustomN_') || scoreType.includes('CustomA_') || scoreType.includes('NOTE_COMMENT')) {
                    editString = editString + copyString;
                }
                return editString + deleteIconString;
            } else {
                return editString;//now allow to delete
            }
        }

        function truncateText(td, text, maxLength) {
            if (text == null) {
                text = '';
            }

            text = unescapeHtml(text);

            if (text.length > maxLength) {
                intialTooltip(td, text);
                var limiText = '';
                limiText = text.substring(0, maxLength);
                return removeLastBRTag(limiText) + ' ...';

            } else {
                return text;
            }
        }

        function escapeHTML(str) {
            if (str == null || typeof str !== 'string') return str;
            return str.replace(/[&<>"']/g, function (match) {
                switch (match) {
                    case '&':
                        return '&amp;';
                    case '<':
                        return '&lt;';
                    case '>':
                        return '&gt;';
                    case '"':
                        return '&quot;';
                    case "'":
                        return '&#39;';
                    default:
                        return match;
                }
            });
        }

        function escapeOverview(overview) {
            try {
                var pre = overview.split('&lt;')[0] + '&lt;';
                var scoreStr = overview.split('&lt;')[1].split('</br>')[0];
                var suf = overview.replace(pre, '').replace(scoreStr, '');
                return pre + escapeHTML(scoreStr) + suf;
            } catch (err) {
                return overview;
            }
        }

        function showShortOverview(td, overview, shortOverview, isPredefinedList, scoreName, isAutoCal) {
            overview = overview == null ? '' : overview;
            shortOverview = shortOverview == null ? '' : shortOverview;
            overview = escapeOverview(overview);
            shortOverview = escapeOverview(shortOverview);
            if (isAutoCal === 'True' && scoreName != 'Percent') {
                var arrOverview = overview.split(';');
                var type = arrOverview[0] == 'sum' ? "- Sum of columns: " : "- Average of columns: ";

                var textOverall = '';
                var overviewOverall = overview;
                var overallHeader = overview;
                var overallColumns = overview;

                var arrOverallColumn = [];
                for (var o = 0; o < overallColumns.length; o++) {
                    arrOverallColumn.push(getColumnNameByColumnType(overallHeader, overview));
                }
                textOverall = '+ ' + overallHeader + ": " + arrOverallColumn.join(', ');

                var textSubscore = '';
                for (var i = 2; i < arrOverview.length; i++) {
                    var overviewSubscore = arrOverview[i].split('-');
                    var subscoreHeader = $('#' + overviewSubscore[0]).val();
                    var subscoreColumns = overviewSubscore[1].split(',');

                    var arrSubscoreColumn = [];
                    for (var s = 0; s < subscoreColumns.length; s++) {
                        arrSubscoreColumn.push(getColumnNameByColumnType(overviewSubscore[0], subscoreColumns[s]));
                    }
                    textSubscore += '+ ' + subscoreHeader + ": " + arrSubscoreColumn.join(', ') + '</br>';
                }
                overview = type + '</br>' + textOverall + '</br>' + textSubscore;

                shortOverview = overview.substring(0, 45);
                shortOverview += ' ...';

                overview = '';
                shortOverview = '';
            }
            if (isAutoCal === 'True' && scoreName == 'Percent') {
                overview = '';
                shortOverview = '';
            }
            if ((isPredefinedList != undefined && isPredefinedList == 'True') || scoreName == 'Artifact' || shortOverview.indexOf('List value') != -1) {
                // limit the  overview to make the shortOverview
                var arrStr = overview.split("</br>");
                var count = 0;
                var limitChar = 45;
                var arrResult = [];
                arrStr.forEach(text => {
                    if (count < limitChar) {
                        if ((count + text.length) > limitChar) {
                            arrResult.push(text.substring(0, (limitChar - count)) + '...');
                        } else {
                            arrResult.push(text);
                        }
                    }
                    count += text.length;
                })
                shortOverview = arrResult.join("</br>");
            }
            if (overview) {
                intialTooltip(td, overview);
            }

            return shortOverview;
        }

        function removeLastBRTag(input){
            // remove last </br> tag
            if(input != null)
            {
                input = input.trim();
                if(input.length >= 5 && input.substring(input.length - 5) == '</br>'){
                    input = input.substring(0, input.length - 5);
                }
            }

            return input;
        }


        $('.DeleteOverallScore').live('click', function () {
            var name = $(this).attr('Name');
            var scoreTypeName = $(this).attr('scoretypename');
            var scoreType = $(this).attr('scoretype');

            var canDelete = checkRelatedCalculation(0, scoreType)

            if (canDelete == false) {
                customAlertMessage({ message: 'You cannot delete this column; it is being used by a calculation. Remove the calculation first.', customClass: 'new-style-popup' });
                return;
            }
            if (hasPercentScoreAutoOverall && scoreType == 'Raw') {
                customAlertMessage({ message: 'You cannot delete this column; it is being used by a calculation. Remove the calculation first.', customClass: 'new-style-popup' });
                return;
            }
            LoadConfirmDeleteOverallScore(name, scoreTypeName, scoreType);
        });

        $('.EditOverallScore-@(Model.VirtualTestCustomScoreId)').live('click', function () {
            $('.EditOverallScore-@(Model.VirtualTestCustomScoreId)').prop('disabled', true);
            var name = $(this).attr('Name');
            var scoreTypeName = $(this).attr('scoretypename');
            currentScoreType = $(this).attr('scoretype');
            LoadEditScoreType(name, scoreTypeName);
        });

        $('.CloneOverallScore-@(Model.VirtualTestCustomScoreId)').live('click', function () {
            $('.CloneOverallScore-@(Model.VirtualTestCustomScoreId)').prop('disabled', true);
            var name = $(this).attr('Name');
            var scoreTypeName = $(this).attr('scoretypename');
            currentScoreType = $(this).attr('scoretype');
            scoreTypeClone = currentScoreType;
            scoreNameClone = scoreTypeName;
            loadCloneScoreType(name, scoreTypeName);
        });

        var isOpenAddNewOverallScore = false;
        $('.CreateOverallScore').live('click', function () {
            var url = '@Url.Action("LoadCreateOverallScore")?templateId=@Model.VirtualTestCustomScoreId';
            if (isOpenAddNewOverallScore == true) {
                return;
            }
            isOpenAddNewOverallScore = true;
            $.ajax(
                {
                    url: url,
                    cache: false
                })
                .done(function(html) {
                    $("#divOverallScoreContainer").append('<div id="PopupCreateOverallScore" class="dialog"></div>');
                    $("#PopupCreateOverallScore").append(html);
                    $('#PopupCreateOverallScore').dialog({
                        title: "",
                        open: function() {
                            //Create overlay for popup
                            $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                        },
                        beforeclose: function() {
                            return true;
                        },
                        close: function() {
                            $('#dataTableOverallScore').dataTable().fnDraw(false);
                            $('#PopupCreateOverallScore').remove();
                            $("body .my-overlay").remove();
                            isOpenAddNewOverallScore = false;
                        },
                        modal: false,
                        width: 585,
                        resizable: false
                    });
                });

            $(".close").unbind("click");
            $(".close").live("click", function(e) {
                e.preventDefault();
            });
        });
    });

    function LoadConfirmDeleteOverallScore(name, scoreTypeName, scoreType) {
        name = decodeURIComponent(name);
        CustomConfirm({
            message: 'Are you sure you want to delete ' + name + '?',
            textLeft: true,
            customClass: 'new-style-popup',
            yes: function () {
                ShowBlock($('#dataTableOverallScore'), "Deleting");
                $.post('@Url.Action("DeleteScoreType")',
                    { templateId: @Model.VirtualTestCustomScoreId,
                        name:encodeURIComponent(name),
                        scoreTypeName: scoreTypeName
                    }
                    , function (response) {
                    $('#dataTableOverallScore').unblock();
                    if (response.success == true) {
                        customAlertMessage({ message: 'Score type has been deleted.', customClass: 'new-style-popup'});
                        $('#dataTableOverallScore').dataTable().fnDraw(false);
                        overalScoreColumnForCalculate = [];
                        overallCalculateDetail = [];
                        hasPercentScoreAutoOverall = false;
                        overallRawMaxScore = null;
                        hasRawOverallAuto = false;
                        updateOrderOverallScore(false, scoreType, name);
                    } else {
                        customAlertMessage({message: response.error});
                    }
                });
            },
            no: function () {
            },
            open: function () {
            },
            close: function () {
            }
        });
    }

    function getAjaxSourceScoreTypeList() {
        return '@Url.Action("LoadScoreTypeList")?templateId=@Model.VirtualTestCustomScoreId';
    }

    function LoadEditScoreType(name, scoreTypeName) {
        var url = '@Url.Action("LoadEditOverallScore")?templateId=@Model.VirtualTestCustomScoreId' + '&name=' + encodeURIComponent(name) + '&scoreTypeName=' + scoreTypeName;
        $.ajax(
            {
                url: url,
                cache: false
            })
            .done(function (html) {
                $("#divOverallScoreContainer").append('<div id="PopupEditOverallScore" class="dialog"></div>');
                $("#PopupEditOverallScore").append(html);
                $('#PopupEditOverallScore').dialog({
                    title: "",
                    open: function () {
                        //Create overlay for popup
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        return true;
                    },
                    close: function () {
                        $('#PopupEditOverallScore').remove();
                        $('#dataTableOverallScore').dataTable().fnDraw(false);
                        $
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 585,
                    resizable: false
                });

            });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    }
    function loadCloneScoreType(name, scoreTypeName) {
        var url = '@Url.Action("LoadCloneOverallScore")?templateId=@Model.VirtualTestCustomScoreId' + '&name=' + encodeURIComponent(name) + '&scoreTypeName=' + scoreTypeName;
        $.ajax(
            {
                url: url,
                cache: false
            })
            .done(function (html) {
                $("#divOverallScoreContainer").append('<div id="PopupCloneOverallScore" class="dialog"></div>');
                $("#PopupCloneOverallScore").append(html);
                $('#PopupCloneOverallScore').dialog({
                    title: "",
                    open: function () {
                        $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                    },
                    beforeclose: function () {
                        return true;
                    },
                    close: function () {
                        $('#PopupCloneOverallScore').remove();
                        $('#dataTableOverallScore').dataTable().fnDraw(false);
                        $
                        $("body .my-overlay").remove();
                    },
                    modal: false,
                    width: 585,
                    resizable: false
                });

            });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    }

    function getColumnNameByColumnType(parentType, scoreType) {
        if (parentType == 'Overall') {
            for (var i = 0; i < overalScoreColumnForCalculate.length; i++) {
                if (overalScoreColumnForCalculate[i].column == scoreType) {
                    return overalScoreColumnForCalculate[i].name;
                }
            }
        }
        return scoreType;
    }

    function cancelOverallScore() {
        $(".dialog").dialog("close");
    }


    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

    function getColumnNameByColumnType(parentType, scoreType) {
        if(parentType == 'Overall') {
            for(var i = 0; i < overalScoreColumnForCalculate.length; i++) {
                if(overalScoreColumnForCalculate[i].column == scoreType) {
                    return overalScoreColumnForCalculate[i].name;
                }
            }
        }
        return scoreType;
    }

    function intialTooltip(td ,text) {
        $(td).qtip({
            overwrite: false,
            content: {
                text: text
            },
            position: {
                my: 'bottom center',
                at: 'top center'
            },
            show: {
                event: 'mouseover'
            },
            hide: {
                event: 'mouseout'
            },
            hide: {
                fixed: true,
                delay: 100
            },
            events: {
                show: function () {
                var maxHeight = 0;
                $(td).offset().top > 400 ?  maxHeight = 400 : maxHeight =  $(td).offset().top ;
                var marginTop = 20;
                if($(this).height() > maxHeight) {
                    $(this).addClass('custom-top');
                    $(this).children('.qtip-content').css({
                        'max-height': maxHeight - marginTop + 'px'
                    });
                    }
                }
            }
        });
    }

    function updateOrderOverallScore(scoreType, scoreName, rawIndex) {
        var urlUpdate = '@Url.Action("UpdateMetaDataOrder")';
        var overallScoreId = @Model.VirtualTestCustomScoreId;
        $.ajax({
            type: 'POST',
            url: urlUpdate,
            contentType: 'application/json',
            data: JSON.stringify({ scoreId: overallScoreId, scoreType: scoreType, name: scoreName, rawIndex: rawIndex })
        }).done(function(response) {
            console.log(response);
        });
    }

    function updateOrderSubScore(subScoreId, scoreType, scoreName, rawIndex) {
        var urlUpdate = '@Url.Action("UpdateMetaDataOrder")';
        var overallScoreId = @Model.VirtualTestCustomScoreId;

        $.ajax({
            type: 'POST',
            url: urlUpdate,
            contentType: 'application/json',
            data: JSON.stringify({ scoreId: overallScoreId, subScoreId: subScoreId, scoreType: scoreType, rawIndex: rawIndex })
        }).done(function(response) {
            console.log(response);
        });
    }

    function uniqueArray(arrArg) {
        return arrArg.filter(function (elem, pos, arr) {
            return arr.indexOf(elem) == pos;
        });
    }

    function checkRelatedCalculation(subScoreId, scoreType) {
        var related = true;
        if (subScoreId == null || subScoreId == '') {
            subScoreId = 0;
        }
        if (overallCalculateDetail && overallCalculateDetail.length > 0) {
            related = !overallCalculateDetail.some(function (detail) {
                return detail.expression.split(',')
                    .map(function (item) {
                        return item.trim();
                    }).includes(`${subScoreId}&${scoreType}`);
            });
        }
        if (subScoreId > 0 && related && subScoreCalculateDetails && subScoreCalculateDetails.length > 0) {
            var _subScoreId = parseFloat(subScoreId);
            related = !subScoreCalculateDetails.some(function (detail) {
                return detail.expression.split(',')
                    .map(function (item) {
                        return item.trim();
                    }).includes(`${_subScoreId}&${scoreType}`);
            });
        }
        return related;
    }

    function showUploadConversionTablePopup() {
        var url = '@Url.Action("ShowUploadConversionTablePopup")?virtualTestCustomScoreId=' + @Model.VirtualTestCustomScoreId;

        var worker = $('<div />');
        worker
            .addClass("dialog")
            .attr("id", "divUploadConversionTablePopup")
            .appendTo("body")
            .load(url, function (response, status) {
                worker.dialog({
                    title: $(this).attr("Upload Conversion Table"),
                    close: function () {
                        $('.ui-widget-overlay').remove();
                    },
                    modal: false,
                    width: 650,
                    resizable: false
                });
            });

        showModalDialogBG();
    }

    function showReplaceConversionTableBtn() {
        var uploadConversionTableBtn = document.getElementById('conversionTableBtn');
        uploadConversionTableBtn.innerHTML = 'Replace Conversion Table';

        $('.CreateOverallScore').hide();
        hasConversionSet = true;
    }

</script>
