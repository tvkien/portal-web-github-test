@model LinkIt.BubbleSheetPortal.Web.Models.MonitoringTestTaking.ProctorViewModel

@{
    ViewBag.Title = "Monitor online test taking";
}

<link rel="stylesheet" href="/Scripts/Qtip/jquery.qtip.css">
<script src="@Url.Content("~/Scripts/tipped/tipped.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Qtip/jquery.qtip.js")"></script>
<style type="text/css">
    .ui-widget-header {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
        z-index: 99999;
    }

    .ui-dialog {
        background: transparent;
        border: 0;
        /*top: 100px !important;*/
        height: auto !important;
    }

        .ui-dialog .ui-dialog-titlebar-close {
            position: absolute;
            right: 7px;
            top: -8px;
            z-index: 100000;
        }

    .ui-widget-header .ui-icon {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }

    .ui-icon {
        width: 40px;
        height: 40px;
    }

    .ui-icon-closethick {
        background-position: 2px 2px;
    }

    .ui-widget-header .ui-state-hover {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close {
        width: 40px;
        height: 42px;
    }

        .ui-dialog .ui-dialog-titlebar-close:hover {
            padding: 1px;
        }

    .ui-widget-overlay {
        background: #2b2b2d !important;
    }

    .ui-dialog.block-border .ui-widget-header {
        top: -12px;
    }

    .ui-dialog.block-border .ui-dialog-titlebar-close {
        position: absolute;
        right: -30px;
        top: -8px;
    }

    .ui-dialog.block-border {
        background: none repeat scroll 0 0 rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.75);
        border-radius: 0.8em;
        box-shadow: 0 0 4px rgba(50, 50, 50, 0.5);
        padding: 0.833em;
        overflow: visible;
    }

        .ui-dialog.block-border .block-content h1 {
            left: 10px;
            top: 1px;
        }
</style>
<article class="container_12">
    <section class="grid_12">
        <div class="block-border" id="selectFilters">
            <div id="divFilterTestAssignments" class="block-content form bubbleSheetSelector">
                <h1>Filter Test Assignments</h1>
                <fieldset>
                    <div class="columns">
                        <div class="colx2-left">
                            @if ((ViewBag.IsPublisher != null && ViewBag.IsPublisher)
                                || (ViewBag.IsNetworkAdmin != null && ViewBag.IsNetworkAdmin))
                            {
                                <div class="mb-3">
                                    <label>State</label>
                                    <select id="selectState" class="full-width"></select>
                                </div>
                            }
                            <p>
                                <label>@LabelHelper.GradeLabel</label>
                                <input type="text" id="selectGrade" class="full-width" />
                            </p>
                            <p>
                                <label>Bank</label>
                                <input type="text" id="selectBank" class="full-width" />
                            </p>
                            <p>
                                <label>Class</label>
                                <input type="text" id="selectClass" class="full-width" />
                            </p>
                            <p>
                                <label>Student</label>
                                <input type="text" id="selectStudent" class="full-width" />
                            </p>
                            <p>
                                <label>Timeframe</label>
                                <select id="dateTime" style="min-width: 150px !important">
                                    <option value="14">2 weeks</option>
                                    <option selected="selected" value="30">1 month</option>
                                    <option value="60">2 months</option>
                                    <option value="90">3 months</option>
                                    <option value="180">6 months</option>
                                    <option value="365">1 year</option>
                                    <option value="730">2 years</option>
                                </select>
                            </p>
                        </div>
                        <div class="colx2-right">
                            @if ((ViewBag.IsPublisher != null && ViewBag.IsPublisher)
                                || (ViewBag.IsNetworkAdmin != null && ViewBag.IsNetworkAdmin))
                            {
                                <div class="mb-3 block-content-dropdown-marquee">
                                    <label>@LabelHelper.DistrictLabel</label>

                                    <div class="block-text-name">
                                        <select id="selectDistrict" class="full-width"></select>
                                        <div class="box-select">
                                            <span class="overlay"></span>
                                        </div>
                                    </div>
                                </div>
                            }
                            <p>
                                <label>@LabelHelper.Subject</label>
                                <input type="text" id="selectSubject" class="full-width" />
                            </p>
                            <div class="mb-3 block-content-dropdown-marquee">
                                <label>School</label>

                                <div class="block-text-name">
                                    <select id="selectSchool" class="full-width"></select>
                                    <div class="box-select">
                                        <span class="overlay"></span>
                                    </div>
                                </div>
                            </div>
                            <p>
                                <label>Teacher</label>
                                <input type="text" id="selectTeacher" class="full-width" />
                            </p>
                            <p>
                                <label>Test</label>
                                <input type="text" id="selectTest" class="full-width" />
                            </p>
                            <p>
                                <label>Test Assignment Code</label>
                                <input type="text" id="selectTestCode" class="full-width" />
                            </p>
                        </div>
                    </div>
                </fieldset>
                <button id="filterSheets" class="float-right" type="button">Apply Filters</button>
                <button id="clearFilter" class="float-right grey" type="button" style="margin-right: 2px;">Clear Filter</button>
                <div class="clear"></div>
            </div>
        </div>
        <br />
        <br />
        <script type="text/javascript">
            var districtId = 0;
            $(function () {
                InitData();
                $('#selectDistrict').marquee();
                $('#selectSchool').marquee();
                $('#selectState').change(function () {
                    if ($('#selectState').val() != 'select') {
                        $('#selectSchool').empty();
                        populateDistricts();
                    }
                });

                $('#selectDistrict').change(function () {
                    $('#selectSchool').empty();
                    var districtValue = $('#selectDistrict').val();
                    if (districtValue == null || districtValue == 'select' || districtValue <= 0) {
                        return;
                    }
                    populateSchoolsByDistrict(districtValue);
                });

                @if ((ViewBag.IsPublisher == null || !ViewBag.IsPublisher)
                                && (ViewBag.IsNetworkAdmin == null || !ViewBag.IsNetworkAdmin))
                {
                    <text>populateSchoolsByDistrict(null);</text>
                }

                if ($('#selectDistrict').val() > 0) {
                    districtId = $('#selectDistrict').val();
                }

            });

            function InitData() {
                if ('@ViewBag.IsNetworkAdmin' != null && '@ViewBag.IsNetworkAdmin' == 'True') {
                    $.get('@Url.Action("GetStatesByDictricIds", "PopulateStateDistrict")', { dictricIds: '@ViewBag.ListDictrictIds' }, function (states) {
                        AddSelectListItems($('#selectState'), states, 'Select States');
                    });
                } else {
                    $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
                        AddSelectListItems($('#selectState'), states, 'Select State');
                    });
                }

            }

            function populateSchoolsByDistrict(districtValue) {
                $.get('@Url.Action("GetSchools", "PopulateSchoolTeacher")', { districtId: districtValue }, function (schools) {
                    populateSchools(schools);
                });
            }

            function populateSchools(schools) {
                addDefaultOption($('#selectSchool'), "School");
                addSelectListItems($('#selectSchool'), schools);
            }

            function populateDistricts() {
                $('#selectDistrict').empty();
                var stateValue = $('#selectState').val();
                if (stateValue != 'select') {
                    if ('@ViewBag.IsPublisher' === 'True') {
                        $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                            AddSelectListItems($('#selectDistrict'), districts, 'Select @LabelHelper.DistrictLabel');
                        });
                    }
                    if ('@ViewBag.IsNetworkAdmin' === 'True') {
                        $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: stateValue }, function (districts) {
                            AddSelectListItems($('#selectDistrict'), districts, 'Select @LabelHelper.DistrictLabel');
                        });
                    }
                }
            }


        </script>

        <script type="text/javascript">

            function AddSelectListItems(selectList, results, defaultValue) {
                if (results.length == 0) {
                    return;
                }
                selectList.append($("<option></option>").attr("value", "-1").text(defaultValue));
                $.each(results, function (i, value) {
                    selectList
                        .append($("<option></option>")
                            .attr("value", value.Id)
                            .text(value.Name));
                });

            }

        </script>

        <div class="block-border" id="divClassTestAssignments">
            <div class="block-content form">
                <h1>
                    Test Assignments
                    <div class="clearfix"></div>
                    <a href="javascript:void(0)" id="btnActiveTestClassAssignment" style="margin-left: 7px; margin-top: 1px;" class="off">
                        Show Deactivated:
                        <span id="spanClassActive">Off</span>
                    </a>
                </h1>
                <p style="height: 11px"></p>
                <div class="no-margin last-child">
                    <table id="classDataTable" class="datatable table no-margin" width="100%">
                        <thead>
                            <tr>
                                <th scope="col" class="black-cell"><span class="loading"></span></th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Assigned
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    School
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Class
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Teacher
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Test
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    NS
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    IP
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    P
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    AG
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    PR
                                </th>
                                <th scope="col" style="text-align: center;">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Fini
                                </th>
                                <th scope="col" class="black-cell"></th>
                                <th scope="col" class="black-cell"></th>
                                <th scope="col" class="black-cell"></th>
                                <th scope="col" class="black-cell"></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td style="height: 60px;" colspan="8"></td>
                            </tr>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="clear"></div>
        <br />
        <br />
    </section>
</article>
<div id="dialogManualGrading"></div>

<script type="text/javascript">
    var monitoringTestTakingPageLoad = true;

    var showActiveClassTestAssignment = true;
    var MonitoringTestTakingClass = function (data) {
        var self = this;
        self.QTITestClassAssignments = [];
        if (data == null || data.length == 0) return;
        $.each(data, function (index, value) {
            self.QTITestClassAssignments.push(new QTITestClassAssignment(value));
        });
    }

    var QTITestClassAssignment = function (data) {
        this.QTITestClassAssignmentID = data.QTITestClassAssignmentID;
        this.NotStarted = data.NotStarted;
        this.Started = data.Started;
        this.Paused = data.Paused;
        this.Autograding = data.Autograding;
        this.WaitingForReview = data.WaitingForReview;
        this.Completed = data.Completed;
    }

</script>

<script type="text/javascript">
    var currentFilterParams = undefined;
    var refreshTime =  @ViewBag.RefreshTime;
    var uniqueRefreshAdminView = false;
    var uniqueRereshProctorView = false;
    var displayingProctorView = false;
    var popupDetailRequestIsRunning = [];
    var currentPopupDetailVersion = 0;
    var popupInterval = null;

    $(function() {
        setInterval(function() { RefreshTestClassAssignments(true); }, refreshTime);

        $('#Refresh').click(function() {
            RefreshTestClassAssignments(true);
        });

        $('#filterSheets').click(function () {
            SetupFilters();
        });

        $('#clearFilter').click(function () {
            $('.columns').find('input:text').val('');

             if ('@ViewBag.IsPublisher' == 'True' || '@ViewBag.IsNetworkAdmin' == 'True') {
                $("#selectState").val(-1);
                $('#selectDistrict').empty();
                $('#selectSchool').empty();
            }
            else {
                $('#selectSchool').val(-1);
            }

            if ('@ViewBag.IsTeacher' != null && '@ViewBag.IsTeacher'  == 'True') {
                $('#dateTime').val(180)
            }
            else {
                $('#dateTime').val(30)
            }

        });

        $('#btnActiveTestClassAssignment').click(function () {
            showActiveClassTestAssignment = !showActiveClassTestAssignment;
            SetupFilters();
        });

        LoadTesClassAssignmentToTable();

        $('#classDataTable').on('click', '.jsViewDetail', function(event) {
            event.preventDefault();
            //showStudentView = true;
            var selectedClassAssignmentID = $(this).attr('qtiTestClassAssignmentID');
            var schoolName = $(this).attr('schoolName');
            var className = $(this).attr('className');
            var teacherName = $(this).attr('teacherName');
            var testName = $(this).attr('testName');
            var virtualTestId = $(this).attr('virtualTestId');

            PopupTestAssignmentRegrader(selectedClassAssignmentID, schoolName, className, teacherName, testName, virtualTestId);
        });
    });
    function getCurrentFilterParams() {
        var schoolID = 0;
        if ($('#selectSchool').val() != 'select' && $('#selectSchool').val() > 0) {
            schoolID = $('#selectSchool').val();
        }
        return [
            { name: "DateTime", value: $('#dateTime option:selected').val() },
        { name: "DistrictID", value: $('#selectDistrict').val() },
        { name: "ShowActiveClassTestAssignment", value: showActiveClassTestAssignment },
        { name: "SchoolID", value: schoolID },
        { name: "PageLoad", value: monitoringTestTakingPageLoad },
        { name: "GradeName", value: $('#selectGrade').val() },
        { name: "SubjectName", value: $('#selectSubject').val() },
        { name: "BankName", value: $('#selectBank').val() },
        { name: "ClassName", value: $('#selectClass').val() },
        { name: "TeacherName", value: $('#selectTeacher').val() },
        { name: "StudentName", value: $('#selectStudent').val() },
        { name: "TestName", value: $('#selectTest').val() },
        { name: "Code", value: $('#selectTestCode').val() }
        ];
    }
    function LoadTesClassAssignmentToTable() {
        var options = {
            bServerSide: true,
            sServerMethod: "POST",
            bDestroy: true,
            bProcessing: false,
            sAjaxSource: '@Url.Action("GetTestClassAssignmentsImproved", "MonitoringTestTaking")',
            oLanguage: { "sZeroRecords": "No results meet your search criteria. Try changing your date range or other filters and search again." },
            fnServerParams: function (aoData) {

                var customParams = currentFilterParams ||  getCurrentFilterParams();
                if (customParams)
                (customParams).forEach(function (item) {
                    aoData.push(item);
                });
                monitoringTestTakingPageLoad = false;
            },
            iDisplayLength: 10,
            aoColumns: [
                { mData: 'QTITestClassAssignmentID', sName: 'QTITestClassAssignmentID', bSearchable: true, bSortable: false, bVisible: true, sWidth: '50px' },
                { mData: 'Assigned', sName: 'Assigned', bSearchable: true, bSortable: true, bVisible: true ,sWidth: '78px' },
                { mData: 'SchoolName', sName: 'SchoolName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '78px' },
                { mData: 'ClassName', sName: 'ClassName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '90px' },
                { mData: 'TeacherName', sName: 'TeacherName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '75px' },
                { mData: 'TestName', sName: 'TestName', bSearchable: true, bSortable: true, bVisible: true, sWidth: '125px' },

                { mData: 'NotStarted', sName: 'NotStarted', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'Started', sName: 'Started', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'Paused', sName: 'Paused', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },

                { mData: 'Autograding', sName: 'Autograding', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'WaitingForReview', sName: 'WaitingForReview', bSearchable: true, bSortable: true, bVisible: true, sWidth: '37px', sClass: 'css-align-right' },
                { mData: 'Completed', sName: 'Completed', bSearchable: true, bSortable: true, bVisible: true, sWidth: '41px', sClass: 'css-align-right' },
                { mData: 'GradeName', sName: 'GradeName', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'BankName', sName: 'BankName', bSearchable: true, bSortable: false, bVisible: false },

                { mData: 'SubjectName', sName: 'SubjectName', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'Status', sName: 'Status', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'VirtualTestID', sName: 'VirtualTestID', bSearchable: true, bSortable: false, bVisible: false },
                { mData: 'Code', sName: 'Code', bSearchable: true, bSortable: true, bVisible: false },
                { mData: 'StudentNames', sName: 'StudentNames', bSearchable: true, bSortable: false, bVisible: false }
            ],

            aaSorting: [[19, "desc"], [1, "asc"], [2, "asc"], [3, "asc"]],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).parent().addClass('tableRow');
                $('td:eq(0)', nRow).html(setIconVisibilityClass(aData['QTITestClassAssignmentID'], aData['SchoolName'], aData['ClassName'], aData['TeacherName'], aData['TestName'], aData['VirtualTestID']));

                MarkRefreshCells(getCellBymData("#classDataTable",'NotStarted', nRow), 'notStarted', aData['NotStarted'], aData['QTITestClassAssignmentID'],'NS');
                MarkRefreshCells(getCellBymData("#classDataTable", 'Started', nRow), 'inprogress', aData['Started'], aData['QTITestClassAssignmentID'],'IP');
                MarkRefreshCells(getCellBymData("#classDataTable", 'Paused', nRow), 'paused', aData['Paused'], aData['QTITestClassAssignmentID'],'P');
                MarkRefreshCells(getCellBymData("#classDataTable", 'Autograding', nRow), 'autograding', aData['Autograding'], aData['QTITestClassAssignmentID'],'AG');
                MarkRefreshCells(getCellBymData("#classDataTable", 'WaitingForReview', nRow), 'pendingReview', aData['WaitingForReview'], aData['QTITestClassAssignmentID'],'PR');
                MarkRefreshCells(getCellBymData("#classDataTable", 'Completed', nRow), 'completed', aData['Completed'], aData['QTITestClassAssignmentID'],'Fini');

                return nRow;
            },
            fnPreDrawCallback: function (oSettings) {
                ShowBlock($('#classDataTable'), 'Loading');
                if (oSettings.bDrawing == true && oSettings.iDraw > 1) {
                    ShowBlock($('#classDataTable'), 'Loading');
                }
                $('#filterSheets').attr("disabled", "disabled");
                return true;
            },
            fnDrawCallback: function (oSettings) {
                $('#classDataTable').unblock();
                if (oSettings.bDrawing == true && oSettings.iDraw > 1) {
                    //RefreshTestClassAssignments(false);
                    $('#classDataTable').unblock();
                }


                $('#filterSheets').removeAttr("disabled");

                setupPopupDetail();

                return true;
            },
            fnInitComplete: function () {
                var $blockFooter = $('.block-footer');
                var footerAssignmentHtml = '';

                footerAssignmentHtml += '<div class="g block-footer-sugguest">';
                footerAssignmentHtml += '<div class="g-1of3"><p><b>NS = Not Started</b></p><p><b>AG = Autograding</b></p></div>';
                footerAssignmentHtml += '<div class="g-1of3"><p><b>IP = In Progress</b></p><p><b>PR = Pending Review</b></p></div>';
                footerAssignmentHtml += '<div class="g-1of3"><p><b>P = Paused</b></p><p><b>Fini = Completed</b></p></div>';
                footerAssignmentHtml += '</div>';

                $blockFooter.addClass('block-footer-monitor').append(footerAssignmentHtml);
            }
        };

        $("#classDataTable").data("options", options);
    }
    function setupPopupDetail() {
        currentPopupDetailVersion += 1;
        popupDetailRequestIsRunning = [];
         $('.js-tooltip').parent('td').qtip({
                    content: {
                          text: function (event, api) {

                            var $self = $(this);
                            var $parent = $self.parents('tr');
                            var title = $self.attr('title');
                            var assignmentid = $self.attr('qtiTestClassAssignmentID');
                            if (assignmentid === undefined) {
                                return "undefined";
                            }
                            if (typeof title !== 'undefined' && title !== '') {
                                return title
                            }
                            var uniqueId = 'qtiTestClassAssignmentId =' + assignmentid;
                            if (popupDetailRequestIsRunning.includes(uniqueId)) {
                                return 'loading';
                            }
                            popupDetailRequestIsRunning.push(uniqueId);
                            var currentAjaxRequestVersion = currentPopupDetailVersion;
                            $.ajax({
                                url: '@Url.Action("MonitoringTestGetPopupDetail", "MonitoringTestTaking")?qtiTestClassAssignmentId=' + assignmentid,
                                type: 'GET'
                            }).then(function (popupDatas) {

                                if (currentAjaxRequestVersion === currentPopupDetailVersion) {
                                    var columnsPopupDefinition = [
                                        { StatusCode: 'NS', mData: 'NotStarted' },
                                        { StatusCode: 'IP', mData: 'Started' },
                                        { StatusCode: 'P', mData: 'Paused' },
                                        { StatusCode: 'AG', mData: 'Autograding' },
                                        { StatusCode: 'PR', mData: 'WaitingForReview' },
                                        { StatusCode: 'Fini', mData: 'Completed' }
                                    ];
                                    columnsPopupDefinition.forEach(function (columnDefinition) {

                                        var currentColumnIndex = getCellIndexBymData("#classDataTable", columnDefinition.mData)
                                        var $tdCurrent = $parent.find('td').eq(currentColumnIndex);

                                        var currentPopupData = popupDatas.filter(function (popupData) {
                                            return popupData.StatusCode === columnDefinition.StatusCode;
                                        });

                                        if (currentPopupData && currentPopupData.length > 0 && currentPopupData[0].StudentNames && currentPopupData[0].StudentNames.length > 0) {

                                            var studentNames = currentPopupData[0].StudentNames;
                                            var studentTitle = getStudentsTitle(studentNames);

                                            $tdCurrent.attr('title', studentTitle);
                                            $tdCurrent.text(studentNames.length);
                                        } else {
                                            $tdCurrent.qtip('destroy', true);
                                            $tdCurrent.html('0');
                                        }

                                    });
                                    if (popupDetailRequestIsRunning.includes(uniqueId)) {
                                        popupDetailRequestIsRunning.pop(uniqueId);
                                    }
                                    var currentTooltip = $self.attr('title');
                                    api.set('content.text', currentTooltip);
                                }
                            }, function (xhr, status, error) {
                                    if (currentAjaxRequestVersion === currentPopupDetailVersion) {
                                        if (popupDetailRequestIsRunning.includes(uniqueId)) {
                                            popupDetailRequestIsRunning.pop(uniqueId);
                                        }
                                    }
                                api.set('content.text', status + ': ' + error);
                            });
                            return 'Loading...';
                        }
                    },
                    hide: {
                        fixed: true,
                        delay: 300
                    },
                    style: {
                        classes: 'qtip-students qtip-bootstrap qtip-shadow'
                    },
                    position: {
                        at: 'center right',
                        my: 'left center',
                        viewport: $('#divClassTestAssignments'),
                        adjust: {
                            method: 'none shift'
                        }
                    }
                });
    }
    function getStudentsTitle(studentNames) {
        var studentsTitle = '';

        if (studentNames !== '') {
            studentsTitle = getStudentsTitleWithIcon(studentNames);
        }

        return studentsTitle;
    }
    function getStudentsTitleWithIcon(studentList) {
        var studentsTitle = '';

        studentList = studentList.filter(function (stuName) {
            return stuName.trim() !== '';
        }).sort(function (a, b) {
            a = a.toLowerCase().trim();
            b = b.toLowerCase().trim();

            if (a < b) {
                return -1;
            }

            if (a > b) {
                return 1;
            }

            return 0;
        }).map(function (stuName) {
            return "<span class='icon icon-16 icon-student icon-student-offset'></span> " + stuName + '<br/>';
        });

        studentsTitle = studentList.join('');

        return studentsTitle;
    }
    function FilterColumn(searchTerm, columnIndex, settings) {
        settings.aoPreSearchCols[columnIndex].sSearch = searchTerm.trim();
        settings.aoPreSearchCols[columnIndex].bRegex = false;
        settings.aoPreSearchCols[columnIndex].bSmart = true;
    }

    function fnResetAllFilters(oSettings) {
        for (var iCol = 0; iCol < oSettings.aoPreSearchCols.length; iCol++) {
            oSettings.aoPreSearchCols[iCol].sSearch = '';
        }
    }

    function SetupFilters() {
        currentFilterParams = getCurrentFilterParams();
        $("#spanClassActive").html(showActiveClassTestAssignment ? "off" : "on");
        $('#btnActiveTestClassAssignment').attr("class", showActiveClassTestAssignment ? "off" : "on");
        var dataTable = $('#classDataTable').dataTable();
        var settings = dataTable.fnSettings();
        fnResetAllFilters(settings);


        var filterWithColumnConfig = [
            { filterId: '#selectGrade', columnName: 'GradeName'},
            { filterId: '#selectBank', columnName: 'BankName'},
            { filterId: '#selectClass', columnName: 'ClassName'},
            { filterId: '#selectSubject', columnName: 'SubjectName'},
            { filterId: '#selectTeacher', columnName: 'TeacherName'},
            { filterId: '#selectTest', columnName: 'TestName'},
            { filterId: '#selectTestCode', columnName: 'Code'},
            { filterId: '#selectStudent', columnName: 'StudentNames'},
        ];

        filterWithColumnConfig.forEach(function (config) {
            if ($(config.filterId).val()) {
                FilterColumn($(config.filterId).val(), getCellIndexBymData('#classDataTable', config.columnName), settings);
            }
        });


        //ShowBlock($('#classDataTable'), 'Loading');
        dataTable.fnDraw();
    }

    function setIconVisibilityClass(qtiTestClassAssignmentID, schoolName, className, teacherName, testName, virtualTestId) {
        var iconString = "";

        var detailsIcon = '@Url.Content("~/Content/themes/AssignmentRegrader/images/icon-pencil.png")';
        var detailsString = '<a href="javascript:void(0);" title="Review" class="with-tip jsViewDetail" '
            + ' qtiTestClassAssignmentID="' + qtiTestClassAssignmentID + '"'
            + ' schoolName="' + schoolName + '"'
            + ' className="' + className + '"'
            + ' teacherName="' + teacherName + '"'
            + ' testName="' + testName + '"'
            + ' virtualTestId="' + virtualTestId + '"'
            + '><img src ="' + detailsIcon + '" width="16" height="16" style="margin-right: 4px"></a>';
        iconString += detailsString;

        return iconString;
    }

    function MarkRefreshCells(nRow, name, value, qtiTestClassAssignmentID,statusCode) {
        nRow.removeClass(name);
        nRow.addClass(name);

        var htmlString = '<span class="js-tooltip">' + value + '</span>';
        nRow.html(htmlString);

        nRow.attr('qtiTestClassAssignmentID', qtiTestClassAssignmentID);
        nRow.attr('columnDataType', name);
    }

    function MarkNewCells(name, value, qtiTestClassAssignmentID, isNew) {
        var time = 3000;
        var cell = $('.' + name + '[qtiTestClassAssignmentID="' + qtiTestClassAssignmentID + '"]');
        if (cell == null) return;
        cell.attr('title', '');
        if (cell.text() == value) return;
        cell.text(value);
        if (isNew) {
            cell.addClass('new');
            setTimeout(function() {
                cell.removeClass('new');
            }, time);
        }
    }

    function RefreshTestClassAssignments(isNew) {
        if (uniqueRefreshAdminView || displayingProctorView) {
			$('#classDataTable').unblock();
			return;
		}
        var qtiTestClassAssignmentIDs = $(".jsViewDetail").map(function () {
            var id = $(this).attr('qtiTestClassAssignmentID');
            return id;
        }).get().join(", ");
        if (qtiTestClassAssignmentIDs == null || qtiTestClassAssignmentIDs == '') {
			$('#classDataTable').unblock();
			return;
		}
        var url = '@Url.Action("GetTestClassAssignmentsRefresh")';
        var postData = { QTITestClassAssignmentIDs: qtiTestClassAssignmentIDs };
        uniqueRefreshAdminView = true;
        $.ajax({
            type: 'POST',
            url: url,
            data: postData,
            success: function (data) {
                uniqueRefreshAdminView = false;
                var newData = new MonitoringTestTakingClass(data);

                $.each(newData.QTITestClassAssignments, function (index, value) {
                    MarkNewCells('notStarted', value.NotStarted, value.QTITestClassAssignmentID, isNew);
                    MarkNewCells('inprogress', value.Started, value.QTITestClassAssignmentID, isNew);
                    MarkNewCells('paused', value.Paused, value.QTITestClassAssignmentID, isNew);
                    MarkNewCells('autograding', value.Autograding, value.QTITestClassAssignmentID, isNew);
                    MarkNewCells('pendingReview', value.WaitingForReview, value.QTITestClassAssignmentID, isNew);
                    MarkNewCells('completed', value.Completed, value.QTITestClassAssignmentID, isNew);
                });

                $('#classDataTable').unblock();
            },
            error: function () {
                uniqueRefreshAdminView = false;
                $('#classDataTable').unblock();
            }
        });
    }

</script>

<script>
    var popupID = 'popupContainer';
    function PopupTestAssignmentRegrader(qtiTestClassAssignmentID, schoolName, className, teacherName, testName, virtualTestId) {
        ShowBlock($('#classDataTable'), 'Loading');
        var testTitle = schoolName + ', ' + className + ', ' + teacherName + ', ' + testName;
        var url = '@Url.Action("ProctorTestView", "MonitoringTestTaking")';

        var postData = {
            qtiTestClassAssignmentID: qtiTestClassAssignmentID,
            schoolName: schoolName,
            className: className,
            teacherName: teacherName,
            testName: testName,
            virtualTestId: virtualTestId
        };

        $.ajax({
            url: url,
            type: 'post',
            data: postData
        }).done(function (html) {
            $('#classDataTable').unblock();

            $("#dialogManualGrading").append('<div id="' + popupID + '" class="dialog block-content"></div>');
            $("#" + popupID).append(html);
            $('#' + popupID).dialog({
                title: "",
                open: function () {
                    displayingProctorView = true;
                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }
                    currentPopup.parents('.ui-resizable').addClass('block-border')
                        .prepend('<h1 class="popupTitle"><span id="titleHeader">' + testTitle + '</span></h1>');

                    //Create overlay for popup
                    var $overlayPopup = $('<div/>');
                    var $doc = $(document);

                    $overlayPopup
                        .addClass('my-overlay')
                        .css({
                            'background': 'black',
                            'position': 'absolute',
                            'top': '0',
                            'left': '0',
                            'width': $doc.width(),
                            'height': $doc.height(),
                            'opacity': '0.3',
                            'z-index': $('.ui-dialog').css('z-index') - 1,
                        });

                    $overlayPopup.appendTo($('body'));
                },
                beforeclose: function () {
                    return true;
                },
                close: function () {
                    displayingProctorView = false;
                    RemoveGraderPopup();
                    clearInterval(popupInterval);
                },
                modal: false,
                width: 1080,
                minWidth: 791,
                resizable: true,
                height: 480
            });
        });

        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    }

    function RemoveGraderPopup() {
        $('#' + popupID).remove();
        $("body .my-overlay").remove();
    }

    function CloseGraderPopup() {
        $("#" + popupID).dialog("close");
    }

</script>
