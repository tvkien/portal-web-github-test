@model LinkIt.BubbleSheetPortal.Web.ViewModels.SchoolAndClassViewModel

<link href="@Url.Content("~/Content/css/dialog.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/css/vue-components/vue-modal.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/css/vue-components/vue-component-manage-class.css")" rel="stylesheet" type="text/css" />

<link rel="stylesheet" href="/Scripts/Qtip/jquery.qtip.css">
<script src="@Url.Content("~/Scripts/tipped/tipped.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Qtip/jquery.qtip.js")"></script>

<style type="text/css">
    #dataTable_wrapper {
        margin-bottom: -65px !important;
    }

    .tooltip {
        position: relative;
    }

    .icon {
        vertical-align: text-bottom !important;
    }
</style>

<article class="container_12" id="classes-by-teacher-and-school">
    <section class="grid_12">
        <div class="class-title">@ViewBag.TeacherName</div>
        <div class="block-border">
            <div class="block-content form">
                <ul style="display: none" id="error-messages-classList" class="message error"></ul>
                <h1>
                    Classes
                    <a id="addNewClass" onClick="setFilterData()" href="javascript:void(0)">
                        <img src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")" />
                        Add new class
                    </a>
                </h1>
                <div id="manageClassNotificationContainer"></div>
                <p style="height: 5px"></p>
                <table id="dataTable" width="100%" cellspacing="0" class="datatable table no-margin">
                    <thead>
                        <tr>
                            <th class="sorting_disabled" scope="col">
                                <input type="checkbox" id="chkAllClass" />
                            </th>
                            <th class="table-actions sorting_disabled" scope="col">Manage Class</th>
                            <th scope="col">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>Class
                            </th>
                            <th scope="col">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>@LabelHelper.Term
                            </th>
                            <th class="table-actions sorting_disabled" scope="col">Manage Students</th>
                            <th scope="col">
                                <span class="column-sort">
                                    <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                    <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                </span>School
                            </th>
                            <th class="table-actions sorting_disabled" scope="col">Teachers</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td style="height: 60px;"></td></tr>
                    </tbody>
                </table>
                <div class="clear-10"></div>
                <div style="left: -11px; position: relative; top: 20px; width: 100px;" class="pButton">
                    <button id="btnBatchRemoveClass" type="submit" name="Remove" disabled="disabled" onclick="deleteBatchClass()">Remove</button>
                </div>
            </div>
        </div>
    </section>

    <modal-component v-bind:show.sync="isShowModalAssignStudent" v-bind:width="800" style="display: none;">
        <div slot="header">
            <a href="#" v-on:click="closeModalAddStudentClass" class="modal-component-close">Close</a>
        </div>
        <div slot="body">
            @Html.Partial("_AvailableStudentsEnhancements")
        </div>
        <div slot="footer">
            <div class="u-text-right">
                <button v-on:click="closeModalAddStudentClass">Close</button>
            </div>
        </div>
    </modal-component>
</article>
<input type="hidden" id="hidClassId" value="" />
<script src="/Scripts/ManageClass/App.js"></script>

<script type="text/javascript">
    $(function () {
        var isNewSession = '@ViewBag.IsNewSession';
        var isLoadHistory = JSON.parse(localStorage.getItem('loadHistory'));
        if (isLoadHistory) {
            isNewSession = 'false';
        }
        var selectedDistrictId = '@Model.DefaultDistrictId';
        var selectedSchoolId = '@Model.CurrentSelectedSchoolId';
        var selectedTeacherId = '@Model.CurrentSelectedTeacherId';
        var roleId = '@Model.RoleId';
        var userId = '@Model.UserId';
        var urlLoadClass = '@Url.Action("GetClassesByUserId")';
        if (isNewSession == 'True') {
            localStorage.setItem('FilterData', null);
        }
        var isFirstLoad = true;
        var userID = $('#selectTeacher').val();
        var schoolID = $('#selectSchool').val();
        var className = $('#inputClassName').val();
        var sEmptyTableMess = "Make a selection and click on 'Apply Filters'";
        if (roleId == '2') {
            sEmptyTableMess = "Your search returned no results. Try changing your selection and click on 'Apply Filters'";
        }
        var pageSize = 10;
        var historyData = JSON.parse(localStorage.getItem('FilterData'));
        if (historyData) {
            pageSize = parseInt(historyData.pageSize);
            sEmptyTableMess = "Your search returned no results. Try changing your selection and click on 'Apply Filters'";
        }
        var searchKey = localStorage.getItem("SearchKey");
        localStorage.removeItem('SearchKey');
        if (searchKey == null || searchKey == undefined)
            searchKey = "";

        var options = {
            bServerSide: true,
            bDestroy: true,
            oLanguage: { "sEmptyTable": sEmptyTableMess },
            sAjaxSource: urlLoadClass,
            bAutoWidth: false,
            iDisplayLength: pageSize,
            bAutoWidth: true,
            oSearch: {
                sSearch: searchKey
            },
            fnServerParams: function (aoData) {
                var historyData = JSON.parse(localStorage.getItem('FilterData'));
                if (historyData) {
                    userID = historyData.teacherID;
                    schoolID = historyData.schoolID;
                    className = historyData.className;
                    isFirstLoad = historyData.isFirstLoad;
                    pageSize = parseInt(historyData.pageSize);

                    $('#filterSheets').attr("disabled", "disabled");
                }
                if (roleId != '2') {
                    aoData.push(
                        { name: "userID", value: userID },
                        { name: "schoolID", value: schoolID },
                        { name: "className", value: className },
                        { name: "isFirstLoad", value: isFirstLoad }
                    );
                }
                else {
                    aoData.push(
                        { name: "userID", value: selectedTeacherId ? selectedTeacherId : 0 },
                        { name: "schoolId", value: selectedSchoolId ? selectedSchoolId : 0 },
                        //{ name: "districtId", value: selectedDistrictId ? selectedDistrictId : 0 },
                        { name: "isFirstLoad", value: false }
                    );
                }

                //TuanVo:encode text in filter searchbox
                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                }
            },
            aaSorting: [[4, "asc"], [3, "asc"], [2, "asc"]],
            aoColumns: [ {
                "aTargets": [0],
                "mRender": function ( data, type, full ) {
                    return '<input type="checkbox" name="chkClass" value="' + data + '" />';
                }, "bSearchable": false, "bSortable": false
            }, {
                "aTargets": [1],
                "mRender": function (data, type, full) {
                    return setIconVisibility(full[0]);
                    }, "bSearchable": false, "bSortable": false, "sWidth": "70px"
            }, {
                "aTargets": [2],
                    "bSearchable": false, "bSortable": false
            }, {
                "aTargets": [3],
                    "bSearchable": false, "bSortable": false
            }, {
                "aTargets": [4],
                "mRender" : function(data, type, full) {
                    return setManageStudentsIcon(full[0]);
                },
                "bSearchable": false, "bSortable": false, "sWidth": "100px"
            }, {
                "aTargets": [5],
                "mRender": function (data, type, full) {
                    return full[4];
                },
                    "bSearchable": false, "bSortable": false
            },{
                "aTargets": [6],
                "mRender": function (data, type, full) {
                    return full[5];
                },
                    "bSearchable": false, "bSortable": false
            }],
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTable'), "Loading");
                $('#filterSheets').attr("disabled", "disabled");
                return true;
            },
            fnDrawCallback: function () {
                var _pageSizeDefault = _historyData.pageSize ? _historyData.pageSize : 10;
                var pageSizeGrid = $('#dataTable_length select').val();
                if (_pageSizeDefault != pageSizeGrid) {
                    keepLocalStorage();
                    _pageSizeDefault = pageSizeGrid;
                }
                $('#dataTable').unblock();
                $('.with-tip').tip();
                getStudentsQtip('.js-tooltip-students');
                if ($('#selectSchool').val() && $('#selectSchool').val() != 'select') {
                    $('#filterSheets').removeAttr("disabled");
                }
                return true;
            },
            fnRowCallback: function (nRow, aData) {
                if (typeof aData[5] === 'string' && aData[5]) {
                    var teachers = aData[5].split(',');
                    teachers = teachers.filter((item, index) => item !== '' && teachers.indexOf(item) === index);
                    aData[5] = teachers.join(',');
                }
                $('td:eq(4)', nRow).html(DisplayStudents(aData[0], aData[10]));
                $('td:eq(6)', nRow).html(DisplayTeachers(aData[5]));
                $('td:eq(6)', nRow).addClass(detectWithTip(aData[5]));
                $('td:eq(6)', nRow).bind({
                    mouseenter: function () {
                        if (aData[5] != null && aData[5] != '') {
                            displayTeacherDetailTooltip($(this), aData[5]);
                        }
                    },
                    mouseleave: function () {
                        $(this).removeClass('with-tip');
                    }
                });

                return nRow;
            },
        };
        $("#dataTable").data("options", options);
        initializeDataTable($("#dataTable"));
    });
</script>
<script type="text/javascript">

    ManageClassModel.getStudentsUrl = '@Url.Action("GetStudentsInDistrictByFilter")/?classid=';
    ManageClassModel.addStudentsToClassUrl = '@Url.Action("AddManyStudentToClass")';
    ManageClassModel.getSelectedStudentURL = '@Url.Action("GetSelectedStudentIncaseSelectAll")';

    function displayTeacherDetailTooltip(e, data) {
        $(e).attr('title', '<p style="text-align:left;">' + data.split(',').join('<br />') + '</p>');
    }

    function detectWithTip(data) {
        if (data == null || data == '')
            return '';
        else {
            return 'with-tip';
        }
    }

    function searchDelay() {
        var inputFilter = $("#dataTable_filter input[type='text']");
        var dataTable = $("#dataTable");
        var delay = null;

        inputFilter.off('keyup.DT input.DT');

        inputFilter.on("keyup", function () {
            var search = inputFilter.val();
            clearTimeout(delay);
            delay = setTimeout(function () {
                if (search != null) {
                    dataTable.dataTable().fnFilter(search);
                }
            }, 1000);
        });
    }

    function getStudentsQtip(el) {
        var $el = $(el);
        $el.qtip({
            content: {
                text: function (event, api) {
                    var title = $(this).attr('title');

                    if (typeof title !== 'undefined' && title !== '') {
                        return title
                    }
                }
            },
            hide: {
                fixed: true,
                delay: 300
            },
            style: {
                classes: 'qtip-students qtip-bootstrap qtip-shadow'
            },
            position: {
                at: 'center right',
                my: 'left center',
                viewport: $('#divClassTestAssignments'),
                adjust: {
                    method: 'none shift'
                }
            }
        });
    }

    function DisplayStudents(classId, studentNames) {
        var studentElement = '';

        var studentTitle = getStudentsTitleWithIcon(studentNames);

        if (studentNames != null)
            studentElement = '<span class="js-tooltip-students" title="' + studentTitle + '"><span class="icon icon-24 icon-students"></span></span>';

        var editor = setManageStudentsIcon(classId);

        return editor + studentElement;
    }

    function DisplayTeachers(teacherNames) {
        var displayText = '';
        if (teacherNames == null)
            return displayText;

        teacherArr = teacherNames.split(",");
        if (teacherArr.length > 1) {
            displayText = teacherArr[0] + ",...";
        } else {
            displayText = teacherArr[0];
        }

        return displayText;
    }

    function TextAbstract(text, length) {
        if (text == null) {
            return "";
        }
        if (text.length <= length) {
            return text;
        }
        text = text.substring(0, length);
        var last = text.lastIndexOf(" ");
        if (last > 0) text = text.substring(0, last);

        text = $.trim(text);
        if (text.indexOf(",") == text.length - 1) text = text.substring(0, text.length - 1);

        return text + "...";
    }

    function getStudentsTitleWithIcon(studentNames) {
        var studentsTitle = '';
        if (studentNames == null || studentNames.length == 0)
            return studentsTitle;

        var studentList = studentNames.split(',');

        studentList = studentList.filter(function (stuName) {
            return stuName.trim() !== '';
        }).sort(function (a, b) {
            a = a.toLowerCase().trim();
            b = b.toLowerCase().trim();

            if (a < b) {
                return -1;
            }

            if (a > b) {
                return 1;
            }

            return 0;
        }).map(function (stuName) {
            return "<span class='icon icon-16 icon-student icon-student-offset'></span> " + stuName + '<br/>';
        });

        studentsTitle = studentList.join('');

        return studentsTitle;
    }

    function setCheckBox(classId) {
        var checkboxString = '<input type="checkbox" name="chkClass" value="' + classId + '" />';
        return checkboxString;
    }

    function setIconVisibility(classId) {
        var editIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/pencil.png")';
        var editString = '<a onClick="setFilterData()" href="javascript:void(0)" title="Edit" classId="' + classId + '" class="with-tip editClass"><img src="' + editIcon + '" width="16" height="16" style="margin-right: 4px"></a>';

        var deleteIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/cross-circle.png")';
        var deleteString = '<a href="javascript:void(0)" title="Delete" classId="' + classId + '" class="with-tip deleteClass" onclick="deleteClass(this)"><img src="' + deleteIcon + '" width="16" height="16"></a>';

        var assignIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/assign-icon.png")';
        var assignString = '<a href="javascript:void(0)" title="Assign Teacher" classId="' + classId + '" class="with-tip assignClass" onclick="assignTeacher(this)"><img src="' + assignIcon + '" width="16" height="16"></a>';

        return editString + deleteString + assignString;
    }

    function setManageStudentsIcon(classId) {
        var editIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/pencil.png")';
        var editString = '<a onClick="setFilterData()" href="@Url.Action("ManageStudents", "ManageClasses")/' + classId + '" title="Manage Current Students" class="with-tip editClass"><img src="' + editIcon + '" width="16" height="16" style="margin-right: 4px"></a>';

        var assignIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")';
        var assignString = '<a href="javascript:void(0)" title="Assign New Students" classId="' + classId + '" class="with-tip deleteClass" onclick="assignStudents(this)"><img src="' + assignIcon + '" width="16" height="16"></a>';

        return editString + assignString;
    }

    function setFilterData() {
        var selectedState = $("#selectState").val() === 'select' ? 0 : $("#selectState").val();
        var selectedDistrict = $("#selectDistrict").val() === null ? 0 : $("#selectDistrict").val();
        var schoolId = ($('#selectSchool').val() === null || $('#selectSchool').val() === 'select') ? 0 : $('#selectSchool').val();
        var teacherId = $('#selectTeacher').val() === null ? 0 : $('#selectTeacher').val();
        var className = $('#inputClassName').val();
        var searchKey = $("#dataTable_filter input[type='text']").val();
        var pageSize = 10;
        var isFirstLoad = true;
        var historyData = JSON.parse(localStorage.getItem('FilterData'));
        if (historyData) {
            isFirstLoad = historyData.isFirstLoad;
            pageSize = historyData.pageSize;
        }
        var data = {
            stateID: selectedState,
            districtID: selectedDistrict,
            schoolID: schoolId,
            teacherID: teacherId,
            className: className,
            searchKey: searchKey,
            pageSize: pageSize,
            isFirstLoad: isFirstLoad
        };
        if (schoolId) {
            localStorage.setItem("FilterData", JSON.stringify(data));
        }
        localStorage.setItem("SearchKey", searchKey);
    }

    function deleteClass (e) {
        if (confirm('Are you sure you want to delete this class?') == false) return;
        var classID = $(e).attr('classId');
        $('#error-messages-classList').hide();
        $.ajax({
            url: '@Url.Action("DeleteClass")',
            type: 'POST',
            data: {classId: classID},
            success: function (response) {
                if (response.Success != false) {
                    if(typeof refreshTable == 'function') {
                        refreshTable("#dataTable");
                    }
                    $('#selectTeacher').change();
                }
                else {
                    addErrorMessagesToList(response, 'error-messages-classList');
                }
            },
            failure: function (response) {
                alert(response);
            }
        });
    }

    function deleteBatchClass()
    {
        if (confirm('Are you sure you want to delete these classes?') == false) return;
        setDisabledButtons(true);
        var removeClassIds = getSelectedClassIds();
        $('#error-messages-classList').hide();
        $.ajax({
            url: '@Url.Action("DeleteBatchClasses")',
            type: 'POST',
            data: {listIds: removeClassIds},
            success: function (response) {
                if (response.Success != false) {
                    if(typeof refreshTable == 'function') {
                        refreshTable("#dataTable");
                    }
                }
                else {
                    addErrorMessagesToList(response, 'error-messages-classList');
                }
            },
            failure: function (response) {
                alert(response);
            }
        });
    }

    $('#dataTable').on('click', '.editClass', function() {
        var classID = $(this).attr('classId');
        if (classID != undefined) {
            var url = '@Url.Action("EditClass")/?id=' + classID + '&fromManageSchools=' + '@ViewBag.FromManageSchools';
            window.location.href = url;
        }
    });

    $('#addNewClass').click(function () {
        var teacherId = '@HttpContext.Current.Session["SelectedTeacherID"]';
        if (teacherId.length == 0)
            teacherId = -1;

        location.href = "/ManageClasses/AddClass?teacherID=" + teacherId + '&fromManageSchools=' + '@ViewBag.FromManageSchools';
    });

    $('INPUT[name="chkClass"][type=checkbox]').live("click", function (e) {
        if (this.checked) {
            var checkboxes = $('INPUT[name="chkClass"][type=checkbox]');
            var checkall = true;
            for (var i = 0; i < checkboxes.length; i++) {
                if (!(checkboxes[i]).checked) {
                    $('#chkAllClass').removeAttr('checked');
                    checkall = false;
                    break;
                }
            }
            if (checkall) {
                $('#chkAllClass').attr('checked', 'checked');
            }
            setDisabledButtons(false);
        }
        else {
            $('#chkAllClass').removeAttr('checked');
            var checkedboxes = $('INPUT[name="chkClass"][type=checkbox]:checked');
            if (checkedboxes.length > 0) {
                setDisabledButtons(false);
            }
            else {
                setDisabledButtons(true);
            }
        }
    });

    $('#chkAllClass').live("click", function (e) {
        if (this.checked) {
            $('INPUT[name="chkClass"][type=checkbox]').attr('checked', 'checked');
            setDisabledButtons(false);
        }
        else {
            $('INPUT[name="chkClass"][type=checkbox]').removeAttr('checked');
            setDisabledButtons(true);
        }
    });

    function setDisabledButtons(isDisabled) {
        if (isDisabled) {
            $('#btnBatchRemoveClass').attr('disabled', 'disabled');
        }
        else {
            $('#btnBatchRemoveClass').removeAttr('disabled');
        }
    }

    function getSelectedClassIds() {
        var classIds = '';
        $('INPUT[name="chkClass"][type=checkbox]:checked').each(function (i, e) {
            classIds += $(e).val() + ',';
        });
        return classIds.substr(0, classIds.length - 1);
    }

    function assignStudents(el)
    {
        var classId = $(el).attr('classId');

        $.get('@Url.Action("GetAvailableStudentsEnhancement")', { classId: classId })
            .done(function(response) {
                ManageClassModel.classId = classId;
                ManageClassModel.showInactive = false;
                ManageClassModel.manageClass.programs = response.Programs;
                ManageClassModel.manageClass.grades = response.Grades;
                ManageClassModel.isShowModalAssignStudent = true;
                ManageClassModel.manageClass.programSelected = [];
                ManageClassModel.manageClass.gradesSelected = [];
                ManageClassModel.isShowAddNewStudent = response.IsShowAddNewStudent;
                displayFilterManageClass();
                registerEvent();
            });
    }


    function assignTeacher(el) {
        var classId = $(el).attr('classId');
        var worker = $('<div />');

        worker
            .addClass("dialog")
            .attr("id", "assignTeacherDialog")
            .appendTo("body")
            .load('@Url.Action("AddTeacherToClass")/?classId=' + classId, function() {
                worker.dialog({
                    title: $(this).attr("Assign Teacher"),
                    close: function() {
                        $('.ui-widget-overlay').remove();
                        $(this).remove();
                    },
                    modal: false,
                    resizable: false
                });
            });

        //todo: the jQuery UI "dialog" plugin wasn't working properly here, so this workaround went in.. :(
        showModalDialogBG();
    }

    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

    $(function () {
        //LoadClassToTable();
        searchDelay();
    });

    $(document).on('submit', '[data-ajax-form]', function (e) {
        e.preventDefault();

        var self = $(e.target);
        var formId = self.attr('id');

        if (formId == "addTeacherToClassForm")
            return false;

        self.ajaxSubmit({
            success: ajaxHandler[formId]
        });

        // !!! Important !!!
        // always return false to prevent standard browser submit and page navigation
        return false;
    });

    var ajaxHandler = (function () {
        function addTeacherToClassForm(resp, statusText, xhr, form) {
            if (resp == true) {
                //LinkIt.success('#manageClassNotificationContainer', 'Teacher sucessfully added to class.');
                $('#assignTeacherDialog').dialog('close');
                //LoadClassToTable();
                searchDelay();
            } else {
                CustomAlert(resp.ErrorList.map(function (e, i) { return e.ErrorMessage; }).join(', '));
            }
        };

        return {
            addTeacherToClassForm: addTeacherToClassForm
        };
    })();

</script>
