@using Amazon.IdentityManagement.Model
@using LinkIt.BubbleSheetPortal.Models
@using LinkIt.BubbleSheetPortal.Web.Constant
@model LinkIt.BubbleSheetPortal.Web.ViewModels.AddEditStudentViewModel
@{
    ViewBag.Title = "Add New Student";

}
<article class="container_12" id="add-metadata-student">
    <section id="block-content" class="grid_7">
        <div class="block-border">
            <div class="block-content form">
                <h1>Add New Student</h1>
                @if (Model == null)
                {
                    <label>An error has occurred, please try again.</label>
                }
                else
                {
                    using (Html.BeginForm("AddNewStudent", "ManageClasses", FormMethod.Post, new { id = "addStudentForm", @class = "form" }))
                    {
                        <ul style="display: none" id="error-messages" class="message error no-margin"></ul>
                        @Html.AntiForgeryToken()
                        <div class="columns">
                            <fieldset>
                                <legend>Select Admin School</legend>
                                <div class="columns">
                                    @if ((Model.FromManageStudent && Model.FilterDistrictId == 0) || Model.ParentUserId > 0)
                                    {
                                        if (Model.CurrentUserRoleId == (int)Permissions.Publisher || Model.CurrentUserRoleId == (int)Permissions.NetworkAdmin)
                                        {
                                            <p>
                                                <label>State</label>
                                                <select id="selectState" class="full-width"></select>
                                            </p>
                                            <p>
                                                <label>@LabelHelper.DistrictLabel</label>
                                                <select id="selectDistrict" class="full-width"></select>
                                            </p>
                                        }
                                    }
                                    <p>
                                        <label>AdminSchool<span class="u-c-red"> *</span></label>
                                        <span class="relative">
                                            <select id="selectSchool" name="adminSchoolId" class="full-width"></select>
                                        </span>
                                    </p>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Student Details</legend>
                                @Html.HiddenFor(m => m.StudentId)
                                @Html.HiddenFor(m => m.DistrictId)
                                <div class="colx2-left">
                                    <p>
                                        <label>
                                            First Name<span class="u-c-red"> *</span>
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.FirstName, new { @class = "full-width first-focus" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            Last Name<span class="u-c-red"> *</span>
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.LastName, new { @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            Gender<span class="u-c-red"> *</span>
                                        </label>
                                        <span class="relative">
                                            @Html.DropDownListFor(m => m.GenderId, Model.Genders, "Select Gender", new { id = "selectGender", @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            Email
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.Email, new { @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            @LabelHelper.GradeLabel
                                        </label>
                                        <span class="relative">
                                            @Html.DropDownListFor(m => m.GradeId, Model.Grades, "Select " + @LabelHelper.GradeLabel, new { id = "selectGrade", @class = "full-width" })
                                        </span>
                                    </p>
                                </div>
                                <div class="colx2-right">
                                    <p>
                                        <label>
                                            Middle Name
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.MiddleName, new { @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            Student Local ID<span class="u-c-red"> *</span>
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.StudentLocalId, new { @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            @LabelHelper.StudentRace
                                        </label>
                                        <span class="relative">
                                            @{
                                                string raceLabel = string.Format("{0} {1}", "Select", LocalizeHelper.Localized(@LinkIt.BubbleSheetPortal.Web.Constant.LocalizeResource.StudentRace));
                                            }
                                            @Html.DropDownListFor(m => m.RaceId, Model.Races, raceLabel, new { @id = "selectRace", @class = "full-width" })
                                        </span>
                                    </p>
                                    <p>
                                        <label>
                                            Student State ID
                                        </label>
                                        <span class="relative">
                                            @Html.TextBoxFor(m => m.StudentStateId, new { @class = "full-width" })
                                        </span>
                                    </p>
                                </div>
                            </fieldset>
                            <fieldset>
                                <legend>Account Info</legend>
                                <div class="colx2-left">
                                    <p>
                                        <label>
                                            Password
                                        </label>
                                        <span class="relative">
                                            @Html.PasswordFor(m => m.Password, new { maxlength = 49, @class = "full-width" })
                                        </span>
                                    </p>
                                </div>
                                <div class="colx2-right">
                                    <p>
                                        <label>
                                            Confirm Password
                                        </label>
                                        <span class="relative">
                                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "full-width" })
                                        </span>
                                    </p>
                                </div>
                            </fieldset>
                            <fieldset class="last" v-if="fields.length > 0">
                                <legend>Other Student Data</legend>
                                <div class="fieldset-column" v-for="field in fields">
                                    <label v-text="field.label"></label>
                                    <span class="relative">
                                        <input type="text" class="full-width" v-model="field.value" />
                                    </span>
                                </div>
                            </fieldset>

                            @if (Model.FromManageStudent || Model.ParentUserId > 0)
                            {
                                <div>
                                    @Html.Partial("_AddNewStudentAssignClass", Model)
                                </div>
                                <div class="clear-10"></div>
                            }

                            <button id="btnSubmit" type="submit" name="Save">Submit</button>
                            <button id="btnCancel" type="button" class="grey">Cancel</button>
                        </div>
                        <input type="hidden" name="FromManageStudent" value="@Model.FromManageStudent.ToString()" />
                        <input type="hidden" name="ParentUserId" value="@Model.ParentUserId" />
                        <input type="hidden" id="FilterDistrictId" name="FilterDistrictId" value="@Model.FilterDistrictId" />
                        <input type="hidden" id="ClassIdString" name="ClassIdString" />
                        <input type="hidden" id="StudentMetaDatas" name="StudentMetaDatas" />
                    }
                }
            </div>
        </div>
    </section>
</article>

@section scripts {
    <script type="text/javascript">
        _CURRENT_PAGE_NAME = "AddStudent";
        var metadataStudentModel = new Vue({
            el: '#add-metadata-student',
            data: {
                fields: []
            }
        });

        function loadStudenMeta(districtId) {
            $.get('@Url.Action("GetListStudentMetaData", "ManageClasses")',{studentId:0,districtId:districtId},
                function (response) {
                    metadataStudentModel.fields = htmlDecode(response.data) || [];
                });
        }
    </script>
    <script type="text/javascript">
        $(function() {
            $('.dataadmin').addClass('current');
            if ('@Model.FromManageStudent' == 'True') {
                $('#studentManagement').addClass('current');
            } else {
                $('#dtaManageClasses').addClass('current');
            }
            //initDropdownListSchool();

            $('#addStudentForm').submit(function(event) {
                event.preventDefault();
                if ('@Model.FromManageStudent' == 'True' || @Model.ParentUserId > 0) {
                    if (classIdString == null || classIdString.length == 0) {
                        CustomAlert('Please assign one or more classes for student before saving.');
                        return;
                    }
                    $('#ClassIdString').val(classIdString);
                }

                $('#btnSubmit').disableBt();
                var dataConvertTemp = [];
                for (var i = 0, len = metadataStudentModel.fields.length; i < len; i++) {
                    var vObj = {
                        label: metadataStudentModel.fields[i].label,
                        text: htmlEncodeItem(metadataStudentModel.fields[i].text),
                        value: metadataStudentModel.fields[i].value
                    };
                    dataConvertTemp.push(vObj);
                }
                var studentMetaDatas = JSON.stringify(dataConvertTemp);
                $('#StudentMetaDatas').val(studentMetaDatas);
                $.ajax({
                    url: $(this).target,
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.Success == true) {
                            $('#error-messages').hide();
                            $('#btnSubmit').enableBt();
                            if (response.studentId != '') {
                                location.href = '@Url.Action("EditStudent")?id='
                                    + response.studentId + '&fromManageStudent=@Model.FromManageStudent'
                                    + (@Model.ParentUserId >0 ?'&returnUrl=/ManageParent/Edit?parentUserId=@Model.ParentUserId' : '');
                            }
                        } else {
                            addErrorMessages(response);
                            $("html, body").animate({ scrollTop: 0 }, 200);
                        }
                        $('#btnSubmit').enableBt();
                    },
                    failure: function(response) {
                        alert(response);
                    }
                });
            });

            $('#addStudentForm').on('click', '#btnCancel', function () {
                if ('@Model.ParentUserId' > 0){
                    window.location.href = '/ManageParent/Edit?parentUserId='+@Model.ParentUserId;
                    return;
                }
                if ('@Model.FromManageStudent' == 'True') {
                    window.location.href = '@Url.Action("Index","StudentLookup")';
                    return;
                }
                var classId = '@HttpContext.Current.Session["AddNewStudentToClassId"]';
                var url = classId == '' ? '@Url.Action("ManageClass", "ManageClasses")' : '@Url.Action("ManageStudents", "ManageClasses", new { id = HttpContext.Current.Session["AddNewStudentToClassId"] })';
                //alert(classId);
                //alert('@System.Web.HttpContext.Current.Session["EditStudentSource"]');
                if (classId == '' || classId=='0') {
                    var x = '@System.Web.HttpContext.Current.Session["EditStudentSource"]';
                    if (x != null) {
                        if (x.length > 0) {
                            url = '@System.Web.HttpContext.Current.Session["EditStudentSource"]' == '@LinkIt.BubbleSheetPortal.Web.Helpers.EditStudentSource.FromManageSchools' ? '@Url.Action("ManageSchoolAndClass", "ManageClasses")' : '@Url.Action("ManageClass", "ManageClasses")';
                        }
                    }
                }
                window.location.href = url;
            });
        });

        function initDropdownListSchool(selectedDistrictId) {
            var currentUserRoleId = '@Model.CurrentUserRoleId';
            var currentUserId = '@Model.CurrentUserId';
            var selectedDistrictId = selectedDistrictId;//'@Model.DistrictId';
            var selectedSchoolId = '@Model.AdminSchoolId';

            if (!selectedDistrictId || selectedDistrictId == 'select') {
                return;
            }

            var url = currentUserRoleId == '8' || currentUserRoleId == '2' ? '@Url.Action("GetSchoolsByUser")' : '@Url.Action("GetSchools", "Admin")';

            $.ajax({
                url: url,
                data: { districtId: selectedDistrictId, userId: currentUserId },
                dataType: 'json',
                async: false,
                success: function(schools) {
                    addDefaultOption($('#selectSchool'), "School");
                    if (selectedSchoolId != null)
                        addSelectListWithDefaultValue($('#selectSchool'), schools, selectedSchoolId);
                },
                beforeSend: function() {
                },
                complete: function() {
                }
            });
        }
    </script>
    <script>
        function AddSelectListItems(selectList, results, defaultValue) {
            if (results.length == 0) {
                return;
            }
            selectList.append($("<option></option>").attr("value", "-1").text(defaultValue));
            $.each(results, function (i, value) {
                selectList
                    .append($("<option></option>")
                        .attr("value", value.Id)
                        .text(value.Name));
            });

        }
        function loadStateForPublisher() {
            $.get('@Url.Action("GetStates", "PopulateStateDistrict")', function (states) {
                AddSelectListItems($('#selectState'), states, 'Select State');

                //set default state as selected state
                if ($('#selectState').val() != 'select') {
                    loadDistrictOfStateForPublisher();
                }
            });
        }
        function loadDistrictOfStateForPublisher() {
            if ($('#selectState').val() != 'select') {
                $.get('@Url.Action("GetDistricts", "PopulateStateDistrict")', { stateId: $('#selectState').val() }, function (districts) {
                    AddSelectListItems($('#selectDistrict'), districts, 'Select @LabelHelper.DistrictLabel');
                    if (@Model.FilterDistrictId > 0) {
                        $('#selectDistrict').val(@Model.FilterDistrictId);
                    }
                });
            }
        }
        function loadStateForNetworkAdmin() {
            $.get('@Url.Action("GetStatesForNetworkAdmin", "PopulateStateDistrict")', function (states) {
                AddSelectListItems($('#selectState'), states, 'Select State');
                //set default state as selected state
                loadDistrictOfStateForNetworkAdmin();
            });
        }

        function loadDistrictOfStateForNetworkAdmin() {
            if ($('#selectState').val() != 'select') {
                $.get('@Url.Action("GetDistrictsForNetworkAdmin", "PopulateStateDistrict")', { stateId: $('#selectState').val() }, function (districts) {
                    AddSelectListItems($('#selectDistrict'), districts, 'Select @LabelHelper.DistrictLabel');
                    if (@Model.FilterDistrictId > 0) {
                        $('#selectDistrict').val(@Model.FilterDistrictId);
                    }
                });
            }
        }
        $("#selectState").die("change");
        $('#selectState').change(function () {
            $('#selectDistrict').empty();
            if ($('#selectState').val() != 'select') {
                $('#selectDistrict').empty();
                var stateValue = $('#selectState').val();
                if (stateValue != 'select') {
                    if ('@Model.CurrentUserRoleId' == '@((int) Permissions.Publisher)') {
                        loadDistrictOfStateForPublisher();
                    }
                    if ('@Model.CurrentUserRoleId' == '@((int)Permissions.NetworkAdmin)') {
                        loadDistrictOfStateForNetworkAdmin();
                    }
                }
            }
        });
        $("#selectDistrict").die("change");
        $("#selectDistrict").change(function () {
            $('#selectSchool').empty();
            var districtId = $('#selectDistrict').val();
            if (districtId < 0 || districtId == 'select') {
                districtId = 0;
            }
            $('#FilterDistrictId').val(districtId);
            initDropdownListSchool(districtId);

            //TODO:
            loadStudenMeta(districtId);
        });
        $(function () {
            if (('@Model.FromManageStudent' == 'True' && @Model.FilterDistrictId==0) || @Model.ParentUserId > 0) {
                if ('@Model.CurrentUserRoleId' == '@((int) Permissions.Publisher)') {
                    loadStateForPublisher();
                }
                else if ('@Model.CurrentUserRoleId' == '@((int)Permissions.NetworkAdmin)') {
                    loadStateForNetworkAdmin();
                } else {
                    initDropdownListSchool('@Model.DistrictId');
                    loadStudenMeta('@Model.DistrictId');
                }

            }
            else {
                initDropdownListSchool('@Model.DistrictId');
                loadStudenMeta('@Model.DistrictId');
            }
        });


        function htmlEncode(lists) {
            if (lists)
                return  lists.map(function(list) {
                    var $div = $('<div/>');
                    list.value = $div.text(list.value).html();
                    return list;
                });
            return lists;
        }

        function htmlDecode(lists) {
            if (lists) {
                return lists.map(function (list) {
                    var $div = $('<div/>');
                    list.value = $div.html(list.value).text();
                    return list;
                });
            }
            return lists;
        }
        function htmlEncodeItem(item) {
            var $div = $('<div/>');
            return $div.text(item).html();
        }

        unescapeHtmlDropdownList($('#selectRace'));
    </script>
}
