@{
    ViewBag.Title = "THIRD PARTY ITEM BANKS";
}
<link href="@Url.Content("~/Content/themes/AssessmentItem/css/popup.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/css/vue-components/vue-modal.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    .file_upload_datafile {
        background: url(../Content/themes/AssignmentRegrader/images/upload.png) no-repeat;
        background-size: 32px 32px;
        width: 32px;
        height: 32px;
        border: 0 solid #fff;
        float: left;
        border-radius: 0;
        margin-top: 18px;
        margin-left: 35px;
        margin-top: 15px;
        cursor: pointer;
    }

        .file_upload_datafile,
        .file_upload_datafile:hover,
        .file_upload_datafile:focus {
            background: url(../Content/themes/AssignmentRegrader/images/upload_five.png) no-repeat;
            background-size: 32px 32px;
        }

    .ie9 #file_upload_datafile {
        padding-top: 0px;
    }

    .divSource {
        float: left;
    }

    .filefails-list {
        margin-top: 10px;
        max-height: 200px;
        overflow: hidden;
        overflow-y: auto;
    }

    .filefails-list-item {
        padding: 3px 0;
    }
</style>
<article class="container_12" id="upload-by-item-bank">
    <section class="grid_12" id="sectionUpload">
        <div class="block-border">
            <div class="block-content form" id="divOnTop">
                <h1> Upload Item </h1>
                <fieldset class="grey-bg">
                    <div class="columns">
                        <div class="divSource">
                            <label> Source</label>
                            <select id="selectSource"></select>
                        </div>
                        <input id="file_upload_datafile" name="file_upload_datafile" type="file" style="display: inline-block" title="QTI" />
                    </div>
                </fieldset>
            </div>
        </div>
        <div class="clear-25"></div>
        <div class="block-border">
            <div class="block-content form" id="divUploadFileList">
                <div class=" no-margin last-child">
                    <table id="uploadListDataTable" class="datatable table no-margin" width="100%">
                        <thead>
                            <tr>
                                <th scope="col">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Imported Date
                                </th>
                                <th scope="col">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    Zip File
                                </th>
                                <th scope="col">
                                    <span class="column-sort">
                                        <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                        <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                    </span>
                                    User
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </section>
    <modal-component v-bind:show.sync="isShowModalUploadProcessing" v-bind:width="400" style="display: none;">
        <div slot="header"></div>
        <div slot="body">
            <div v-if="fileFails.length > 0">
                <h4 v-html="fileText"></h4>
                <div class="filefails-list">
                    <div class="filefails-list-item" v-for="filefail in fileFails">
                        {{filefail}}
                    </div>
                </div>
            </div>
            <div v-else>
                <p>{{fileText}}</p>
            </div>
        </div>
        <div slot="footer"></div>
    </modal-component>
</article>

@section scripts {
<script type='text/javascript' src='@Url.Content("~/Scripts/jquery.dataTables.rowReordering.js")'></script>
<script type="text/javascript">
    window.Vue = Vue;

    var uploadItemBankVM = new Vue({
        el: '#upload-by-item-bank',
        data: {
            isShowModalUploadProcessing: false,
            fileText: '',
            fileFails: []
        }
    });

    $(function () {

        $.get('@Url.Action("GetQTI3pSource")', function (sources) {
            addDefaultOption($('#selectSource'), "Source");
            addSelectListItems($('#selectSource'), sources);
            LoadZipFilesToTable();
        });

        $('#selectSource').change(function () {
            $("#uploadListDataTable").dataTable().fnReloadAjax(GetAjaxSource());
        });

        function LoadZipFilesToTable() {
            var options = {
                bServerSide: true,
                bDestroy: true,
                bStateSave: false,
                sAjaxSource: GetAjaxSource(),
                fnServerParams: function (aoData) {
                    //TuanVo:encode text in filter searchbox
                    var item = null;
                    for (var i = 0; i < aoData.length; i++) {
                        item = aoData[i];
                        if (item.name == 'sSearch') {
                            do {
                                item.value = item.value.replace('""', '"');
                            } while (item.value.indexOf('""') >= 0)

                            if (item.value == '"') {
                                item.value = item.value.replace('"', "''"); // when user type " or "", or """,...in searchbox, system will issue an error, this code fix that error
                            } else {
                                item.value = encodeURIComponent(item.value);
                            }
                            break;
                        }
                    }
                },
                bAutoWidth: false,
                iDisplayLength: 10,
                aaSorting: [[0, "desc"]],
                aoColumns: [
                    { sType: 'string', sName: 'ImportedDate', bSearchable: true, bSortable: true, sWidth: "100px" },
                    { sType: 'string', sName: 'ZipFileName', bSearchable: true, bSortable: true, sWidth: "250px" },
                    { sType: 'string', sName: 'UploadUser', bSearchable: false, bSortable: true, sWidth: "165px" },
                    { sType: 'integer', sName: 'DataFileUploadLogID', bSearchable: false, bSortable: false, bVisible: false }
                ],
                fnRowCallback: function (nRow, aData) {
                    //$('td:eq(0)', nRow).html(Date.getByTicks(aData[0]));
                    $('td:eq(0)', nRow).html(displayDateWithFormat(aData[0], true));
                    $('td:eq(1)', nRow).html('<a href="javascript:void(0);" id="openQuestionList" onClick="showItemListPage(' + aData[3] + ')">' + aData[1] + '</a>');
                    $('td:eq(1)', nRow).addClass("cursor-pointer");
                    return nRow;
                },
                fnPreDrawCallback: function () {
                    ShowBlock($('#uploadListDataTable'), "Loading");
                    return true;
                },
                fnDrawCallback: function () {
                    $('#uploadListDataTable').unblock();
                    $('.with-tip').tip();
                }
            };

            $("#uploadListDataTable").data("options", options);
            $('#uploadListDataTable').dataTable();
        }

        function GetAjaxSource() {
            var qTI3pSource = $('#selectSource').val();
            if (qTI3pSource == null || qTI3pSource == 'select')
                qTI3pSource = 0;
            return '@Url.Action("GetUploadFileList")?qTI3pSourceId=' + qTI3pSource;

        }

        //Upload data
        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';
        var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
        function getFormData(auth) {
            return { 'AUTHID': auth, 'qti3pSourceId': $('#selectSource').val() };
        }
        if (window.FormData !== undefined) {
            $('#file_upload_datafile').uploadifive({
                'uploadScript': '@Url.Action("UploadDataFile")',
                'overrideEvents': ['onDialogClose'],
                'formData': { AUTHID: auth, qti3pSourceId: $('#selectSource').val() },
                'buttonText': ' ',
                'fileObjName': 'postedFile',
                'multi': false,
                'removeCompleted': true,
                'width': 32,
                'height': 32,
                'auto': true,
                'fileSizeLimit': '0',
                'fileType': ['application/x-zip-compressed', 'application/zip'],
                'buttonClass': 'file_upload_datafile',
                'fileTypeExts': '*.zip',
                'onInit': function () {
                    $("#uploadifive-file_upload_datafile-queue").hide();
                    $('#uploadifive-file_upload_datafile').click(function (e) {
                        validFile = true;
                        if ($('#selectSource').val() == 'select' && $('#selectSource').val() !== null) {
                            e.preventDefault();
                            CustomAlert("Please select Source type.");
                        }
                    });
                },
                'onUpload': function (file) {
                    $("#uploadifive-file_upload_datafile-queue").hide();
                    $('#file_upload_datafile').data('uploadifive').settings.formData = getFormData(auth);
                    $('#error-messages').hide();
                    $('#error-messages').empty();
                    if (validFile == true) {
                        ShowBlock($('#sectionUpload'), 'Uploading');
                    }

                },
                'onUploadComplete': function (file, data) {
                    $("#uploadifive-file_upload_datafile-queue").hide();
                    var result = $.parseJSON(data);
                    if (result == undefined) {
                        CustomAlert('An error has occured.  Please try again');
                    }
                    if (result.success == true) {
                        $('#error-messages').hide();
                        $('#upload-block').html('');
                        var logId = result.dataFileUploadLogId;
                        SetIntervalCheckStatus(logId);
                    }
                    else {
                        $('#sectionUpload').unblock();
                        $('#error-messages').show();
                        $('#error-messages').html('<li>' + result.message + '</li>');
                        CustomAlert(result.message, true);
                        ui.uploadListDataTable.fnReloadAjax();
                        $('#file_upload_datafile').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                    }
                },
                'onError': function (errorType, file) {
                    $("#uploadifive-file_upload_datafile-queue").hide();
                    $('#sectionUpload').unblock();
                    validFile = false;
                    if (errorType == 'FORBIDDEN_FILE_TYPE') {
                        CustomAlert('The file you are trying to upload is not a .zip file. Please try again', true);
                    } else {
                        CustomAlert('The file ' + file.name + ' returned an error and was not added to the queue.', true);
                    }
                },
                'onCancel': function (file) {
                    $('#sectionUpload').unblock();
                    $("#uploadifive-file_upload_datafile-queue").hide();
                }
            });
        }

        $('#file_upload_datafile').parent().attr('title', 'QTI');
        if (isFirefox) {
            $('#file_upload_datafile').next().attr('title', 'QTI');
        }
    });

    function checkUploadProcessingStatus(id) {
        var response_data;
        ShowBlock($('#sectionUpload'), 'Uploading');
        $.ajax({
            url: '@Url.Action("CheckStatusUploadDataFile")',
            type: 'GET',
            data: { dataFileUploadLogId: id },
            async: false,
            success: function (response) {
                response_data = response;
            }
        });
        return response_data;
    }

    function SetIntervalCheckStatus(logId) {
        var interval = setInterval(function () {
            var resultStatus = checkUploadProcessingStatus(logId);

            if (resultStatus.success == false) {
                clearInterval(interval);
                $('#sectionUpload').unblock();
                uploadItemBankVM.isShowModalUploadProcessing = true;
                uploadItemBankVM.fileText = resultStatus.message;
                uploadItemBankVM.fileFails = [];
                return;
            } else {
                if (resultStatus.processingStatus != undefined) {
                    clearInterval(interval);
                    $('#sectionUpload').unblock();
                    ui.uploadListDataTable.fnReloadAjax();

                    uploadItemBankVM.isShowModalUploadProcessing = true;

                    if (!!resultStatus.fileFails && resultStatus.fileFails.length > 0) {
                        uploadItemBankVM.fileText = resultStatus.fileSuccessCount + ' Files Imported Successfully.<br />Failed to Import ' + resultStatus.fileFails.length + ' Files:';
                        uploadItemBankVM.fileFails = resultStatus.fileFails;
                    } else {
                        uploadItemBankVM.fileText = 'Your items were successfully uploaded.';
                        uploadItemBankVM.fileFails = [];
                    }
                }
            }
        }, 5000);
    }

    function showItemListPage(dataFileUploadLogId) {
        var url = '@Url.Action("ShowQTI3pItems", "Upload3pItemBank")\?dataFileUploadLogId=' + dataFileUploadLogId;
        window.location.href = url;
    }
</script>
}
