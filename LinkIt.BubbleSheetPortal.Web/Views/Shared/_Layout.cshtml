@using LinkIt.BubbleSheetPortal.Web.Security
@using StackExchange.Profiling
@using LinkIt.BubbleSheetPortal.Web.Helpers
@using System.Configuration;
@using LinkIt.BubbleSheetPortal.Web.App_Start
@using Bundle = SquishIt.Framework.Bundle
<!DOCTYPE html>
<html lang="en">
<head>
    @{
        var strWhiteLable = string.Empty;
        var vS3URL = HelperExtensions.GetS3CSSURL();
        var districtId = 0;
        if (Request.IsAuthenticated)
        {
            districtId = HelperExtensions.GetDistrictIdBySubdomain();
        }
        if (!string.IsNullOrEmpty(vS3URL))
        {
            strWhiteLable = string.Format("{0}{1}.css", vS3URL, HelperExtensions.LoginDistrict);
        }

        var isShowIconInfo = HelperExtensions.IsShowIconHelpTextInfo(districtId);

        var currentUser = HttpContext.Current.GetCurrentUser();
        var menuAccess = HelperExtensions.GetMenuForDistrict(currentUser);
    }
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    @RenderSection("meta", required: false)
    @if (IsSectionDefined("jQuery"))
    {
        @BundleHelper.NewStyleSharedBundle()
    }
    else
    {
        @BundleHelper.StyleSharedBundle()
    }
    @RenderSection("stylesheet", required: false)
    <title>@ViewBag.Title</title>
    <link href='@strWhiteLable' rel="stylesheet" />
    @Html.Partial("_Favicons")
    @if (IsSectionDefined("jQuery"))
    {
        @RenderSection("jQuery")
    }
    else
    {
        @BundleHelper.jQuery()
    }
    @BundleHelper.ScriptSharedTopBundle()
    @BundleHelper.ScriptLKSearchWidgetBundle()
    <script src='https://www.google.com/recaptcha/api.js'></script>
    <script src="@Url.Content("~/Scripts/jquery.cookie.js")"></script>
    <script src="@Url.Content("~/Scripts/marquee.js")"></script>
    @{
        var script = HelperExtensions.GetGoogleAnalyticsTrackingScript();
        if (script.Contains("<script"))
        {
            @Html.Raw(script);
        }
        else
        {
            <script type="text/javascript">

                @Html.Raw(script)
            </script>
        }
    }
    <script type="text/javascript">
        var _CURRENT_PAGE_NAME = "";
        var IS_V2 = false;
        var CKE_VERSION = "@BundleHelper.Version("/Content/themes/TestMaker")";
    </script>
    @if (Request.IsAuthenticated)
    {
        var url = ((UserPrincipal)User).WalkmeSnippetURL;
        var userRole = ((UserPrincipal)User).RoleId;
        if (url != string.Empty)
        {
            <script type="text/javascript">
                (function () {
                    var walkme = document.createElement('script');
                    walkme.type = 'text/javascript'; walkme.async = true;
                    walkme.src = '@url'; var s = document.getElementsByTagName('script')[0];
                    s.parentNode.insertBefore(walkme, s);
                    window._walkmeConfig = { smartLoad: true, linkitUserRole: '@userRole' };
                })();
            </script>
        }
    }
    <style>


        .margin-bottom-dropdown {
            margin-bottom: 1.667em;
        }

            .margin-bottom-dropdown:after {
                content: '';
                float: none;
                clear: both;
                display: table;
            }

        .ui-dialog div.ui-dialog-content {
            overflow: visible;
        }
    </style>
</head>
<body class="smaller">
    <header>
        <div class="container_12">
            <div class="logo">
            </div>
            <div class="clear">
            </div>
        </div>
    </header>
    @Html.Partial("MainNavigation")
    <div id="sub-nav">
    </div>
    <script type="text/javascript">
    function googleTagTracking() {
        const path = window.location.pathname;
        const queryString = window.location.search;
        const eventName = `${path.replace(/^\/|\/+/g, (match, offset) => offset === 0 ? '' : '_')}_PageVisit`;
        const areaMatch = $('title').text().match(/\[(.*?)\]/);
        const areaName = areaMatch ? areaMatch[1] : '';
        var data = {
            page_title: $('title').text(),
            page_path: path,
            category: areaName,
            query_string: queryString,
            user_id: @(currentUser != null ? currentUser.Id : 0)
        };

        gtag('event', eventName, data);
        console.log(data);
    }
    googleTagTracking();
    </script>
    <!-- Status bar -->
    <div id="status-bar">
        <div class="container_12">
            <ul id="status-infos">
                @if (Request.IsAuthenticated)
                {
                    <li class="spaced">
                        @if (isShowIconInfo)
                        {
                            <span class="icon icon-info icon-24 js-info-action" title="More Information"></span>
                        }

                        @if (menuAccess.IsDisplaySettingItem)
                        {
                            <text>
                                Welcome <a href="@Url.Action("Settings", "Account")"><strong>@(((UserPrincipal)User).WelcomeMessage)</strong></a>
                            </text>
                        }
                        else
                        {
                            <text>
                                Welcome <strong>@(((UserPrincipal)User).WelcomeMessage)</strong>
                            </text>
                        }
                        @if (((UserPrincipal)User).OriginalID > 0 && (((UserPrincipal)User).OriginalRoleId == 5 || ((UserPrincipal)User).OriginalRoleId == 27))
                        {
                            <text>
                                <a href="javascript:void(0)"><img id="imgGoBack" onclick="showGoBack()" src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/navigation-000-white.png")" style="margin-left: 5px; margin-top: 5px;" /></a>

                                <a id="linkGoBack" style="display: none;" onclick="goBackToOriginalUser()">
                                    <span>Go back to @(((UserPrincipal)User).OriginalUsername)</span>
                                </a>
                            </text>
                        }
                        else
                        {
                            //Allow network admin to move between the district (when he's not in impersonation mode)
                            if (((UserPrincipal)User).IsNetworkAdmin)
                            {
                                if (((UserPrincipal)User).GetMemberListDistrictId().Count >= 2)
                                {
                                    <text>
                                        <a href="javascript:void(0)"><img id="imgNetworkAdminSelect" onclick="showNetworkAdminSelect()" src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/navigation-000-white.png")" style="margin-left: 5px; margin-top: 5px;" /></a>
                                        <div id="divNetworkAdminSelectLayout" style="width: 296px; height: 0px">
                                        </div>
                                    </text>
                                }
                            }
                        }
                    </li>
                    if (!HelperExtensions.DisableNotificationFeature)
                    {
                        <li>
                            <div id="notification" class="notification">
                                <a href="#" class="button notification-action" v-on:click.prevent="toggleDropdown">
                                    <span class="icon icon-notification-small"></span>
                                    <span class="notification-unread" v-bind:class="{ 'open': countUnread > 0 }" v-text="countUnread"></span>
                                </a>
                                <div class="notification-dropdown" v-bind:class="{ 'open': isShowDropdown }">
                                    <div class="notification-title">
                                        <h3>Notifications</h3>
                                    </div>
                                    <div class="notification-content" v-infinite-scroll="loadMoreListNotification()" infinite-scroll-disabled="isBusy" infinite-scroll-distance="15">
                                        <div class="notification-item" v-for="item in listNotification" v-bind:class="{ 'is-unread': item.IsUnread }" v-on:mouseover="mouseoverNotification(item)">
                                            <div class="notification-item-icon">
                                                <span class="icon icon-notification-large"></span>
                                            </div>
                                            <div class="notification-item-content" v-html="item.HtmlContent"></div>
                                        </div>
                                        <div class="notification-loading" v-show="isShowLoading">
                                            <span class="notification-spinner">
                                                <span class="notification-spinner"></span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }

                    <li>
                        <a id="btnLogout" href="#" class="button red" title="Logout">
                            <span class="smaller">LOGOUT</span>
                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <a href="@Url.Action("LogOn", "Account")" class="button red" title="Logout">
                            <span class="smaller">LOGIN</span>
                        </a>
                    </li>
                }
            </ul>


            @Html.Partial("_ModalKeepAlive")
        </div>
    </div>
    <!-- End status bar -->
    <div id="header-shadow">
    </div>
    <!-- End header -->
    @RenderBody()
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">
        google.load('visualization', '1', { 'packages': ['corechart'] });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            checkValidBrowser();

              var activeTag = $("#main-nav li a[href='@Request.Url.LocalPath']")[0];
              var activeArea = undefined;
              if (activeTag) {
                activeArea = $(activeTag).parent();
              }
              else {
                  activeArea = $("#main-nav > ul > li")[0];
              }
              $(activeArea).addClass("current");
              $(activeArea).parent().parent().addClass("current");

            $('#btnLogout').click(function () {
                localStorage.removeItem("UserGroupFilter");

                var url = '@Url.Action("LogOff", "Account")';
                window.location.href = url;
            });
        });
    </script>

    @BundleHelper.ScriptSharedBundle()

    @RenderSection("scripts", required: false)

    @MiniProfiler.RenderIncludes()
    <div id="custom-footer" style="width: 946px;margin: 0 auto; clear: both;">
        <img src="../../Content/images/loog-linkit-16x16.png" style="position: relative; top: 5px;" />
        <span style="font-size: 11px;">Copyright &copy; @DateTime.Now.ToString("yyyy") | Powered by LinkIt!</span>
        <input type="hidden" id="hdHelpTextInfo" />
    </div>
    <link rel="stylesheet" href="/Content/css/vue-components/vue-modal.css">

    <script src="/Scripts/TestMaker/Utils.js"></script>
    <script type="text/javascript" language="javascript">

        function showFooter() {
            $('section:visible:last').addClass('lastVisibleSection');
            $('#custom-footer').appendTo('#flashContentContainer');
        }

        $(document).ready(function () {
            $.ajaxSetup({ cache: false });
            showFooter();
            @if(((UserPrincipal)User).OriginalID > 0)
            {
                <text>
            //$('#linkGoBack').show();//test only
            </text>
            }
        });

        function showGoBack() {
            $('#linkGoBack').show();
            var top = $('#imgGoBack').offset().top;
            var left = $('#imgGoBack').offset().left;
            $('#linkGoBack').offset({ top: top + 22, left: left + 2 });

        }

        function goBackToOriginalUser() {
            ShowBlock($('body'), 'Going back to @(((UserPrincipal)User).OriginalUsername)');
            $.ajax({
                url: '@Url.Action("GoBackToOriginalUser","Admin")',
                type: 'POST',
                contentType: 'application/json',
                success: function (response) {
                    if (response.Success == true) {
                        location.href = response.RedirectUrl;
                    } else {
                        $('body').unblock();
                    }
                }
            });
        }
        function showNetworkAdminSelect() {
            $('#divNetworkAdminSelectLayout').show();

            var url = '@Url.Action("ShowNetworkAdminSelectLayout","Account")';
            $.ajax({
                url: url,
                cache: false
            })
                .done(function (html) {
                    $('#divNetworkAdminSelectLayout').html(html);
                });
            var top = $('#imgNetworkAdminSelect').offset().top;
            var left = $('#imgNetworkAdminSelect').offset().left - 200;
            $('#divNetworkAdminSelectLayout').offset({ top: top + 33, left: left + 2 });
            $('#divNetworkAdminSelectLayout').css('border', '2px solid #999');
            $('#divNetworkAdminSelectLayout').css('height', 'auto');

        }
    </script>
    <!-- If Tag dropdown is open, click outside of this control will close the tag dropdown -->
    <script type="text/javascript">
        $(function () {
            if ('@isShowIconInfo' == 'True') {
                getHelpTextInfo();
            }
        });
        $('body').click(function () {
            $('#linkGoBack').hide();
            $('#divNetworkAdminSelectLayout').hide();

        });
        $('#imgGoBack').click(function (event) {
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else if (window.event) {
                window.event.cancelBubble = true;
            }
        });
        $('#linkGoBack').click(function (event) {
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else if (window.event) {
                window.event.cancelBubble = true;
            }
        });
        $('#imgNetworkAdminSelect').click(function (event) {
            if (notificationVM) {
                notificationVM.removeIsUnreadNotification();
            }

            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else if (window.event) {
                window.event.cancelBubble = true;
            }
        });
        $('#divNetworkAdminSelectLayout').click(function (event) {
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else if (window.event) {
                window.event.cancelBubble = true;
            }
        });

        $('.js-info-action').on('click', function (event) {
            var html = $('#hdHelpTextInfo').val();
            popupAlertInfoMessage(html, 'ui-popup-info', 500, 500);

            if (isSafari) {
                // Add scrollbar for safari on popup information
                $('.ui-popup-info').find('.popup-info-content').addClass('scrollbar-safari');
            }
        });
        function getHelpTextInfo() {
            var url = '@Url.Action("GetHelpTextModule", "Help")';
            var subTabCurrent = $('.menu-item ul li.current a');

            var displayName = '';
            if (subTabCurrent != null && subTabCurrent.length > 0) {
                displayName = subTabCurrent.text();
            } else {
                var tabCurrent = $('#main-nav ul li.current a');
                if (tabCurrent != null && tabCurrent.length > 0) {
                    displayName = tabCurrent.text();
                }
            }
            if (displayName == '') {
                return;
            }

            $.ajax({
                url: url,
                cache: false,
                data: { displayName: displayName.trim() }
            }).done(function (html) {
                $('#hdHelpTextInfo').val(html);
                if (html != '') {
                    $('.js-info-action').show().css('display', 'inline-block');
                } else {
                    $('.js-info-action').hide();
                }
            });
        }

        function isSafari() {
            var browserUserAgent = navigator.userAgent.toString().toLowerCase();

            return browserUserAgent.indexOf('safari') != -1 && browserUserAgent.indexOf('chrome') == -1;
        }

        function popupAlertInfoMessage(content, contentClass, w, h) {
            var now = new Date().getTime();
            var contentHtml = '';
            var $div = $('<div />');

            w = w !== undefined ? w : 400;
            h = h !== undefined ? h : 100;

            contentHtml += '<div class="popup-info">';
            contentHtml += '<div class="popup-info-content">';
            contentHtml += content;
            contentHtml += '</div>';
            contentHtml += '</div>';

            $div.html(contentHtml)
                .attr('id', 'popup-info-' + now)
                .appendTo('body')
                .dialog({
                    modal: true,
                    width: w,
                    maxHeight: h,
                    resizable: false,
                    dialogClass: contentClass,
                    close: function () {
                        $(document).find('#popup-info-' + now).dialog('destroy').remove();
                    }
                });
        };

    </script>
    <script type="text/javascript">
        var notification = {
            getUnreadNotification: function () {
                return $.ajax({
                    type: 'POST',
                    url: '@Url.Action("LoadUnreadMessage","NotificationMessage")'
                });
            },
            getListNotification: function (currentIndex) {
                return $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetNotification", "NotificationMessage")',
                    data: {
                        'currentIndex': currentIndex
                    }
                });
            }
        };

        var notificationVM = new Vue({
            el: '#notification',
            data: {
                isShowLoading: false,
                isShowDropdown: false,
                isBusy: false,
                isLoadMore: true,
                countUnread: 0,
                countIndex: 0,
                listNotification: [],
                remainUnread: 0
            },
            ready: function () {
                var self = this;

                notification.getUnreadNotification().done(function (data) {
                    self.countUnread = data;
                    self.remainUnread = data;
                });
            },
            computed: {
                isAllowScroll: function () {
                    return this.isShowDropdown;
                }
            },
            methods: {
                toggleDropdown: function () {
                    var self = this;

                    self.isShowDropdown = !self.isShowDropdown;
                    self.countUnread = 0;

                    // Remove unread notification when close dropdown
                    if (!self.isShowDropdown) {
                        self.removeIsUnreadNotification();
                    }

                    // Get list notification message
                    if (self.isShowDropdown && !self.listNotification.length) {
                        self.isShowLoading = true;

                        notification.getListNotification(self.countIndex).done(function (data) {
                            self.updateIsUnreadNotification(self.remainUnread, data);
                            self.countIndex = self.countIndex + data.length;
                            self.isShowLoading = false;
                            self.listNotification = data;
                        });
                    }
                },
                loadMoreListNotification: function () {
                    var self = this;

                    // Load more list notification when scrolling
                    if (self.isLoadMore && self.isAllowScroll) {
                        self.isBusy = true;
                        self.isShowLoading = true;

                        setTimeout(function () {
                            notification.getListNotification(self.countIndex).done(function (data) {
                                self.isBusy = false;
                                self.isShowLoading = false;

                                if (data.length) {
                                    self.updateIsUnreadNotification(self.remainUnread, data);
                                    self.countIndex = self.countIndex + data.length;
                                    self.listNotification = self.listNotification.concat(data);
                                } else {
                                    self.isLoadMore = false;
                                }
                            });
                        }, 1000);
                    }
                },
                updateIsUnreadNotification: function (remainUnread, data) {
                    var self = this;

                    if (remainUnread > 0) {
                        var i = 0;
                        var lenData = data.length;

                        if (remainUnread > data.length) {
                            for (i = 0; i < lenData; i++) {
                                data[i].IsUnread = true;
                            }

                            self.remainUnread = remainUnread - lenData;
                        } else {
                            for (i = 0; i < remainUnread; i++) {
                                data[i].IsUnread = true;
                            }

                            self.remainUnread = 0;
                        }
                    }
                },
                removeIsUnreadNotification: function () {
                    var self = this;
                    self.isShowDropdown = false;

                    if (self.listNotification.length) {
                        self.remainUnread = 0;

                        for (var i = 0, len = self.listNotification.length; i < len; i++) {
                            self.listNotification[i].IsUnread = false;
                        }
                    }
                },
                mouseoverNotification: function (item) {
                    item.IsUnread = false;
                }
            }
        });
    </script>
    <style type="text/css">
        #linkGoBack {
            border: 2px solid #999;
            text-align: left;
            position: absolute;
            background: #3399cc;
            cursor: pointer;
            line-height: 11px;
            padding: 5px;
            min-width: 200px;
            max-width: 260px;
            word-wrap: break-word;
            color: #fff;
        }

            #linkGoBack:hover span {
                color: #000;
            }

        #divNetworkAdminSelectLayout {
            position: absolute;
            background: #ebeced;
        }
    </style>

    @if ((((UserPrincipal)User).IsPublisher) && ConfigurationManager.AppSettings["EnableMiniProfiler"] == "1")
    {
        <text>
            <script type="text/javascript">
                var $document = $(document);
                var profilerButton = document.createElement('div');
                profilerButton.className = 'profiler-button';
                profilerButton.textContent = 'Collapse -';

                var profilerCollapse = document.createElement('div');
                profilerCollapse.className = 'profiler-actions';
                profilerCollapse.appendChild(profilerButton);
                profilerCollapse.style.position = 'fixed';
                profilerCollapse.style.top = '0';
                profilerCollapse.style.left = '0';
                profilerCollapse.style.zIndex = 9999999999;
                profilerCollapse.style.borderBottom = '1px solid #888';
                profilerCollapse.style.backgroundColor = '#fff';
                profilerCollapse.style.padding = '4px 7px';
                profilerCollapse.style.cursor = 'pointer';
                profilerCollapse.style.borderRight = '1px solid #888';
                profilerCollapse.style.width = '90px';
                profilerCollapse.style.boxSizing = 'border-box';
                profilerCollapse.style.webkitBoxSizing = 'border-box';
                profilerCollapse.style.textAlign = 'center';

                document.body.appendChild(profilerCollapse);

                profilerButton.addEventListener('click', function (event) {
                    var target = event.target;
                    var $profiler = $document.find('.profiler-result');

                    if (target.classList.contains('is-active')) {
                        target.classList.remove('is-active');
                        target.textContent = 'Collapse -';
                        $profiler.show();
                    } else {
                        target.classList.add('is-active');
                        target.textContent = 'Expand +';
                        $profiler.hide();
                    }
                }, false)
            </script>
        </text>
    }
</body>
</html>
