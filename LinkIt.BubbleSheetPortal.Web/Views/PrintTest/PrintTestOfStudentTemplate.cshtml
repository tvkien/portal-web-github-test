@using System.Configuration;

@model LinkIt.BubbleSheetPortal.Web.Models.PrintTestOfStudent.TOSVirtualTest
@{
    Layout = null;
    var url = ConfigurationManager.AppSettings["LinkItUrl"];
    var portalUrl = (url.Contains("devblock.net") ? "http://demo." : "http://portal.") + url;
    var portalImgPrint = portalUrl + "/Content/themes/Print/Images/";
    var portalFontPrint= portalUrl + "/Content/themes/Print/";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style type="text/css">
         .jsPassage .passage img.draw-data{
		position:absolute;
		left:0
	    }

        .passage {
	position:relative
}

        @foreach (var css in Model.Css)
        {
            @Html.Raw(css)
        }
    </style>
    <style>
         @@font-face {
            font-family: "dejavu_sansbook";
            src: url("@(portalFontPrint)dejavusans/dejavusans-webfont.eot");
            src: url("@(portalFontPrint)dejavusans/dejavusans-webfont.eot?#iefix") format("embedded-opentype"),
                url("@(portalFontPrint)dejavusans/dejavusans-webfont.woff") format("woff"),
                url("@(portalFontPrint)dejavusans/dejavusans-webfont.ttf") format("truetype"),
                url("@(portalFontPrint)dejavusans/dejavusans-webfont.svg#dejavu_sansbook") format("svg");
            font-weight: normal;
            font-style: normal;
        }
        @@font-face {
			font-family: "dejavu_sansbook";
			src: prince-lookup("dejavu_sansbook")
		}
		@@font-face {
			font-family: serif;
			src: prince-lookup("dejavu_sansbook")
		}
		@@font-face {
			font-family: 'Arial Unicode MS';
			src: url('@(portalFontPrint)ArialUnicodeMS/ArialUnicodeMS.eot');
			src: url('@(portalFontPrint)ArialUnicodeMS/ArialUnicodeMS.eot?#iefix') format('embedded-opentype'),
				url('@(portalFontPrint)ArialUnicodeMS/ArialUnicodeMS.woff2') format('woff2'),
				url('@(portalFontPrint)ArialUnicodeMS/ArialUnicodeMS.woff') format('woff'),
				url('@(portalFontPrint)ArialUnicodeMS/ArialUnicodeMS.eot') format('truetype');
			font-weight: normal;
			font-style: normal;
			font-display: swap;
		}

		@@font-face {
			font-family: "Arial Unicode MS";
			src: prince-lookup("Arial Unicode MS")
		}
        @@page {
            size: US-Letter;
            margin: .8in .8in .8in .8in;

            @@top-left {
                content: string(studentName);
            }

            @@top-right {
                content: string(studentCore);
            }
            @if (Model.UserDistrictId == LinkIt.BubbleSheetPortal.Web.Helpers.Util.CHYTEN_DistrictID)
            {
                <text>
                    @@bottom-left {
                        content: "Chyten Test - " string(testTitle);
                    }
                </text>
            }
            else
            {
                <text>
                    @@bottom-left {
                        content: "LinkIt Test - " string(testTitle);
                    }
                </text>
            }
        }

        @@page test-info {
            @Html.Raw("@bottom-right {content: \"Page \" counter(page)  \" of \" counter(pages);font-style: italic;}")
        }

        @@page test-section {
            @Html.Raw("@bottom-right {content: \"Page \" counter(page)  \" of \" counter(pages);font-style: italic;}")
        }

        .TableHotspot-item--checkbox {
            background: url(@(portalImgPrint)icon-table-checkbox.png) no-repeat;
        }

        .TableHotspot-item--checkbox.is-checked {
            background: url(@(portalImgPrint)icon-table-checkbox-checked.png) no-repeat;
        }

        .TableHotspot-item--circle {
            background: url(@(portalImgPrint)icon-table-circle.png) no-repeat;
        }

        .TableHotspot-item--circle.is-checked {
            background: url(@(portalImgPrint)icon-table-circle-checked.png) no-repeat;
        }

        .questions {
            columns: @Model.NumberOfColumn;
            -webkit-columns: @Model.NumberOfColumn;
            width: 620px;
        }

        .hotspot-item-type[typehotspot="circle"].checked:before {
            @Html.Raw(@Model.NumberOfColumn == 2 ? "top: 7px;" : "")
        }

        .hotspot-item-type[typehotspot="circle"].checked .hotspot-item-value:before,
        .hotspot-item-type[typehotspot="circle"].checked .hotspot-item-value:after {
            @Html.Raw(@Model.NumberOfColumn == 2 ? "height: 1px;" : "")
            @Html.Raw(@Model.NumberOfColumn == 2 ? "" : "margin-top: -2px")
        }
    </style>
    <script type="text/javascript">

        @foreach (var javaScript in Model.JavaScripts)
        {
            @Html.Raw(javaScript)
        }

    </script>
</head>
<body>
    <div class="test">
        @if (Model.TheCoverPage)
        {
            <div class="testInfo">
                <div class="testTitle jsTestName"></div>
                <div class="studentName jsStudentName"></div>
                @if (Model.ExcludeTestScore)
                {
                    if (Model.Percent.HasValue)
                    {
                        <div>
                            <p class="studentCore">Total Test Score: @Html.Raw(Model.TotalPointsEarned.GetValueOrDefault().ToString()) / @Html.Raw(Model.TotalPointsPossible.GetValueOrDefault().ToString())  ( @Html.Raw(Model.Percent.GetValueOrDefault().ToString("##.##"))% )</p>
                        </div>
                    }
                    else
                    {
                        <div>
                            <p class="studentCore">Total Test Score: 0 / @Html.Raw(Model.TotalPointsPossible.GetValueOrDefault().ToString())  ( 0% )</p>
                        </div>
                    }
                }
                @if (Model.TeacherFeedback && Model.TestFeedback.Length > 0)
                {
                    <div class="Teacher-feeback">
                        <strong>Teacher Feedback:</strong>
                        <blockquote>
                            <p class="jsTeacherFeedback">@Html.Raw(Model.TestFeedback)</p>
                        </blockquote>
                    </div>
                }
            </div>
        } else {
            <div class="is-hidden">
                <div class="testTitle jsTestName"></div>
                <div class="studentName jsStudentName"></div>
                @if (Model.ExcludeTestScore)
                {
                    if (Model.Percent.HasValue)
                    {
                        <div>
                            <p class="studentCore">Total Test Score: @Html.Raw(Model.TotalPointsEarned.GetValueOrDefault().ToString()) / @Html.Raw(Model.TotalPointsPossible.GetValueOrDefault().ToString())  ( @Html.Raw(Model.Percent.GetValueOrDefault().ToString("##.##"))% )</p>
                        </div>
                    }
                    else
                    {
                        <div>
                            <p class="studentCore">Total Test Score: 0 / @Html.Raw(Model.TotalPointsPossible.GetValueOrDefault().ToString())  ( 0% )</p>
                        </div>
                    }
                }
            </div>
        }

        @if (Model.VirtualSections.Select(x => x.Questions).Count() == 0)
        {
            <text>
                <div class="testSections is-hidden">
            </text>
        }
        else
        {
            <text>
                <div class="testSections">
            </text>
        }

        @if (Model.VirtualSections != null)
        {
            var questionsAdded = false;
            var teacherFeedbackAddes = false;
            foreach (var section in Model.VirtualSections)
            {
                <div class="section">
                    @if (!teacherFeedbackAddes && !Model.TheCoverPage &&
                             Model.TeacherFeedback && Model.TestFeedback.Length > 0)
                    {
                        teacherFeedbackAddes = true;
                        <div class="Teacher-feeback is-cover-page">
                            <strong>Teacher Feedback:</strong>
                            <blockquote>
                                <p class="jsTeacherFeedback">@Html.Raw(Model.TestFeedback)</p>
                            </blockquote>
                        </div>
                    }
                    @if (section.VirtualSectionID > 0 && section.SectionTitle != "X")
                    {
                        <div class="@(Model.TheCoverPage ? "sectionData" : "sectionData is-cover-page")">
                            <div class="sectionTitle">@Html.Raw(section.SectionTitle)</div>
                        </div>
                    }
                    @if (section.Questions != null)
                    {
                        <div class="questions">
                            @foreach (var question in section.Questions)
                            {
                                var hasPassage = question.PassageTexts != null && question.PassageTexts.Count > 0;
                                if (hasPassage && Model.Passages)
                                {
                                    @Html.Raw("</div>")
                                    @Html.Raw(questionsAdded ? "" : "<div class=\"questionsNotYetAdded\">")
                                    @Html.Raw("<div class='jsPassage' passageofquestionid='" + question.VirtualQuestionID + "'> </div>")
                                    @Html.Raw(questionsAdded ? "" : "</div>")
                                    @Html.Raw("<div class=\"questions\">")
                                }
                                questionsAdded = true;
                                <div class="@(Model.ShowBorderAroundQuestions ? "assessmentItem" : "assessmentItem is-no-border")" virtualquestionid="@question.VirtualQuestionID">
                                    @if (Model.ShowQuestionPrefix)
                                    {
                                        <div class="assessmentItemBefore">Question @(question.QuestionOrder + ".")</div>
                                    }

                                    <div class="jsResponseRubric"></div>
                                    <div class="jsQuestionContent"></div>
                                        @if (Model.ExcludeTestScore)
                                        {
                                        <div class="jsScore">Score: <span class="jsPointsEarned"></span>/<span class="jsPointsPossible"></span></div>
                                        }
                                    <div style="height: 10px;"></div>
                                    @if (Model.TeacherFeedback)
                                    {
                                        <div class="jsFeedbackVisible">
                                            <strong>Teacher Feedback:</strong>
                                            <blockquote>
                                                <p class="jsFeedback"></p>
                                            </blockquote>
                                        </div>
                                    }
                                    @if (Model.GuidanceAndRationale)
                                    {
                                        <div class="jsGuidanceVisible">
                                            <strong>Guidance:</strong>
                                            <blockquote>
                                                <div class="guidance-printTOS">

                                                </div>
                                            </blockquote>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>

    <script type="text/javascript">
        var jsonSections = @Html.Raw(Json.Encode(Model.VirtualSections));
        var jsonAnswers = @Html.Raw(Json.Encode(Model.Answers));
    </script>
    <script type="text/javascript">
        var viewModel;
        $(document).ready(function () {
            var mappedSections = [];
            if (jsonSections != null) {
                mappedSections = $.map(jsonSections, function (item) {
                    return new Section(item);
                });
            }

            var mappedAnswers = [];
            if (jsonAnswers != null) {
                mappedAnswers = $.map(jsonAnswers, function (item) {
                    return new Answer(item);
                });
            }

            viewModel = new TestOfStudentViewModel(mappedSections, mappedAnswers);
            viewModel.MapPath = '@portalUrl';
            viewModel.PortalImgPrint = '@portalImgPrint';
            viewModel.TestName = '@Model.TestName';
            viewModel.StudentName = '@Model.StudentName';
            viewModel.ImgPassageWidth = '620';
            viewModel.WidthPrintByColumn = @Model.NumberOfColumn == 1 ? 578 : 260;

            viewModel.TheCorrectAnswer = '@Model.TheCorrectAnswer' == 'True';
            viewModel.GuidanceAndRationale = '@Model.GuidanceAndRationale' == 'True';
            viewModel.TheQuestionContent = '@Model.TheQuestionContent' == 'True';

            viewModel.Innit();
        });
    </script>

</body>

</html>
