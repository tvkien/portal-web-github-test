@using LinkIt.BubbleSheetPortal.Web.Helpers
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.Reporting, "Select Files Upload");
}
<link href="/Content/css/custom.css" rel="stylesheet" />
<link rel="stylesheet" href="/Scripts/Qtip/jquery.qtip.css">
<script src="@Url.Content("~/Scripts/Qtip/jquery.qtip.js")"></script>
<script src="@Url.Content("~/Scripts/TagIt/js/tag-it.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/TagIt/css/jquery.tagit.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Scripts/TagIt/css/tagit.ui-zendesk.css")" rel="stylesheet" type="text/css" />

<style>
    .btn-pop-up {
        height: 2.5rem;
        cursor: pointer;
        border: 2px solid var(--blue3) !important;
        text-align: center;
        font-size: 12px;
        margin-left: 16px;
        padding: 8px 12px;
        margin-bottom: 0 !important;
    }

    #file-upload-table #table-wrap {
        width: 100%;
        overflow: auto;
        max-height: 100%;
    }

    .block-content #file-upload-table {
        height: calc(100% - 111px);
    }

    .btn-pop-up:hover {
        background-color: var(--blue3) !important;
    }

    .btn-pop-up span {
        align-items: center;
        display: flex;
        justify-content: center;
        height: 100%;
        font-weight: 700;
    }

    #table-wrap table thead th {
        background: none;
        background-color: #F4FAFF;
        color: #000000;
        font-weight: bold;
        text-shadow: none;
        border: 1px solid #dfdddd8a !important;
        padding: 8px 12px 8px 12px !important;
        position: sticky !important;
        z-index: 2;
        top: 0;
    }

    .u-text-right {
        background-color: var(--navyColor);
        justify-content: space-around;
        display: flex;
        align-items: center;
        padding: 20px;
    }

    .btn-action {
        margin-right: 10px;
    }

    .tagit-new input.ui-widget-content.ui-autocomplete-input {
        border: none !important;
    }

    .tagit .tagit-dropdown {
        margin-top: 16px !important;
        width: 10px !important;
        height: 10px !important;
        background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m2 5 6 6 6-6'/%3e%3c/svg%3e") !important;
    }

    .tagit-label {
        padding-right: 5px;
    }

    .tagit-choice-editable {
        padding: 4px 8px !important;
        background: var(--blue3) !important;
        border-radius: 2px !important;
    }

    #confirmCloseDialog {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 50% !important;
    }

    #btn-cancel {
        color: white !important;
        font-weight: 700;
        cursor: pointer;
    }

    .btn-submit {
        background-color: var(--red) !important;
        color: white !important;
        border: none !important;
        width: 5.6rem;
        height: 2.5rem;
    }

        .btn-submit:hover {
            background-color: var(--redHover) !important;
        }

    #file-upload-table .invalid-row {
        color: var(--orangered);
    }

    #file-upload-table .valid-row {
        color: var(--forestgreen);
    }

    #file-upload-table .disabled {
        background-color: #bfbfbf !important;
        box-shadow: none !important;
        cursor: auto !important;
    }

    .bg-error {
        background-color: orange !important;
    }

    #top-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 15px;
    }

    .ui-resizable.block-border .ui-dialog-titlebar {
        z-index: 2;
        position: relative;
    }

    .ui-resizable.block-border .ui-dialog-titlebar-close {
        display: none
    }

    #listFileUploadDialog {
        top: 18px;
        position: relative;
        min-height: 480px !important;
        box-sizing: border-box;
        padding: 10px 0 0;
    }

    #selectFilters {
        height: 100%;
    }

    #table-wrap table {
        position: relative;
        width: 100%;
        border-collapse: separate;
    }

        #table-wrap table thead .freeze-column:first-child,
        #table-wrap table thead .freeze-column:nth-child(2),
        #table-wrap table thead .freeze-column.file-path-column,
        #table-wrap table thead .freeze-column.file-name-column {
            z-index: 3;
        }

        #table-wrap table .freeze-column:first-child {
            left: 0;
            min-width: 34px;
            text-align: center !important;
            padding: 0 !important;
            box-sizing: border-box;
        }

        #table-wrap table .freeze-column:nth-child(2) {
            left: 34px;
            min-width: 40px;
            text-align: center !important;
            box-sizing: border-box;
        }

        #table-wrap table .freeze-column.file-path-column {
            left: 74px;
        }

        #table-wrap table .freeze-column.file-name-column {
            left: 224px;
        }

        #table-wrap table tbody .freeze-column {
            position: sticky;
            z-index: 1;
        }

        #table-wrap table .freeze-column.file-path-column {
            min-width: 150px;
            box-sizing: border-box;
        }

        #table-wrap table .freeze-column.file-name-column {
            min-width: 300px;
            box-sizing: border-box;
        }

        #table-wrap table tbody td {
            background-color: white !important;
        }

    #file-upload-table #table-wrap table td p {
        font-size: 16px !important;
    }

    #table-wrap table .freeze-column.file-path-column {
        min-width: 150px;
    }

    #table-wrap table .freeze-column.file-name-column {
        min-width: 300px;
    }

    #portal-v2-containter .form select {
        width: 250px !important;
    }

    #CustomAlertDialog .confirm-btn {
        background-color: var(--navyColor);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px !important;
    }

        #CustomAlertDialog .confirm-btn .btn-yes:hover {
            background-color: var(--redHover) !important;
        }

        #CustomAlertDialog .confirm-btn .btn-yes {
            background-color: var(--red) !important;
            color: white !important;
            border: none !important;
            width: 5.6rem;
            height: 2.5rem;
        }

    #CustomAlertDialog .block-content {
        padding: 0 !important;
    }

    #CustomAlertDialog .confirm-content {
        padding: 24px;
        font-weight: 700;
        text-align: center !important;
    }

    #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-group-btn {
        background-color: var(--navyColor);
        display: flex;
        align-items: center;
        justify-content: space-around;
        padding: 20px !important;
    }

        #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-group-btn .btn-yes:hover {
            background-color: var(--redHover) !important;
        }

        #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-group-btn .btn-yes {
            background-color: var(--red) !important;
            color: white !important;
            border: none !important;
            width: 5.6rem;
            height: 2.5rem;
            margin-left: 0 !important;
        }

    #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .block-content {
        padding: 0 !important;
    }

    #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-content {
        padding: 24px;
    }

    #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-group-btn .btn-no {
        color: white !important;
        font-weight: 700;
        cursor: pointer;
        border: none !important;
        margin-left: 0 !important;
    }

    .tagit-autocomplete {
        z-index: 9999 !important;
    }

    .tagit-choice-editable {
        border: 1px solid #CAD8F3 !important;
        background-color: #DEE7F8 !important;
        padding: .2em 18px .2em .5em !important;
    }

    #table-wrap thead .sorting_asc span:after {
        content: '\f106';
        height: 100%;
        position: absolute;
        top: 30%;
        right: 6%;
        font-family: "Font Awesome 6 Free";
        font-weight: 900;
        color: var(--navyColor)
    }

    #table-wrap thead .sorting_desc span:after {
        content: '\f107';
        height: 100%;
        position: absolute;
        top: 30%;
        right: 6%;
        font-family: "Font Awesome 6 Free";
        font-weight: 900;
        color: var(--navyColor)
    }

    ul.selectKeywords li {
        z-index: 0;
    }

    ul .tagit-new {
        margin: 0 !important;
        padding: 0 !important;
    }

    ul.selectKeywords {
        border-radius: unset;
        border: 2px solid var(--selectBorder)
    }

    #CustomConfirmDialog__F3882887_C118_41B9_AD02_E5A90B180FEE .confirm-content p {
        text-align: left !important;
        font-weight: 700;
    }

    .tagit-autocomplete .ui-corner-all {
        font-size: var(--fontSizeText) !important;
        color: var(--selectColor) !important;
        font-weight: 400 !important;
    }

    .tagit-autocomplete {
        border-radius: 0.417em !important;
    }
</style>

<div id="selectFilters">
    <div class="block-content form bubbleSheetSelector divTop" style="height: 100%">
        <h1 style=" font-size: 22px;">File List</h1>
        <div id="submit-form" name="submit-form" class="columns" style="height: 90%">
            <div id="file-upload-table">
                <div id="top-controls">
                    <div>
                        <label class="btn-pop-up">
                            <span id="fillTableLabel">Fill Table</span>
                            <input id="fillTable" type="button" class="hide" />
                        </label>
                    </div>
                    <div>
                        <label class="btn-pop-up">
                            <span id="uploadFolderLabel">Upload Folder</span>
                            <input id="uploadFolder" class="hide" type="file" webkitdirectory multiple />
                        </label>
                    </div>
                    <div>
                        <label class="btn-pop-up">
                            <span id="uploadFileLabel">Upload Files</span>
                            <input id="uploadFile" class="hide" type="file" name="file" accept=".pdf,.xls,.xlsx,.ppt,.pptx" multiple />
                        </label>
                    </div>
                    <button class="disabled btn-pop-up" id="remove" disabled type="button">Remove</button>
                </div>
                <div id="table-wrap">
                    <table>
                        <thead>
                            <tr class="header">
                                <th class="freeze-column" width="10px"><input type="checkbox" id="checkbox-all" /></th>
                                <th class="freeze-column">#</th>
                                <th class="freeze-column file-path-column sortable">
                                    <span style="line-height:20px">Path</span>
                                </th>
                                <th class="freeze-column file-name-column sortable">
                                    <span style="line-height:20px">Filename</span>
                                </th>
                                <th>Year</th>
                                <th>Navigator category</th>
                                <th>Keywords</th>
                                <th>Reporting period</th>
                                <th>Report Type</th>
                                <th>School</th>
                                <th>Report Suffix</th>
                            </tr>
                        </thead>
                        <tbody id="table-body">
                        </tbody>
                    </table>
                </div>
                <div class="u-text-right">
                    <button id="btn-cancel" onclick="closeDialogComfirmation()">Cancel</button>
                    <button class="btn-submit" id="submitNavReport" type="submit" onclick="uploadListNavigator.submitNavReport()" disabled>Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var uploadListNavigator = (function ($) {
        var myInterval = null;
        // #region Fields
        var schoolNavigatorConfiguration = {};
        var selectedFiles = [];
        var isCheckedRowOnChanging = false;

        var CHECK_BOX_COL_INDEX = 0;
        var FILE_PATH_COL_INDEX = 1;
        var FILE_NAME_COL_INDEX = 2;
        var YEAR_COL_INDEX = 3;
        var CATEGORY_COL_INDEX = 4;
        var KEY_WORD_COL_INDEX = 5;
        var PERIOD_COL_INDEX = 6;
        var REPORT_TYPE_COL_INDEX = 7;
        var SCHOOL_COL_INDEX = 8;
        var SUFIX_COL_INDEX = 9;
        var ROW_ORDER_INDEX = 10;
        var MAX_ROWS_ALLOW_BULK_ACTION = 10;
        var $divTopBlock = $('.divTop');
        var $uploadTable =  $('#file-upload-table')
        function getFileName(path) {
            if (!path || path == '')
                return null;

            var arr = path.split('/');
            return arr[arr.length - 1];
        }

        function getFilePath(path) {
            if (!path || path == '')
                return null;

            var arr = path.split('/');
            if (arr.length == 1) {
                return '';
            }

            arr = arr.slice(0, arr.length - 1);
            return arr.join('/');
        }

        function isValidFile(fileName) {
            fileName = fileName.toLowerCase();
            return fileName.includes('.pdf') || fileName.includes('.xls') ||
                fileName.includes('.xlsx') || fileName.includes('.ppt') || fileName.includes('.pptx');
        }

        var dropdownHasValue = function (value) {
            return value && value !== '-1';
        }

        function removeSelectedRow() {
            var rowIndexs = getCheckedRowIndexs().sort((a, b) => a - b);
            $.each(rowIndexs, function  (_, rowIndex) {
                $(`tr[data-row=${rowIndex}]`).remove();
            });
            var remainingFiles = [];
            $("#table-body").find("tr").each((idx, row) => {
                remainingFiles.push($(row).find('td').get(2).innerText + '/' + $(row).find('td').get(3).innerText)
            });

            selectedFiles = selectedFiles.filter(e => remainingFiles.includes(e.webkitRelativePath))

            currentTableFiles = selectedFiles.reduce((result, item) => {
                result[item.name] = item;
                return result;
            }, {});

            if ($('.row-item').length == 0) {
                disableButton('#submitNavReport');
                $('#checkbox-all').prop('disabled', true);
            }

            $('#remove').prop('disabled', true);
            $('#remove').addClass('disabled');
            $('#checkbox-all').prop('checked', false);
            reOrderRows();
        }

        function reOrderRows() {
            $.each($('.row-item'), function (i, item) {
                $(item).find('span[id^=order-]').html(i + 1);
            });
        }

        function clearUploadFileTable() {
            currentTableFiles = {};
            removeAllRows();
            disableButton('#submitNavReport');
        }

        function removeAllRows() {
            $('.row-item').remove();
            $('#checkbox-all').prop('checked', false);
            $('#checkbox-all').prop('disabled', true);
            $('#file-upload-table').addClass('hide');
            selectedFiles = [];
            currentTableFiles = {};
            validationForSubmitBtn();
        }

        function createTagitElement(row, col) {
            var keyWordUl = '<ul ';
            keyWordUl += 'id="selectKeywords-' + row + '-' + col + '" ';
            keyWordUl += 'data-valueid="selectKeywordShortNames-' + row + '-' + col + '" ';
            keyWordUl += 'class="selectKeywords tagit ui-widget ui-widget-content ui-corner-all full-width disabled">'

            var tagitNewLi = '<li class="tagit-new make">'

            var inputTagitNew = '<input type="text" ';
            inputTagitNew += 'type="text" ';
            inputTagitNew += 'class="ui-widget-content ui-autocomplete-input" ';
            inputTagitNew += 'placeholder="Select Keywords" ';
            inputTagitNew += 'autocomplete="off" ';
            inputTagitNew += 'role="textbox" ';
            inputTagitNew += 'aria-autocomplete="list" ';
            inputTagitNew += 'aria-haspopup="true" ';
            inputTagitNew += 'style="min-width: 10px;"/>';

            tagitNewLi += inputTagitNew + '</li>';
            keyWordUl += tagitNewLi;

            var tagitDropdown = '<li class="tagit-dropdown make"></li>'
            keyWordUl += tagitDropdown + '</ul>';

            var keyWordInput = '<input class="selectKeywordShortNames select-control" type="hidden" id="selectKeywordShortNames-' + row + '-' + col +'" />';

            return keyWordUl + keyWordInput;
        }

        function createCheckboxElement(i) {
            return'<input type="checkbox" data-pos-' + i + ' class="file-checkbox" id="checkbox-' + i + '" />';
        }

        function sortFiles(files) {
            return files.sort(function(left, right) {
                var filePathLeft = getFilePath(left.webkitRelativePath ? left.webkitRelativePath : left.name).toLowerCase();
                var fileNameLeft = getFileName(left.webkitRelativePath ? left.webkitRelativePath : left.name).toLowerCase();

                var filePathRight = getFilePath(right.webkitRelativePath ? right.webkitRelativePath : right.name).toLowerCase();
                var fileNameRight = getFileName(right.webkitRelativePath ? right.webkitRelativePath : right.name).toLowerCase();

                if (filePathLeft !== filePathRight) {
                    return filePathLeft > filePathRight ? 1 : -1;
                } else {
                    return fileNameLeft === fileNameRight ? 0 : fileNameLeft > fileNameRight ? 1 : -1;
                }
            });
        }

        function getCurrentFilesArray(currentTableFiles) {
            var results = [];

            if (currentTableFiles) {
                Object.keys(currentTableFiles)
                    .forEach(function (key) {
                        if (currentTableFiles[key]) {
                            results.push(currentTableFiles[key]);
                        }
                    });
            }

            return results;
        }

        var currentTableFiles = {};
        function buildTable(files) {
            var tBody = document.getElementById('table-body');
            var row = findMaxRow() + 1;
            var duplicatedSelectedFiles = {};
            var newFiles = [];
            for (var file of files) {
                var fileName = getFileName(file.webkitRelativePath ? file.webkitRelativePath : file.name);
                if (currentTableFiles[fileName]) {
                    duplicatedSelectedFiles[fileName] = fileName;
                } else {
                    newFiles.push(file);
                }
            }

            var currentFiles = getCurrentFilesArray(currentTableFiles);
            currentFiles = currentFiles.concat(newFiles);

            var sortedFiles = sortFiles(currentFiles);

            for (var file of newFiles) {
                if (!isValidFile(file.webkitRelativePath ? file.webkitRelativePath : file.name)) {
                    continue;
                }

                var fileName = getFileName(file.webkitRelativePath ? file.webkitRelativePath : file.name);

                currentTableFiles[fileName] = file;

                var tr = '<tr class="row-item" data-row="' + row + '" >';

                // Column 0

                var td = '<td class="freeze-column">';
                td += createCheckboxElement(row + '-' + CHECK_BOX_COL_INDEX);
                td += '</td>';
                tr += td;

                // Column Row
                td = '<td class="freeze-column">';
                var p = '<span id="' + ('order-' + row + '-' + ROW_ORDER_INDEX) + '"></span>';
                td += p;
                td += '</td>'
                tr += td;

                // Column 1
                td = '<td class="freeze-column file-path-column">';
                p = '<span id="' + ('file-path-' + row + '-' + FILE_PATH_COL_INDEX) + '">' + getFilePath(file.webkitRelativePath ? file.webkitRelativePath : file.name) + '</span>';
                td += p;
                td += '</td>'
                tr += td;

                // Column 2
                td = '<td class="freeze-column file-name-column">';
                p = '<p id="' + ('file-name-' + row + '-' + FILE_NAME_COL_INDEX) + '" class="invalid-row">' + fileName + '</p>';
                td += p;
                td += '</td>'
                tr += td;

                // Column 3
                td = '<td>';
                select = '<select ' +
                    'id="year-' + row + '-' + YEAR_COL_INDEX + '" ' +
                    'class="year select-control" ' +
                    '>' + getSelectedListItemsString(years, "Select Year")
                '</select>';
                td += select;
                td += '</td>'
                tr += td;

                // column 4
                td = '<td>';
                var select = '<select ' +
                    'id="navigator-category-' + row + '-' + CATEGORY_COL_INDEX + '" ' +
                    'class="navigator-category select-control" ' +
                    '>' + getSelectedListItemsString(navigatorCategories, "Select Navigator Category")
                '</select>';
                td += select;
                td += '</td>'
                tr += td;

                // Column 5
                td = '<td>';
                select = createTagitElement(row, KEY_WORD_COL_INDEX);
                td += select;
                td += '</td>'
                tr += td;

                // Column 6
                td = '<td>';
                select = '<select ' +
                    'id="period-' + row + '-' + PERIOD_COL_INDEX + '" ' +
                    'class="period select-control" ' +
                    '>' + getSelectedListItemsString(periods, "Select Period")
                '</select>';
                td += select;
                td += '</td>'
                tr += td;

                // Column 7
                td = '<td>';
                select = '<select ' +
                    'id="report-type-' + row + '-' + REPORT_TYPE_COL_INDEX + '" ' +
                    'class="report-type select-control disabled" ' +
                    'disabled="disabled"' +
                    '></select>';
                td += select;
                td += '</td>'
                tr += td;

                // Column 8
                td = '<td>';
                select = '<select ' +
                    'id="school-' + row + '-' + SCHOOL_COL_INDEX + '" ' +
                    'class="school select-control disabled" ' +
                    'disabled="disabled"' +
                    '>' +
                    '</select>';
                td += select;
                td += '</td>'
                tr += td;

                // Column 9
                td = '<td>';
                var sufix = '<input ';
                sufix += 'id="sufix-' + row + '-' + SUFIX_COL_INDEX + '" ';
                sufix += 'class="sufix" ';
                sufix += 'type="text" ';
                sufix += 'maxlength="30" />';
                td += sufix;
                td += '</td>'
                tr += td;
                tr += '</tr>';

                // Append row to table
                var currentOrder = sortedFiles.findIndex(function (p) { return p == file });

                var inserted = false;
                $.each($('.row-item'), function (_, e) {
                    var row = e.getAttribute('data-row');
                    var filename = $('#file-name-' + row + '-2').html();
                    var refOrder = sortedFiles.findIndex(function (p) { return p.name == filename });

                    if (currentOrder < refOrder) {
                        var fileName = sortedFiles[refOrder].name;
                        var refElement = $('.row-item .file-name-column p:contains("' + fileName + '")').closest('.row-item')[0];
                        refElement.insertAdjacentHTML('afterend', tr);
                        inserted = true;
                        return false;
                    }
                });

                if (!inserted) {
                    tBody.insertAdjacentHTML('beforeend', tr);
                }

                row++;
            };

            $('#checkbox-all').prop('disabled', false);
            $('#remove').addClass('disabled');

            reOrderRows();
            validationForSubmitBtn();
            createTagitForDataList(keyWords);
            if (Object.keys(duplicatedSelectedFiles).length > 0) {
                customAlertMessage({ message: 'The following file(s) exists in the Upload List: ' + Object.keys(duplicatedSelectedFiles).join().replaceAll(',', ', ') + '.' });
            }
        }

        function findMaxRow() {
            var max = 0;
            $.each($('.row-item'), function (_, e) {
                var row = e.getAttribute('data-row');
                if (row > max) {
                    max = row;
                }
            });

            return parseInt(max);
        }

        function getCurrentRow(target) {
            return $(`#${target.getAttribute('id')}`).closest('tr')[0].getAttribute('data-row');
        }

        var noResultsFoundOption = '<option value="-1">No Results Found</option>';
        function addSelectedListItems(selectList, results, defaultValue) {
            if (results.length == 0) {
                selectList.html(noResultsFoundOption);
            } else {
                selectList.html('');
                var options = ''
                if (defaultValue) {
                    options += '<option value="-1">' + defaultValue + '</option>'
                }
                for (var value of results) {
                    options += '<option value="' + value.id + '">' + value.name + '</option>'
                }
                selectList.append(options);
            }
        }

        function getSelectedListItemsString(results, defaultValue) {
            if (results.length == 0) {
                return noResultsFoundOption;
            } else {
                var options = ''
                if (defaultValue) {
                    options += '<option value="-1">' + defaultValue + '</option>'
                }
                for (var value of results) {
                    options += '<option value="' + value.id + '">' + value.name + '</option>'
                }
                return options;
            }
        }

        var navigatorCategories;
        function populateNavigatorCategory() {

            if (!navigatorCategories) {

               $.get(`@Url.Action("GetNavigatorCategory", "NavigatorReport")`, function (res) {
                    navigatorCategories = res.data;

                    // Bind for all select list
                   $.each($('.navigator-category'), function (_, e)  {
                       bindSelectList(navigatorCategories, e, "Select Navigator Category");
                    });

                   $('.navigator-category').prop('disabled', false);
                   $('.navigator-category').removeClass('disabled');
                });
            } else {
                // Bind for all select list
                $.each($('.navigator-category'), function (_, e) {
                    bindSelectList(navigatorCategories, e, "Select Navigator Category");
                });

                $('.navigator-category').prop('disabled', false);
                $('.navigator-category').removeClass('disabled');
            }
        }

        function getNavigatorCategory() {
            return $.get(`@Url.Action("GetNavigatorCategory", "NavigatorReport")`, function (res) {
                navigatorCategories = res.data;
            });
        }

        function populateSchool(rows) {
            var districtId = $('#selectDistrict').val();
            if (districtId) {
                if (!schools) {

                    $.get(`@Url.Action("GetSchoolByDistrictId", "CategoriesAPI")`, { districtId: districtId }, function (res) {
                        schools = res.data;
                        populate();
                    });
                } else {
                    populate();
                }
                function populate() {
                    if (rows.length < MAX_ROWS_ALLOW_BULK_ACTION) {
                        _.forEach(rows, function (row, index) {
                            action(index);
                        });
                    } else {
                        sequentialExecution(action, rows.length);
                    }
                }
                function action(index) {
                    var row = rows[index];
                    var e = $(`#school-${row}-${SCHOOL_COL_INDEX}`);
                    e.prop('disabled', false);
                    e.removeClass('disabled');

                    // Bind for all select list
                    if (schools && e.find('option').length == 0) {
                        addSelectedListItems(e, schools, "Select School");
                    }
                }
            }
        }

        var periods;
        function getPeriods() {
            return $.get('@Url.Action("GetReportingPeriod", "NavigatorReport")', function (res) {
                periods = res.data;
            });
        }

        var years;
        function getSchoolYear() {
            var districtId = $('#selectDistrict').val();
            if (districtId) {
                $.get(`@Url.Action("GetSchoolYear","NavigatorReport")`, { districtId: districtId }, function (res) {
                    years = res.data;
                });
            }
            return true;
        }

        var keyWords;
        function getKeyWords() {
            $.get(`@Url.Action("GetKeywords", "NavigatorReport")`, function (res) {
                keyWords = res.data;
            });
        }

        var schools;
        function getSchools() {
            var districtId = $('#selectDistrict').val();
            if (districtId) {
                $.get(`@Url.Action("GetSchoolByDistrictId", "CategoriesAPI")`, { districtId: districtId }, function (res) {
                schools = res.data;
            });
            }
        }

        function createTagitForDataList(keyWords) {

            if (keyWords) {
                var availableTags = keyWords.map(function (c) {
                    return c.name
                });
                var $elms = $('.selectKeywords.disabled');
                if ($elms.length < MAX_ROWS_ALLOW_BULK_ACTION) {
                    createTagItAsync($elms, availableTags);
                    $('ul.tagit input[type="text"]').css("min-width", "10px");
                } else {
                    sequentialExecution(function (index) {
                        createTagItAsync($($elms[index]), availableTags);
                    }, $elms.length, 1).done(function () {
                        $('ul.tagit input[type="text"]').css("min-width", "10px");
                    });
                }
            }
        }

        function createTagItAsync($elm, availableTags) {
            $elm.empty();
            $elm.removeClass('disabled');
            $elm.tagit({
                availableTags: availableTags,
                placeholderText: 'Select Keywords',
                autocomplete: { delay: 0, minLength: 0 },
                afterTagAdded: function (e) {
                    var $tag = $(e.target);
                    var $input = $tag.next('.selectKeywordShortNames');
                    var tags = $tag.tagit("assignedTags");
                    $input.val(tags)
                    $tag.change();
                    $input.val(tags).trigger('change');
                    var row = $tag.closest('tr').data('row');
                    if (isCurrentRowChecked(row) && !isCheckedRowOnChanging) {
                        addTagKeywordForAllcheckedBox(tags);
                    }
                },
                afterTagRemoved: function (e) {
                    var $tag = $(e.target);
                    var $input = $tag.next('.selectKeywordShortNames');
                    var tags = $tag.tagit("assignedTags");
                    $input.val(tags)
                    $tag.change();
                    $input.val(tags).trigger('change');
                    var row = $tag.closest('tr').data('row');
                    if (isCurrentRowChecked(row) && !isCheckedRowOnChanging) {
                        addTagKeywordForAllcheckedBox(tags);
                    }
                },
                beforeTagAdded: function (e, ui) {
                    var $tag = $(e.target);
                    var label = ui.tagLabel;

                    var matchTags = _.filter(availableTags, function (value) {
                        return value.toLowerCase() == label.toLowerCase()
                    });
                    if (matchTags.length == 0) {
                        matchTags = _.filter(availableTags, function (value) {
                            return value.toLowerCase().startsWith(label.toLowerCase());
                        });
                    }
                    if (matchTags.length == 0) {
                        return false;
                    }
                    if (label === matchTags[0]) {
                        return true;
                    }
                    else {
                        $tag.tagit("createTag", matchTags[0]);
                        return false;
                    }
                }
            });
        }

        function addTagKeywordForAllcheckedBox(tags) {
            var rowIndexs = getCheckedRowIndexs();
            var inputValue = tags.join();
            isCheckedRowOnChanging = true;
            if (rowIndexs.length < MAX_ROWS_ALLOW_BULK_ACTION) {
                for (var i = 0; i < rowIndexs.length; i++) {
                    action(i);
                }
                isCheckedRowOnChanging = false;
            } else {
                ShowBlock($divTopBlock, "Applying Change");
                sequentialExecution(action, rowIndexs.length).done(function () {
                    $divTopBlock.unblock();
                    isCheckedRowOnChanging = false;
                })
            }

            function action(i) {
                var row = rowIndexs[i];
                var $tag = $(`#selectKeywords-${row}-${KEY_WORD_COL_INDEX}`);
                var $input = $tag.next('.selectKeywordShortNames');
                var currentValue = $input.val();
                var currentTags = currentValue.split(',');

                var removeTags = _.filter(currentTags, function (tag) {
                    return tag != '' && !tags.includes(tag)
                });

                if (tags.length > 0) {
                    _.forEach(removeTags, function (tag) {
                        $tag.tagit("removeTagByLabel", tag);
                    })
                    _.forEach(tags, function (tag) {
                        if (!currentTags.includes(tag)) {
                            $tag.tagit("createTag", tag);
                        }
                    })
                } else {
                    $tag.tagit("removeAll");
                }

                $input.val(inputValue);
            }
        }

        function btnUploadToggle() {
            var value = $('#selectDistrict').val();
            if (value && value > 0) {
                $('#btn-upload').prop('disabled', false);
                $('#btn-upload').removeClass('disabled');
            } else {
                $('#btn-upload').prop('disabled', true);
                $('#btn-upload').addClass('disabled');
            }
        }

        var fieldsTable = [
            { field: "filePath", id: "#file-path", columnIndex: 1},
            { field: "fileName", id: "#file-name", columnIndex: 2 },
            { field: "schoolYear", id: "#year", columnIndex: 3 },
            { field: "navigatorCategory", id: "#navigator-category", columnIndex: 4 },
            { field: "keywordShortNames", id: "#selectKeywordShortNames", columnIndex: 5 },
            { field: "reportingPeriod", id: "#period", columnIndex: 6 },
            { field: "reportType", id: "#report-type", columnIndex: 7 },
            { field: "school", id: "#school", columnIndex: 8 },
            { field: "reportSuffix", id: "#sufix", columnIndex: 9, maxLength: 30 },
        ];

        function submitNavReport() {
            if (!isDuplicated()) {
                 // visible the progress bar
                $('#submitNavReport').prop("disabled", true);
                $('#btnUpload').addClass('disabled');

                var formsErrors = [];
                var forms = [];
                $('.row-item').each(function (index, item) {
                    var dataRow = item.getAttribute("data-row");
                    var keyword = "";
                    var form = { dataRow: dataRow, state: $("#selectState").val(), district: $("#selectDistrict").val()};
                    for (var item of fieldsTable) {
                        var element = [item.id, dataRow, item.columnIndex].join("-");
                        var value = $(element).val();

                        if (typeof (item.maxLength) === 'number' && value.length > item.maxLength) {
                            formsErrors.push({ dataRow: (index + 1), maxLength: item.maxLength});
                        } else {
                            form[item.field] = value;
                            keyword += value ?? "";
                        }
                    }
                    form["hasCode"] = hashCode(keyword);
                    forms.push(form);
                });

                if (formsErrors.length) {
                    customAlertMessage({ message: `The Report Suffix exceed ${formsErrors[0].maxLength} characters in the row numbers: [${formsErrors.map(x=> x.dataRow).join(',')}], Please reduce the character count.` });
                    $('#submitNavReport').prop("disabled", false);
                    $('#btnUpload').addClass('enabled');
                    return;
                }

                if (forms.length > 0) {
                    ShowBlock($divTopBlock, "Uploading");
                    disableButton('#btn-cancel');

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("RecordsExist", "NavigatorReport")',
                        dataType: "json",
                        contentType: 'application/json',
                        data: JSON.stringify(forms),
                        success: function (result, status, xhr) {
                            //don't forget to hide progress bar
                            if (result.status == 'error') {
                                customAlertMessage({ message: result.message });
                                $('#submitNavReport').prop("disabled", false);
                                $('#btnUpload').removeClass('disabled');
                                $divTopBlock.unblock();
                                $("#loadingImg").hide();
                                resetFileSelect();
                                closeDialog();
                            }
                            else {
                                if (result.strongData && result.strongData.length > 0) {

                                    CustomConfirm({
                                        message: '<p>There are existing File(s).<br> Select "Yes" will override them.<br> Select "No" will stop the upload process.Please remove any unwanted file before upload.</p>',
                                        yes: function () {
                                            submitMultipleForms(forms);
                                        },
                                        no: function () {
                                            var dataRows = forms.filter(o1 => result.strongData.some(o2 => o1.hasCode == o2.hasCode)).map(p => p.dataRow);

                                            if (dataRows != null && dataRows.length > 0) {
                                                isExistRows(dataRows);
                                            }

                                            $(this).dialog("close");
                                            $('#submitNavReport').prop("disabled", false);
                                            $('#btnUpload').removeClass('disabled');
                                            $divTopBlock.unblock();
                                            $("#loadingImg").hide();
                                        },
                                    });
                                }
                                else {
                                    submitMultipleForms(forms);
                                }
                            }

                            enableButton('#btn-cancel');
                        },
                        error: function (xhr, status, error) {
                            customAlertMessage({ message: error });
                            $divTopBlock.unblock();
                            $('#submitNavReport').prop("disabled", false);
                            $('#btnUpload').removeClass('disabled');
                            $("#loadingImg").hide();
                            resetFileSelect();
                            closeDialog();
                        }
                    });
                }
            }
        }

        function hashCode(s) {
            for (var i = 0, h = 0; i < s.length; i++)
                h = Math.imul(31, h) + s.charCodeAt(i) | 0;
            return Math.abs(h);
        }
        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }

        function submitMultipleForms(forms) {
            var promiseLike = [];

            for (var form of forms) {
                var formData = new FormData();
                Object.keys(form).forEach(key => formData.append("select" + key.charAt(0).toUpperCase() + key.slice(1), form[key]));

                // append file
                var path = decodeHtml($(`#file-path-${form.dataRow}-1`).html());
                var fileName = decodeHtml($(`#file-name-${form.dataRow}-2`).html());
                var file = selectedFiles.find(x => (path && x.webkitRelativePath === path + "/" + fileName) || (!path && !x.webkitRelativePath && x.name == fileName));
                formData.append("files", file);

                // push ajax to promiseLike
                promiseLike.push(SubmitForm(formData));

                // close Dialog
                if (promiseLike.length === forms.length) {
                    closeDialog();
                }
            }

            if (promiseLike.length > 0) {
                $.when.apply($, promiseLike).then(function () {
                    var responses = promiseLike.length > 1 ? arguments : [arguments];
                    _.forEach(responses, function (result) {
                        //don't forget to hide progress bar
                        if (result[0] && result[0].status === 'success') {
                            for (i = 0; i < result[0].strongData.length; i++) {
                                var id = result[0].strongData[i];
                                if (!navigatorReportIds.includes(id)) {
                                    navigatorReportIds.push(id);
                                }
                            }
                        }
                    });
                    $divTopBlock.unblock();
                    $('#submitnavreport').prop("disabled", false);
                    $("#loadingImg").hide();

                    getUploadStatus();
                    myInterval = setInterval(function () {
                        getUploadStatus();
                    }, 10000);

                    resetFileSelect();
                }, function (err) {
                    $divTopBlock.unblock();
                    $("#loadingImg").hide();
                    validationForSubmitBtn();
                })
             }
        }

        // #end region Page Load
        function displayMessage(message) {
            var content = (message ? message.replace(/;/g, '; <br>') : '');
            var title = (message ? message : '')
            var html = '<span class="js-tooltip-students js-tooltip-error" title="' + content + '">' + title + '</span>';
            return html;
        }

        function isSelectSchoolEnabled(row) {
            var currDistrictValue = $('#selectDistrict').val();
            var id = `#school-${row}-${SCHOOL_COL_INDEX}`;
            var navigatorConfiguration = schoolNavigatorConfiguration[id];
            return (navigatorConfiguration && navigatorConfiguration.useSchool && currDistrictValue && currDistrictValue > 0) || false;
        };

        function isSelectKeywordEnabled(row) {
            var id = `#school-${row}-${SCHOOL_COL_INDEX}`;
            var navigatorConfiguration = schoolNavigatorConfiguration[id];
            var enabled = navigatorConfiguration && navigatorConfiguration.keywordMandatory;
            return enabled;
        };

        function isSelectPeriodMandatoryEnabled(row) {
            var id = `#school-${row}-${SCHOOL_COL_INDEX}`;
            var navigatorConfiguration = schoolNavigatorConfiguration[id];
            return navigatorConfiguration && navigatorConfiguration.periodMandatory;
        };

        function resetFileSelect() {
            clearUploadFileTable();
            selectedFiles = [];
        }

        function getCheckExistsFileNameData() {
            var fields = ["#selectState", "#selectDistrict", "#selectNavigatorCategory", "#selectReportType", "#selectSchool", "#selectSchoolYear", "#selectKeywordShortNames", "#selectReportingPeriod", "#selectReportSuffix"];
            var checkFileData = {};
             fields.forEach(function (value, index) {
                var fieldName = value.replace('#select', '');
                checkFileData[fieldName] = $(value).val();
            });
            return checkFileData;
        }

        function SubmitForm(formdata) {
            return $.ajax({
                type: "POST",
                url: "Submit",
                dataType: "json",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: formdata,
                error: function(jqXHR, textStatus, errorThrown) {
                    customAlert(errorThrown || 'File path is too long. Download file(s) and try again.');
                }
            });
        }

        function getUploadStatus() {
            var datatable = $("#dataTable").dataTable();
            datatable.fnSettings().fnServerParams = function (aoData) {
                aoData.push({ "name": "reportIds", "value": navigatorReportIds });
            };
            datatable.fnDraw();
        }

        function enableSelectFile() {
            $('#fileInput').prop("disabled", false);
            $('#btnUpload').removeClass('disabled');
        }

        function disableSelectFile() {
            $('#fileInput').prop("disabled", true);
            $('#btnUpload').addClass('disabled');
        }

        function enableButton(id) {
            $(id).prop("disabled", false);
        }

        function disableButton(id) {
            $(id).prop("disabled", true);
        }

        $('body').click(function (evt) {
            if (evt.target.className !== "tagit-dropdown") {
                $('.tagit-autocomplete').css("display", "none");
            } else {
                var currentRow = 0;
                var targetRow = evt.target.closest('tr').getAttribute('data-row');
                $.each($('.row-item'), function (i, element) {
                    if (element.getAttribute('data-row') == targetRow) {
                        currentRow = i;
                    }
                });

                $.each($('.tagit-autocomplete'), function (i, element) {
                    if (i != currentRow) {
                        element.style.setProperty('display', 'none');
                    }
                });

                var xTarget = parseInt(evt.target.getBoundingClientRect().x);
                var widthTarget = evt.target.closest('ul').getBoundingClientRect().width;
                $.each($('ul.ui-autocomplete'), function (_, element) {
                    element.style.setProperty('left', `${xTarget - widthTarget + 25}px`, 'important');
                });
            }
        });

        function preloadDropdownlistData() {
            ShowBlock($divTopBlock, "Preparing");
            $.when(getNavigatorCategory(), getPeriods(), getSchoolYear(), getKeyWords(), getSchools()).done(function () {
                $divTopBlock.unblock();
            });
        }

        function schoolToggle(reportTypeValue, rows) {
            if (reportTypeValue > 0) {

                $.get('@Url.Action("GetConfigurationById", "NavigatorReport")', { navigatorConfigurationId: reportTypeValue }, function (response) {
                    var populateSchoolRows = [];
                    isCheckedRowOnChanging = rows.length > 2;
                    var shoolIds = [];
                    _.forEach(rows, function (row) {
                        var id = `#school-${row}-${SCHOOL_COL_INDEX}`
                        shoolIds.push(id);
                        schoolNavigatorConfiguration[id] = _.clone(response.data);
                        if (isSelectSchoolEnabled(row)) {
                            populateSchoolRows.push(row)
                        }
                        validationOnRow(row);
                    });
                    isCheckedRowOnChanging = false;
                    $(shoolIds.join(', ')).prop('disabled', true);
                    $(shoolIds.join(', ')).addClass('disabled');
                    $(shoolIds.join(', ')).empty();
                    populateSchool(populateSchoolRows);
                });
            } else {
                _.forEach(rows, function (row) {
                    var id = `#school-${row}-${SCHOOL_COL_INDEX}`;
                    $(id).prop('disabled', true);
                    $(id).addClass('disabled');
                    $(id).empty();
                })
             }
        }

        function validateRow(row) {
            var navigatorCategoryValue = $(`#navigator-category-${row}-${CATEGORY_COL_INDEX}`).val();
            var reportTypeValue = $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).val();
            var yearValue = $(`#year-${row}-${YEAR_COL_INDEX}`).val();
            var schoolValue = $(`#school-${row}-${SCHOOL_COL_INDEX}`).val();
            var keywordValue = $(`#selectKeywordShortNames-${row}-${KEY_WORD_COL_INDEX}`).val();
            var periodValue = $(`#period-${row}-${PERIOD_COL_INDEX}`).val();

            var valid = navigatorCategoryValue && navigatorCategoryValue != '-1' && reportTypeValue && reportTypeValue != '-1' && yearValue && yearValue != '-1';
            valid = isSelectSchoolEnabled(row) ? valid && schoolValue && schoolValue != '-1' : valid;
            valid = isSelectKeywordEnabled(row) ? valid && keywordValue && keywordValue != '' : valid;
            valid = isSelectPeriodMandatoryEnabled(row) ? valid && periodValue && periodValue != '-1' : valid;

            return valid;
        }

        function getCheckedRowIndexs() {
            return _.map($('.file-checkbox:checked'), function (el) {
                return $(el).closest('tr').data('row')
            });
        }

        function isCurrentRowChecked(row) {
            return $(`#checkbox-${row}-${CHECK_BOX_COL_INDEX}`).is(":checked");
        }

        function setValueForCheckedRows(id, col, value) {
            var rowIndexs = getCheckedRowIndexs();
            if (rowIndexs.length > 0) {
                for (var i = 0; i < rowIndexs.length; i++) {
                    var row = rowIndexs[i];
                    $(`${id}-${row}-${col}`).val(value);
                }
            }
        }

        function triggerLoadReportTypeRow(navigatorCategoryID, reportTypes, rowIndexs) {
            if (rowIndexs.length > 0) {
                if (rowIndexs.length < MAX_ROWS_ALLOW_BULK_ACTION) {
                    for (var i = 0; i < rowIndexs.length; i++) {
                        action(i)
                    }
                } else {
                    sequentialExecution(action, rowIndexs.length)
                }

                function action(i) {
                    var row = rowIndexs[i];
                    if (parseInt(navigatorCategoryID) > 0) {
                        var target = $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`);
                        addSelectedListItems(target, reportTypes, "Select Report Type");

                        target.prop('disabled', false);
                        target.removeClass('disabled');
                    } else {
                        $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).empty();
                        $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).prop('disabled', true);
                        $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).addClass('disabled');
                    }

                    validationOnRow(row);
                }
            }
        }

        function bindSelectList(listData, e, defaultValue) {
            if (listData && $(`#${e.getAttribute('id')}`).find('option').length == 0) {
                addSelectedListItems($(`#${e.getAttribute('id')}`), listData, defaultValue);
            }
        }

        function validationOnRow(row) {
            var id = `#file-name-${row}-${FILE_NAME_COL_INDEX}`;

            if (validateRow(row)) {
                $(id).removeClass('invalid-row');
                $(id).addClass('valid-row');
            } else {
                $(id).removeClass('valid-row');
                $(id).addClass('invalid-row');
            }
            if (!isCheckedRowOnChanging) {
                var rowIndexs = getCheckedRowIndexs();
                $.each(rowIndexs, function (_, rowIndex) {
                    var idChecked = `#file-name-${rowIndex}-${FILE_NAME_COL_INDEX}`;
                    if (validateRow(rowIndex)) {
                        $(idChecked).removeClass('invalid-row');
                        $(idChecked).addClass('valid-row');
                    } else {
                        $(idChecked).removeClass('valid-row');
                        $(idChecked).addClass('invalid-row');
                    }
                });
            }
            validationForSubmitBtn();
        }

        function validationForSubmitBtn() {
            if ($('.invalid-row').length === 0 && $('.row-item').length > 0) {
                enableButton('#submitNavReport');
            } else {
                disableButton('#submitNavReport');
            }
        }

        function isDuplicated() {
            var isError = false;
            var duplicatedRows = {};

            if ($('.row-item').length === 1) {
                $('.row-item').removeClass('bg-error');
                return isError;
            }

            $.each($('.row-item'), function (_, item) {
                var row = item.getAttribute('data-row');
                $.each($('.row-item'), function (_, nextItem) {
                    var nextRow = nextItem.getAttribute('data-row');
                    if (row != nextRow) {
                        var equalCategory = $(`#navigator-category-${row}-${CATEGORY_COL_INDEX}`).val() == $(`#navigator-category-${nextRow}-${CATEGORY_COL_INDEX}`).val();
                        var equalReportType = $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).val() == $(`#report-type-${nextRow}-${REPORT_TYPE_COL_INDEX}`).val();
                        var equalSchool = $(`#school-${row}-${SCHOOL_COL_INDEX}`).val() == $(`#school-${nextRow}-${SCHOOL_COL_INDEX}`).val();
                        var equalYear = $(`#year-${row}-${YEAR_COL_INDEX}`).val() == $(`#year-${nextRow}-${YEAR_COL_INDEX}`).val();
                        var equalKeyword = $(`#selectKeywordShortNames-${row}-${KEY_WORD_COL_INDEX}`).val() == $(`#selectKeywordShortNames-${nextRow}-${KEY_WORD_COL_INDEX}`).val()
                        var equalPeriod = $(`#period-${row}-${PERIOD_COL_INDEX}`).val() == $(`#period-${nextRow}-${PERIOD_COL_INDEX}`).val()
                        var equalSufix = $(`#sufix-${row}-${SUFIX_COL_INDEX}`).val() == $(`#sufix-${nextRow}-${SUFIX_COL_INDEX}`).val();

                        if (equalCategory && equalReportType && equalSchool && equalYear && equalKeyword && equalPeriod && equalSufix) {
                            isError = true;

                            duplicatedRows[row] = row;
                            duplicatedRows[nextRow] = nextRow;
                        }
                    }
                });

                $(item).removeClass('bg-error');
            });

            if (isError && Object.keys(duplicatedRows).length > 0) {
                var listOfDuplicatedRows = {};
                $.each(Object.keys(duplicatedRows), function (_, row) {
                    $('.row-item[data-row=' + row + ']').addClass('bg-error');
                    listOfDuplicatedRows[$(`#order-${row}-${ROW_ORDER_INDEX}`).html()] = row;
                });

                customAlertMessage({ message: 'There are ' + Object.keys(duplicatedRows).length + ' duplicated rows. Rows: ' + Object.keys(listOfDuplicatedRows).join().replaceAll(',', ', ') + '.' });
            }

            return isError;
        }

        function isExistRows(dataRows) {
            $.each($('.row-item'), function (_, item) {
                var row = item.getAttribute('data-row');
                if (dataRows.filter(function (p) { return p == row }).length > 0) {
                    $(item).addClass('bg-error');
                } else {
                    $(item).removeClass('bg-error');
                }
            });
        }

        function closeDialog() {
            $('#listFileUploadDialog').dialog('close');
            $(".ui-widget-overlay").remove();
            $("#tips").html('');
        }

        // #region Page Load
        $(document).ready(function () {
            preloadDropdownlistData();
            $uploadTable.find('#uploadFolder').on('change', function (e) {
                var fileList = Array.from(e.target.files);
                if (fileList.length > 0) {

                    buildTable(fileList);

                    $('#file-upload-table').removeClass('hide');

                    selectedFiles = selectedFiles.concat(fileList);
                    $('#uploadFolder').val('');

                    $($('th.sortable').get(0)).click();
                }
            });

            $uploadTable.find('#uploadFile').on('change', function (e) {
                var fileList = Array.from(e.target.files);
                if (fileList.length > 0) {

                    buildTable(fileList);

                    $('#file-upload-table').removeClass('hide');

                    selectedFiles = selectedFiles.concat(fileList);
                    $('#uploadFile').val('');
                }
            });

            // NAVIGATOR CATEGORY
            $uploadTable.on('change', '.navigator-category', function (e) {
                var row = getCurrentRow(e.target);
                var navigatorCategoryID = $(`#navigator-category-${row}-${CATEGORY_COL_INDEX}`).val();
                navigatorCategoryID = parseInt(navigatorCategoryID);
                $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).empty();

                if (parseInt(navigatorCategoryID) == 0) {
                    $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).prop('disabled', true);
                    $(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).addClass('disabled');
                }

                if ($(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).val() > 0) {
                    schoolToggle($(`#report-type-${row}-${REPORT_TYPE_COL_INDEX}`).val(), [row]);
                }

                var rowIndexs = getCheckedRowIndexs();
                $.each(rowIndexs.length ? rowIndexs : [row], function (_, rowIndex) {
                    $(`#report-type-${rowIndex}-${REPORT_TYPE_COL_INDEX}`).empty();
                    $(`#report-type-${rowIndex}-${REPORT_TYPE_COL_INDEX}`).prop('disabled', true);
                    $(`#report-type-${rowIndex}-${REPORT_TYPE_COL_INDEX}`).addClass('disabled');
                });
                if (rowIndexs.length) {
                    setValueForCheckedRows('#navigator-category', CATEGORY_COL_INDEX, navigatorCategoryID);
                }

                $.get(`@Url.Action("GetReportTypes", "NavigatorReport")`, { navigatorCategoryID: navigatorCategoryID }, function (res) {
                    if (res && res.data) {
                        triggerLoadReportTypeRow(navigatorCategoryID, res.data, rowIndexs.length ? rowIndexs : [row]);
                    }
                });

                // disable school
                $(`#school-${row}-${SCHOOL_COL_INDEX}`).prop('disabled', true);
                $(`#school-${row}-${SCHOOL_COL_INDEX}`).addClass('disabled');
                $(`#school-${row}-${SCHOOL_COL_INDEX}`).empty();
            });

            // REPORT TYPE
            $uploadTable.on('change', '.report-type', function (e) {
                var reportTypeValue = e.target.value;
                var row = getCurrentRow(e.target);

                var rowIndexs = getCheckedRowIndexs();
                if (rowIndexs.length > 0 && isCurrentRowChecked(row)) {
                    setValueForCheckedRows('#report-type', REPORT_TYPE_COL_INDEX, reportTypeValue);
                }
                schoolToggle(reportTypeValue, rowIndexs.length ? rowIndexs : [row]);

            });

            // SCHOOL
            $uploadTable.on('change', '.school', function (e) {
                var row = getCurrentRow(e.target);
                var value = e.target.value;
                var rowIndexs = getCheckedRowIndexs();
                if (rowIndexs.length > 0 && isCurrentRowChecked(row)) {
                    setValueForCheckedRows('#school', SCHOOL_COL_INDEX, value);
                }
            });

            // YEAR
            $uploadTable.on('change', '.year', function (e) {
                var row = getCurrentRow(e.target);
                var yearID = $(`#year-${row}-${YEAR_COL_INDEX}`).val();

                var rowIndexs = getCheckedRowIndexs();
                if (rowIndexs.length > 0 && isCurrentRowChecked(row)) {
                    setValueForCheckedRows('#year', YEAR_COL_INDEX, yearID);
                }
            });

            // PERIOD
            $uploadTable.on('change', '.period', function (e) {
                var row = getCurrentRow(e.target);
                var periodID = $(`#period-${row}-${PERIOD_COL_INDEX}`).val();

                var rowIndexs = getCheckedRowIndexs();
                if (rowIndexs.length > 0 && isCurrentRowChecked(row)) {
                    setValueForCheckedRows('#period', PERIOD_COL_INDEX, periodID);
                }

            });

            // SUFIX
            $uploadTable.on('input', '.sufix', function (e) {
                var row = getCurrentRow(e.target);
                var sufixValue = $(`#sufix-${row}-${SUFIX_COL_INDEX}`).val();

                var rowIndexs = getCheckedRowIndexs();
                if (rowIndexs.length > 0 && isCurrentRowChecked(row)) {
                    setValueForCheckedRows('#sufix', SUFIX_COL_INDEX, sufixValue);
                }

            });

            // FILL TABLE
            $uploadTable.on('click', '#fillTable', function (e) {
                var forms = [];

                $(".file-checkbox, #checkbox-all").attr("checked", false);

                var columnsIndexPayload = [FILE_PATH_COL_INDEX, FILE_NAME_COL_INDEX, CATEGORY_COL_INDEX];
                var fieldsPayload = fieldsTable.filter(x => columnsIndexPayload.includes(x.columnIndex));

                $('.row-item').each(function (index, item) {
                    var dataRow = +item.getAttribute("data-row");
                    var form = { dataRow: dataRow };
                    for (var item of fieldsPayload) {
                        var value;
                        var element = [item.id, dataRow, item.columnIndex].join("-");

                        if (item.columnIndex === CATEGORY_COL_INDEX) {
                            value = +$(element).val();
                        } else {
                            value = $("<div/>").html($(element).html()).text().trim();
                        }

                        form[item.field] = value;
                    }
                    if (form.navigatorCategory !== -1 && form.filePath)
                        forms.push(form);
                });

                if (forms.length === 0)
                    return;

                ShowBlock($divTopBlock, "Uploading");
                $.ajax({
                        type: "POST",
                        url: '@Url.Action("FillTable", "NavigatorReport")',
                        dataType: "json",
                        contentType: 'application/json',
                        data: JSON.stringify(forms),
                        success: function (results) {
                            //don't forget to hide progress bar

                            _.forEach(results, function (result) {
                                let reportTypeElement = `#report-type-${result.dataRow}-${REPORT_TYPE_COL_INDEX}`;
                                let schoolElement = `#school-${result.dataRow}-${SCHOOL_COL_INDEX}`;
                                let sufixElement = `#sufix-${result.dataRow}-${SUFIX_COL_INDEX}`;

                                if (!dropdownHasValue($(reportTypeElement).val()))
                                    $(reportTypeElement).val(result.reportTypeId).change();

                                if (!dropdownHasValue($(sufixElement).val()))
                                    $(sufixElement).val(result.reportSuffix).change();


                                if (result.schoolName && !dropdownHasValue($(schoolElement).val())) {
                                    var waitUtilSchoolLoaded = setInterval(function () {
                                        if (schools && $(schoolElement + '>option').length) {
                                            let schoolId = schools.find(x => x.name === result.schoolName)?.id;

                                            $(schoolElement).val(schoolId).change();

                                            clearInterval(waitUtilSchoolLoaded);
                                        }
                                    }, 100);
                                }
                            });

                            $divTopBlock.unblock();
                            $("#loadingImg").hide();

                        }
                });

            });

            $('th.sortable').click(function (evt) {
                var table = $(this).parents('table').eq(0)
                var rows = table.find('tr:gt(0)').toArray().sort(comparer($(this).index()))
                if (evt.target.classList.contains('sort-up')) {
                    this.asc = true;
                } else if (evt.target.classList.contains('sort-down')) {
                    this.asc = false;
                } else {
                    this.asc = !this.asc;
                }
                if (!this.asc) { rows = rows.reverse() }
                for (var i = 0; i < rows.length; i++) { table.append(rows[i]) }

                $('th.sortable').removeClass('sorting_asc sorting_desc');
                $(evt.currentTarget).addClass(this.asc ? "sorting_asc" : "sorting_desc");
            })
            function comparer(index) {
                var externalIdx = index === 2 ? 3 : 2;
                return function (a, b) {
                    var valA = getCellValue(a, index), valB = getCellValue(b, index)
                    if (valA === valB) {
                        valA = getCellValue(a, externalIdx);
                        valB = getCellValue(b, externalIdx);
                    }
                    return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.toString().localeCompare(valB)
                }
            }
            function getCellValue(row, index) { return $(row).children('td').eq(index).text() }

            var latestRowClicked = null;
            var sourceRowIndex = null;
            $uploadTable.on('change', '.file-checkbox', function (e) {
                var currentClicked = $uploadTable.find('.row-item').index($(e.target).closest('tr'));
                if (!isShiftDown) {
                    latestRowClicked = currentClicked;
                    sourceRowIndex = currentClicked;
                } else {
                    if (_.isNull(sourceRowIndex)) {
                        sourceRowIndex = currentClicked;
                    }

                    var sourceRowIsChecked = $($uploadTable.find('.row-item')[sourceRowIndex]).find('.file-checkbox').is(':checked');
                    if (sourceRowIndex < currentClicked) {
                        selectRow(sourceRowIndex, currentClicked, sourceRowIsChecked);
                    } else {
                        selectRow(currentClicked, sourceRowIndex, sourceRowIsChecked);
                    }
                    if (latestRowClicked != sourceRowIndex) {
                        var from = null, to = null;
                        if (sourceRowIndex < currentClicked && currentClicked < latestRowClicked) {
                            from = currentClicked + 1;
                            to = latestRowClicked;
                        } else if (latestRowClicked > currentClicked && sourceRowIndex > currentClicked) {
                            from = sourceRowIndex + 1;
                            to = latestRowClicked;
                        } else if (latestRowClicked < currentClicked && currentClicked < sourceRowIndex) {
                            from = latestRowClicked;
                            to = currentClicked - 1;
                        } else if (latestRowClicked < currentClicked && currentClicked > sourceRowIndex) {
                            from = latestRowClicked;
                            to = sourceRowIndex - 1;
                        } else if (currentClicked == sourceRowIndex) {
                            sourceRowIsChecked = !sourceRowIsChecked;
                            $($uploadTable.find('.row-item')[sourceRowIndex]).find('.file-checkbox').prop('checked', sourceRowIsChecked);
                            if (currentClicked > latestRowClicked) {
                                from = latestRowClicked;
                                to = currentClicked - 1;
                            } else {
                                from = currentClicked + 1;
                                to = latestRowClicked;
                            }
                        }
                        if (!_.isNull(from)) {
                            selectRow(from, to, !sourceRowIsChecked);
                        }
                    }

                    latestRowClicked = currentClicked;
                }

                function selectRow(from, to, checked) {
                    for (var i = from; i <= to; i++) {
                        $($uploadTable.find('.row-item').get(i)).find('.file-checkbox').prop('checked', !!checked);
                    }
                }
                var checkedCheckboxs = $('.file-checkbox:checked');
                if (checkedCheckboxs.length > 0) {
                    $('#remove').prop('disabled', false);
                    $('#remove').removeClass('disabled');
                    var checkAlll = $('.file-checkbox').length == checkedCheckboxs.length;
                    $('#checkbox-all').prop('checked', checkAlll);
                } else {
                    $('#remove').prop('disabled', true);
                    $('#remove').addClass('disabled');
                    $('#checkbox-all').prop('checked', false);
                }
            });

            $uploadTable.on('change', '.select-control', function (e) {
                var row = getCurrentRow(e.target);
                validationOnRow(row);
            });

            $uploadTable.on('click', '#remove', function (e) {
                removeSelectedRow();
                validationForSubmitBtn();
                $('.row-item').removeClass('bg-error');
            });

            $uploadTable.on('change', '#checkbox-all', function (e) {
                var isChecked = e.target.checked;
                $('.file-checkbox').prop('checked', isChecked)
                $('.file-checkbox').first().trigger('change');
            });

            $uploadTable.find('#table-wrap').on('scroll', function (e) {
                $('.tagit-autocomplete').css("display", "none");
            });

            $uploadTable.on('input', '.ui-autocomplete-input', function (evt) {
                var currentRow = 0;
                var targetRow = evt.target.closest('tr').getAttribute('data-row');
                $.each($('.row-item'), function (i, element) {
                    if (element.getAttribute('data-row') == targetRow) {
                        currentRow = i;
                    }
                });

                $.each($('.tagit-autocomplete'), function (i, element) {
                    if (i != currentRow) {
                        element.style.setProperty('display', 'none');
                    }
                });

                var xTarget = parseInt(evt.target.getBoundingClientRect().x);
                var widthTarget = evt.target.closest('ul').getBoundingClientRect().width;

                setTimeout(function () {
                    $.each($('ul.ui-autocomplete'), function  (_, element) {
                        element.style.setProperty('left', `${xTarget - widthTarget + 240}px`, 'important');
                    });
                }, 0);
            });
        });

        function sequentialExecution(action, number, time) {
            var dfd = $.Deferred();
            if (action) {
                var curentIndex = 0;
                setTimeout(function continueAction() {
                    var loopCount = Math.min(number, curentIndex + MAX_ROWS_ALLOW_BULK_ACTION);
                    for (; curentIndex < loopCount; curentIndex++) {
                        action(curentIndex);
                    }
                    if (curentIndex < number) {
                        setTimeout(continueAction, time || 1);
                    } else {
                        dfd.resolve();
                    }
                }, time || 1);
            } else {
                dfd.resolve();
            }
            return dfd.promise();
        }
        return {
            submitNavReport: submitNavReport
        }
    })(jQuery);
</script>
