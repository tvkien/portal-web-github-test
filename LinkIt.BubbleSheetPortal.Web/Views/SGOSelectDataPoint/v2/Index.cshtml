@model LinkIt.BubbleSheetPortal.Web.ViewModels.SGO.SelectDataPointViewModel
@using LinkIt.BubbleSheetPortal.Web.Helpers
@using LinkIt.BubbleSheetPortal.Models
@{
    ViewBag.Title = HelperExtensions.FormatPageTitle(ContaintUtil.ReportItemSGOManager, "SGO Select Data Point",true);
    var currentUser = HttpContext.Current.GetCurrentUser();
    if (currentUser != null)
    {
        var isUseNewDesign = HelperExtensions.IsUseNewDesign(currentUser.DistrictId ?? 0);
        if (isUseNewDesign)
        {
            Layout = "~/Views/Shared/_Layout_v2.cshtml";
        }

    }
}

@section jQuery {
    @BundleHelper.jQueryUpgrade()
}

@LinkIt.BubbleSheetPortal.Web.Helpers.BundleHelper.StyleSGOManageStudentPopulationBundleV2()
<script src="@Url.Content("~/FeLibs/jquery-coolfieldset/js/jquery.coolfieldset.js")" type="text/javascript"></script>
<script src="@Url.Content("/Content/themes/AssignmentRegrader/js/css_browser_selector.js")" type="text/javascript"></script>
<script src="@Url.Content("~/FeLibs/jquery-validation/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/Lib/handsontable/pro/handsontable.full.min.css")" rel="stylesheet" type="text/css">
<script src="@Url.Content("~/Scripts/jquery.numeric.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/themes/TestMaker/ckeditor_utils.js")" type="text/javascript"></script>

<div class="FileLocation" style="display: none;">FileLocation: SGOSelectDataPoint\Index</div>
<style>
    .bntCreate {
        margin-right: 24px;
    }

    #divTopic .no-margin, #divSkill .no-margin, #divOther .no-margin {
        margin-left: 0px;
        margin-right: 0px;
    }


    select[name="dataTable_length"] {
        min-width: 60px !important;
    }

    ul.message, .validation-summary-errors ul {
        padding: 6px;
    }

    .attachment-item {
        display: inline-block;
        vertical-align: middle;
    }

        .attachment-item:hover,
        .attachment-item:focus {
            color: #52a6d1;
            cursor: pointer;
        }

        .attachment-item > img {
            width: 22px;
            position: relative;
            top: -1px;
        }

    select[name="selectTestPreAssessmentCustom"] {
        border-color: transparent;
    }

    select[name="selectTestPostAssessmentExternal"] {
        border-color: transparent;
    }
</style>


<style>
    .sgo-columns {
        background-color: var(--blue1);
        padding: 24px;
    }

    .sgo-columns ol {
        margin-left: 35px;
        margin-top: 16px;
    }

    .sgo-columns ol li {
        margin-bottom: 8px;
        list-style: decimal !important;
    }

    #linkRationale {
        text-decoration: none;
    }

    #divDirection ol {
        list-style: decimal !important;
    }

    #divDirection ol li {
        margin-bottom: 8px;
    }

    #fsPreAssessmentDataPoint,
    #fsPostAssessmentDataPoint,
    #fsSGONote {
        padding: 0 !important;
    }

    #txtSGONote {
        border: 2px solid var(--selectBorder)
    }

    #btnSaveNote {
        height: fit-content;
    }

    #continueDialogComfirmation .foot-content .red-btn:hover,
    .ui-dialog .dialog-custom-new-skin .foot-content .red-btn:hover {
        background-color: var(--redHover);
    }

    @*style Popup when Starting Points clicked*@
    .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] {
        width: auto !important;
        padding: 0 !important;
    }

    .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] .ui-dialog-titlebar {
        display: none;
    }

    .ui-dialog[aria-labelledby="ui-dialog-title-CustomAlertDialog"] section{
        width: 450px !important;
    }

    #CustomAlertDialog {
        padding: 0 !important;
    }

    #CustomAlertDialog section {
        margin-bottom: 0 !important;
    }

    #CustomAlertDialog .block-border {
        width: 100% !important;
    }

    #CustomAlertDialog .block-content {
        padding: 24px !important;
    }

    .btn-wrapper {
        display: flex;
        justify-content: flex-end
    }

    .handsontable table.htCore {
        border-collapse: collapse !important;
    }

    .uploadifive-button {
        height: fit-content !important;
        line-height: unset !important;
        width: 400px !important;
        border-radius: unset;
        background-image: unset !important;
        background-color: var(--white);
        text-shadow: unset !important;
        text-transform: unset !important
    }

    .uploadifive-button:hover {
        background-color: var(--blue3) !important;
        background-image: unset !important;
    }

    #title-deading {
        margin: 0 !important;
        padding: 12px 16px !important;
        background: var(--blue1) !important;
        border: none !important;
        color: var(--navyColor) !important;
        border: 2px solid var(--blue3) !important;
        border-radius: unset !important;
        box-shadow: none !important;
        font-weight: 700 !important;
    }

    .handsontable .handsontableInputHolder .handsontableInput {
        height: 31px !important;
    }

    select:disabled {
        background-color: var(--disabledColorBg) !important;
    }

    .disableMarquee {
        background-color: var(--disabledColorBg) !important;
    }

    .disableMarquee span {
        background-color: var(--disabledColorBg) !important;
    }
</style>

<article class="container_12" id="idTopNavigation">
    @Html.Action("LoadNavigation", "SGOManage", new { sgoId = Model.SgoId })
    <section class="grid_12">
        <div class="block-border" id="selectFilters">
            <div class="block-content form bubbleSheetSelector">
                <input type="hidden" name="sgoId" value="@Model.SgoId" />
                <input type="hidden" name="sgoDataPointIds" value="@Model.SgoDataPointIds" />
                <input type="hidden" name="remainingSavingDataPoint" value="0" />
                <input type="hidden" name="redirectUrlAfterSavingAllDataPoint" value="" />

                <p class="title-large mb-4">
                    Select Data Points
                </p>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                <ul style="display: none" id="success-message" class="message success">
                    <li>Passage successfully deleted.</li>
                </ul>
                <div class="box-warning">
                    <img src="/Content/images/icons/icon-info.svg" class="ico-info">
                    @Html.Raw(Model.DirectionConfigurationValue)
                    <div class="mt-2">
                        <a id="linkStartingPoints" href="javascript:void(0)">Starting Points</a>
                    </div>
                </div>

                <hr class="my-4" />
                <fieldset class="coolfieldset qtiItemSelector fieldset-datapoint fieldset-relative" id="fsPreAssessmentDataPoint">
                    <div class="d-flex align-center justify-content-between">
                        <p class="title-large mb-0" style="font-size: 18px !important">Pre-Assessments</p>
                        <a href="javascript:void(0)" id="linkAddPreAssessmentDataPoint" class="btn btn-link pe-0">
                            Add Data Point
                            <i class="fa-solid fa-plus ms-2"></i>
                        </a>
                    </div>
                    <div class="mt-4" id="divPreDataPointSection">
                    </div>
                </fieldset>

                <hr class="my-4" />
                <fieldset class="coolfieldset qtiItemSelector fieldset-datapoint fieldset-relative" id="fsPostAssessmentDataPoint">
                    <div class="d-flex align-center justify-content-between mb-4">
                        <p class="title-large mb-0" style="font-size: 18px !important">Post-Assessment</p>
                        <a href="javascript:void(0)" id="linkAddPostAssessmentDataPoint" class="btn btn-link pe-0">
                            Add Data Point
                            <i class="fa-solid fa-plus ms-2"></i>
                        </a>
                    </div>
                    <div id="divPostDataPointSection">
                    </div>
                </fieldset>

                <hr class="my-4" />
                @Html.Action("LoadSGONote", "SGOManage", new { sgoId = Model.SgoId, pageName = LinkIt.BubbleSheetPortal.Models.SGO.SGOPageNameConstant.DataPoint, layoutV2 = "true" })

                <hr class="my-4" />
                <div class="d-flex justify-content-end">
                    <button id="btnContinue" class="btn-red" type="button">Continue</button>
                </div>
            </div>
        </div>
    </section>
</article>
<input type="hidden" id="idhdfRationalTobeCreate" value="" />

<script type="text/javascript">
    var unBlockDataPointCounter = 0;

    $(function() {
        breadcrumbDetailPage('.stats', '#rpSGOManager');

        window.oldJSONData = GetJSONDataSelectDataPoint(); // Init empty list of datapoint

        var preAssessmentDataPointIds = getPreAssessmentDataPointIds();
        if (preAssessmentDataPointIds.length) {
            $.each(preAssessmentDataPointIds, function (_, preAssessmentDataPointId) {
                loadSelectTestType(preAssessmentDataPointId, 'PreAssessment', 1);
            });
        }

        var postAssessmentDataPointIds = getPostAssessmentDataPointIds();
        if (postAssessmentDataPointIds.length) {
            $.each(postAssessmentDataPointIds, function (_, postAssessmentDataPointId) {
                loadSelectTestType(postAssessmentDataPointId, 'PostAssessment', 1);
            });
        }

        initNavigationTabs(3, @Model.SgoId);
        registerFieldSetClassChangeEvent();
        verifyContinueButton();
    });

    function getPreAssessmentDataPointIds() {
        var sgoDataPointIdString = $('input[name="sgoDataPointIds"]').val();
        if (!sgoDataPointIdString) {
            return [];
        }

        return sgoDataPointIdString.split(';').filter(s => /^\d+\:PreAssessment$/.test(s)).map(s => Number(s.split(':')[0]));
    }

    function getPostAssessmentDataPointIds() {
        var sgoDataPointIdString = $('input[name="sgoDataPointIds"]').val();
        if (!sgoDataPointIdString) {
            return [];
        }

        return sgoDataPointIdString.split(';').filter(s => /^\d+\:PostAssessment$/.test(s)).map(s => Number(s.split(':')[0]));
    }

    function showWarningOverMaximumPrePostAssessments() {
        var msg = 'You are allowed a maximum of @Model.SGOMAXPreAssessment pre-assessment data point(s) and @Model.SGOMAXPostAssessment post-assessment data point(s).';
        CustomAlert(msg, true);
    }

    function verifyContinueButton() {
        if ($('input[name="sgoDataPointIds"]').val() == '') {
            $('#btnContinue').hide();
        } else {
            $('#btnContinue').show();
        }
    }

    function registerFieldSetClassChangeEvent() {
        $.fn.classChange = function(callback) {
            if (MutationObserver) {
                var options = {
                    subtree: false,
                    attributes: true
                };

                var observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(e) {
                        if (e.target.tagName == 'FIELDSET' && e.attributeName == 'class') {
                            callback.call(e.target, e.attributeName);
                        }
                    });
                });

                return this.each(function() {
                    observer.observe(this, options);
                });
            }

            return null;
        }
    }

    function checkPermissionAccess(dataPoint) {

        var permissionAccess = parseInt('@Model.PermissionAccess');
        $('#idhdfRationalTobeCreate').attr('permission', permissionAccess);

        if (permissionAccess == 2 || permissionAccess == 4) {
            // Allow Create New DataPoint when status == 3
            var attrUnblock = $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').attr('unblock');
            if (typeof attrUnblock !== 'undefined' && attrUnblock !== false) {
                return;
            }

            var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();

            // All Edit (except change Type) when status == 3 & Type == PostAssessmentLinkit & was turn from To Be Created datapoint
            if ((testType === 'PostAssessment' || testType === 'PostAssessmentExternal' || testType.indexOf("PostAssessmentHistorical") >= 0 || testType.indexOf("PostAssessmentCustom") >= 0) && @Model.SgoStatusId === 3
                && $('input[name="temporaryEditPostAssessment"][datapoint="' + dataPoint + '"]').val() == 'true') {
                // $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').attr('disabled', 'disabled'); // TODO: ToBeCreated
                $('button[name="btnRemoveDataPoint"][datapoint="' + dataPoint + '"]').attr('disabled', 'disabled');
                return;
            }

            if (testType === 'PostAssessmentExternal') { // Allow to edit Post External datapoint at Minor Update status
                $('button[name="btnRemoveDataPoint"][datapoint="' + dataPoint + '"]').attr('disabled', 'disabled');
                $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').attr('disabled', 'disabled');
            } else {
                $('div[name="dataPoint"][dataPoint="' + dataPoint + '"] input' +
                ', div[name="dataPoint"][dataPoint="' + dataPoint + '"] select' +
                ', div[name="dataPoint"][dataPoint="' + dataPoint + '"] button' +
                ', div[name="dataPoint"][dataPoint="' + dataPoint + '"] a' +
                ', div[name="dataPoint"][dataPoint="' + dataPoint + '"] textarea').prop('disabled', 'disabled');

                // Allow to change testtype for ToBeCreated datapoint when status == 3 to convert it to Post Assessment datapoint
                if (testType == 'PostAssessmentToBeCreated' && '@Model.SgoStatusId' == '3') {
                    $.each($('select[name="selectTestType"][datapoint="' + dataPoint + '"] option'), function(index, value) {
                        if ($(value).val() != 'PostAssessment'
                            && $(value).val() != 'PostAssessmentToBeCreated'
                            && $(value).val() != 'PostAssessmentExternal'
                            && $(value).val().indexOf("PostAssessmentHistorical_") < 0
                            && $(value).val().indexOf("PostAssessmentCustom_") < 0)
                        {
                            $(value).remove();
                        }
                    });
                    $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').removeAttr('disabled');
                    $('input[name="temporaryEditPostAssessment"][datapoint="' + dataPoint + '"]').val('true');
                }

                $('#linkAddDataPoint').prop('disabled', 'disabled');
                $('#linkAddDataPoint img').prop('disabled', 'disabled');

                if ($('div[name="studentsList"][datapoint="' + dataPoint + '"]').length == 1) {
                    var studentListContainer = $('div[name="studentsList"][datapoint="' + dataPoint + '"]');

                    studentListContainer.handsontable({
                        cells: function(row, col, prop) {
                            var cellProperties = {};

                            if(permissionAccess != 4){
                                cellProperties.readOnly = true; // Always disable edit when not at MinorUpdate status
                            }else{
                                if (studentListContainer.handsontable('getSourceData')[row] != null) {

                                    if (col === 0 || col === 1) {
                                        cellProperties.readOnly = true; //make cell read-only if it is first row or 1st and 2nd columns
                                    } else {
                                        if (studentListContainer.handsontable('getSourceData')[row][6] == 0 || studentListContainer.handsontable('getSourceData')[row][7] != null){
                                            cellProperties.readOnly = true;
                                        }else{
                                            cellProperties.readOnly = false; // do not make cell read-only if it is the student added at prepareness group step
                                        }
                                    }
                                }
                            }

                            return cellProperties;
                        },
                        licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
                    });
                }

                // Enable save button to save file upload for PreAssessmentExternal and PostAssessmentToBeCreated
                if ((testType == 'PreAssessmentExternal' || testType == 'PostAssessmentToBeCreated' || testType == 'PostAssessmentExternal') &&
                (permissionAccess == 4))
                {
                    $('button[name="btnSaveDataPoint"][dataPoint="' + dataPoint + '"]').enable();
                    // Log
                    $(document).find('.btn-sgo-upload-v2 input[type="file"]').removeAttr('disabled');

                }
            }
        }

        $('#linkRationale').removeAttr('disabled');
        $('#btnSaveNote').prop('disabled', false);

        unBlockDataPointCounter--;
        if (unBlockDataPointCounter <= 0) {
            $('#idTopNavigation').unblock();
        }
    }

    function checkPermissionAccessForTags(dataPoint) {
        // All Edit (except change Type) when status == 3 & Type == PostAssessmentLinkit & was turn from To Be Created datapoint
        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
        if ((testType === 'PostAssessment' || testType === 'PostAssessmentExternal' || testType.indexOf("PostAssessmentHistorical") >= 0) && @Model.SgoStatusId === 3
            && $('input[name="temporaryEditPostAssessment"][datapoint="' + dataPoint + '"]').val() == 'true') {
            return;
        }

        var permissionAccess = parseInt('@Model.PermissionAccess');
        //If Unlock DataPoint Create When SGOStatus = 3
        if (permissionAccess == 2 || permissionAccess == 4) {
            $('div[name="dataPoint"][dataPoint="' + dataPoint + '"] input').prop('disabled', 'disabled');
        }
        $('#linkRationale').removeAttr('disabled');
    }

    function populateTestType(dataPoint, testType, dataPointGroupType, hasReview) {
        var sgoId = $('input[name="sgoId"]').val();
        $.get('@Url.Action("GetTestType", "SGOSelectDataPoint")', { sgoId: sgoId, dataPointGroupType: dataPointGroupType, hasReview: hasReview}, function (data) {
            addDefaultOption($('select[name="selectTestType"][datapoint="' + dataPoint + '"]'), "Test Type");
            addSelectListItems($('select[name="selectTestType"][datapoint="' + dataPoint + '"]'), data);

            if (testType != '') {
                $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(testType);
                var sgoDataPointId = $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val();
                loadDataPoint(dataPoint, testType, sgoDataPointId);
            }else if ('@Model.SgoStatusId' === '3') {
                // Force load PostAssessment datapoint when SGO is at Pre-Approved state
                testType = 'PostAssessment';
                $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(testType);

                $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').attr('disabled', 'disabled');

                $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').attr('unblock', 'unblock');
                var sgoDataPointId = $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val();
                loadDataPoint(dataPoint, testType, sgoDataPointId);
            }
        });
    }

    $('#linkAddPreAssessmentDataPoint').live("click", function () {
        @if(Model.PermissionAccess == (int)LinkIt.BubbleSheetPortal.Models.SGOPermissionEnum.FullUpdate)
        {
            <text>
                if ($('#divPreDataPointSection div[name="dataPoint"]').length >= @Model.SGOMAXPreAssessment) {
                    showWarningOverMaximumPrePostAssessments();
                    return;
                }

                loadSelectTestType(null, 'PreAssessment', 0);
            </text>
        }
    });

    $('#linkAddPostAssessmentDataPoint').live("click", function () {
        @if(Model.PermissionAccess == (int)LinkIt.BubbleSheetPortal.Models.SGOPermissionEnum.FullUpdate)
        {
            <text>
                if ($('#divPostDataPointSection div[name="dataPoint"]').length >= @Model.SGOMAXPostAssessment) {
                    showWarningOverMaximumPrePostAssessments();
                    return;
                }

                loadSelectTestType(null, 'PostAssessment', 0);
            </text>
        }
    });

    $('select[name="selectTestType"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        AssignDataPointLegentName(dataPoint, '');
        loadDataPoint(dataPoint, $(this).val());
        $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').marquee();
    });

    $('button[name="btnSaveDataPoint"]').live("click", function () {
        var dataPoint = $(this).attr("datapoint");

        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
        if (testType == 'PostAssessment') {
            if (validateSavePostAssessment(dataPoint)) {
                savePostAssessment(dataPoint);
            }
        } else if (testType == 'PreAssessment') {
            if (validateSavePreAssessment(dataPoint)) {
                savePreAssessment(dataPoint);
            }
        } else if (testType.indexOf('PreAssessmentHistorical_') >= 0) {
            if (validateSavePreAssessmentHistorical(dataPoint)) {
                savePreAssessmentHistorical(dataPoint);
            }
        } else if (testType.indexOf('PostAssessmentHistorical_') >= 0) {
            if (validateSavePostAssessmentHistorical(dataPoint)) {
                savePostAssessmentHistorical(dataPoint);
            }
        }else if (testType == 'PreAssessmentExternal') {
            if (validateSavePreAssessmentExternal(dataPoint)) {
                savePreAssessmentExternal(dataPoint);
            }
        }else if (testType == 'PostAssessmentExternal') {
            if (validateSavePostAssessmentExternal(dataPoint)) {
                savePostAssessmentExternal(dataPoint);
            }
        }
        else if (testType == 'PostAssessmentToBeCreated') {
            if (validateSavePostAssessmentToBeCreated(dataPoint)) {
                savePostAssessmentToBeCreated(dataPoint);
            }
        } else if (testType.indexOf('PreAssessmentCustom_') >= 0) {
            if (validateSavePreAssessmentCustom(dataPoint)) {
                savePreAssessmentCustom(dataPoint);
            }
        } else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            if (validateSavePostAssessmentCustom(dataPoint)) {
                var scoreType = $('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').val();
                if(scoreType >= 9 && scoreType <= 12) //customText
                {
                    //var msg = '<div class="text-left">The score type you have chosen for your post-assessment cannot be used for auto-scoring your SGO. Would you like to proceed with manual scoring?</div>';
                    //CustomAlert(msg,true);
                    confirmMessageV2(
                        {
                            message: "The score type you have chosen for your post-assessment cannot be used for auto-scoring your SGO. Would you like to proceed with manual scoring?",
                            cbYesBtnFuncName: 'continueSave(' + dataPoint +' )',
                            cbCancelBtnFuncName: 'stopSave()',
                            cbCloseBtnFuncName: 'stopSave()'
                        },
                        {
                            dialogAttr: {
                                attr: {
                                    id: 'savePost'
                                }
                            }
                        }
                    )
                    return;
                }
                savePostAssessmentCustom(dataPoint);
            }
        }
    });
    function stopSave() {
        $("#savePost").dialog("close");
    }
    function continueSave(dataPoint) {
        stopSave();
        savePostAssessmentCustom(dataPoint);
    }

    function getVirtualTestValue(dataPoint) {

        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
        if (testType == 'PostAssessment') {
            return $('select[name="selectTestPostAssessment"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PreAssessment') {
            return $('select[name="selectTestPreAssessment"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PreAssessmentHistorical_') >= 0) {
            return $('select[name="selectTestPreAssessmentHistorical"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PostAssessmentHistorical_') >= 0) {
            return $('select[name="selectTestPostAssessmentHistorical"][dataPoint="' + dataPoint + '"]').val();
        }else if (testType == 'PreAssessmentExternal') {
            return $('select[name="selectTestPreAssessmentExternal"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PostAssessmentExternal') {
            return $('select[name="selectTestPostAssessmentExternal"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PostAssessmentToBeCreated') {
            return $('select[name="selectTestPostAssessment"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PreAssessmentCustom_') >= 0) {
            return $('select[name="selectTestPreAssessmentCustom"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            return $('select[name="selectTestPostAssessmentCustom"][dataPoint="' + dataPoint + '"]').val();
        }

        return '';
    };

    function getSubjectValue(dataPoint) {

        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();

        if (testType == 'PostAssessment') {
            return $('select[name="selectSubjectPostAssessment"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PreAssessment') {
            return $('select[name="selectSubjectPreAssessment"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PreAssessmentHistorical_') >= 0) {
            return $('select[name="selectSubjectPreAssessmentHistorical"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PreAssessmentExternal') {
            return $('select[name="selectSubjectPreAssessmentExternal"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType == 'PostAssessmentExternal') {
            return $('select[name="selectSubjectPostAssessmentExternal"][dataPoint="' + dataPoint + '"]').val();
        }
        else if (testType == 'PostAssessmentToBeCreated') {
            return $('select[name="selectSubjectPostAssessmentToBeCreated"][dataPoint="' + dataPoint + '"]').val();
        }

        return '';
    };

    $('button[name="btnRemoveDataPoint"]').live("click", function () {
        var dataPoint = $(this).attr("datapoint");
        customConfirm('Do you want to delete this Data Point?', {
            minWidth: '350px',
            buttons: [
                {
                    label: 'No',
                    color: 'grey',
                    style: "background: none;",
                    callback: function () {
                        $(this).dialog("close");
                    }
                },
                {
                    label: 'Yes',
                    color: 'red',
                    callback: function () {
                        $(this).dialog("close");
                        deleteDataPoint(dataPoint);
                    }
                }
            ]
        })
    });

    function deleteDataPoint(dataPoint) {
        var sgoDataPointId = $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val();

        if (sgoDataPointId > 0) {
            var data = {
                sgoId: $('input[name="sgoId"]').val(),
                sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            };

            var url = '@Url.Action("DeleteDataPoint", "SGOSelectDataPoint")';

            ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");
            $.ajax({
                type: "POST",
                url: url,
                data: data
            })
                .done(function (response) {
                    if (response.Success == true) {
                        $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').remove();
                        syncSgoDatapointIds();
                        verifyContinueButton();
                        RemoveJSONDataSelectDataPoint(dataPoint);
                    } else {
                        $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').empty();
                        $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').append('<li>' + response.ErrorMessage + '</li>');
                        $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').show();

                        $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').hide();
                        $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').unblock();
                    }
                });
        } else {
            $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').remove();
            syncSgoDatapointIds();
            verifyContinueButton();
            RemoveJSONDataSelectDataPoint(dataPoint);
        }
    }

    function syncSgoDatapointIds() {
        var sgoDataPointIdArray = [];

        // sync PreAssessmentDataPoints
        $('#divPreDataPointSection input[name="sgoDataPointId"]').each(function (_, element) {
            sgoDataPointIdArray.push($(element).val() + ':PreAssessment');
        });

        // sync PostAssessmentDataPoints
        $('#divPostDataPointSection input[name="sgoDataPointId"]').each(function (_, element) {
            sgoDataPointIdArray.push($(element).val() + ':PostAssessment');
        });

        $('input[name="sgoDataPointIds"]').val(sgoDataPointIdArray.join(';'));
    }

    function loadSelectTestType(sgoDataPointId, dataPointGroupType, hasReview) {

        var newdataPointIndex = getNewDataPointIndex();

        if (dataPointGroupType == 'PreAssessment') {
            $('#divPreDataPointSection').append('<div name="dataPoint" dataPoint="' + newdataPointIndex + '"></div>');
        } else {
            $('#divPostDataPointSection').append('<div name="dataPoint" dataPoint="' + newdataPointIndex + '"></div>');
        }

        var data = {
            DataPointIndex: newdataPointIndex,
            SgoDataPointId: sgoDataPointId,
            DataPointGroupType: dataPointGroupType,
            HasReview: hasReview
        };
        $.ajax({
            type: "POST",
            url: '@Url.Action("LoadSelectTestType")',
            data: data
        })
            .done(function (response) {
                $('div[name="dataPoint"][datapoint="' + newdataPointIndex + '"]').html(response);
            });
    }

    function getNewDataPointIndex() {
        for (var i = 1; i < 100; i++) {
            if ($('div[name="dataPoint"][dataPoint="' + i + '"]').length == 0)
                return i;
        }
        return 0;
    }

    function getSelectedValues(checkBoxName, dataPoint) {
        return $('input[name="' + checkBoxName + '"][dataPoint="' + dataPoint + '"]:checked').map(function() {
            return this.value;
        }).get().join(";");
    }

    function loadDataPoint(dataPoint, testType, sgoDataPointId) {
        $('div[name="divDataPointContent"][datapoint="' + dataPoint + '"]').html(''); // Clear data of this data point

        var url = '';
        if (testType == 'PostAssessment') {
            url = '@Url.Action("LoadPostAssessmentTest")?layoutV2=true';
        } else if (testType == 'PreAssessment') {
            url = '@Url.Action("LoadPreAssessmentTest")?layoutV2=true';
        } else if (testType.indexOf('PreAssessmentHistorical_') >= 0) {
            url = '@Url.Action("LoadPreAssessmentHistoricalTest")?layoutV2=true';
        } else if (testType.indexOf('PostAssessmentHistorical_') >= 0) {
            url = '@Url.Action("LoadPostAssessmentHistoricalTest")?layoutV2=true';
        } else if (testType == 'PreAssessmentExternal') {
            url = '@Url.Action("LoadPreAssessmentExternalTest")?layoutV2=true';
        } else if (testType == 'PostAssessmentExternal') {
            url = '@Url.Action("LoadPostAssessmentExternalTest")?layoutV2=true';
        } else if (testType == 'PostAssessmentToBeCreated') {
            url = '@Url.Action("LoadPostAssessmentToBeCreatedTest")?layoutV2=true';
        } else if (testType.indexOf('PreAssessmentCustom_') >= 0) {
            url = '@Url.Action("LoadPreAssessmentCustomTest")?layoutV2=true';
        } else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            url = '@Url.Action("LoadPostAssessmentCustomTest")?layoutV2=true';
        }
        else {
            return;
        }

        var data = {
            SGOId: $('input[name="sgoId"]').val(),
            DataPointIndex: dataPoint,
            SGODataPointId: sgoDataPointId
        };

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                $('div[name="divDataPointContent"][datapoint="' + dataPoint + '"]').html(response);

                // Call this function right after load datapoint content to lock select test type and remove button
                if ($('input[name="temporaryEditPostAssessment"][dataPoint="' + dataPoint + '"]').val() == 'true') {
                    checkPermissionAccess(dataPoint);
                }

            });
    }

    function AssignDataPointLegentName(dataPoint, testName) {
        if (testName) { // Has value
            $('legend[name="legendTestName"][datapoint="' + dataPoint + '"]').text(testName);
            $('legend[name="legendTestName"][datapoint="' + dataPoint + '"]').append('<i class="fa-solid fa-chevron-down ml-10" style="float: right"></i>')
        } else {
            // Do not reset datapoint name when page loading (all fieldsets are collapse)
            if ($('fieldset[name="fsDataPoint"][dataPoint="1"]').hasClass('expanded')) {
                $('legend[name="legendTestName"][datapoint="' + dataPoint + '"]').text('Data Point #' + dataPoint);
            }
        }
    }

    function DetectDataPointIndex(dataPoint) {
        var dataPointIndex = $('div[name="dataPoint"]').index($('div[name="dataPoint"][datapoint="' + dataPoint + '"]')) + 1;

        return dataPointIndex;
    }

    function GetVirtualTestIdBasedOnTestType(dataPoint) {
        var virtualTestId = 0;
        if ($('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val();
        } else if ($('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').length > 0) {
            virtualTestId = $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();
        }

        if (virtualTestId == 'select')
            virtualTestId = 0;

        return virtualTestId;
    }

    function isUnSelected(value, defaultValue) {
        if (value && value != 'select')
            return value;
        return defaultValue;
    }

    function bindInitValueForDropDownListScoreType(selectObjectName, containerObjectName, dataPoint) {
        var value = $('input[name="' + containerObjectName + '"][datapoint="' + dataPoint + '"]').val();
        if (value && value != '0' && $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').val() != value)
        {
            var subScoreId = $('input[name="txtHiddenSubScoreId"][datapoint="' + dataPoint + '"]').val();
            if (!!subScoreId && subScoreId > 0) {
                value = value + '_' + subScoreId;
            }
            $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').val(value);
            $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').change();
            $('input[name="' + containerObjectName + '"][datapoint="' + dataPoint + '"]').val(''); // Clear init value so that just binding once
        }
    }

    function bindInitValueForDropDownList(selectObjectName, containerObjectName, dataPoint) {
        var value = $('input[name="' + containerObjectName + '"][datapoint="' + dataPoint + '"]').val()?.trim();
        if (value && value != '0' && $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').val() != value) {
            $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').val(value);
            $('select[name="' + selectObjectName + '"][datapoint="' + dataPoint + '"]').change();
            $('input[name="' + containerObjectName + '"][datapoint="' + dataPoint + '"]').val(''); // Clear init value so that just binding once
        }
    }

    function bindInitValueForCheckBox(checkboxObjectName, containerObjectName, dataPoint) {
        var filterString = $('input[name="' + containerObjectName + '"][dataPoint="' + dataPoint + '"]').val();
        if (filterString) {
            var filterIds = filterString.split(';');
            $.each(filterIds, function (index, value) {
                $('input[name="' + checkboxObjectName + '"][dataPoint="' + dataPoint + '"][value="' + value + '"]').attr('checked', 'checked');
            });
        }
        if (checkboxObjectName == 'chkStandard') {
            toogleCheckboxV2Skin(false, $('input[name="chkAllStandard"][dataPoint="' + dataPoint + '"]'));
            updateStandardCheckAllCheckbox(dataPoint);
        }

        if (checkboxObjectName == 'chkClusterScore') {
            toogleCheckboxV2Skin(false, $('input[name="chkAllClusterScore"][dataPoint="' + dataPoint + '"]'));
            updateClusterScoreCheckAllCheckbox(dataPoint)
        }

        if (checkboxObjectName == 'chkTopic') {
            toogleCheckboxV2Skin(false, $('input[name="chkAllTopic"][dataPoint="' + dataPoint + '"]'));
            updateTopicCheckAllCheckbox(dataPoint)
        }

        if (checkboxObjectName == 'chkSkill') {
            toogleCheckboxV2Skin(false, $('input[name="chkAllSkill"][dataPoint="' + dataPoint + '"]'));
            updateSkillCheckAllCheckbox(dataPoint)
        }

        if (checkboxObjectName == 'chkOther') {
            toogleCheckboxV2Skin(false, $('input[name="chkAllOther"][dataPoint="' + dataPoint + '"]'));
            updateOtherCheckAllCheckbox(dataPoint)
        }
    }

    function processSaveDataPointResponse(dataPoint, response) {
        if (response.Success == true) {
            $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val(response.SgoDataPointId);

            if (response.VirtualTestId) {
                $('input[name="txtHiddenVirtualTestId"][dataPoint="' + dataPoint + '"]').val(response.VirtualTestId);
            }

            $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').hide();
            $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').show();

            syncSgoDatapointIds(); // Rebuild this value to load added data point when user press back button on browser

            RefreshJSONDataSelectDataPoint(dataPoint, true);

            if ($('input[name="redirectUrlAfterSavingAllDataPoint"]').val() != '') {
                var remainingSavingDataPoint = getMinusValue('remainingSavingDataPoint');

                if (remainingSavingDataPoint <= 0) {
                    var redirectUrlAfterSavingAllDataPoint = $('input[name="redirectUrlAfterSavingAllDataPoint"]').val();
                    $('input[name="redirectUrlAfterSavingAllDataPoint"]').val('');
                    window.location.href = redirectUrlAfterSavingAllDataPoint;
                }
            }

            verifyContinueButton();
            setTimeout(function () {
                $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').hide();
            }, 3000);
        }
        else {

            //addErrorMessages(response);
            $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').empty();
            $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').append('<li>' + response.ErrorMessage + '</li>');
            $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').show();

            $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').hide();
        }

        $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').unblock();
    }

    function getMinusValue(name) {
        var value = parseInt($('input[name="' + name + '"]').val());
        value--;
        $('input[name="' + name + '"]').val(value);

        return value;
    }

    //Edit
    $('#btnContinue').live("click", function ()
    {
        if (hasPostAssessmentDatapoint()) {
            executeContinue();
        } else {
            continueDialogComfirmation("You have not added a post-assessment data point, and will not be able to create your scoring plan. Are you sure you want to continue?");
        }
    });

    function continueDialogComfirmation(message) {
        confirmMessageV2(
            {
                message: message,
                cbYesBtnFuncName: 'HandleDialogOKClick()',
                cbCancelBtnFuncName: 'HandleDialogCancelClick()'
            },
            {
                dialogAttr: {
                    attr: {
                        id: 'continueDialogComfirmation'
                    }
                }
            }
        )
    }

    function HandleDialogOKClick(userId, operationType) {
         executeContinue();
    }

    function HandleDialogCancelClick() {
        $("#continueDialogComfirmation").dialog("close");
    }

    function executeContinue() {
        // Data form when page load done
        var oldJSONData = window.oldJSONData;
        // Data form after change tab
        var newJSONData;
        // Status form

        var url = "@Url.Action("EstablishStudentGroups", "SGOManage")/" + $('input[name="sgoId"]').val();

        window.paramsDirectPageSGO = url;

        var isDataChanged = false;
        newJSONData = GetJSONDataSelectDataPoint();
        if (JSON.stringify(oldJSONData) !== JSON.stringify(newJSONData)) {
            isDataChanged = true;
        }

        if (isDataChanged) {
            customConfirm('Do you want to save changes before moving to the next screen?', {
                minWidth: '500px',
                buttons: [
                    {
                        label: 'Cancel',
                        color: 'grey',
                        style: "background: none;"
                    },
                    {
                        label: 'No',
                        color: 'grey',
                        style: "background: none;",
                        callback: function () {
                            RedirectPage();
                        }
                    },
                    {
                        label: 'Yes',
                        color: 'red',
                        callback: function () {
                            SaveAndRedirectPage();
                        }
                    }
                ]
            })
            return false;
        }
        window.location.href = url;
    }

    /**
     * Save And Redirect Page
     */
    function SaveAndRedirectPage() {
        $('.popup-alert-controls button[id^="btn-"]').attr('disabled', 'disabled');
        $('div[id*="popup-alert-"]').dialog('destroy').remove();

        // Redirect params
        var param = window.paramsDirectPageSGO;

        if (param === undefined) {
            return;
        }
        var vStep = $('#idhdfSGOCurrentStep').val();
        supportNavigationSaveAndRedirect(param);
    }

    /**
     * Redirect Page
     */
    function RedirectPage() {
        $('.popup-alert-controls button[id^="btn-"]').attr('disabled', 'disabled');
        var vUrl = window.paramsDirectPageSGO;
        //console.log('Invalid URL');
        if (vUrl === undefined) {
            $('div[id*="popup-alert-"]').dialog('destroy').remove();
            return;
        }

        window.location.href = window.paramsDirectPageSGO;
    }

    function hasPostAssessmentDatapoint() {
        var hasPostAssessmentDatapoint = false;
        $('#fsPostAssessmentDataPoint').find('select[name=selectTestType]').each(function (index) {
            if ($(this).val() != '' && $(this).val() != 'select') {
                hasPostAssessmentDatapoint = true;
            }
        });

        return hasPostAssessmentDatapoint;
    }

    $('#linkStartingPoints').live("click", function() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetStartingPointInstruction", "SGOSelectDataPoint")',
            data: {}
        })
            .done(function (response) {
                var msg = '<div class="text-left sgo-instruction"> ' + response.InstructionMessage + ' </div>';
                showConfirmMess(msg);
            }).always(function () {
                var elHeight = $('.ui-dialog[aria-labelledby="ui-dialog-title-confirmMessDialogStartingPoint"] section').height();
                var windowHeight = $(window).height();
                if (elHeight > windowHeight) {
                    $(window).scrollTop(0);
                }
            });
    });

    function showConfirmMess(msg) {
        confirmMessageV2(
            {
                message: msg,
                cbYesBtnFuncName: 'confirmYes()',
            },
            {
                dialogAttr: {
                    attr: {
                        id: 'confirmMessDialogStartingPoint'
                    }
                },
                option: {
                    width: 800
                }
            }
        )
    }

    function confirmYes() {
        $('#confirmMessDialogStartingPoint').dialog("close")
    }

    $('#linkRationale').live("click", function () {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetRationaleInstruction", "SGOSelectDataPoint")',
            data: {}
        })
            .done(function (response) {
                var msg = '<div class="text-left sgo-instruction"> '+ response.InstructionMessage +' </div>';
                showConfirmMess(msg);
            }).always(function () {
                var elHeight = $('.ui-dialog[aria-labelledby="ui-dialog-title-confirmMessDialogStartingPoint"] section').height();
                var windowHeight = $(window).height();
                var positionBtn = window.pageYOffset;
                positionBtn = positionBtn - (elHeight - windowHeight) - 100;
                if (elHeight > windowHeight) {
                    $(window).scrollTop(positionBtn);
                }
            });
    });

    function supportNavigationSaveAndRedirect(param) {
        $('input[name="redirectUrlAfterSavingAllDataPoint"]').val(param);
        $('input[name="remainingSavingDataPoint"]').val($('button:enabled[name="btnSaveDataPoint"]').length);
        if (validateAllDataPoint()) {
            saveAllDataPoint(param);
        } else {
            //$('div[id*="popup-alert-"]').dialog('destroy').remove();

            //validateAllDataPoint(); // Do it again to re-show error message (already closed above command)
        }
    }

    function validateAllDataPoint() {
        var result = true;

        $('button[name="btnSaveDataPoint"]').each(function() {
            var dataPoint = $(this).attr("datapoint");

            var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
            if (testType == 'PostAssessment') {
                if (!validateSavePostAssessment(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType == 'PreAssessment') {
                if (!validateSavePreAssessment(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType.indexOf('PreAssessmentHistorical_') >= 0) {
                if (!validateSavePreAssessmentHistorical(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType == 'PreAssessmentExternal') {
                if (!validateSavePreAssessmentExternal(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType == 'PostAssessmentExternal') {
                if (!validateSavePostAssessmentExternal(dataPoint)) {
                    result = false;
                    return false;
                }
            }
            else if (testType == 'PostAssessmentToBeCreated') {
                if (!validateSavePostAssessmentToBeCreated(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType.indexOf('PreAssessmentCustom_') >= 0) {
                if (!validateSavePreAssessmentCustom(dataPoint)) {
                    result = false;
                    return false;
                }
            } else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
                if (!validateSavePostAssessmentCustom(dataPoint)) {
                    result = false;
                    return false;
                }
            }
        });

        return result;
    }


    function saveAllDataPoint(redirectUrl) {
        $('input[name="redirectUrlAfterSavingAllDataPoint"]').val(redirectUrl);
        $('input[name="remainingSavingDataPoint"]').val($('button:enabled[name="btnSaveDataPoint"]').length);

        $('button[name="btnSaveDataPoint"]').each(function() {
            $(this).trigger("click");
        });
    }

    function validateDuplicateVirtualTest(){
        if (unBlockDataPointCounter <= 0 && hasDuplicateSelectedVirtualtest()){
            CustomAlert('Please make sure the test you have selected is not used in any other data point.', true);
        }
    }

    function hasDuplicateSelectedVirtualtest(){
        var selectedVirtualTests = [];
        for(var i = 0; i < $('select[name="selectTestPostAssessmentCustom"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPostAssessmentCustom"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPostAssessmentExternal"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPostAssessmentExternal"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPostAssessmentHistorical"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPostAssessmentHistorical"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPostAssessment"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPostAssessment"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPreAssessmentCustom"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPreAssessmentCustom"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPreAssessmentExternal"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPreAssessmentExternal"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPreAssessmentHistorical"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPreAssessmentHistorical"]')[i]);
        }

        for(var i = 0; i < $('select[name="selectTestPreAssessment"]').length; i++){
            selectedVirtualTests.push($('select[name="selectTestPreAssessment"]')[i]);
        }

        var selectedVirtualTestIds = [];
        for(var i = 0; i < selectedVirtualTests.length; i++){
            if($(selectedVirtualTests[i]).val() != null && $(selectedVirtualTests[i]).val() != '' && $(selectedVirtualTests[i]).val() != 'select'){
                if(selectedVirtualTestIds.indexOf($(selectedVirtualTests[i]).val()) >= 0){
                    return true;
                }
                selectedVirtualTestIds.push($(selectedVirtualTests[i]).val());
            }
        }

        return false;
    }
</script>

<!-- ################################################### PARTIAL:STATESTANDARD DATATABLES ##############################################-->
<script type="text/javascript">
    $('select[name="selectStateStandard"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() == 'select' || $(this).val() == '-1') {
            $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(getAjaxSourceForMasterStandard(dataPoint));
            return;
        } else {
            populateSubjectStandards(dataPoint);
        }
    });

    $('select[name="selectSubjectStandard"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() == 'select' || $(this).val() == '-1') {
            $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(getAjaxSourceForMasterStandard(dataPoint));
            return;
        } else {
            populateGradeStandards(dataPoint);
        }
    });

    $('select[name="selectGradeStandard"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        if ($('input[name="txtHiddenStateStandardFilters"][datapoint="' + dataPoint + '"]').val() != '') {
            var selectedMasterStandardId = $('input[name="txtHiddenStateStandardFilters"][datapoint="' + dataPoint + '"]').val().split(';')[0];
            GetStandardWhenInitDataPoint(dataPoint, selectedMasterStandardId);
        } else {
            $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(getAjaxSourceForMasterStandard(dataPoint));
        }
    });

    function populateStateStandards(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var virtualTestId = GetVirtualTestIdBasedOnTestType(dataPoint);

        $.get('@Url.Action("GetMasterStandardState", "SGOSelectDataPoint")', { sgoId: sgoId, virtualTestId: virtualTestId }, function (data) {
            addDefaultOption($('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]'), "State");
            addSelectListItems($('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]'), data);

            if (data.length != 1) {
                $('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]').change(); // Call change event to force refresh StateStandard datatable
            }
        });
    }

    function populateSubjectStandards(dataPoint) {
        var virtualTestId = GetVirtualTestIdBasedOnTestType(dataPoint);
        var stateId = $('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetMasterStandardSubject", "SGOSelectDataPoint")', { stateId: stateId, virtualTestId: virtualTestId }, function (data) {
            addDefaultOption($('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
            addSelectListItems($('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"]'), data);

            if (data.length != 1) {
                $('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"]').change(); // Call change event to force refresh StateStandard datatable
            }
        });
    }

    function populateGradeStandards(dataPoint) {
        var virtualTestId = GetVirtualTestIdBasedOnTestType(dataPoint);
        var stateId = $('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"] option:selected').text();

        $.get('@Url.Action("GetMasterStandardGrade", "SGOSelectDataPoint")', { stateId: stateId, subjectName: subjectName, virtualTestId: virtualTestId }, function (data) {
            addDefaultOption($('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
            addSelectListItems($('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"]'), data);

            if (data.length != 1) {
                $('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"]').change(); // Call change event to force refresh StateStandard datatable
            }
        });
    }

    function LoadStandardTable(dataPoint) {
        var options = {
            bServerSide: true,
            bDestroy: true,
            sAjaxSource: getAjaxSourceForMasterStandard(dataPoint),
            fnServerParams: function (aoData) {
                //TuanVo:encode text in filter searchbox
                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''"); // when user type " or "", or """,...in searchbox, system will issue an error, this code fix that error
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;
                    }
                    if (item.name == 'iDisplayLength') {
                        item.value = '1000000000';
                        break;
                    }
                }

            },
            bFilter: false,
            bPaginate: false,
            bStateSave: false,
            bAutoWidth: false,
            iDisplayLength: 10,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'string', sName: 'GUID', bSearchable: false, bSortable: false, sWidth: "50px" },
                { sType: 'integer', sName: 'MasterStandardID', bSearchable: false, bSortable: false, bVisible: true },
                { sType: 'string', sName: 'Number', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'Description', bSearchable: true, bSortable: true },
                { sType: 'integer', sName: 'Level', bSearchable: false, bSortable: false },
                { sType: 'integer', sName: 'Children', bSearchable: false, bSortable: false, bVisible: false },
                { sType: 'string', sName: 'ParentGUID', bSearchable: false, bSortable: false, bVisible: false },
                { sType: 'integer', sName: 'DescendantItemCount', bSearchable: false, bSortable: false, bVisible: false }

            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(setCheckBoxStandard(dataPoint, aData[1]));
                $('td:eq(1)', nRow).html(setIconViewParentStandards(dataPoint, aData[1], aData[4]));
                $('td:eq(3)', nRow).attr('id', aData[1]);//Add attribute Id for column Description as MasterStandardID
                $('td:eq(4)', nRow).html(setIconViewChildStandards(dataPoint, aData[1], aData[7]));
                $('td:eq(0)', nRow).parent().attr('id', aData[1]);//set id for tr
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').unblock();
                $('.with-tip').tip();

                bindInitValueForCheckBox("chkStandard", "txtHiddenStateStandardFilters", dataPoint);

                // Just check permission after binding data to test dropdown
                var subjectValue = getSubjectValue(dataPoint);
                if (subjectValue != null && subjectValue != '') {
                    //checkPermissionAccess(dataPoint);
                }

                // Just check permission after binding data to test dropdown
                var virtualTestValue = getVirtualTestValue(dataPoint);

                if (virtualTestValue != null && virtualTestValue != '') {
                    checkPermissionAccess(dataPoint);
                    RefreshJSONDataSelectDataPoint(dataPoint, false);
                }
                oTable = $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable();
                var dataTable = oTable.fnGetData();
                modifyColumnViewTable(dataTable, dataPoint);
            }
        };

        $('table[name="dataTableMasterStandard"]').data("options", options);
        initializeDataTable($('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]'));
    }

    function modifyColumnViewTable(dataTable, dataPoint) {
        var columnDataViewParentDom = $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"] thead tr th:nth-child(2), table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"] tbody tr td:nth-child(2):not(".dataTables_empty")')
        var columnDataViewChildDom = $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"] thead tr th:last-child, table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"] tbody tr td:last-child:not(".dataTables_empty")')
        if (dataTable.length) {
            var isShowChildColumn = false;
            for (var i = 0, len = dataTable.length; i < len; i++) {
                if (dataTable[i][5] !== 0) isShowChildColumn = true;
            }
            if (dataTable[0][4] === 1) {
                columnDataViewParentDom.hide()
            } else {
                columnDataViewParentDom.show()
            }
            if (isShowChildColumn) {
                columnDataViewChildDom.show()
            } else {
                columnDataViewChildDom.hide()
            }
        } else {
            columnDataViewParentDom.hide()
            columnDataViewChildDom.hide()
        }
    }

    function getAjaxSourceForMasterStandard(dataPoint) {
        //$('input[name="chkAllStandard"][datapoint="' + dataPoint + '"]').removeAttr('checked');

        var virtualTestId = GetVirtualTestIdBasedOnTestType(dataPoint);
        var stateId = $('select[name="selectStateStandard"][datapoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectStandard"][datapoint="' + dataPoint + '"]').val();
        var gradeName = $('select[name="selectGradeStandard"][datapoint="' + dataPoint + '"] option:selected').text();

        if (virtualTestId == null || virtualTestId == '' || virtualTestId == 'select') {
            virtualTestId = 0;
        }

        var url = '@Url.Action("GetStateStandards", "SGOSelectDataPoint")/?virtualTestId=' + virtualTestId;

        if (stateId != 'select' && stateId != '-1') {
            url += '&stateId=' + stateId;
        }

        if (subjectName != 'select' && subjectName != '-1') {
            url += '&subjectName=' + subjectName;
        }

        if (gradeName != 'Select @LabelHelper.TestGrade' && gradeName != 'No Results Found') {
            url += '&gradeName=' + gradeName;
        }

        return url;
    }

    function setCheckBoxStandard(dataPoint, masterStandardId) {
        var checkboxString = '<input type="checkbox" name="chkStandard" dataPoint="' + dataPoint + '" value="' + masterStandardId + '"  />';

        return checkboxString;
    }
    function setIconViewParentStandards(dataPoint, masterStandardId, level) {
        if (level > 1) {
            var backIcon = '<i class="custom-icon fa-solid fa-circle-chevron-left icon-grey"></i>';
            var backString = '<a dataPoint="' + dataPoint + '" masterStandardId="' + masterStandardId + '" href="javascript:void(0);" onclick="GetStandardPreviousLevel(this);" title="<p style=\'font-size: 12px; margin: 0;\'>Back</p>" class="with-tip">' + backIcon + '</a>';
            return backString;
        } else {
            return '';
        }
    }
    function setIconViewChildStandards(dataPoint, masterStandardId, countChildren) {

        if (countChildren > 0) {
            var nextIcon = '<i class="custom-icon fa-solid fa-circle-chevron-right icon-grey"></i>';
            var nextString = '<a dataPoint="' + dataPoint + '" masterStandardId="' + masterStandardId + '" href="javascript:void(0);" onclick="GetStandardNextLevel(this);" title="<p style=\'font-size: 12px; margin: 0;\'>Next</p>" class="with-tip">' + nextIcon + '</a>';
            return nextString;
        } else {
            return '';
        }

    }

    function GetStandardNextLevel(control) {
        $('#tips').html('');
        var self = $(control);
        var masterStandardId = self.attr('masterStandardId');
        var dataPoint = self.attr('dataPoint');

        //$('input[name="chkAllStandard"][datapoint="' + dataPoint + '"]').removeAttr('checked');
        var url = getAjaxSourceForMasterStandard(dataPoint);
        url += '&parentMasterStandardId=' + masterStandardId;

        $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(url);
    }

    function GetStandardPreviousLevel(control) {
        $('#tips').html('');

        var self = $(control);
        var masterStandardId = self.attr('masterStandardId');
        var dataPoint = self.attr('dataPoint');

        //$('input[name="chkAllStandard"][datapoint="' + dataPoint + '"]').removeAttr('checked');

        var url = getAjaxSourceForMasterStandard(dataPoint);
        url += '&childMasterStandardId=' + masterStandardId;

        $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(url);
    }

    function GetStandardWhenInitDataPoint(dataPoint, masterStandardId) {
        $('#tips').html('');

        $('input[name="chkAllStandard"][datapoint="' + dataPoint + '"]').removeAttr('checked');

        var url = getAjaxSourceForMasterStandard(dataPoint);
        url += '&currentMasterStandardId=' + masterStandardId;

        $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(url);
    }

    function clearStandardTable(dataPoint) {
        $('table[name="dataTableMasterStandard"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax(getAjaxSourceForMasterStandard(dataPoint));
    }

    function clearStandardFilter(dataPoint) {
        $('select[name="selectStateStandard"][dataPoint="' + dataPoint + '"]').empty();
        $('select[name="selectSubjectStandard"][dataPoint="' + dataPoint + '"]').empty();
        $('select[name="selectGradeStandard"][dataPoint="' + dataPoint + '"]').empty();
        clearStandardTable(dataPoint);
    }

    $('input[name="chkAllStandard"]').live("click", function () {
        var dataPoint = $(this).attr('dataPoint');

        if (this.checked) {
            $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]').attr('checked', 'checked');
        }
        else {
            $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]').removeAttr('checked');
        }

        $.each($('input[name="chkStandard"][dataPoint="' + dataPoint + '"]'), function(i, item) {
            updateHiddenStateStandardFilters(item, dataPoint);
        });
    });

    $('input[name="chkStandard"]').live("click", function (e) {
        var dataPoint = $(this).attr('dataPoint');

        updateHiddenStateStandardFilters(this, dataPoint);
        updateStandardCheckAllCheckbox(dataPoint);
    });

    function updateHiddenStateStandardFilters(checkbox, dataPoint) {
        var currentId = [];
        if ($('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val() != '') {
            currentId = $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val().split(';');
        }

        var index = currentId.indexOf($(checkbox).val());
        if ($(checkbox).is(':checked')) {
            if (index < 0) {
                currentId.push($(checkbox).val());
            }
        } else {
            if (index >= 0) {
                currentId.splice(index, 1);
            }
        }

        $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val(currentId.join(';'));
    }

    function updateStandardCheckAllCheckbox(dataPoint) {
        var checkall = $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]').length > 0 && $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]:not(:checked)').length === 0;
        toogleCheckboxV2Skin(checkall, $('input[name="chkAllStandard"][dataPoint="' + dataPoint + '"]'));
    }

    function getSelectedStandardIds(dataPoint) {
        var standardIds = '';
        $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]:checked').each(function (i, e) {
            standardIds += $(e).val() + ',';
        });
        return standardIds.substr(0, standardIds.length - 1);
    }
    function getSelectedStandardNames(dataPoint) {
        var standardNames = '';
        $('input[name="chkStandard"][dataPoint="' + dataPoint + '"]:checked').each(function (i, e) {
            var number = $(e).parent().next().next().html();
            var description = $(e).parent().next().next().next().html();
            if (description == null) {
                description = '';
            }
            var name = '';
            if (number != null) {
                if (number.length > 0) {
                    //name = number + ' - ' + description;//no need description
                    name = number;
                }
            }
            if (name.length > 0) {
                standardNames = standardNames + name + ', ';
            }
        });
        return standardNames.substr(0, standardNames.length - 2);//remove the last ','
    }
</script>
<!-- ################################################### End of PARTIAL:STATESTANDARD DATATABLES ################################-->
<!-- ################################################### PARTIAL:TAGS DATATABLES #################################################-->
<script type="text/javascript">
    function LoadTopicTable(dataPoint) {

        var optionsTopic = {
            bServerSide: true,
            bFilter: false, // not allow search filter
            sAjaxSource: '@Url.Action("GetTopicsOfVirtualTest", "SGOSelectDataPoint")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualTestId", value: isUnSelected(GetVirtualTestIdBasedOnTestType(dataPoint), 0) }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'iDisplayLength') {
                        item.value = '1000000000';
                        break;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'TopicID', bSearchable: false, bSortable: false, sWidth: "50px" },
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayCheckboxTopic(dataPoint, aData[0]));
                $('td:eq(1)', nRow).html($('<div/>').text(aData[1]).html());
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('table[name="dataTableTopic"][dataPoint="' + dataPoint + '"]'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('table[name="dataTableTopic"][dataPoint="' + dataPoint + '"]').unblock();
                $('.with-tip').tip();
                bindInitValueForCheckBox("chkTopic", "txtHiddenTopicFilters", dataPoint);

                //$('#dataTableTopic_wrapper .block - controls').css('marginTop', '100px');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableTopic' + dataPoint).addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableTopic' + dataPoint).addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableTopicHeader' + dataPoint).addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }

                // Just check permission after binding data to test dropdown
                var virtualTestValue = getVirtualTestValue(dataPoint);
                if (virtualTestValue != null && virtualTestValue != '') {
                    checkPermissionAccessForTags(dataPoint);
                    RefreshJSONDataSelectDataPoint(dataPoint, false);
                }
            }
        };

        $('table[name="dataTableTopic"][dataPoint="' + dataPoint + '"]').data("options", optionsTopic);
        initializeDataTable($('table[name="dataTableTopic"][dataPoint="' + dataPoint + '"]'));
    }

    function LoadSkillTable(dataPoint) {
        var optionsSkill = {
            bServerSide: true,
            bFilter: false, // not allow search filter
            sAjaxSource: '@Url.Action("GetSkillsOfVirtualTest", "SGOSelectDataPoint")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualTestId", value: isUnSelected(GetVirtualTestIdBasedOnTestType(dataPoint), 0) }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'iDisplayLength') {
                        item.value = '1000000000';
                        break;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'LessonOneID', bSearchable: false, bSortable: false, sWidth: "50px" },
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayCheckboxSkill(dataPoint, aData[0]));
                $('td:eq(1)', nRow).html($('<div/>').text(aData[1]).html());
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('table[name="dataTableSkill"][dataPoint="' + dataPoint + '"]'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('table[name="dataTableSkill"][dataPoint="' + dataPoint + '"]').unblock();
                $('.with-tip').tip();
                bindInitValueForCheckBox("chkSkill", "txtHiddenSkillFilters", dataPoint);

                //$('#dataTableSkill' + dataPoint + '_wrapper .block-controls').css('marginTop', '100px');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableSkill' + dataPoint).addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableSkill' + dataPoint).addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableSkillHeader' + dataPoint).addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }

                // Just check permission after binding data to test dropdown
                var virtualTestValue = getVirtualTestValue(dataPoint);
                if (virtualTestValue != null && virtualTestValue != '') {
                    checkPermissionAccessForTags(dataPoint);
                    RefreshJSONDataSelectDataPoint(dataPoint, false);
                }
            }
        };

        $('table[name="dataTableSkill"][dataPoint="' + dataPoint + '"]').data("options", optionsSkill);
        initializeDataTable($('table[name="dataTableSkill"][dataPoint="' + dataPoint + '"]'));
    }

    function LoadOtherTable(dataPoint) {

        var optionsOther = {
            bServerSide: true,
            bFilter: false, // not allow search filter
            sAjaxSource: '@Url.Action("GetOthersOfVirtualTest", "SGOSelectDataPoint")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualTestId", value: isUnSelected(GetVirtualTestIdBasedOnTestType(dataPoint), 0) }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'iDisplayLength') {
                        item.value = '1000000000';
                        break;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'LessonTwoID', bSearchable: false, bSortable: false, sWidth: "50px" },
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayCheckboxOther(dataPoint, aData[0]));
                $('td:eq(1)', nRow).html($('<div/>').text(aData[1]).html());
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('table[name="dataTableOther"][dataPoint="' + dataPoint + '"]'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('table[name="dataTableOther"][dataPoint="' + dataPoint + '"]').unblock();
                $('.with-tip').tip();
                bindInitValueForCheckBox("chkOther", "txtHiddenOtherFilters", dataPoint);

                //$('#dataTableOther_wrapper .block - controls').css('marginTop', '100px');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableOther' + dataPoint).addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableOther' + dataPoint).addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableOtherHeader' + dataPoint).addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }

                // Just check permission after binding data to test dropdown
                var virtualTestValue = getVirtualTestValue(dataPoint);
                if (virtualTestValue != null && virtualTestValue != '') {
                    checkPermissionAccessForTags(dataPoint);
                    RefreshJSONDataSelectDataPoint(dataPoint, false);
                }
            }
        };

        $('table[name="dataTableOther"][dataPoint="' + dataPoint + '"]').data("options", optionsOther);
        initializeDataTable($('table[name="dataTableOther"][dataPoint="' + dataPoint + '"]'));
    }

    function DisplayCheckboxTopic(dataPoint, id) {
        return '<input dataPoint="' + dataPoint + '" type="checkbox" name="chkTopic" id="chkTopic_' + id + '" value="' + id + '">';
    }

    function DisplayCheckboxSkill(dataPoint, id) {
        return '<input dataPoint="' + dataPoint + '"type="checkbox" name="chkSkill" id="chkSkill_' + id + '" value="' + id + '">';
    }

    function DisplayCheckboxOther(dataPoint, id) {
        return '<input dataPoint="' + dataPoint + '"type="checkbox" name="chkOther" id="chkOther_' + id + '" value="' + id + '">';
    }

    function ReloadTags(dataPoint) {
        $('table[name="dataTableTopic"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax();
        $('table[name="dataTableSkill"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax();
        $('table[name="dataTableOther"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax();
    }
</script>
<!-- ################################################### End of TAGS DATATABLES ################################################-->
<!-- ################################################### PARTIAL:POSTASSESSMENT #######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPostAssessment"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePostAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPostAssessment(dataPoint);
        } else {
            clearStandardFilter(dataPoint);
            ReloadTags(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePostAssessment"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPostAssessment(dataPoint);
        } else {
            clearStandardFilter(dataPoint);
            ReloadTags(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPostAssessment"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");

        if ($(this).val() != 'select') {
            populateStateStandards(dataPoint);
            populateScoreTypesPostAssessment(dataPoint);

            // Clear StateStandard fileter data when change virtual test after first load datapoint
            if (parseInt($('input[name="txtRemainingAjaxRequest"][dataPoint="' + dataPoint + '"]').val()) <= 0) {
                $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val('');
                $('input[name="txtHiddenTopicFilters"][dataPoint="' + dataPoint + '"]').val('');
                $('input[name="txtHiddenSkillFilters"][dataPoint="' + dataPoint + '"]').val('');
                $('input[name="txtHiddenOtherFilters"][dataPoint="' + dataPoint + '"]').val('');
                $('input[name="txtHiddenClusterScoreFilters"][dataPoint="' + dataPoint + '"]').val('');
            }
            validateDuplicateVirtualTest();
        } else {
            clearStandardFilter(dataPoint);
        }

        ReloadTags(dataPoint);
        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"] option:selected').text());
    });

    function populateSubjectsPostAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        $.get('@Url.Action("GetSubjectsPostAssessment", "SGOSelectDataPoint")', {sgoId: sgoId, sgoDataPointId: sgoDataPointId}, function (data) {
            addDefaultOption($('select[name="selectSubjectPostAssessment"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
            addSelectListItems($('select[name="selectSubjectPostAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectSubjectPostAssessment", "txtHiddenSubjectName", dataPoint);
        });
    }

    function populateGradesPostAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPostAssessment"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetGradesPostAssessment", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, subjectName: subjectName }, function (data) {
            addDefaultOption($('select[name="selectGradePostAssessment"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
            addSelectListItems($('select[name="selectGradePostAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectGradePostAssessment", "txtHiddenGradeId", dataPoint);
        });
    }

    function populateTestsPostAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPostAssessment"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePostAssessment"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetTestsPostAssessment", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, subjectName: subjectName, gradeId: gradeId }, function (data) {
            addDefaultOption($('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]'), "Test");
            addSelectListItems($('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectTestPostAssessment", "txtHiddenVirtualTestId", dataPoint);
        });
    }

    function populateScoreTypesPostAssessment(dataPoint) {
        var virtualTestId = $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestId && virtualTestId != 'select') {
            $.get('@Url.Action("GetAssessmentScoreType", "SGOSelectDataPoint")', {
                virtualTestId: virtualTestId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: true,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectScoreTypePostAssessment", "txtHiddenScoreType", dataPoint);
            });
        }
    }

    function validateSavePostAssessment(dataPoint) {
        if (!$('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            CustomAlert(msg);
            return false;
        }

        if (!$('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select Score Type.</div>';
            CustomAlert(msg);
            return false;
        }

        var result = ValidateImprovementScoringPlanDataPointTypeAndScoreType(dataPoint);
        return result;
    }

    function ValidateImprovementScoringPlanDataPointTypeAndScoreType(dataPoint) {
        var virtualTestId = 0;
        var scoreType = 0;
        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
        if (testType == 'PostAssessment') {
            virtualTestId = $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val();
            scoreType = $('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').val();
        }
        else if (testType == 'PostAssessmentExternal') {
            virtualTestId = $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
            scoreType = $('select[name="selectScoreTypePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
        }
        else if (testType.indexOf('PostAssessmentHistorical_') >= 0) {
            virtualTestId = $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
            scoreType = $('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        }
        else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            virtualTestId = $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();
            scoreType = $('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();

            var scoreTypeArr = scoreType.split('_');
            if (scoreTypeArr.length > 1) {
                scoreType = scoreTypeArr[0];
            }
        }

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            virtualTestId: virtualTestId,
            scoreType: scoreType
        };

        var result = true;

        var url = '@Url.Action("ValidateImprovementScoringPlanDataPointTypeAndScoreType", "SGOSelectDataPoint")';
        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data,
            async: false
        })
            .done(function(verifyResponse) {

                $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').unblock();

                if (verifyResponse.Success == true) {
                    result = true;
                } else {
                    confirmMessageV2(
                        {
                            message: "The score type you have chosen for your post-assessment cannot be compared with the baseline pre-assessment selected or cannot be used for auto-scoring your SGO. Would you like to proceed with manual scoring?",
                            cbYesBtnFuncName: 'yesSave(' + dataPoint + ')',
                            cbCancelBtnFuncName: 'noSave()',
                            cbCloseBtnFuncName: 'noSave()'
                        },
                        {
                            dialogAttr: {
                                attr: {
                                    id: 'savePost'
                                }
                            }
                        }
                    )

                    result = false;
                }
            });

        return result;
    }

    function noSave() {
        $("#savePost").dialog("close");
    }

    function yesSave(dataPoint) {
        noSave();
            // Auto redirect to ScoringPlan page if SGO target score type is changed
        $('input[name="redirectUrlAfterSavingAllDataPoint"]').val('@Url.Action("Index","SGOScoringPlanTarget")/?sgoId=@Model.SgoId');

        var testType = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val();
        if(testType == 'PostAssessment')
            savePostAssessment(dataPoint);
        else if(testType == 'PostAssessmentExternal')
            savePostAssessmentExternal(dataPoint);
        else if (testType.indexOf('PostAssessmentHistorical_') >= 0 )
            savePostAssessmentHistorical(dataPoint);
        else if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            if (validateCustomScoreType(dataPoint)) // validate and save
            {
                savePostAssessmentCustom(dataPoint);
            }
        }
    }

    function savePostAssessment(dataPoint) {
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            rationaleGuidance: $('textarea[name="rationaleInstruction"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessment"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessment"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPostAssessment"][datapoint="' + dataPoint + '"]').val(),
            scoreType: $('select[name="selectScoreTypePostAssessment"][datapoint="' + dataPoint + '"]').val(),
            stateStandardFilters: $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val(),
            topicFilters: getSelectedValues('chkTopic', dataPoint),
            skillFilters: getSelectedValues('chkSkill', dataPoint),
            otherFilters: getSelectedValues('chkOther', dataPoint),
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val()
        };


        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");
        var url = '@Url.Action("SavePostAssessment", "SGOSelectDataPoint")';
        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function(response) {
                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of POST ASSESSMENT ##############################################-->
<!-- ################################################### PARTIAL:PREASSESSMENT ######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPreAssessment"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePreAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPreAssessment(dataPoint);
        } else {
            clearStandardFilter(dataPoint);
            ReloadTags(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePreAssessment"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPreAssessment(dataPoint);
        } else {
            clearStandardFilter(dataPoint);
            ReloadTags(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPreAssessment"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        if ($(this).val() != 'select') {
            populateStateStandards(dataPoint);
            populateScoreTypesPreAssessment(dataPoint);

            // Clear StateStandard fileter data when change virtual test after first load datapoint
            if (parseInt($('input[name="txtRemainingAjaxRequest"][dataPoint="' + dataPoint + '"]').val()) <= 0) {
                $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val('');
            }

            validateDuplicateVirtualTest();
        } else {
            clearStandardFilter(dataPoint);
        }

        ReloadTags(dataPoint);
        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"] option:selected').text());
    });

    function populateSubjectsPreAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        $.get('@Url.Action("GetSubjectPreAssessment", "SGOSelectDataPoint")', {sgoId: sgoId, sgoDataPointId: sgoDataPointId}, function (data) {
            addDefaultOption($('select[name="selectSubjectPreAssessment"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
            addSelectListItems($('select[name="selectSubjectPreAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectSubjectPreAssessment", "txtHiddenSubjectName", dataPoint);
        });
    }

    function populateGradesPreAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPreAssessment"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetGradePreAssessment", "SGOSelectDataPoint")', {sgoId: sgoId, sgoDataPointId: sgoDataPointId, subjectName: subjectName }, function (data) {
            addDefaultOption($('select[name="selectGradePreAssessment"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
            addSelectListItems($('select[name="selectGradePreAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectGradePreAssessment", "txtHiddenGradeId", dataPoint);
        });
    }

    function populateTestsPreAssessment(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPreAssessment"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePreAssessment"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetTestPreAssessment", "SGOSelectDataPoint")', { sgoId: sgoId, sgodataPointId: sgoDataPointId, subjectName: subjectName, gradeId: gradeId }, function (data) {
            addDefaultOption($('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]'), "Test");
            addSelectListItems($('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectTestPreAssessment", "txtHiddenVirtualTestId", dataPoint);
        });
    }

    function populateScoreTypesPreAssessment(dataPoint) {
        var virtualTestId = $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestId && virtualTestId != 'select') {
            $.get('@Url.Action("GetAssessmentScoreType", "SGOSelectDataPoint")', {
                virtualTestId: virtualTestId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: false,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]'), data);
                bindInitValueForDropDownList("selectScoreTypePreAssessment", "txtHiddenScoreType", dataPoint);
            });
        }
    }

    function validateSavePreAssessment(dataPoint) {
        if (!$('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            CustomAlert(msg);
            return false;
        }

        if (!$('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select Score Type.</div>';
            CustomAlert(msg);
            return false;
        }

        return true;
    }

    function savePreAssessment(dataPoint) {
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPreAssessment"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePreAssessment"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPreAssessment"][datapoint="' + dataPoint + '"]').val(),
            scoreType: $('select[name="selectScoreTypePreAssessment"][datapoint="' + dataPoint + '"]').val(),
            stateStandardFilters: $('input[name="txtHiddenStateStandardFilters"][dataPoint="' + dataPoint + '"]').val(),
            topicFilters: getSelectedValues('chkTopic', dataPoint),
            skillFilters: getSelectedValues('chkSkill', dataPoint),
            otherFilters: getSelectedValues('chkOther', dataPoint)
        };

        var url = '@Url.Action("SavePreAssessment", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of PRE ASSESSMENT ##########################################################-->
<!-- ################################################### PARTIAL:HISTORICAL (PRE ASSESSMENT HISTORICAL) ######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPreAssessmentHistorical"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePreAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePreAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPreAssessmentHistorical(dataPoint);
        } else {
            ReloadTestResultSubScore(dataPoint);

        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePreAssessmentHistorical"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePreAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPreAssessmentHistorical(dataPoint);
        } else {
            ReloadTestResultSubScore(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPreAssessmentHistorical"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        ReloadTestResultSubScore(dataPoint);
        populateScoreTypesPreAssessmentHistorical(dataPoint);
        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').text());
        validateDuplicateVirtualTest();
    });

    function populateScoreTypesPreAssessmentHistorical(dataPoint) {
        var virtualTestId = $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        if (virtualTestId && virtualTestId != 'select') {
            $.get('@Url.Action("GetAssessmentHistoricalScoreType", "SGOSelectDataPoint")', {
                virtualTestId: virtualTestId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: false,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);
                bindInitValueForDropDownList("selectScoreTypePreAssessmentHistorical", "txtHiddenScoreType", dataPoint);
            });
        }
    }


    function populateSubjectsPreAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetSubjectPreAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID }, function(data) {
                addDefaultOption($('select[name="selectSubjectPreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPreAssessmentHistorical", "txtHiddenSubjectName", dataPoint);
            });
        }
    }

    function populateGradesPreAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetGradePreAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID, subjectName: subjectName }, function(data) {
                addDefaultOption($('select[name="selectGradePreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
                addSelectListItems($('select[name="selectGradePreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePreAssessmentHistorical", "txtHiddenGradeId", dataPoint);
            });
        }
    }

    function populateTestsPreAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetTestPreAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID, subjectName: subjectName, gradeId: gradeId }, function (data) {
                addDefaultOption($('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "Test");
                addSelectListItems($('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectTestPreAssessmentHistorical", "txtHiddenVirtualTestId", dataPoint);
            });
        }
    }

    function LoaddataTestResultSubScoreTable(dataPoint) {
        var optionsTestResultSubScore = {
            bServerSide: true,
            bFilter: false, // not allow search filter
            sAjaxSource: '@Url.Action("GetTestResultSubScoreNameOfVirtualTest", "SGOSelectDataPoint")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualTestId", value: isUnSelected(GetVirtualTestIdBasedOnTestType(dataPoint), 0) }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'iDisplayLength') {
                        item.value = '1000000000';
                        break;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Cluster/Strands"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'TestResultSubScoreId', bSearchable: false, bSortable: false, sWidth: "50px" },
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayCheckboxTestResultSubScore(dataPoint, aData[0], aData[1]));
                $('td:eq(1)', nRow).html($('<div/>').text(aData[1]).html());
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('table[name="dataTableClusterScore"][dataPoint="' + dataPoint + '"]'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('table[name="dataTableClusterScore"][dataPoint="' + dataPoint + '"]').unblock();
                $('.with-tip').tip();
                bindInitValueForCheckBox("chkClusterScore", "txtHiddenClusterScoreFilters", dataPoint);

                //$('#dataTableTopic_wrapper .block - controls').css('marginTop', '100px');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableClusterScore' + dataPoint).addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableClusterScore' + dataPoint).addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableClusterScoreHeader' + dataPoint).addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }

                // Just check permission after binding data to test dropdown
                var virtualTestValue = getVirtualTestValue(dataPoint);
                if (virtualTestValue != null && virtualTestValue != '') {
                    checkPermissionAccess(dataPoint);
                    RefreshJSONDataSelectDataPoint(dataPoint, false);
                }
            }
        };

        $('table[name="dataTableClusterScore"][dataPoint="' + dataPoint + '"]').data("options", optionsTestResultSubScore);
        initializeDataTable($('table[name="dataTableClusterScore"][dataPoint="' + dataPoint + '"]'));
    }

    function DisplayCheckboxTestResultSubScore(dataPoint, id, name) {
        return '<input dataPoint="' + dataPoint + '" type="checkbox" name="chkClusterScore" id="chkClusterScore_' + id + '" value="' + name + '">';
    }

    function ReloadTestResultSubScore(dataPoint) {
        $('table[name="dataTableClusterScore"][datapoint="' + dataPoint + '"]').dataTable().fnReloadAjax();
    }

    function validateSavePreAssessmentHistorical(dataPoint) {
        if (!$('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            CustomAlert(msg);
            return false;
        }

        return true;
    }

    function savePreAssessmentHistorical(dataPoint) {
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPreAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            clusterScoreFilters: getSelectedValues('chkClusterScore', dataPoint),
            scoreType: $('select[name="selectScoreTypePreAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').val(),
            dataSetCategoryID : $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1]
        };

        var url = '@Url.Action("SavePreAssessmentHistorical", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of PRE ASSESSMENT HISTORICAL ##############################################-->
<!-- ################################################### PARTIAL:POSTHISTORICAL (POST ASSESSMENT HISTORICAL) ######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPostAssessmentHistorical"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPostAssessmentHistorical(dataPoint);
        } else {
            ReloadTestResultSubScore(dataPoint);

        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePostAssessmentHistorical"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPostAssessmentHistorical(dataPoint);
        } else {
            ReloadTestResultSubScore(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPostAssessmentHistorical"]').live("change", function() {
        var dataPoint = $(this).attr("datapoint");

        ReloadTestResultSubScore(dataPoint);
        populateScoreTypesPostAssessmentHistorical(dataPoint);
        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').text());
        validateDuplicateVirtualTest();
    });

    function populateScoreTypesPostAssessmentHistorical(dataPoint) {
        var virtualTestId = $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        if (virtualTestId && virtualTestId != 'select') {
            $.get('@Url.Action("GetAssessmentHistoricalScoreType", "SGOSelectDataPoint")', {
                virtualTestId: virtualTestId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: true,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);
                bindInitValueForDropDownList("selectScoreTypePostAssessmentHistorical", "txtHiddenScoreType", dataPoint);
            });
        }
    }

    function populateSubjectsPostAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetSubjectPostAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID }, function(data) {
                addDefaultOption($('select[name="selectSubjectPostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPostAssessmentHistorical", "txtHiddenSubjectName", dataPoint);
            });
        }
    }

    function populateGradesPostAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetGradePostAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID, subjectName: subjectName }, function(data) {
                addDefaultOption($('select[name="selectGradePostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "Grade");
                addSelectListItems($('select[name="selectGradePostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePostAssessmentHistorical", "txtHiddenGradeId", dataPoint);
            });
        }
    }

    function populateTestsPostAssessmentHistorical(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var dataSetCategoryID = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val();

        if (dataSetCategoryID) {
            $.get('@Url.Action("GetTestPostAssessmentHistorical", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, dataSetCategoryID: dataSetCategoryID, subjectName: subjectName, gradeId: gradeId }, function(data) {
                addDefaultOption($('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), "Test");
                addSelectListItems($('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectTestPostAssessmentHistorical", "txtHiddenVirtualTestId", dataPoint);
            });
        }
    }

    function validateSavePostAssessmentHistorical(dataPoint) {
        if (!$('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            CustomAlert(msg);
            return false;
        }

        return ValidateImprovementScoringPlanDataPointTypeAndScoreType(dataPoint);
    }

    function savePostAssessmentHistorical(dataPoint) {
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            rationaleGuidance: $('textarea[name="rationaleInstruction"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPostAssessmentHistorical"][datapoint="' + dataPoint + '"]').val(),
            clusterScoreFilters: getSelectedValues('chkClusterScore', dataPoint),
            scoreType: $('select[name="selectScoreTypePostAssessmentHistorical"][datapoint="' + dataPoint + '"] option:selected').val(),
            //achievementLevelSettingId : $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1],
            dataSetCategoryID: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1],
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val()
        };

        var url = '@Url.Action("SavePostAssessmentHistorical", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of POST ASSESSMENT HISTORICAL ##############################################-->
<!-- ################################################### PARTIAL:EXTERNAL (PRE ASSESSMENT EXTERNAL) #######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPreAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPreAssessmentExternal(dataPoint);
        }
    });

    $('select[name="selectGradePreAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
        $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
        $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();

        $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').show();
        $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPreAssessmentExternal(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPreAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        if ($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'addNew') {
            $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
            $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').show();
            $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').show();
            $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
            $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            loadStudentsPreAssessmentExternal(dataPoint, -1); // Clear student score
        }else if ($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select') {
            loadStudentsPreAssessmentExternal(dataPoint, -1); // Clear student score
        } else {
            validateDuplicateVirtualTest();
            loadStudentsPreAssessmentExternal(dataPoint, $(this).val()); // Load score of this virtualtest
        }

        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"] option:selected').text());
    });

    $('input[name="txtTestNamePreAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            virtualTestId: $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            name: $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            totalPoints: $('input[name="txtPointPossiblePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            resultDate: $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val(),
        };

        var studentListContainer = $('div[name="studentsList"][datapoint="' + dataPoint + '"]');
        ShowBlock(studentListContainer, "Loading");

        $.ajax({
            type: 'POST',
            url: '@Url.Action("VerifyExternalVirtualTestName", "SGOSelectDataPoint")',
            data: data,
            success: function(response) {
                studentListContainer.unblock();
                if(response.Success){
                    loadStudentsPreAssessmentExternal(dataPoint, 0);
                }else{
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').empty();
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').append('<li>' + response.ErrorMessage + '</li>');
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').show();
                    $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').hide();

                    setTimeout(function(){ $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').hide(); }, 5000);
                }
            }
        });
    });



    $('span[name="NewTestCloseButton"]').live("click", function (event) {
        event.preventDefault();
        var dataPoint = $(this).attr("datapoint");

        $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
        $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
        $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();

        $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(0);
        $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').show();

        loadStudentsPreAssessmentExternal(dataPoint, -1);
    });

    $('input[name="txtTestNamePreAssessmentExternal"]').live("input", function () {
        var dataPoint = $(this).attr("datapoint");
        AssignDataPointLegentName(dataPoint, $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val());
    });

    $('button[name="btnClearStudentScore"]').live("click", function () {
        var dataPoint = $(this).attr("datapoint");
        loadStudentsPreAssessmentExternal(dataPoint, 0);
    });

    function populateSubjectsPreAssessmentExternal(dataPoint) {
        var sgoid = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        $.ajax({
            type: 'GET',
            cache: false,
            url: '@Url.Action("GetSubjectsPreAssessmentExternal", "SGOSelectDataPoint")',
            data: { sgoID: sgoid, sgoDataPointId: sgoDataPointId },
            success: function(data) {
                addDefaultOption($('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPreAssessmentExternal", "txtHiddenSubjectName", dataPoint);
            }
        });
    }

    function populateGradesPreAssessmentExternal(dataPoint) {
        var sgoid = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val();

        $.ajax({
            type:'GET',
            cache: false,
            url: '@Url.Action("GetGradesPreAssessmentExternal", "SGOSelectDataPoint")',
            data: {sgoID: sgoid, sgoDataPointId: sgoDataPointId,  subjectName: subjectName},
            success: function(data) {
                addDefaultOption($('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
                addSelectListItems($('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePreAssessmentExternal", "txtHiddenGradeId", dataPoint);
            }
        });
    }

    function populateTestsPreAssessmentExternal(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetTestsPreAssessmentExternal", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, subjectName: subjectName, gradeId: gradeId }, function (data) {

            addDefaultOption($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]'), "Test or Add New");
            addAddNewItem($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]'), "Test");

            if (data.length > 0) {
                addSelectListItems($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);
            }

            bindInitValueForDropDownList("selectTestPreAssessmentExternal", "txtHiddenVirtualTestId", dataPoint);
        });
    }

    function addAddNewItem(selectList, objectText) {
        selectList
            .append($("<option></option>")
                .attr("value", "addNew")
                .text("<< Add New " + objectText + " >>"));
    }

    function validateSavePreAssessmentExternal(dataPoint) {
        if (!$('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select'
            ) {
            var msg6 = '<div>Please select @LabelHelper.Subject.</div>';
            CustomAlert(msg6);
            return false;
        }

        if (!$('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select'
        ) {
            var msg5 = '<div>Please select @LabelHelper.TestGrade.</div>';
            CustomAlert(msg5);
            return false;
        }

        if ($('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + 1 + '"]').is(":visible") &&
            !$('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg4 = '<div>Please input Test Name.</div>';
            CustomAlert(msg4);
            $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        if ($('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + 1 + '"]').is(":visible") &&
            !$('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg3 = '<div>Please input Test Name.</div>';
            CustomAlert(msg3);
            $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        if ($('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').is(":visible")
            && (!$('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select')) {
            var msg2 = '<div>Please select a Test.</div>';
            CustomAlert(msg2);
            return false;
        }

        if (!$('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg1 = '<div>Please input date of results.</div>';
            CustomAlert(msg1);
            $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        var isNumericValid = true;
        var isTotalPointsPossibleValid = true;
        var firstInvalidNumericValue = '';
        $.each($('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getSourceData'), function(i, item) {
            if (item[5] != null && item[5] != '' && !$.isNumeric(item[5])) {
                isNumericValid = false;
                if (firstInvalidNumericValue == '') {
                    firstInvalidNumericValue = item[5];
                }
            } else if (parseFloat(item[5]) > parseFloat($('input[name="txtPointPossiblePreAssessmentExternal"][dataPoint="' + dataPoint + '"]').val())) {
                isTotalPointsPossibleValid = false;
                var cellMeta = $('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getCellMeta', i, 2);
                cellMeta.valid = false;
            }
            return true;
        });

        $('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('render');

        if (!isNumericValid) {
            var msg22 = '<div>[' + firstInvalidNumericValue + '] is not a number. Please only input number into score column!</div>';
            CustomAlert(msg22, true);
        }
        else if (!isTotalPointsPossibleValid)
        {
            var msg11 = '<div>Student Score cannot be greater than Total Points Possible.</div>';
            CustomAlert(msg11, true);
        }
        var isStudentScoreValid = isNumericValid && isTotalPointsPossibleValid;
        return isStudentScoreValid;
    }

    function isEmptyPreStudentDataPoint(studentDataPoint) {
        return studentDataPoint[0] === undefined
            && studentDataPoint[1] === undefined
            && studentDataPoint[2] === undefined
            && studentDataPoint[3] === undefined
            && studentDataPoint[4] === undefined
            && studentDataPoint[5] === undefined
            && studentDataPoint[6] === undefined
            && studentDataPoint[7] === undefined;
    }

    function savePreAssessmentExternal(dataPoint) {

        var studentDataPoints = [];
        $.each($('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getSourceData'), function (i, item) {
            if (!isEmptyPreStudentDataPoint(item)) {
                studentDataPoints.push({
                    SgoStudentId: item[0],
                    StudentId: item[1],
                    ClassId: item[2],
                    StudentName: item[3],
                    Code: item[4],
                    ScoreRaw: item[5],
                    SGOStudentType: item[6],
                    TestResultId: item[7]
                });
            }
        });

        if (!studentDataPoints.length) {
            return;
        }

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            virtualTestId: $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            name: $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            totalPoints: $('input[name="txtPointPossiblePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            resultDate: $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val(),
            studentDataPointData: JSON.stringify(studentDataPoints),
        };

        var url = '@Url.Action("SavePreAssessmentExternal", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);

                populateTestsPreAssessmentExternal(dataPoint); // Re-Populate to select virtual test in dropdown
                $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
                $('input[name="txtTestNamePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
                $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();
                $('select[name="selectTestPreAssessmentExternal"][datapoint="' + dataPoint + '"]').show();

                RefreshJSONDataSelectDataPoint(dataPoint, true); // refresh data point after re-populate
            });
    }

    function registerUploadAttachResult(dataPoint) {
        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';


        if (window.FormData !== undefined)
        {
            $('#btnAttachStudentScore' + dataPoint).uploadifive({
                'uploadScript': '@Url.Action("UploadAttachResult")',
                'overrideEvents': ['onDialogClose'],
                'formData': { AUTHID: auth },
                'buttonText': 'Attach Supporting Documentation',
                'fileObjName': 'postedFile',
                'buttonClass': 'btn-blue btn-sgo-upload-v2',
                'multi': false,
                'removeCompleted': true,
                'width': 285,
                'auto': true,
                'onUpload': function (file) {
                    ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), 'Upload Attachment');
                },
                'onUploadComplete': function (file, response) {
                    var result = $.parseJSON(response);

                    if (!result.Success == true) {
                        var msg = '<div>'+ result.ErrorMessage +'</div>';
                        customAlert(msg);
                    } else {
                        $('span[name="spanAttachResultFileName"][dataPoint="' + dataPoint + '"]').text(result.FileName.substring(result.FileName.indexOf('_') + 1));
                        $('span[name="spanAttachResultFileName"][dataPoint="' + dataPoint + '"]').attr('attactscoredownloadlink', result.attactscoredownloadlink );

                        $('input[name="txtHiddenAttachScoreUrl"][dataPoint="' + dataPoint + '"]').val(result.FileName);
                        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').show();
                        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').css('visibility', 'visible');
                        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').css('display', 'flex');
                        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').css('align-items', 'center');
                        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').css('gap', '5px');
                    }
                    $('div[name="dataPoint"][dataPoint="' + dataPoint + '"]').unblock();
                },
                'onError': function (errorType, file) {
                    alert('The error was: ' + errorType);
                }
            });
        }
    }

    function removeAttachResult(dataPoint) {
        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').hide();
        $('div[name="divAttachResultInfo"][dataPoint="' + dataPoint + '"]').css('visibility', 'hidden'); // Use visibility to ignore coolfieldset effect when show/hide datapoint tab
        $('input[name="txtHiddenAttachScoreUrl"][dataPoint="' + dataPoint + '"]').val('');
    }

    function validateShowHideUploadAttachResult(dataPoint) {
        if ($('input[name="temporaryEditPostAssessment"][dataPoint="' + dataPoint + '"]').val() == 'false'
            && $('input[name="txtHiddenAttachScoreUrl"][dataPoint="' + dataPoint + '"]').val() == '') {
            $('fieldset[name="fsEnterOrAttachScore"][dataPoint="' + dataPoint + '"]').css('display', 'none');
        }
    }

    function validateShowHideRationalGuiden(dataPoint) {
        if ($('input[name="temporaryEditPostAssessment"][dataPoint="' + dataPoint + '"]').val() == 'false'
            && $('textarea[name="rationaleInstruction"][dataPoint="' + dataPoint + '"]').val() == '') {
            $('fieldset[name="fsRationalGuiden"][dataPoint="' + dataPoint + '"]').css('display', 'none');
        }
    }
</script>

<script type="text/javascript">
    function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        td.style.fontWeight = 'bold';
        td.style.color = 'green';
        td.style.background = '#CEC';
    }

    function loadStudentsPreAssessmentExternal(dataPoint, virtualTestId) {
        var studentListContainer = $('div[name="studentsList"][datapoint="' + dataPoint + '"]');

        var enableEdit = virtualTestId >= 0;
        if(!enableEdit){
            $('input[name="txtPointPossiblePreAssessmentExternal"][datapoint="' + dataPoint + '"]').attr('disabled','disabled');
            $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').attr('disabled','disabled');
        }else{
            $('input[name="txtPointPossiblePreAssessmentExternal"][datapoint="' + dataPoint + '"]').removeAttr('disabled');
            $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').removeAttr('disabled');
        }

        studentListContainer.handsontable({
            data: [],
            minSpareRows: 1,
            colHeaders: ["Student Name", "Student Code", "Score"],
            contextMenu: false,
            cells: function (row, col, prop) {
                var cellProperties = {};
                return cellProperties;
            },
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
        });

        ShowBlock(studentListContainer, "Loading");
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetStudentDataPoint", "SGOSelectDataPoint")',
            data: { sgoId: $('input[name="sgoId"]').val()
                , sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val()
                , virtualtestId: virtualTestId },
            success: function (response) {
                var data = [];
                $.each(response.studentDataPoints, function(i, item) {
                    data.push([
                        item["SgoStudentId"],
                        item["StudentId"],
                        item["ClassId"],
                        item["StudentName"],
                        item["Code"],
                        item["ScoreRaw"],
                        item["SGOStudentType"],
                        item["TestResultId"],
                    ]);
                });

                studentListContainer.handsontable({
                    data: data,
                    minSpareRows: 0,
                    colHeaders: ["Student Name", "Student Code", "Score"],
                    columns: [
                          { data: 3 },
                          { data: 4 },
                          { data: 5, type: 'numeric', format: '0' }
                    ],
                    contextMenu: false,
                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        if (studentListContainer.handsontable('getSourceData')?.[row]) {

                            if (!enableEdit || col === 0 || col === 1) {
                                cellProperties.readOnly = true; //make cell read-only if it is first row or 1st and 2nd columns
                            } else {
                                cellProperties.readOnly = false;
                            }
                        }

                        return cellProperties;
                    },
                    columnHeaderHeight: 50,
                    manualColumnResize: [200, 200, 100],
                    width: 500,
                    rowHeaderWidth: [200, 200, 100],
                    licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
                });


                $('input[name="txtPointPossiblePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(response.pointsPossible);
                $('input[name="txtResultDatePreAssessmentExternal"][datapoint="' + dataPoint + '"]').val(response.resultDate);

                studentListContainer.unblock();

                checkPermissionAccess(dataPoint);
                RefreshJSONDataSelectDataPoint(dataPoint, false);
            }
        });
    }
</script>
<!-- ################################################### End of PRE ASSESSMENT EXTERNAL ##############################################-->
<!-- ################################################### PARTIAL:POSTEXTERNAL (POST ASSESSMENT EXTERNAL) #######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPostAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPostAssessmentExternal(dataPoint);
        }
    });

    $('select[name="selectGradePostAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
        $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
        $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();

        $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').show();
        $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPostAssessmentExternal(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPostAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        if ($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'addNew') {
            $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
            $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').show();
            $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').show();
            $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
            $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            loadStudentsPostAssessmentExternal(dataPoint, -1); // Clear student score
        }else if ($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select') {
            loadStudentsPostAssessmentExternal(dataPoint, -1); // Clear student score
        } else {
            validateDuplicateVirtualTest();
            loadStudentsPostAssessmentExternal(dataPoint, $(this).val()); // Load score of this virtualtest
        }

        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"] option:selected').text());
    });

    $('input[name="txtTestNamePostAssessmentExternal"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            virtualTestId: $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            name: $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            totalPoints: $('input[name="txtPointPossiblePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            resultDate: $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val(),
        };

        var studentListContainer = $('div[name="studentsList"][datapoint="' + dataPoint + '"]');
        ShowBlock(studentListContainer, "Loading");

        $.ajax({
            type: 'POST',
            url: '@Url.Action("VerifyExternalVirtualTestName", "SGOSelectDataPoint")',
            data: data,
            success: function(response) {
                studentListContainer.unblock();
                if(response.Success){
                    loadStudentsPostAssessmentExternal(dataPoint, 0);
                }else{
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').empty();
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').append('<li>' + response.ErrorMessage + '</li>');
                    $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').show();
                    $('ul[name="insert-success-message"][dataPoint="' + dataPoint + '"]').hide();

                    setTimeout(function(){ $('ul[name="error-messages"][dataPoint="' + dataPoint + '"]').hide(); }, 5000);
                }
            }
        });
    });

    $('span[name="NewTestCloseButton"]').live("click", function (event) {
        event.preventDefault();
        var dataPoint = $(this).attr("datapoint");

        $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
        $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
        $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();

        $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(0);
        $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').show();

        loadStudentsPostAssessmentExternal(dataPoint, -1); // Clear student score
    });

    $('input[name="txtTestNamePostAssessmentExternal"]').live("input", function () {
        var dataPoint = $(this).attr("datapoint");
        AssignDataPointLegentName(dataPoint, $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val());
    });

    $('button[name="btnClearStudentScore"]').live("click", function () {
        var dataPoint = $(this).attr("datapoint");
        loadStudentsPostAssessmentExternal(dataPoint,'');
    });

    function populateSubjectsPostAssessmentExternal(dataPoint) {
        var sgoid = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        $.ajax({
            type: 'GET',
            cache: false,
            url: '@Url.Action("GetSubjectsPostAssessmentExternal", "SGOSelectDataPoint")',
            data: { sgoID: sgoid, sgoDataPointId: sgoDataPointId },
            success: function(data) {
                addDefaultOption($('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPostAssessmentExternal", "txtHiddenSubjectName", dataPoint);
            }
        });
    }

    function populateGradesPostAssessmentExternal(dataPoint) {
        var sgoid = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();

        $.ajax({
            type:'GET',
            cache: false,
            url: '@Url.Action("GetGradesPostAssessmentExternal", "SGOSelectDataPoint")',
            data: {sgoID: sgoid, sgoDataPointId: sgoDataPointId,  subjectName: subjectName},
            success: function(data) {
                addDefaultOption($('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]'), "Grade");
                addSelectListItems($('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePostAssessmentExternal", "txtHiddenGradeId", dataPoint);
            }
        });
    }

    function populateTestsPostAssessmentExternal(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var subjectName = $('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetTestsPostAssessmentExternal", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, subjectName: subjectName, gradeId: gradeId }, function (data) {

            addDefaultOption($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]'), "Test or Add New");
            addAddNewItem($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]'), "Test");

            if (data.length > 0) {
                addSelectListItems($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]'), data);
            }

            bindInitValueForDropDownList("selectTestPostAssessmentExternal", "txtHiddenVirtualTestId", dataPoint);
        });
    }

    function validateSavePostAssessmentExternal(dataPoint) {
        if (!$('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select'
            ) {
            var msg6 = '<div>Please select @LabelHelper.Subject.</div>';
            CustomAlert(msg6);
            return false;
        }

        if (!$('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select'
            ) {
            var msg5 = '<div>Please select @LabelHelper.TestGrade.</div>';
            CustomAlert(msg5);
            return false;
        }

        if ($('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + 1 + '"]').is(":visible") &&
            !$('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg4 = '<div>Please input Test Name.</div>';
            CustomAlert(msg4);
            $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        if ($('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + 1 + '"]').is(":visible") &&
            !$('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg3 = '<div>Please input Test Name.</div>';
            customAlert(msg3);
            $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        if ($('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').is(":visible")
            && (!$('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val() == 'select')) {
            var msg2 = '<div>Please select a Test.</div>';
            CustomAlert(msg2);
            return false;
        }

        if (!$('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val()) {
            var msg1 = '<div>Please input date of results.</div>';
            CustomAlert(msg1);
            $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        var isNumericValid = true;
        var isTotalPointsPossibleValid = true;
        var firstInvalidNumericValue = '';
        $.each($('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getSourceData'), function(i, item) {
            if (item[5] != null && item[5] != '' && !$.isNumeric(item[5])) {
                isNumericValid = false;
                if (firstInvalidNumericValue == '') {
                    firstInvalidNumericValue = item[5];
                }
            } else if (parseFloat(item[5]) > parseFloat($('input[name="txtPointPossiblePostAssessmentExternal"][dataPoint="' + dataPoint + '"]').val())) {
                isTotalPointsPossibleValid = false;
                var cellMeta = $('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getCellMeta', i, 2);
                cellMeta.valid = false;
            }
            return true;
        });

        $('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('render');

        if (!isNumericValid) {
            var msg22 = '<div>[' + firstInvalidNumericValue + '] is not a number. Please only input number into score column.</div>';
            customAlert(msg22);
        }
        else if (!isTotalPointsPossibleValid)
        {
            var msg11 = '<div >Student Score cannot be greater than Total Points Possible.</div>';
            customAlert(msg11);
        }
        var isStudentScoreValid = isNumericValid && isTotalPointsPossibleValid;

        if (!isStudentScoreValid)
            return false;

        return ValidateImprovementScoringPlanDataPointTypeAndScoreType(dataPoint);
    }

    function isEmptyPostStudentDataPoint(studentDataPoint) {
        return studentDataPoint[0] === undefined
            && studentDataPoint[1] === undefined
            && studentDataPoint[2] === undefined
            && studentDataPoint[3] === undefined
            && studentDataPoint[4] === undefined
            && studentDataPoint[5] === undefined;
    }

    function savePostAssessmentExternal(dataPoint) {
        var studentDataPoints = [];
        $.each($('div[name="studentsList"][datapoint="' + dataPoint + '"]').handsontable('getSourceData'), function (i, item) {
            if (!isEmptyPostStudentDataPoint(item)) {
                studentDataPoints.push({
                    SgoStudentId: item[0],
                    StudentId: item[1],
                    ClassId: item[2],
                    StudentName: item[3],
                    Code: item[4],
                    ScoreRaw: item[5]
                });
            }
        });

        if (!studentDataPoints.length) {
            return;
        }

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            rationaleGuidance: $('textarea[name="rationaleInstruction"][datapoint="' + dataPoint + '"]').val(),
            virtualTestId: $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            name: $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            totalPoints: $('input[name="txtPointPossiblePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            resultDate: $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(),
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val(),
            studentDataPointData: JSON.stringify(studentDataPoints),
        };

        var url = '@Url.Action("SavePostAssessmentExternal", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);

                unBlockDataPointCounter = 1; // Set to 1 to uncheck duplicate virtual test
                populateTestsPostAssessmentExternal(dataPoint); // Re-Populate to select virtual test in dropdown
                $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').hide();
                $('input[name="txtTestNamePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val('');
                $('span[name="NewTestCloseButton"][datapoint="' + dataPoint + '"]').hide();
                $('select[name="selectTestPostAssessmentExternal"][datapoint="' + dataPoint + '"]').show();

                RefreshJSONDataSelectDataPoint(dataPoint, true); // refresh data point after re-populate
            });
    }
</script>

<script type="text/javascript">
    function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        td.style.fontWeight = 'bold';
        td.style.color = 'green';
        td.style.background = '#CEC';
    }

    function loadStudentsPostAssessmentExternal(dataPoint, virtualTestId) {
        var studentListContainer = $('div[name="studentsList"][datapoint="' + dataPoint + '"]');

        var enableEdit = virtualTestId >= 0;
        if(!enableEdit){
            $('input[name="txtPointPossiblePostAssessmentExternal"][datapoint="' + dataPoint + '"]').attr('disabled','disabled');
            $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').attr('disabled','disabled');
        }else{
            $('input[name="txtPointPossiblePostAssessmentExternal"][datapoint="' + dataPoint + '"]').removeAttr('disabled');
            $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').removeAttr('disabled');
        }

        studentListContainer.handsontable({
            data: [],
            minSpareRows: 1,
            colHeaders: ["Student Name", "Student Code", "Score"],
            contextMenu: false,
            cells: function (row, col, prop) {
                var cellProperties = {};
                return cellProperties;
            },
            licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
        });

        ShowBlock(studentListContainer, "Loading");
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetStudentDataPoint", "SGOSelectDataPoint")',
            data: { sgoId: $('input[name="sgoId"]').val()
                , sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val()
                , virtualtestId: virtualTestId },
            success: function (response) {

                var data = [];
                $.each(response.studentDataPoints, function(i, item) {
                    data.push([
                        item["SgoStudentId"],
                        item["StudentId"],
                        item["ClassId"],
                        item["StudentName"],
                        item["Code"],
                        item["ScoreRaw"]
                    ]);
                });

                studentListContainer.handsontable({
                    data: data,
                    minSpareRows: 0,
                    colHeaders: ["Student Name", "Student Code", "Score"],
                    columns: [
                          { data: 3 },
                          { data: 4 },
                          { data: 5, type: 'numeric', format: '0' }
                    ],
                    contextMenu: false,
                    cells: function (row, col, prop) {
                        var cellProperties = {};

                        if (studentListContainer.handsontable('getSourceData')[row] != null) {

                            if (!enableEdit || col === 0 || col === 1) {
                                cellProperties.readOnly = true; //make cell read-only if it is first row or 1st and 2nd columns
                            } else {
                                cellProperties.readOnly = false;
                            }
                        }

                        return cellProperties;
                    },
                    columnHeaderHeight: 50,
                    manualColumnResize: [200, 200, 100],
                    width: 500,
                    rowHeaderWidth: [200, 200, 100],
                    licenseKey: 'a70f6-b55ab-a3862-0471e-e915a'
                });


                $('input[name="txtPointPossiblePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(response.pointsPossible);
                $('input[name="txtResultDatePostAssessmentExternal"][datapoint="' + dataPoint + '"]').val(response.resultDate);

                studentListContainer.unblock();
                checkPermissionAccess(dataPoint);
                RefreshJSONDataSelectDataPoint(dataPoint, false);
            }
        });
    }
</script>
<!-- ################################################### End of POST ASSESSMENT EXTERNAL ##############################################-->
<!-- ################################################### PARTIAL:TOBECREATED (POST ASSESSMENT TO BE CREATED) #######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPostAssessmentToBeCreated"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPostAssessmentToBeCreated(dataPoint);
        }
    });

    $('select[name="selectGradePostAssessmentToBeCreated"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        checkPermissionAccess(dataPoint);
        RefreshJSONDataSelectDataPoint(dataPoint, false);
    });

    $('input[name="txtTestNamePostAssessmentToBeCreated"]').live("input", function () {
        var dataPoint = $(this).attr("datapoint");
        AssignDataPointLegentName(dataPoint, $('input[name="txtTestNamePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val());
    });

    function populateSubjectsPostAssessmentToBeCreated(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();

        $.get('@Url.Action("GetSubjectsPostAssessmentToBeCreated", "SGOSelectDataPoint")', {sgoID: sgoId}, function (data) {
            addDefaultOption($('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
            addSelectListItems($('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectSubjectPostAssessmentToBeCreated", "txtHiddenSubjectName", dataPoint);
            checkPermissionAccess(dataPoint);
            RefreshJSONDataSelectDataPoint(dataPoint, false);
        });
    }

    function populateGradesPostAssessmentToBeCreated(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var subjectName = $('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val();

        $.get('@Url.Action("GetGradesPostAssessmentToBeCreated", "SGOSelectDataPoint")', {sgoID: sgoId, subjectName: subjectName }, function (data) {
            addDefaultOption($('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
            addSelectListItems($('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]'), data);

            bindInitValueForDropDownList("selectGradePostAssessmentToBeCreated", "txtHiddenGradeId", dataPoint);
        });
    }

    function validateSavePostAssessmentToBeCreated(dataPoint) {
        if (!$('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val() == 'select'
            ) {
            var msg1 = '<div>Please select @LabelHelper.Subject.</div>';
            CustomAlert(msg1);
            return false;
        }

        if (!$('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val()
                || $('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val() == 'select'
            ) {
            var msg2 = '<div>Please select @LabelHelper.TestGrade.</div>';
            CustomAlert(msg2);
            return false;
        }

        if (!$('input[name="txtTestNamePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val()) {
            var msg3 = '<div>Please input Test Name.</div>';
            CustomAlert(msg3);
            $('input[name="txtTestNamePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').focus();
            return false;
        }

        return true;
    }

    function savePostAssessmentToBeCreated(dataPoint) {
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            rationaleGuidance: $('textarea[name="rationaleInstruction"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val(),
            name: $('input[name="txtTestNamePostAssessmentToBeCreated"][datapoint="' + dataPoint + '"]').val(),

            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val()
        };

        var url = '@Url.Action("SavePostAssessmentToBeCreated", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                processSaveDataPointResponse(dataPoint, response);
            });
    }

</script>
<!-- ################################################### End of PRE ASSESSMENT EXTERNAL ##############################################-->
<!-- ################################################### PARTIAL:PRECUSTOM (PRE ASSESSMENT CUSTOM) ######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPreAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePreAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();
        if ($(this).val() != 'select') {
            populateGradesPreAssessmentCustom(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePreAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPreAssessmentCustom(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPreAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').text());
        RefreshJSONDataSelectDataPoint(dataPoint, false);
        checkPermissionAccess(dataPoint);
        validateDuplicateVirtualTest();
    });

    function populateSubjectsPreAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetSubjectPreAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId }, function(data) {
                addDefaultOption($('select[name="selectSubjectPreAssessmentCustom"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPreAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPreAssessmentCustom", "txtHiddenSubjectName", dataPoint);
            });
        }
    }

    function populateScoreTypesPreAssessmentCustom(dataPoint) {
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetCustomScoreType", "SGOSelectDataPoint")', {
                virtualTestCustomScoreId: virtualTestCustomScoreId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: false,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePreAssessmentCustom"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePreAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownListScoreType("selectScoreTypePreAssessmentCustom", "txtHiddenScoreType", dataPoint);
            });
        }
    }

    function populateGradesPreAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetGradePreAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId, subjectName: subjectName }, function(data) {
                addDefaultOption($('select[name="selectGradePreAssessmentCustom"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
                addSelectListItems($('select[name="selectGradePreAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePreAssessmentCustom", "txtHiddenGradeId", dataPoint);
            });
        }
    }

    function populateTestsPreAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePreAssessmentCustom"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetTestPreAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId, subjectName: subjectName, gradeId: gradeId }, function(data) {
                addDefaultOption($('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]'), "Test");
                addSelectListItems($('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectTestPreAssessmentCustom", "txtHiddenVirtualTestId", dataPoint);
            });
        }
    }

    function validateSavePreAssessmentCustom(dataPoint) {
        if (!$('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            CustomAlert(msg);
            return false;
        }

        if (!$('select[name="selectScoreTypePreAssessmentCustom"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectScoreTypePreAssessmentCustom"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select Score Type.</div>';
            CustomAlert(msg);
            return false;
        }
        return validateCustomScoreType(dataPoint);
    }

    function validateCustomScoreType(dataPoint) {
        return true;
    }

    function synchronizeCustomScoreType(dataPoint) {
        var currentScoreTypeId = '';

        var testType = $('select[name="selectTestType"][dataPoint="' + dataPoint + '"]').val();

        if (testType.indexOf('PostAssessmentCustom_') >= 0) {
            currentScoreTypeId = $('select[name="selectScoreTypePostAssessmentCustom"][dataPoint="' + dataPoint + '"]').val();
        } else if (testType.indexOf('PreAssessmentCustom_') >= 0) {
            currentScoreTypeId = $('select[name="selectScoreTypePreAssessmentCustom"][dataPoint="' + dataPoint + '"]').val();
        }

        var result = true;

        $('select[name="selectScoreTypePreAssessmentCustom"]').each(function(index, item) {
            if (currentScoreTypeId != $(item).val()) {
                $(item).val(currentScoreTypeId);
                RefreshJSONDataSelectDataPoint($(item).attr("datapoint"), true);
            }
        });

        $('select[name="selectScoreTypePostAssessmentCustom"]').each(function(index, item) {
            if (currentScoreTypeId != $(item).val()) {
                $(item).val(currentScoreTypeId);
                RefreshJSONDataSelectDataPoint($(item).attr("datapoint"), true);
            }
        });
    }

    function isCustomDataPointTypeValid(dataPoint) {
        var testType = $('select[name="selectTestType"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = testType.split('_')[1];
        var result = true;

        $('select[name="selectTestType"]').each(function(index, item) {
            if ($(item).val().indexOf('PostAssessmentCustom_') >= 0
                || $(item).val().indexOf('PreAssessmentCustom_') >= 0) {
                var currentVirtualTestCustomScoreId = $(item).val().split('_')[1];
                if (currentVirtualTestCustomScoreId != virtualTestCustomScoreId) {
                    result = false;
                    return false;
                }
            }
        });

        return result;
    }

    function savePreAssessmentCustom(dataPoint) {
        var subScoreId = 0;
        var scoreType = $('select[name="selectScoreTypePreAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').val();
        var scoreTypeArr = scoreType.split('_');
        if (scoreTypeArr.length > 1) {
            scoreType = scoreTypeArr[0];
            subScoreId = scoreTypeArr[1];
        }
        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePreAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPreAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            scoreType: scoreType,
            virtualTestCustomSubScoreId: subScoreId
        };

        var url = '@Url.Action("SavePreAssessmentCustom", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                //if (response.Success == true) {
                //    synchronizeCustomScoreType(dataPoint);
                //}

                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of PRE ASSESSMENT CUSTOM ##############################################-->
<!-- ################################################### PARTIAL:POSTCUSTOM (POST ASSESSMENT CUSTOM) ######################################################-->
<script type="text/javascript">
    $('select[name="selectSubjectPostAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectGradePostAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();
        $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateGradesPostAssessmentCustom(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectGradePostAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");
        $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').empty();

        if ($(this).val() != 'select') {
            populateTestsPostAssessmentCustom(dataPoint);
        }

        AssignDataPointLegentName(dataPoint, '');
    });

    $('select[name="selectTestPostAssessmentCustom"]').live("change", function () {
        var dataPoint = $(this).attr("datapoint");

        AssignDataPointLegentName(dataPoint, $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').text());
        RefreshJSONDataSelectDataPoint(dataPoint, false);
        checkPermissionAccess(dataPoint);

        validateDuplicateVirtualTest();
    });

    function populateSubjectsPostAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetSubjectPostAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId }, function(data) {
                addDefaultOption($('select[name="selectSubjectPostAssessmentCustom"][datapoint="' + dataPoint + '"]'), "@LabelHelper.Subject");
                addSelectListItems($('select[name="selectSubjectPostAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectSubjectPostAssessmentCustom", "txtHiddenSubjectName", dataPoint);
            });
        }
    }

    function populateScoreTypesPostAssessmentCustom(dataPoint) {
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetCustomScoreType", "SGOSelectDataPoint")', {
                virtualTestCustomScoreId: virtualTestCustomScoreId,
                sgoId: $('input[name="sgoId"]').val(),
                isPostAssignment: true,
                scoreType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val()
            }, function (data) {
                addDefaultOption($('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"]'), "Score Type");
                addSelectListItems($('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownListScoreType("selectScoreTypePostAssessmentCustom", "txtHiddenScoreType", dataPoint);
            });
        }
    }

    function populateGradesPostAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetGradePostAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId, subjectName: subjectName }, function(data) {
                addDefaultOption($('select[name="selectGradePostAssessmentCustom"][datapoint="' + dataPoint + '"]'), "@LabelHelper.TestGrade");
                addSelectListItems($('select[name="selectGradePostAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectGradePostAssessmentCustom", "txtHiddenGradeId", dataPoint);
            });
        }
    }

    function populateTestsPostAssessmentCustom(dataPoint) {
        var sgoId = $('input[name="sgoId"]').val();
        var sgoDataPointId = $('input[name="sgoDataPointId"][dataPoint="' + dataPoint + '"]').val();
        var virtualTestCustomScoreId = $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val().split('_')[1];
        var subjectName = $('select[name="selectSubjectPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();
        var gradeId = $('select[name="selectGradePostAssessmentCustom"][datapoint="' + dataPoint + '"]').val();

        if (virtualTestCustomScoreId) {
            $.get('@Url.Action("GetTestPostAssessmentCustom", "SGOSelectDataPoint")', { sgoId: sgoId, sgoDataPointId: sgoDataPointId, virtualTestCustomScoreId: virtualTestCustomScoreId, subjectName: subjectName, gradeId: gradeId }, function(data) {
                addDefaultOption($('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]'), "Test");
                addSelectListItems($('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]'), data);

                bindInitValueForDropDownList("selectTestPostAssessmentCustom", "txtHiddenVirtualTestId", dataPoint);
            });
        }
    }

    function validateSavePostAssessmentCustom(dataPoint) {
        if (!$('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select a Test.</div>';
            customAlert(msg);
            return false;
        }

        if (!$('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"]').val()
            || $('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"]').val() == 'select') {
            var msg = '<div>Please select Score Type.</div>';
            customAlert(msg);
            return false;
        }

        return ValidateImprovementScoringPlanDataPointTypeAndScoreType(dataPoint);virtualTestSubScoreId
        //}
    }

    function savePostAssessmentCustom(dataPoint) {
        var subScoreId = 0;
        var scoreType = $('select[name="selectScoreTypePostAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').val();
        var scoreTypeArr = scoreType.split('_');
        if (scoreTypeArr.length > 1) {
            scoreType = scoreTypeArr[0];
            subScoreId = scoreTypeArr[1];
        }

        var data = {
            sgoId: $('input[name="sgoId"]').val(),
            sgoDataPointId: $('input[name="sgoDataPointId"][datapoint="' + dataPoint + '"]').val(),
            testType: $('select[name="selectTestType"][datapoint="' + dataPoint + '"]').val(),
            subjectName: $('select[name="selectSubjectPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            gradeId: $('select[name="selectGradePostAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            rationaleGuidance: $('textarea[name="rationaleInstruction"][datapoint="' + dataPoint + '"]').val(),
            name: $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"] option:selected').text(),
            virtualTestId: $('select[name="selectTestPostAssessmentCustom"][datapoint="' + dataPoint + '"]').val(),
            scoreType: scoreType,
            AttactScoreUrl: $('input[name="txtHiddenAttachScoreUrl"][datapoint="' + dataPoint + '"]').val(),
            virtualTestCustomSubScoreId: subScoreId
        };

        var url = '@Url.Action("SavePostAssessmentCustom", "SGOSelectDataPoint")';

        ShowBlock($('div[name="dataPoint"][dataPoint="' + dataPoint + '"]'), "Loading");

        $.ajax({
            type: "POST",
            url: url,
            data: data
        })
            .done(function (response) {
                //if (response.Success == true) {
                //    synchronizeCustomScoreType(dataPoint);
                //}

                processSaveDataPointResponse(dataPoint, response);
            });
    }
</script>
<!-- ################################################### End of POST ASSESSMENT CUSTOM ##############################################-->

<script>
    $('input[name="chkAllClusterScore"]').live("click", function () {
        var dataPoint = $(this).attr('dataPoint');

        if (this.checked) {
            $('input[name="chkClusterScore"][dataPoint="' + dataPoint + '"]').attr('checked', 'checked');
        }
        else {
            $('input[name="chkClusterScore"][dataPoint="' + dataPoint + '"]').removeAttr('checked');
        }
    });

    $('input[name="chkClusterScore"]').live("click", function (e) {
        var dataPoint = $(this).attr('dataPoint');

        updateClusterScoreCheckAllCheckbox(dataPoint);
    });

    function updateClusterScoreCheckAllCheckbox(dataPoint) {
        var checkall = $('input[name="chkClusterScore"][dataPoint="' + dataPoint + '"]').length > 0 && $('input[name="chkClusterScore"][dataPoint="' + dataPoint + '"]:not(:checked)').length === 0;
        toogleCheckboxV2Skin(checkall, $('input[name="chkAllClusterScore"][dataPoint="' + dataPoint + '"]'));
    }

    $('input[name="chkAllOther"]').live("click", function () {
        var dataPoint = $(this).attr('dataPoint');

        if (this.checked) {
            $('input[name="chkOther"][dataPoint="' + dataPoint + '"]').attr('checked', 'checked');
        }
        else {
            $('input[name="chkOther"][dataPoint="' + dataPoint + '"]').removeAttr('checked');
        }
    });

    $('input[name="chkOther"]').live("click", function (e) {
        var dataPoint = $(this).attr('dataPoint');

        updateOtherCheckAllCheckbox(dataPoint);
    });

    function updateOtherCheckAllCheckbox(dataPoint) {
        var checkall = $('input[name="chkOther"][dataPoint="' + dataPoint + '"]').length > 0 && $('input[name="chkOther"][dataPoint="' + dataPoint + '"]:not(:checked)').length === 0;
        toogleCheckboxV2Skin(checkall, $('input[name="chkAllOther"][dataPoint="' + dataPoint + '"]'));
    }

    $('input[name="chkAllSkill"]').live("click", function () {
        var dataPoint = $(this).attr('dataPoint');

        if (this.checked) {
            $('input[name="chkSkill"][dataPoint="' + dataPoint + '"]').attr('checked', 'checked');
        }
        else {
            $('input[name="chkSkill"][dataPoint="' + dataPoint + '"]').removeAttr('checked');
        }
    });

    $('input[name="chkSkill"]').live("click", function (e) {
        var dataPoint = $(this).attr('dataPoint');

        updateSkillCheckAllCheckbox(dataPoint);
    });

    function updateSkillCheckAllCheckbox(dataPoint) {
        var checkall = $('input[name="chkSkill"][dataPoint="' + dataPoint + '"]').length > 0 && $('input[name="chkSkill"][dataPoint="' + dataPoint + '"]:not(:checked)').length === 0;
        toogleCheckboxV2Skin(checkall, $('input[name="chkAllSkill"][dataPoint="' + dataPoint + '"]'));
    }

    $('input[name="chkAllTopic"]').live("click", function () {
        var dataPoint = $(this).attr('dataPoint');

        if (this.checked) {
            $('input[name="chkTopic"][dataPoint="' + dataPoint + '"]').attr('checked', 'checked');
        }
        else {
            $('input[name="chkTopic"][dataPoint="' + dataPoint + '"]').removeAttr('checked');
        }
    });

    $('input[name="chkTopic"]').live("click", function (e) {
        var dataPoint = $(this).attr('dataPoint');

        updateTopicCheckAllCheckbox(dataPoint);
    });

    function updateTopicCheckAllCheckbox(dataPoint) {
        var checkall = $('input[name="chkTopic"][dataPoint="' + dataPoint + '"]').length > 0 && $('input[name="chkTopic"][dataPoint="' + dataPoint + '"]:not(:checked)').length === 0;
        toogleCheckboxV2Skin(checkall, $('input[name="chkAllTopic"][dataPoint="' + dataPoint + '"]'));
    }
</script>
<!-- ################################################### Handle Check All Action in table ##############################################-->
