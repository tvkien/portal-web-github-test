@model LinkIt.BubbleSheetPortal.Web.ViewModels.ResourceViewModel
@{
    if (Model.LessonId == 0)
    {
        ViewBag.Title = "Add Resource";
    }
    else
    {
        ViewBag.Title = "Edit Resource";
    }
}
<script type="text/javascript">
    function AddSelectListItems(selectList, results, defaultValue) {
        if (results == null) {
            return;
        }
        if (results.length == 0) {
            return;
        }
        selectList.append($("<option></option>").attr("value", "-1").text(defaultValue));
        $.each(results, function (i, value) {
            selectList
                .append($("<option></option>")
                    .attr("value", value.Id)
                    .text(value.Name));
        });

    }
    function addDefaultProviderOption(selectList, objectText) {
        selectList.empty();
        selectList
            .append($("<option></option>")
                .attr("value", "select")
                .text(objectText));
    }
    jQuery.fn.outerHTML = function(s) {
        return (s)
        ? this.before(s).remove()
        : jQuery("<p>").append(this.eq(0).clone()).html();
    }
</script>
<!--Style for uploadify -->
<style type="text/css">
    button
    {
        margin-left: 10px;
    }
    .notSelectedTR td
    {
        background-color: #fdd252 !important;
    }
    #divSummary p
    {
        margin-bottom: 10px;
    }
    .ui-widget-header
    {
        border: 0px solid #aaa !important;
        background: transparent !important;
        position: relative;
        top: 34px;
    }
    .ui-dialog
    {
        background: transparent;
        border: 0;
    }
    .ui-dialog .ui-dialog-titlebar-close
    {
        position: absolute;
        right: 7px;
        top: -8px;
    }
    .ui-widget-header .ui-icon
    {
        background-image: url("/Content/themes/base/images/fancy_close.png");
    }
    .ui-icon
    {
        width: 40px;
        height: 40px;
    }
    .ui-icon-closethick
    {
        background-position: 2px 2px;
    }
    .ui-widget-header .ui-state-hover
    {
        border: 0;
        background: transparent !important;
    }

    .ui-dialog .ui-dialog-titlebar-close
    {
        width: 30px;
        height: 42px;
    }
    .ui-widget-overlay
    {
        background: #2b2b2d !important;
    }
    #divGradeTestMessage .block-content
    {
        max-height: 450px;
        overflow-y: auto;
    }
</style>
<style type="text/css">
        .resourceOperation {
        margin: 0px 15px 12px -7px;
    }
</style>
<style type="text/css">
    .grid_10
    {
        margin-left: 0px;
        margin-right: 0px;
        width: 834px !important;
    }

    tr.even.row_selected td {
        background-color: #82CAFA!important;
    }
    tr.odd.row_selected td {
        background-color: #82CAFA!important;
    }
    .resource-grey-button {
        background: -moz-linear-gradient(center top , #FFFFFF, #C5CBCE 5%, #9FA7B0) repeat scroll 0 0 rgba(0, 0, 0, 0) !important;
    }
    .resource-green-button {
        background: -moz-linear-gradient(center top , #FFFFFF, #72C6E4 4%, #0C5FA5) repeat scroll 0 0 rgba(0, 0, 0, 0) !important;
    }
    .lableCharacterLeft {
        font-size: 9px;
        font-weight:normal
    }
</style>
<article class="container_12">
    <section class="grid_8">
        <div class="block-border" id="divAddResource" style="width: 700px">
            <div class="block-content form">
                @if (Model.LessonId == 0)
                {

                    <h1>Add Resource</h1>

                }
                else
                {

                    <h1>Edit Resource</h1>

                }

                <div class="clear-10"></div>
                @using (Html.BeginForm("Resource", "LearningLibraryAdmin", FormMethod.Post, new { id = "addResourceForm", @class = "form", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    if (ViewBag.IsInValidLessonProvider != null && ViewBag.IsInValidLessonProvider)
                    {
                        <ul id="error-messages-Resource" class="message error">
                            <li>@Model.ErrorMessage</li>
                        </ul>
                    }
                    else
                    {
                        <ul style="display: none" id="error-messages-Resource" class="message error"></ul>
                    }
                    <ul style="display: none" id="success-message" class="message success">
                        @if (Model.LessonId > 0)
                        {
                            <text>
                                <li>Resource successfully updated.</li>
                            </text>
                        }
                        else
                        {
                            <text>
                                <li>Resource successfully added.</li>
                            </text>
                        }
                    </ul>
                    <div class="columns" style="@if (ViewBag.IsInValidLessonProvider != null && ViewBag.IsInValidLessonProvider) {<text>display:none;</text>}">

                        <fieldset id="locationFieldset">
                            <legend>Resource Info</legend>
                            <div class="columns" style="width: 610px">
                                <div class="colx2-left">
                                    <p id="states">
                                        <label>Content Provider</label>
                                        <span class="relative">
                                            @Html.DropDownListFor(x => x.LessonProviderId, Model.AvailableContentProviderDistricts, new { id = "selectProvider", @class = "full-width", tabindex = "1" })
                                        </span>

                                    </p>
                                    <p>
                                        <label>Resource Name</label>
                                        @Html.TextBoxFor(x => x.LessonName, new { @class = "full-width", tabindex = 3 })
                                        @Html.ValidationMessageFor(x => x.LessonName)
                                    <p>
                                        <label>Description <i>(Optional)</i></label>
                                        <textarea rows="5" id="descriptionArea" cols="75" style="width: 600px" tabindex="5" maxlength="1000"></textarea>
                                        <br />
                                        <label id="lblDescriptionAvailableChars" class="lableCharacterLeft">&nbsp;</label>

                                    </p>
                                    <p style="width: 500px !important">
                                        <label style="width: :100%">Keyword <i>(Optional where comma ',' is used to delimit keywords or keyword phrases)</i></label>
                                        <textarea rows="5" id="keywordsArea" cols="75" style="width: 600px" tabindex="6" maxlength="1000"></textarea>
                                        <label id="lblKeywordAvailableChars" class="lableCharacterLeft">&nbsp;</label>
                                    </p>
                                </div>
                                <div class="colx2-right">
                                    <p>
                                        <label>Resource Type</label>
                                        @Html.DropDownListFor(x => x.LessonContentTypeId, Model.AvailableContentTypes, new { id = "selectType", @class = "full-width", tabindex = 2 })
                                    </p>
                                    <p>
                                        <label>@LabelHelper.Subject</label>
                                        @Html.DropDownListFor(x => x.SubjectId, Model.AvailableSubjects, new { id = "selectSubject", @class = "full-width", tabindex = 4 })
                                    </p>


                                </div>
                            </div>
                        </fieldset>
                        <fieldset id="LessonFileFieldset">
                            <legend>Resource Path</legend>
                            <div class="columns" style="min-height: 155px;">
                                <div class="colx2-left">
                                    <p><input id="radioLessonExt" type="radio" name="radioLessonSelection" checked="checked" onclick="lessonSelect()" tabindex="7" /><label for="radioLessonExt">Link </label></p>
                                    <div class="clear"></div>
                                    <div id="divResourceLink" style="width: 610px">
                                        <label id="resourcePathLabel">Resource Path</label>
                                        <div class="clear"></div>
                                        <div style="float: left; width: 560px">
                                            @Html.TextBoxFor(x => x.LessonPath, new { @class = "full-width", tabindex = 9 })
                                            @Html.ValidationMessageFor(x => x.LessonPath)
                                        </div>
                                        <div style="float: left; width: 50px">
                                            <img id="imgResoureLinkValid" src="/../Content/themes/Constellation/images/icons/fugue/tick-circle.png" width="16" height="16" style="margin-right: 4px; padding-top: 5px; display: none" />
                                            <img id="imgResoureLinkInvalid" src="/../Content/themes/Constellation/images/icons/fugue/cross-circle.png" width="16" height="16" style="margin-right: 4px; padding-top: 5px; display: none" />
                                        </div>
                                    </div>
                                    <div class="clear" style="padding-top: 10px"></div>
                                    <button id="btnValidateResourcePath" type="button" class="grey" style="margin-left: -2px;" onclick="validateResourceLink()" tabindex="10">Validate Link</button>
                                    <div class="clear" style="padding-top:5px"></div>
                                    <div>
                                        <div id="file_upload_div" style="margin-top: -30px; float: left">
                                            <input id="file_upload" name="file_upload" type="file" tabindex="9" />
                                        </div>
                                        <div class="clear"></div>
                                        <div id="lesson_file_div" style="float:left; width:400px">

                                        </div>
                                    </div>
                                </div>
                                <div class="colx2-right">
                                    <p><input id="radioLessonInt" type="radio" name="radioLessonSelection" onclick="lessonSelect()" tabindex="8" /><label for="radioLessonInt">File</label></p>

                                </div>
                            </div>
                        </fieldset>
                        <fieldset id="GuideFileFieldset">
                            <legend>Resource Reference</legend>
                            <div class="columns" style="min-height: 150px;">
                                <div class="colx2-left">
                                    <p><input id="radioGuideExt" type="radio" name="radioGuideSelection" checked="checked" onclick="guideSelect()" tabindex="12" /><label for="radioGuideExt">Link</label></p>
                                    <div class="clear"></div>
                                    <div id="divReferenceLink" style="width: 610px">

                                        <label id="referencePathLabel">Reference Path <i>(Optional)</i></label>
                                        <div class="clear"></div>
                                        <div style="float: left; width: 560px">
                                            @Html.TextBoxFor(x => x.GuidePath, new { @class = "full-width", tabindex = 14 })
                                            @Html.ValidationMessageFor(x => x.GuidePath)
                                        </div>
                                        <div style="float: left; width: 50px">
                                            <img id="imgReferenceLinkValid" src="/../Content/themes/Constellation/images/icons/fugue/tick-circle.png" width="16" height="16" style="margin-right: 4px; padding-top: 5px; display: none" />
                                            <img id="imgReferenceLinkInvalid" src="/../Content/themes/Constellation/images/icons/fugue/cross-circle.png" width="16" height="16" style="margin-right: 4px; padding-top: 5px; display: none" />
                                        </div>
                                    </div>
                                    <div class="clear" style="padding-top: 10px"></div>
                                    <button id="btnValidateReferencePath" type="button" class="grey" style="margin-left: -2px;" onclick="validateReferenceLink()" tabindex="15">Validate Link</button>
                                    <div class="clear" style="padding-top:5px"></div>
                                    <div>

                                        <div id="file_upload_guide_div" style="margin-top: -30px; float:left">
                                            <input id="file_upload_guide" name="file_upload_guide" type="file" tabindex="14" />
                                        </div>
                                        <div class="clear"></div>
                                        <div id="guide_file_div" style="float:left; width:400px">

                                        </div>
                                    </div>
                                </div>
                                <div class="colx2-right">
                                    <p><input id="radioGuideInt" type="radio" name="radioGuideSelection" onclick="guideSelect()" tabindex="13" /><label for="radioGuideInt">File</label></p>
                                </div>
                            </div>
                        </fieldset>
                        <ul class="tabs js-tabs">
                            <li class="current"><a href="#tab-grades">@LabelHelper.TestGrade</a></li>
                            <li class="current"><a href="#tab-masterstandards">Master Standards</a></li>
                        </ul>
                        <div class="tabs-content" id="tab_div">
                            <div id="tab-grades">
                                <!--<a id="btnAddExistingGrade" href="javascript:void(0);" class="button resourceOperation" onclick="addExistingGradeClick()"> -->
                                <a id="btnAddExistingGrade" href="javascript:void(0);" class="button resourceOperation" onclick="showAvailableGradeDialog(this)" tabindex="15">
                                    <img alt="#" src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")" />
                                    Assign @LabelHelper.TestGrade
                                </a>
                                <p style="height: 10px"></p>
                                <div id="divGradeList"></div>
                            </div>
                            <div id="tab-masterstandards">
                                <!--<a id="btnAddExistingMasterStandard" href="javascript:void(0);" class="button resourceOperation" onclick="addExistingMasterStandardClick()">-->
                                <a id="btnAddExistingMasterStandard" href="javascript:void(0);" class="button resourceOperation" onclick="showAvailableMasterStandardDialog(this)" tabindex="16">
                                    <img alt="#" src="@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")" />
                                    Assign Master Standard
                                </a>
                                <p style="height: 10px"></p>
                                <div id="divMasterStandardList"></div>
                            </div>
                        </div>
                        <br />


                    </div>

                    if (ViewBag.IsInValidLessonProvider != null && ViewBag.IsInValidLessonProvider)
                    {
                        <button type="button" onclick= "javascript:window.location='@Url.Action("Index")'" >Go back</button>
                    }
                    else
                    {
                        <button id="btnSubmit" type="submit" name="Save" tabindex="17">Submit</button>
                        <button id="btnCancel" type="button" class="grey" tabindex="18">Cancel</button>
                    }



                    <input type="hidden" id="fileNameLesson" name="FileNameLesson" />
                    <input type="hidden" id="fileNameGuide" name="FileNameGuide" />
                    <input type="hidden" id="fileTypeLesson" name="FileTypeLesson" />
                    <input type="hidden" id="fileTypeGuide" name="FileTypeGuide" />
                    <input type="hidden" id="LessonId" name="LessonId" />
                    <input type="hidden" id="LessonSelection" name="LessonSelection" />
                    <input type="hidden" id="GuideSelection" name="GuideSelection" />
                    <input type="hidden" id="Keywords" name="Keywords" />
                    <input type="hidden" id="Description" name="Description" />
                    <input type="hidden" id="AssignedGradeIdString" name="AssignedGradeIdString" />
                    <input type="hidden" id="AssignedStandardIdString" name="AssignedStandardIdString" />
                    <input type="hidden" id="SelectedLessonProviderId" name="SelectedLessonProviderId" />

                    <!-- Hidden field for search criteria from LearningLibraryAdmin/Index.cshtml-->
                    <input type="hidden" id="GradeSearch" name="GradeSearch" />
                    <input type="hidden" id="SubjectIdSearch" name="SubjectIdSearch" />
                    <input type="hidden" id="ContentProviderIdSearch" name="ContentProviderIdSearch" />
                    <input type="hidden" id="ResourceTypeIdSearch" name="ResourceTypeIdSearch" />
                    <input type="hidden" id="FilterSearch" name="FilterSearch" />

                }

            </div>

        </div>
    </section>
</article>
<script type="text/javascript">
    $(function () {
        $('.lessons').addClass('current');
        $('#resourceAdminTab').addClass('current');
        $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
        //alert($.browser.chrome);
        if($.browser.chrome) {
            //maxlength of textarea count new line as two character in chrome, so remove maxlength attribute when using chrome
            $("#descriptionArea").removeAttr("maxlength");
            $("#keywordsArea").removeAttr("maxlength");
        }
        //Assign search criteria to hidden fields
        $("#GradeSearch").val('@Model.GradeSearch');
        $("#GradeSearch").html('@Model.GradeSearch').text();
        $("#GradeSearch").val(encodeURIComponent($("#GradeSearch").text()));

        $("#SubjectIdSearch").val(@Model.SubjectIdSearch);
        $("#ContentProviderIdSearch").val(@Model.ContentProviderIdSearch);
        $("#ResourceTypeIdSearch").val(@Model.ResourceTypeIdSearch);
        $("#FilterSearch").val('@Model.FilterSearch');
        $("#FilterSearch").html('@Model.FilterSearch').text();
        $("#FilterSearch").val(encodeURIComponent($("#FilterSearch").text()));

        $("#LessonId").val(@Model.LessonId);

        if(@Model.LessonId ==0) { //Add new
            $("#LessonSelection").val('link'); //default
            $("#GuideSelection").val('link');
            $('#file_upload_div').hide();
            $('#file_upload_guide_div').hide();


            if(@Model.ContentProviderIdSearch > 0) {
                innitDropdownListDistrict('@Model.ContentProviderIdSearch');
            }
            else {
                innitDropdownListDistrict('@Model.CurrentUserDistrictId');
            }


            $.get('@Url.Action("GetLessonContentTypes", "LearningLibrarySearch")', function(data) {
                AddSelectListItems($('#selectType'), data, 'Select Content Type');

                @* if (@Model.ResourceTypeIdSearch > 0) {
                    $('#selectType').val(@Model.ResourceTypeIdSearch);
                }*@
            })
            ;
            $.get('@Url.Action("GetLessonSubjects", "LearningLibrarySearch")', function(data) {
                AddSelectListItems($('#selectSubject'), data, 'Select @LabelHelper.Subject');
                @*if (@Model.SubjectIdSearch > 0) {
                    $('#selectSubject').val(@Model.SubjectIdSearch);
                }*@
            });


            $("#AssignedGradeIdString").val('@Model.AssignedGradeIdString');
            $("#AssignedStandardIdString").val('@Model.AssignedStandardIdString');

        } else {//Edit
            $("#LessonId").val(@Model.LessonId);

            if('@Model.ErrorMessage'.length > 0) {
                alertMessage('@Model.ErrorMessage');
                $("#tab_div").hide();
                $('#file_upload_div').hide();
                $('#file_upload_div').hide();
                $('#btnSubmit').disableBt();
                return;
            }
            //Display current value of lesson
            innitDropdownListDistrict('@Model.LessonProviderId');
            innitDropdownListResourceType(@Model.LessonContentTypeId);
            innitDropdownListSubject(@Model.SubjectId);
            //Lesson file
            $("#LessonName").html('@Model.LessonName');
            $("#LessonName").val($("#LessonName").text());

            $("#descriptionArea").html('@Model.Description');
            $("#descriptionArea").val($("#descriptionArea").text());

            var temp = $("#descriptionArea").val();
            do {
                temp = temp.replace("&#10", "\n");
            } while (temp.indexOf("&#10") >=0)
            $("#descriptionArea").val(temp);

            $("#keywordsArea").html('@Model.Keywords');
            $("#keywordsArea").val($("#keywordsArea").text());

            temp = $("#keywordsArea").val();
            do {
                temp = temp.replace("&#10", "\n");
            } while (temp.indexOf("&#10") >=0)
            $("#keywordsArea").val(temp);



            $("#LessonSelection").val('@Model.LessonSelection');
            //alert('xxx3:' + $("#LessonSelection").val());
            if( $("#LessonSelection").val()=='link') {
                $('#file_upload_div').hide();
            } else {
                $("#radioLessonInt").attr('checked', true);
                $('#LessonPath').hide();
                $('#resourcePathLabel').hide();
                $('#btnValidateResourcePath').hide();
                $('#divResourceLink').hide();

                if ($.trim('@Model.FileNameLesson').length > 0) {
                    //$('#file_upload_div').hide();
                    //display file and allow user to download, delete file
                    $("#lesson_file_div").html(SetIconLessonFile(@Model.LessonId, '@Model.FileNameLesson'));
                } else {
                    $('#file_upload_div').show();
                }
            }

            //Guide file
            $("#GuideSelection").val('@Model.GuideSelection');
            if( $("#GuideSelection").val()=='link') {
                $('#file_upload_guide_div').hide();
            } else {
                $("#radioGuideInt").attr('checked', true);
                $('#GuidePath').hide();
                $('#referencePathLabel').hide();
                $('#btnValidateReferencePath').hide();
                $('#divReferenceLink').hide();

                if ($.trim('@Model.FileNameGuide').length > 0) {
                    //display file and allow user to download, delete file
                    $("#guide_file_div").html(SetIconGuideFile(@Model.LessonId, '@Model.FileNameGuide'));
                } else {

                    $('#file_upload_guide_div').show();
                }
            }


            //Assigned @LabelHelper.GradeLabels
            $("#AssignedGradeIdString").val('@Model.AssignedGradeIdString');

            //Assigned standard(s)
            $("#AssignedStandardIdString").val('@Model.AssignedStandardIdString');

        }

        $.ajaxSetup({ cache: false });
        PopulateAssignedGrades('@Model.AssignedGradeIdString');
        PopulateAssignedMasterStandards('@Model.AssignedStandardIdString');



        $( "#LessonPath" ).keyup(function() {
            if($.trim($("#LessonPath").val()).length > 0) {
                $("#btnValidateResourcePath").addClass('resource-green-button');
                $("#btnValidateResourcePath").removeClass('grey');
            } else {
                $("#btnValidateResourcePath").removeClass('resource-green-button');
                $("#btnValidateResourcePath").addClass('grey');
                $("#imgResoureLinkValid").hide();
                $("#imgResoureLinkInvalid").hide();

            }
        });
        $( "#GuidePath" ).keyup(function() {
            if($.trim($("#GuidePath").val()).length > 0) {
                $("#btnValidateReferencePath").addClass('resource-green-button');
                $("#btnValidateReferencePath").removeClass('grey');
            } else {
                $("#btnValidateReferencePath").removeClass('resource-green-button');
                $("#btnValidateReferencePath").addClass('grey');
                $("#imgReferenceLinkValid").hide();
                $("#imgReferenceLinkInvalid").hide();
            }
        });

        $("#descriptionArea").keyup(function( ) {
            var limit = 1000;

            var len = $("#descriptionArea").val().length ;
            if(len>limit) {
                var text = $("#descriptionArea").val();
                $("#descriptionArea").val(text.substr(0,limit));
            }
            var remainLen = limit - len;
            if(remainLen<0) {
                remainLen = 0;
            }
            var message = '';
            if(remainLen >1) {
                message = '(<i> ' +  remainLen  + ' characters left</i>)';
            }
            else {
                message = '(<i> ' +  remainLen +  ' character left</i>)';
            }

            $("#lblDescriptionAvailableChars").html(message);

        });
        $("#descriptionArea").keypress(function( event) {
            if($.browser.msie||$.browser.chrome) {
                var limit = 1000;
                var len = $("#descriptionArea").val().length ;
                if(len+1>limit) {
                    event.preventDefault();
                }
            }
        });
        $("#keywordsArea").keyup(function( ) {
            var limit = 1000;
            var len = $("#keywordsArea").val().length ;
            if(len>limit) {
                var text = $("#keywordsArea").val();
                $("#keywordsArea").val(text.substr(0,limit));
            }
            var remainLen = limit - len;
            if(remainLen<0) {
                remainLen = 0;
            }
            var message = '';
            if(remainLen >1) {
                message = '(<i> ' +  remainLen  + ' characters left</i>)';
            }
            else {
                message = '(<i> ' +  remainLen +  ' character left</i>)';
            }

            $("#lblKeywordAvailableChars").html(message);


        });
        $("#keywordsArea").keypress(function( event) {
            if($.browser.msie||$.browser.chrome) {
                var limit = 1000;
                var len = $("#keywordsArea").val().length ;
                if(len+1>limit) {
                    event.preventDefault();
                }
            }
        });
    });



    function innitDropdownListDistrict(selectedDistrictID) {
        var dropdownSelector = '#selectProvider';
        $.ajax({
            url: '@Url.Action("GetProviders")',
            dataType: 'json',
            async: false,
            success: function (districts) {
                addDefaultProviderOption($(dropdownSelector), "Select Provider");
                //reset Select All -> All
                addSelectListWithDefaultValue($(dropdownSelector), districts, selectedDistrictID);
                if (@Model.RoleId != 5 && @Model.RoleId != 27) {
                    $("#selectProvider").prop("disabled", true);
                }
            },
            beforeSend: function () {
            },
            complete: function () {
            }
        });
    }
    function innitDropdownListResourceType(selectedID) {
        var dropdownSelector = '#selectType';
        $.ajax({
            url: '@Url.Action("GetLessonContentTypes", "LearningLibrarySearch")',
            dataType: 'json',
            async: false,
            success: function (data) {
                addDefaultProviderOption($(dropdownSelector), "Select content type");
                //reset Select All -> All
                addSelectListWithDefaultValue($(dropdownSelector), data, selectedID);
            },
            beforeSend: function () {
            },
            complete: function () {
            }
        });
    }
    function innitDropdownListSubject(selectedID) {
        var dropdownSelector = '#selectSubject';
        $.ajax({
            url: '@Url.Action("GetLessonSubjects", "LearningLibrarySearch")',
            dataType: 'json',
            async: false,
            success: function (data) {
                addDefaultProviderOption($(dropdownSelector), "Select @LabelHelper.Subject");
                //reset Select All -> All
                addSelectListWithDefaultValue($(dropdownSelector), data, selectedID);
            },
            beforeSend: function () {
            },
            complete: function () {
            }
        });
    }

    function validateResourceLink() {

        var link = $("#LessonPath").val();
        link = $.trim(link);
        if(link.length==0) {
            $("#imgResoureLinkValid").hide();
            $("#imgResoureLinkInvalid").hide();
            return;
        }

        ShowBlock($('#divAddResource'), "Validating Resource Path");

        $.get('@Url.Action("ValidateLink")', { link: link }, function(response) {
            if (response.Success == 'Success') {
                $("#imgResoureLinkValid").show();
                $("#imgResoureLinkInvalid").hide();
                $('#divAddResource').unblock();
            } else {
                $("#imgResoureLinkInvalid").show();
                $("#imgResoureLinkValid").hide();

                $('#divAddResource').unblock();
            }

        });

    }
    function validateResourceLinkSubmit() {

        var link = $("#LessonPath").val();
        link = $.trim(link);
        if (link.length == 0) {
            return;
        }

        ShowBlock($('#divAddResource'), "Validating Resource Path");

        $.get('@Url.Action("ValidateLink")', { link: link }, function(response) {
            if (response.Success == 'Success') {
                $("#imgResoureLinkValid").show();
                $("#imgResoureLinkInvalid").hide();

                $('#divAddResource').unblock();
                validateReferenceLinkSubmit();

            } else {
                $("#imgResoureLinkInvalid").show();
                $("#imgResoureLinkValid").hide();

                $('#divAddResource').unblock();
            }

        });

    }

    function validateReferenceLink() {
        var link = $("#GuidePath").val();
        link = $.trim(link);
        if(link.length==0) {
            //alertMessage("Please input Reference Path.");
            $("#imgReferenceLinkValid").hide();
            $("#imgReferenceLinkInvalid").hide();
            return ;
        }

        ShowBlock($('#divAddResource'), "Validating Reference  Path");
        $.get('@Url.Action("ValidateLink")', { link: link }, function(response) {
            if (response.Success == 'Success') {
                $("#imgReferenceLinkValid").show();
                $("#imgReferenceLinkInvalid").hide();
                $('#divAddResource').unblock();
            } else {
                $("#imgReferenceLinkInvalid").show();
                $("#imgReferenceLinkValid").hide();
                $('#divAddResource').unblock();
            }

        });
    }
    function validateReferenceLinkSubmit() {
        var link = $("#GuidePath").val();
        link = $.trim(link);
        if(link.length==0) {
            //alertMessage("Please input Reference Path.");
            return ;
        }

        ShowBlock($('#divAddResource'), "Validating Reference  Path");
        $.get('@Url.Action("ValidateLink")', { link: link }, function(response) {
            if (response.Success == 'Success') {
                $("#imgReferenceLinkValid").show();
                $("#imgReferenceLinkInvalid").hide();

                $('#divAddResource').unblock();
                submitForm();
            } else {
                $("#imgReferenceLinkInvalid").show();
                $("#imgReferenceLinkValid").hide();
                $('#divAddResource').unblock();
            }

        });
    }
    function lessonSelect() {
        if ($('#radioLessonInt').is(':checked')) {
            $("#LessonSelection").val('file');
            $('#file_upload_div').show();


            $('#divResourceLink').hide();

            $('#LessonPath').hide();
            $('#resourcePathLabel').hide();
            $('#btnValidateResourcePath').hide();

            $("#lesson_file_div").show();
            //$("#LessonPath").val('');
            //
            $("#btnValidateResourcePath").removeClass('resource-green-button');
            $("#btnValidateResourcePath").addClass('grey');
            $("#imgResoureLinkValid").hide();
            $("#imgResoureLinkInvalid").hide();
        }
        if ($('#radioLessonExt').is(':checked')) {

            $("#LessonSelection").val('link');

            if (window.FormData !== undefined) {
                if ($('.uploadifive-queue-item').first().data('file') !== undefined) {
                    $('#file_upload').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                }
            }

            selectedLessonFileCount = 0;


            $("#lesson_file_div").hide();
            $('#file_upload_div').hide();

            $('#LessonPath').show();
            $('#resourcePathLabel').show();
            $('#btnValidateResourcePath').show();
            $('#divResourceLink').show();

        }
    }
    function guideSelect() {
        if ($('#radioGuideInt').is(':checked')) {
            $("#GuideSelection").val('file');
            $('#file_upload_guide_div').show();
            $('#GuidePath').hide();
            $('#referencePathLabel').hide();
            $('#btnValidateReferencePath').hide();
            $('#divReferenceLink').hide();
            $("#guide_file_div").show();
            $("#btnValidateReferencePath").removeClass('resource-green-button');
            $("#btnValidateReferencePath").addClass('grey');
            $("#imgReferenceLinkValid").hide();
            $("#imgReferenceLinkInvalid").hide();
        }
        if ($('#radioGuideExt').is(':checked')) {
            $("#GuideSelection").val('link');

            if (window.FormData !== undefined) {
                if ($('.uploadifive-queue-item').first().data('file') !== undefined) {
                    $('#file_upload_guide').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                }
            }

            selectedGuideFileCount = 0;

            $("#guide_file_div").hide();
            $('#file_upload_guide_div').hide();
            $('#GuidePath').show();
            $('#referencePathLabel').show();
            $('#btnValidateReferencePath').show();
            $('#divReferenceLink').show();
        }
    }

    function checkInput() {
        var ok = true;
        $("#error-messages-Resource").hide();
        $('#success-message').hide();
        $("#error-messages-Resource").html('');
        //check before submitting
        //check content provider
        if($("#selectProvider").val() =='select' || $("#selectProvider").val() <=0) {
            $("#error-messages-Resource").append("<li>Content Provider is required.</li>");
            $("#error-messages-Resource").show();
            ok = false;
        }

        $("#SelectedLessonProviderId").val( $("#selectProvider").val());
        if($("#selectType").val()<=0 || $("#selectType").val()=='select') {
            $("#error-messages-Resource").append("<li>Resource Type is required.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }
        if($("#selectSubject").val()<=0 || $("#selectSubject").val()=='select') {
            $("#error-messages-Resource").append("<li>Subject is required.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }

        if($.trim($("#LessonName").val()).length==0) {
            $("#error-messages-Resource").append("<li>Resource Name is required.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }
        if($.trim($("#LessonName").val()).length > 0 && $.trim($("#LessonName").val()).length < 4) {
            $("#error-messages-Resource").append("<li>Please input Resource Name with a minimum of 4 characters in length.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }
        if($.trim($("#keywordsArea").val()).length > 1000) {
            $("#error-messages-Resource").append("<li>Maximum length of Keyword is 1000 characters.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }
        if($.trim($("#descriptionArea").val()).length > 1000) {
            $("#error-messages-Resource").append("<li>Maximum length of Description is 1000 characters.</li>");
            $("#error-messages-Resource").show();
            ok = false;;
        }

        if($("#LessonSelection").val()=='link') {

            var link = $("#LessonPath").val();
            link = $.trim(link);
            if(link.length==0) {
                $("#error-messages-Resource").append("<li>Resource Path is required.</li>");
                $("#error-messages-Resource").show();
                $("#imgResoureLinkValid").hide();
                $("#imgResoureLinkInvalid").hide();
                ok = false;;
            }
        }

        if($("#LessonSelection").val()=='file') {
            if (@Model.LessonId == 0) { //Add new
                if ($.trim($("#fileNameLesson").val()).length == 0) {
                    $("#error-messages-Resource").append("<li>Resource File is required.</li>");
                    $("#error-messages-Resource").show();
                    ok = false;;
                }
            } else { //Edit
                //if user has already selected a new file, no need to check
                //alert('xxx1:' + $("#fileNameLesson").val().length);
                if ($.trim($("#fileNameLesson").val()).length > 0) {

                } else {
                    //user has not selected any file
                    //if there is no selected resource file, check with 2 cases
                    //case 1: just check when current resource use a link and now use a file but user has not choosen any file
                    if ('@Model.LessonSelection' == 'link') {
                        if ($.trim($("#lesson_file_div").html()).length == 0) {//if there's no file uploaded
                            if ($.trim($("#fileNameLesson").val()).length == 0) {//user has not choosen any file
                                //alert('case1');
                                $("#error-messages-Resource").append("<li>Resource File is required.</li>");
                                $("#error-messages-Resource").show();
                                ok = false;
                                ;
                            }
                        }
                    } else {
                        //case 2: or user has already deleted the current resource file
                        //alert('xxx2:' + $("#lesson_file_div").html());
                        //alert('xxx2:' + $.trim($("#lesson_file_div").html()).length);
                        if ($.trim($("#lesson_file_div").html()).length == 0) {
                            $("#error-messages-Resource").append("<li>Resource File is required.</li>");
                            $("#error-messages-Resource").show();
                            ok = false;;
                        }
                    }
                }
            }
        }
        return ok;
    }

    $('#addResourceForm').submit(function (event) {
        event.preventDefault();

        if(!checkInput()) {
            return;
        }

        ShowBlock($('#divAddResource'), "Submitting");
        $('#btnSubmit').disableBt();
        $('#success-message').hide();
        $("#Keywords").val(encodeURIComponent($.trim($("#keywordsArea").val())));
        $("#Description").val(encodeURIComponent($.trim($("#descriptionArea").val())));
        $("#LessonName").val(encodeURIComponent($("#LessonName").val()));

        $("#fileNameLesson").val(encodeURIComponent($("#fileNameLesson").val()));
        $("#fileNameGuide").val(encodeURIComponent($("#fileNameGuide").val()));


        $.ajax({
            url: $(this).target,
            type: 'POST',
            data: $(this).serialize(),
            success: function(response) {
                //decodeUri LessonName
                $("#LessonName").val(decodeURI($("#LessonName").val()));

                if (response.Success != false) {
                    $('#error-messages').hide();
                    //have to wait for saving resource successfully to get the lesson_id
                    //lesson_id will be added to the file name when uploading it to s3
                    $("#LessonId").val(response.CreatedLessonId);

                    if (@Model.LessonId == 0) { //Add new resource
                        if ($("#LessonSelection").val() == 'file') {
                            $('#divAddResource').unblock();
                            //call this function to upload resource file
                            if (window.FormData !== undefined) {
                                $('#file_upload').uploadifive('upload');
                            }
                        } else {
                            //If user has selected a reference file, upload this file
                            if ($("#GuideSelection").val() == 'file' && $("#fileNameGuide").val().length > 0) {
                                if (window.FormData !== undefined) {
                                    $('#file_upload_guide').uploadifive('upload');
                                }
                            } else {
                                //just show add successfully
                                $('#success-message').show();
                                clearScreen();
                                //if(@Model.LessonId==0) {//Add new
                                redirectToIndexPage(); //Michael McGill  want to return to Index page when Edit
                                //}
                            }
                        }
                    } else { //Edit resource
                        //upload resource file (if any) then upload reference file (if any) like adding resource
                        var resourceFileUploadedYN = 'N';
                        //alert('iiiiiiii ' + $("#fileNameLesson").val());
                        if ($("#LessonSelection").val() == 'file' && $.trim($("#fileNameLesson").val()).length > 0) {
                            if ($.trim($("#fileNameLesson").val()).length > 0) { //user has selected a new file to replace existing file
                                $('#divAddResource').unblock();
                                //call this function to upload resource file
                                resourceFileUploadedYN = 'Y';
                                if (window.FormData !== undefined) {
                                    $('#file_upload').uploadifive('upload');
                                }
                            }
                        }

                        if (resourceFileUploadedYN == 'N') { //if resourceFileUploadedYN='Y'  that mean resource file has been uploaded and reference file (if any) will be uploaded right after resource file uploaded, see loadFlashModule
                            //If user has selected a reference file, upload this file
                            //alert('ffffff ' + $("#fileNameGuide").val());
                            if ($("#GuideSelection").val() == 'file' && $.trim($("#fileNameGuide").val()).length > 0) {
                                if (window.FormData !== undefined) {
                                    $('#file_upload_guide').uploadifive('upload');
                                }
                            } else {
                                //just show add successfully
                                //alert('tttttttt');
                                $('#success-message').show();
                                clearScreen();
                                redirectToIndexPage(); //Michael McGill  want to return to Index page when Edit
                            }
                        }
                    }
                } else {
                    $("#error-messages-Resource").show();
                    if (response.Error != null) {
                        $("#error-messages-Resource").append("<li>" + response.Error + "</li>");
                    } else {
                        for (var i = 0; i < response.ErrorList.length; i++) {
                            $("#error-messages-Resource").append("<li>" + response.ErrorList[i].ErrorMessage + "</li>");
                            if (response.ErrorList[i].ErrorMessage == 'Lesson Path must be an valid url.') {
                                $("#imgResoureLinkValid").hide();
                                $("#imgResoureLinkInvalid").show();

                            }
                            if (response.ErrorList[i].ErrorMessage == 'Reference Path must be an valid url.') {
                                $("#imgReferenceLinkValid").hide();
                                $("#imgReferenceLinkInvalid").show();
                            }
                        }
                    }
                    $('#error-messages').addClass('no-margin');
                }
                $('#btnSubmit').enableBt();
                $('#divAddResource').unblock();
            },
            failure: function(response) {
                $('#divAddResource').unblock();
            }
        }).done(function() {
            $('#divAddResource').unblock();
        });
    });

    function redirectToIndexPage() {
        //redirect user to Index page when adding new
        //if(@Model.LessonId == 0) {//Michael McGill  want to return to Index page when Edit
        //alert('aa1:' + $("#LessonName").val() );
        var link = '';
        if(@Model.LessonId == 0) {//Add New
            var encodedLessonName = encodeURIComponent(htmlEncode($("#LessonName").val()));
            link = '@Url.Action("Index")/?lessonId=' + $("#LessonId").val() + '&contentProviderIdSearch=' + $("#selectProvider").val() + '&subjectIdSearch=' + $("#selectSubject").val() + '&resourceTypeIdSearch=' + $("#selectType").val() + '&filterSearch="' + encodedLessonName + '"';
            //link = encodeURI(link);
        }
        else {
            link = '@Url.Action("Index")';
        }

        window.location.href = link;
    }

    function clearScreen() {
        if ($('#radioLessonExt').is(':checked')) {//if user has decided to use link, not show file any more
            $("#lesson_file_div").html('');
        }
        if ($('#radioGuideExt').is(':checked')) {//if user has decided to use link, not show file any more
            //alert('gggg1');
            $("#guide_file_div").html('');
        }

        //Clear hidden fields or reset to default value
        @*$("#fileNameLesson").val('');
        $("#fileNameGuide").val('');
        $("#fileTypeLesson").val('');
        $("#fileTypeGuide").val('');
        $("#LessonSelection").val('link');
        $("#GuideSelection").val('link');
        $("#Keywords").val('');
        $("#Description").val('');
        $("#AssignedGradeIdString").val('');
        PopulateAssignedGrades('');
        $("#AssignedStandardIdString").val('');
        PopulateAssignedMasterStandards('');

        //clear input fields
        if(@Model.LessonId > 0) {
            return;//no clear screen when editing.
        }
        $("#descriptionArea").val('');
        $("#keywordsArea").val('');
        var filterSearch = $("#LessonName").val();
        $("#LessonName").val('');
        $("#radioLessonExt").attr("checked", true);
        lessonSelect();
        $("#radioGuideExt").attr("checked", true);
        guideSelect();

        $("#LessonPath").val('');
        $("#GuidePath").val('');
        $("#imgResoureLinkValid").hide();
        $("#imgResoureLinkInvalid").hide();
        $("#imgReferenceLinkValid").hide();
        $("#imgReferenceLinkInvalid").hide();*@

    }

    function clearInputFields() {
        $('.full-width').val('');
    }


    function SetIconLessonFile(lessonId, fileName) {
        var vIcon = '';
        var vImage = '';
        var displayFileName = fileName;//displayFileName will not include lessonId

        if(displayFileName.indexOf('_')> 0) {
            var firstPos = displayFileName.indexOf('_');//first position of '_'
            displayFileName = fileName.substring(firstPos+1, fileName.length);
        }

        var vFile = '<a style="float:left;margin-left: 5px;margin-top: 5px;" href="../../Notification/DownloadLesson/?filePath=' +  encodeURIComponent(htmlDecode(fileName)) + '" target="_blank" title="' + fileName + '">' + displayFileName + '</a>';
        vIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        //vImage = '<div style="float:left;margin-left: -3px;">' + vFile + ' <div style ="float:left !important; padding_left:2px" onclick="RemoveLessonFile()" class="with-tip" title="Remove file"><img src ="' + vIcon + '"  title="Remove File"></div></div>';
        //not show delete icon anymore
        vImage = '<div style="float:left;margin-left: -3px;">' + vFile + '</div>';
        return vImage;

    }
    function SetIconGuideFile(lessonId, fileName) {
        var vIcon = '';
        var vImage = '';
        var displayFileName = fileName;//displayFileName will not include lessonId
        if(displayFileName.indexOf('_')> 0) {
            var firstPos = displayFileName.indexOf('_');//first position of '_'
            displayFileName = displayFileName.substring(firstPos+1, displayFileName.length);
        }
        var vFile = '<a style="float:left;margin-left: 5px;margin-top: 5px;" href="../../Notification/DownloadGuide/?filePath=' +  encodeURIComponent(htmlDecode(fileName)) + '" target="_blank" title="' + fileName + '">' + displayFileName + '</a>';
        vIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        //vImage = '<div style="float:left;margin-left: -3px;">' + vFile + ' <div  style ="float:left !important; padding_left:2px" onclick="RemoveGuideFile()" class="with-tip" title="Remove file"><img src ="' + vIcon + '"  title="Remove File"></div></div>';
        //not show delete icon anymore
        vImage = '<div style="float:left;margin-left: -3px;">' + vFile + '</div>';
        return vImage;

    }

    function RemoveLessonFile() {
        if (confirm("Do you want to delete this file?")) {
            $.post('@Url.Action("DeleteFileLesson")', { lessonId: @Model.LessonId,fileName:$("#fileNameLesson").val() }, function(response) {
                if (response.Success == 'Success') {
                    //TODO: Change Status Success
                    $('#file_upload_div').show();

                    if (window.FormData !== undefined) {
                        $('#file_upload').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                    }
                    $("#fileNameLesson").val('');
                    $("#lesson_file_div").html('');
                } else {
                    //TODO: Change Status Fail
                    alert("Change Status Fail: " + response.errorMessage);
                }

            });
        }
    }
    function RemoveGuideFile() {
        if (confirm("Do you want to delete this file?")) {

            $.post('@Url.Action("DeleteFileGuide")', { lessonId: @Model.LessonId,fileName: $("#fileNameGuide").val()}, function(response) {
                if (response.Success == 'Success') {
                    //TODO: Change Status Success
                    $('#file_upload_guide_div').show();
                    if (window.FormData !== undefined) {
                        $('#file_upload_guide').uploadifive('cancel', $('.uploadifive-queue-item').first().data('file'));
                    }

                    $("#fileNameGuide").val('');
                    $("#guide_file_div").html('');
                } else {
                    //TODO: Change Status Fail
                    alert("Change Status Fail: " + response.errorMessage);
                }

            });
        }
    }
    //Assign @LabelHelper.GradeLabel
    function PopulateAssignedGrades(gradeIdString)
    {

        $('#divGradeList').load('@Url.Action("ShowAssignedGradeList")?gradeIdString=' + gradeIdString,  function (response) {
            if (response == false) {
                alert(response);
            }
        });
    }

    function showAvailableGradeDialog(el) {
        var lessonId = @Model.LessonId;
        //var lessonName = encodeURIComponent('@Model.LessonName');
        var worker = $('<div />');
        worker
            .addClass("dialog")
            .attr("id", "addGradeDialog")
            .appendTo("body")
            .load('@Url.Action("ShowAvailableGrades")/?lessonId=' + lessonId , function () {
                worker.dialog({
                    title: $(this).attr("Assign @LabelHelper.GradeLabels"),
                    close: function () {
                        $('.ui-widget-overlay').remove();
                        $(this).remove();
                    },
                    modal: false,
                    width: 650,
                    resizable: false
                });
            });

        //todo: the jQuery UI "dialog" plugin wasn't working properly here, so this workaround went in.. :(
        showModalDialogBG();
    }


    //Assign Master Standard


    function PopulateAssignedMasterStandards(standardIdString)
    {
        $('#divMasterStandardList').load('@Url.Action("ShowAssignedMasterStandardList")?standardIdString=' + standardIdString,  function (response) {
            if (response == false) {
                alert(response);
            }
        });
    }


    function showAvailableMasterStandardDialog(el) {
        var lessonId = @Model.LessonId;
        var worker = $('<div />');
        worker
            .addClass("dialog AvailableStandardDialogCSS")
            .attr("id", "addMasterStandardDialog")
            .appendTo("body")
            .load('@Url.Action("ShowAvailableMasterStandardEdit")/?lessonId=' + lessonId , function () {
                worker.dialog({
                    title: $(this).attr("Assign Master Standards"),
                    close: function () {
                        $('.ui-widget-overlay').remove();
                        $(this).remove();
                        //Query database to redisplay
                        //alert('aaa:' + $("#AssignedStandardIdString").val());
                        //PopulateAssignedMasterStandards($("#AssignedStandardIdString").val());
                    },
                    modal: false,
                    width: 905,
                    resizable: false
                });
            });

        //todo: the jQuery UI "dialog" plugin wasn't working properly here, so this workaround went in.. :(
        showModalDialogBG();
    }

    function addExistingMasterStandardClick() {
        //alert('addExistingMasterStandardClick');

    }

    function CloseSideContent() {
        $('#divSideContent').empty();
    }


    $('#btnCancel').click(function () {
        //GradeSearch and FilterSearch have been encode when page load finished
        //alert('fff1:' + $("#FilterSearch").val());
        //alert('ggg3: ' + $("#GradeSearch").val());
        var link = '@Url.Action("Index")/?lessonId='+ $("#LessonId").val() + '&gradeSearch='+ $("#GradeSearch").val() +'&contentProviderIdSearch=' +  $("#ContentProviderIdSearch").val() + '&subjectIdSearch=' + $("#SubjectIdSearch").val()  +'&resourceTypeIdSearch=' + $("#ResourceTypeIdSearch").val() + '&filterSearch=' + $("#FilterSearch").val();
        link = encodeURI(link);
        //alert('iii3: ' + link);
        window.location.href = link;
    });
    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

</script>
<!-- Script for uploadify -->
<script type="text/javascript">
    $(function () {
        var NOTSELECTEDCLASS = "notSelectedTR";
        var auth = '@(Request.Cookies[FormsAuthentication.FormsCookieName] == null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)';
        var selectedLessonFileCount = 0;
        var selectedGuideFileCount = 0;

        loadFlashModule();
        loadFlashModuleGuide();

        var _data = {"fileType":["application\/pdf","application\/msword","application\/vnd.openxmlformats-officedocument.wordprocessingml.document","application\/excel","application\/vnd.ms-excel","application\/x-excel","application\/x-msexcel","application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet","text\/plain","application\/vnd.oasis.opendocument.text","application\/vnd.oasis.opendocument.spreadsheet"]};

        function loadFlashModule() {
            $("#divError").html('');

            if (window.FormData !== undefined) {
                $('#file_upload').uploadifive({
                    'uploadScript': '@Url.Action("UploadFileLesson")',
                    'overrideEvents': ['onDialogClose'],
                    'formData': { AUTHID: auth },
                    'buttonText': 'Select File',
                    'fileObjName': 'postedFile',
                    'multi': false,
                    'removeCompleted': true,
                    'width': 100,
                    'auto': false,
                    'fileSizeLimit': '@Model.FileMaxSizeMBString',
                    'fileType': [@Html.Raw(Model.ResourceMimeTypeString)],
                    'onAddQueueItem': function (file) {
                        selectedLessonFileCount++;
                        $("#fileTypeLesson").val(file.type);
                        $("#fileNameLesson").val(file.name);
                        if (isAllowedFileType(file.name) == false) {
                            alertMessage('File type not supported. Please import an image, PDF, Word, Excel, PowerPoint, MP3 or MP4 file.');
                            //clear queue
                            $('#file_upload').uploadifive('cancel', $('#LessonFileFieldset .uploadifive-queue-item').first().data('file'));
                        }
                        if(selectedLessonFileCount ==2) {
                            $('#file_upload').uploadifive('cancel', $('#LessonFileFieldset .uploadifive-queue-item').first().data('file'));//TuanVo: cancel the first file if there are two file
                        }
                    },
                    'onUpload': function (file) {
                        $("#fileTypeLesson").val(file.type);
                        $("#fileNameLesson").val(file.name);

                        $('#file_upload').data('uploadifive').settings.formData = getFormDataLesson(auth); //pass parameter to server
                        ShowBlock($('#divAddResource'), "Uploading Resource File(s)");
                    },
                    'onUploadComplete': function (file, data) {
                        var result = $.parseJSON(data);
                        if (result == undefined) {
                            //alert('An error has occured.  Please try again');
                            addErrorMessages('An error has occured.  Please try again');
                            $('#divAddResource').unblock();

                            return;
                        }
                        if(result.success == false) {
                            //alert('kkkkkkkkkkkkk');
                            $('#divAddResource').unblock();
                            alert(result.errorMessage);
                            //reset selectedLessonFileCount
                            selectedLessonFileCount = 0;
                            addErrorMessages(result.errorMessage);
                            $('#error-messages').addClass('no-margin');
                            $('#error-messages').show();

                            $("#fileNameLesson").val('');
                            $("#fileTypeLesson").val('');
                            return;
                        }
                        //success
                        //reset selectedLessonFileCount
                        selectedLessonFileCount = 0;
                        $("#fileNameLesson").val('');
                        $("#fileTypeLesson").val('');

                        $('#file_upload_div').hide();
                        if(@Model.LessonId > 0) {//edit, display file name has been already updated
                            $('#file_upload_div').show();
                            $('#lesson_file_div').show();
                            $("#lesson_file_div").html(SetIconLessonFile(@Model.LessonId, result.fileName));
                        }

                        $('#divAddResource').unblock();

                        //If user has selected a reference file, upload this file
                        if ($("#GuideSelection").val() == 'file' && $("#fileNameGuide").val().length > 0) {
                            //alert('ggggg:' + $("#fileNameGuide").val());
                            $('#file_upload_guide').uploadifive('upload');

                        } else {
                            //show the success add message
                            $('#success-message').show();
                            clearScreen();
                            //if(@Model.LessonId==0) {//Add new
                            redirectToIndexPage();//Michael McGill  want to return to Index page when Edit
                            //}
                        }
                    },
                    'onError': function (errorType, file) {
                        if(errorType == 'FILE_SIZE_LIMIT_EXCEEDED')
                        {
                            alertMessage('The file size is larger than maximum file size ' + '@Model.FileMaxSizeMBString');
                        } else {
                            if (errorType == 'FORBIDDEN_FILE_TYPE') {
                                alertMessage('File type not supported. Please import an image, PDF, Word, Excel, PowerPoint, MP3 or MP4 file.');
                            } else {
                                alert('The error was: ' + errorType);
                                addErrorMessages(errorType);
                            }

                            $('#error-messages').addClass('no-margin');
                        }
                    },
                    'onCancel': function (file) {
                        selectedLessonFileCount--;
                        //alert('dddddd' + selectedLessonFileCount);
                        if(selectedLessonFileCount < 0) {
                            selectedLessonFileCount = 0;
                        }
                        //alert('ccccc' + selectedLessonFileCount);
                        if(selectedLessonFileCount==0) {
                            $("#fileTypeLesson").val('');
                            $("#fileNameLesson").val('');
                        }
                    }
                });
            }
        }

        function loadFlashModuleGuide() {
            $("#divError").html('');

            if (window.FormData !== undefined) {
                $('#file_upload_guide').uploadifive({
                    'uploadScript': '@Url.Action("UploadFileGuide")',
                    'overrideEvents': ['onDialogClose'],
                    'buttonText': 'Select File',
                    'fileObjName': 'postedFile',
                    'multi': false,
                    'removeCompleted': true,
                    'width': 100,
                    'auto': false,
                    'fileSizeLimit': '@Model.FileMaxSizeMBString',
                    'fileType': [@Html.Raw(Model.ResourceMimeTypeString)],
                    'onAddQueueItem': function (file) {
                        $("#fileNameGuide").val(file.name);
                        $("#fileTypeGuide").val(file.type);
                        if (isAllowedFileType(file.name) == false) {
                            alertMessage('Forbidden file type');
                            //clear queue
                            $('#file_upload_guide').uploadifive('cancel', $('#GuideFileFieldset .uploadifive-queue-item').first().data('file'));
                        }
                        selectedGuideFileCount++;
                        if(selectedGuideFileCount ==2) {
                            $('#file_upload_guide').uploadifive('cancel', $('#GuideFileFieldset .uploadifive-queue-item').first().data('file'));
                        }
                    },
                    'onUpload': function (file) {
                        $("#fileNameGuide").val(file.name);
                        $("#fileTypeGuide").val(file.type);
                        $('#file_upload_guide').data('uploadifive').settings.formData = getFormDataGuide(auth);
                        ShowBlock($('#divAddResource'), "Uploading Reference File(s)");
                    },
                    'onUploadComplete': function (file, data) {
                        var result = $.parseJSON(data);
                        if (result == undefined) {
                            alert('An error has occured.  Please try again');
                            addErrorMessages('An error has occured.  Please try again');
                            $('#error-messages').addClass('no-margin');
                            $('#divAddResource').unblock();
                            return;
                        }
                        if(result.success == false) {
                            $('#divAddResource').unblock();
                            alert(result.errorMessage);
                            //reset selectedGuideFileCount
                            selectedGuideFileCount = 0;
                            addErrorMessages(result.errorMessage);
                            $('#error-messages').addClass('no-margin');

                            $("#fileNameGuide").val('');
                            $("#fileTypeGuide").val('');
                            return;
                        }
                        //success
                        //reset selectedGuideFileCount
                        selectedGuideFileCount = 0;
                        $("#fileNameGuide").val('');
                        $("#fileTypeGuide").val('');

                        $('#file_upload_guide_div').hide();
                        $('#divAddResource').unblock();
                        if(@Model.LessonId == 0) {//create new

                        } else {//edit, display file name has been already updated
                            $('#file_upload_guide_div').show();
                            $('#guide_file_div').show();
                            $("#guide_file_div").html(SetIconGuideFile(@Model.LessonId, result.fileName)); //not do this when adding new resource, just for edit
                        }

                        //clear all the input fields to allow user to add another resource
                        //dis play successfully add message
                        $('#success-message').show();
                        clearScreen();
                        //if(@Model.LessonId==0) {//Add new
                        redirectToIndexPage();//Michael McGill  want to return to Index page when Edit
                        //}
                    },
                    'onError': function (errorType, file) {
                        if (errorType == "FILE SIZE LIMIT EXCEEDED") {
                            alertMessage('The file size is larger than maximum file size ' + '@Model.FileMaxSizeMBString');
                        } else {
                            if (errorType == 'FORBIDDEN_FILE_TYPE') {
                                alertMessage('Forbidden file type');
                            } else {
                                alert('The error was: ' + errorType);
                                addErrorMessages(errorType);
                            }
                        }
                    },
                    'onCancel': function (file) {
                        selectedGuideFileCount--;
                        if(selectedGuideFileCount < 0) {
                            selectedGuideFileCount = 0;
                        }
                        if(selectedGuideFileCount==0) {
                            $("#fileNameGuide").val('');
                            $("#fileTypeGuide").val('');
                        }
                    }
                });
            }
        }

        function getFormDataLesson(auth) {
            var fileType = $('#fileTypeLesson').val();
            return { 'AUTHID': auth, 'fileExt': fileType, 'lessonId':$("#LessonId").val()};
        }
        function getFormDataGuide(auth) {
            return { 'AUTHID': auth, 'lessonId': $("#LessonId").val()  };
        }
    });

</script>
<script>
    //Build custom alert window message
    function alertMessage(message) {
        var okButton = '<button style="width:63px;" onclick="closeAlert();">OK</button>';

        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + okButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                close: function () { $('.ui-widget-overlay').remove(); $(this).remove(); },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });

        showModalDialogBG();
    }

    //Build custom alert window message
    function alertMessageAvaiStandard(message) {
        var oldzIndex = $('.AvailableStandardDialogCSS').parent('.ui-dialog').css('z-index');
        //alert(oldzIndex);
        $('.AvailableStandardDialogCSS').parent('.ui-dialog').css({ 'z-index': '1000' });
        var overlayHeight = $('.ui-widget-overlay').height();
        //alert(overlayHeight);
        //set the height for overlay
        //alert($(document).height());
        $('.ui-widget-overlay').height($(document).height());


        var okButton = '<button style="width:63px;" onclick="closeAlert();">OK</button>';

        var strHtml = '<section class="grid_5">' +
            '<div class="block-border" style="width: ' + 400 + 'px;">' +
            '<div class="block-content form" style="padding-bottom: 1em;"><div>' + message +
            '</div><div style="text-align:center;padding-top:20px;padding-bottom:10px;">' + okButton + '</div></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "alertDialog")
            .appendTo("body")
            .dialog({
                close: function () {
                    $('.AvailableStandardDialogCSS').parent('.ui-dialog').css({ 'z-index': oldzIndex });//recover the old value
                    $('.ui-widget-overlay').height($(document).height());
                    $('.ui-widget-overlay:last').remove();//only the second overlay

                    $(this).remove();

                },
                modal: false,
                width: 460,
                maxheight: 500,
                resizable: false,
            });

        showModalDialogBG();
    }


    function closeAlert() {
        $('#alertDialog').dialog('close');
    }

    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }
    function isAllowedFileType(fileName) {
        //fileType such as image/gif
        var allowedFileTypes = '@Model.ResourceExtensionString'.split(',');
        var extension = '';
        var tmp = fileName.split('.');
        if (tmp.length > 1) {
            extension = tmp[tmp.length-1];
        } else {
            extension = tmp[0];
        }
        for (var i = 0; i < allowedFileTypes.length; i++) {
            if (extension.toLowerCase() == allowedFileTypes[i].toLowerCase()) {
                return true;
            }
        }
        return false;
    }
</script>
