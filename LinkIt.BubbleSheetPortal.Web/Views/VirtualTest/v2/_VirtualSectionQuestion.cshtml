@using System.Configuration
@using System.Web.Script.Serialization
@using LinkIt.BubbleSheetPortal.Web.Helpers
@model LinkIt.BubbleSheetPortal.Web.ViewModels.VirtualTestViewModel
<!-- This only use for drag and drop on Manage test page -->
<script>
    $('script[src="/Scripts/jquery-ui-1.8.11.min.js"]').remove()
</script>

<script src="@Url.Content("~/Scripts/knockout-3.0.0.js")"></script>
<script src="@Url.Content("~/Scripts/knockout-sortable.js")"></script>
<script src="@Url.Content("~/Scripts/Lib/ramda.min.js")"></script>
<link href="@BundleHelper.Version("~/Content/css/v2/ItemSet-v2.css")" rel="stylesheet" />
<link href="@BundleHelper.Version("~/Content/css/v2/virtualTest-virtualSectionQuestion.css")" rel="stylesheet" type="text/css" />

<article class="container_12" style="width: 100%" id="virtualSectionQuestion">
    <section class="grid_12">
        <div class="block-border autoTestSection">
            <div class="block-content form" id="divOnTop">
                <h2  id="btnViewVirtualTestProperties" type="button" class="header mb-1" onclick="showPropertiesVirtualTest()"></h2>
                <div class="m-0 row g-3 flex-wrap virtualSectionBtn">
                    <button id="btnDeleteSeletedQuestions" type="button" class="btn-blue w-auto btn-section-control " onclick="popUpConfirmDeleteVirtualQuestionSeleted();">Delete Question(s)</button>
                    <button id="btnAddPassage" type="button" class="btn-blue w-auto btn-section-control " onclick="addPassage()">Add Passage</button>

                    <button id="btnAssignTag" class="btn-blue w-auto btn-section-control " type="button"> Assign Tag</button>
                    @if (!Model.IsSurvey)
                    {
                        <button id="btnAssignStandard" class="btn-blue w-auto btn-section-control " type="button">Assign Standard</button>
                    }
                </div>

                @if (!Model.IsSurvey)
                {
                    <div class="chkAllAutoTest mt-3 d-flex flex-row align-items-center">
                        <input type="checkbox" id="chkNumberBySection" @(Model.IsNumberQuestions ? "checked=\"checked\"" : "") style="margin-left: 5px;" />
                        <label for="chkNumberBySection" class="checkbox-label ms-1">Number Questions by Section</label>
                    </div>
                }
                <div class="chkAllAutoTest d-flex flex-row align-items-center mt-3">
                    <input type="checkbox" id="chkAllVirtualQuestion" style="margin-left: 5px;" />
                    <label for="chkAllVirtualQuestion" class="checkbox-label ms-1">Select All Questions</label>
                </div>

                <div class="row g-0 justify-content-end">
                    @if (!Model.IsSurvey)
                    {
                        <button @(Model.HasRetakeRequest ? "disabled" : "") id="btnAddNewSection" class="btn-text btn-plus-icon" type="button">Add Section</button>
                    }
                </div>
                <div id="divVirutalSectionQuestion" class="autoListQuestion" data-bind="sortable: {data: vmdata, as: 'vmdata', afterMove: sectionDropped, connectClass: 'sectionClass', axis: 'y'}">
                    <div class="groupSection" data-bind="attr: {id: VirtualSectionId}">
                        <div class="autoTestHeader section-header align-items-center justify-content-between d-flex flex-row">
                            @if (Model.IsSurvey)
                            {
                                <div class="VirtualSectionLable"></div>
                            }
                            else
                            {
                                <div data-bind="id: VirtualSectionId, text: Title, click: $root.showVirtualSectionProperties" class="VirtualSectionLable"></div>
                            }
                            <div class="align-items-center justify-content-end d-flex flex-row">

                                @if (Model.IsSupportQuestionGroup && Model.HasRetakeRequest == false)
                                {
                                    <button class="js-btnAddGroup ms-auto btn-text btn-plus-icon me-4 ps-0 py-0" style="white-space: nowrap">Add Group</button>
                                }

                                @if (!Model.IsSurvey && Model.HasRetakeRequest == false)
                                {
                                    <a href="javascript:void(0)" data-bind="attr: {id: VirtualSectionId}" class="delete-section ms-auto with-tip me-4" title="Delete Section" onclick="deleteSection(this)">
                                        <span class="custom-icon fa-solid fa-circle-xmark icon-red"></span>
                                    </a>
                                }
                                <a class="expan-section"><i class="fas fa-chevron-down down"></i></a>
                            </div>
                        </div>
                        <ul data-bind="sortable: {data: GroupList, as: 'groupList', afterMove: $root.groupDropped,beforeMove:$root.groupBeforeMove,connectClass: 'groupClass', options:{start: $root.startDragGroup, stop: $root.stopDragGroup}, axis: 'y'}, attr: {'sectionid': VirtualSectionId}">
                            <li data-bind="css: {'virtualGroup': isHeader}, attr:{'id': groupID, 'class': classNoContent}">
                                <div class="groupHeader d-flex flex-row align-items-center justify-content-between" data-bind="if: isHeader">
                                    <label class="groupHeaderTitle p-0 m-0" data-bind="click: $root.showSectionGroupProperties ">Grouped Questions</label>

                                    @if (Model.HasRetakeRequest == false)
                                    {
                                        <a data-bind="attr: { id: groupID }"
                                           class="delete-section with-tip" src="../Content/themes/Constellation/images/icons/fugue/icon-red.png"
                                           title="Delete Group"
                                           onclick="deleteSectionGroup(this)">
                                            <span class="icon fa-solid fa-circle-minus icon-red"></span>
                                        </a>
                                    }
                                </div>
                                <ul class="autoListUL" data-bind="sortable: { data: items, afterMove: $root.questionDropped, beforeMove:$root.questionBeforeMove, connectClass: 'questionClass', options:{helper: dragMultipleItem, start: $root.startDragGroup, stop: $root.stopDragGroup, cancel: $root.stopDragGroup}, axis: 'y'}, attr:{'id': groupID, 'sectionID':vmdata.VirtualSectionId}, css:{'nullQuestion': groupList.isEmtySection, 'lastGroup': groupList.isLastGroup}">
                                    <li data-bind="attr: {id: VirtualQuestionID, virtualQuestionID: VirtualQuestionID, qtiItemID: QTIItemID,BaseVirtualQuestionId:BaseVirtualQuestionId, orderid: Order, itemNumber: ItemNumber}, click: $root.showVirtualQuestionProperties" class="ulItem">
                                        <div class="d-flex flex-row align-items-center">
                                            <input type="checkbox" class="me-2 VirtualQuestionCheck" name="chkVirtualQuestion" data-bind="attr: {id: VirtualQuestionID, qtiItemID: QTIItemID}, click: $root.chkVirtualQuestionClick, value: VirtualQuestionID, clickBubble: false" />
                                             <div class="numAutoList me-1" data-bind="text: ItemNumber"></div>
                                             <div class="QtiItemDetail" data-bind="id: VirtualQuestionID, text: XmlContent"></div>
                                        </div>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
    @Html.Partial("v2/_ModalDeleteGroupQuestion")
</article>
<input type="hidden" id="hdSelectedVirtualQuestionIds" />

<script src="/Scripts/VirtualTest/VirtualSectionQuestion.js"></script>
<script type="text/javascript">
    $(document).ready(function(){
        $("#divVirutalSectionQuestion").on("mousedown", ".groupSection", function(event){
            //This is check to prevent drag event if current target is ul
            if($(event.target).is("ul.autoListUL"))
            {
                return false;
            }
        });
        $('with-tip').tip();
        SetBaseQuestionBackground();

    });

    function SetBaseQuestionBackground() {
        $('li.ulItem').each(function (index, item) {
            var virtualQuestionId = $(item).attr('id');
            //Find if there's any ghost question
            if ($('li.ulItem[basevirtualquestionid="' + virtualQuestionId + '"]').length > 0) {
                $(item).addClass('BaseVirtualQuestion');
            } else {
                $(item).removeClass('BaseVirtualQuestion');
            }
        });
    }
    var sectionViewModel;
    var viewModel;
    var getScroll = 0, windowScroll = 0;
    var groupHeaderSelected = null;
    var virtualQuestionListChecked = [];
    var hasRetakeRequest = @(Model.HasRetakeRequest.ToString().ToLower());

    $(function () {
        @{
            JavaScriptSerializer js = new JavaScriptSerializer();
            js.MaxJsonLength = int.MaxValue;
            var virtualSectionList = js.Serialize(Model.VirtualSectionList);
        }
        var data = @Html.Raw(virtualSectionList);
        LoadDataForSectionQuestionDisplay(data);
        displayTestName('@Model.Name');
        ResetQtiItemDetail();
        disableActionButton(true);

        $('#btnAddNewSection').click(function() {
            getCheckedQuestionGroupHeader();

            ShowBlock($('#divMain'), 'Loading');
            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddSectionForTest")',
                data: { virtualTestID: '@Model.VirtualTestId' },
                success: function(data, status, xhr) {
                    if (data.Success == true) {
                        var newData = new sectionViewModel(data.newData.VirtualSectionList);
                        viewModel.vmdata(newData.vmdata());
                        ResetQtiItemDetail();
                        LoadImages('#divVirutalSectionQuestion');
                        $('#selectSectionAddContainer').show();
                        $('#divMain').unblock();
                    } else {
                        CustomAlert(data.ErrorMessage, true);
                        var newData = new sectionViewModel(data.newData.VirtualSectionList);
                        viewModel.vmdata(newData.vmdata());
                        ResetQtiItemDetail();
                        LoadImages('#divVirutalSectionQuestion');
                        $('#divMain').unblock();
                    }

                    setCheckedQuestionGroupHeader();
                    addClassGroupHeader();
                    removeElementEmpty();
                },
                error: function(xhr, status, error) {
                    alert(error);
                    LoadImages('#divVirutalSectionQuestion');
                    $('#divMain').unblock();
                }
            });
        });
        LoadImages('#divVirutalSectionQuestion');
        SetBaseQuestionBackground();
        addSectionGroup();
        triggerChange();
        addClassGroupHeader();
        removeElementEmpty();
    });

    function addSectionGroup () {
        // Add a emty group
        $(document).on('click', '.js-btnAddGroup', function (e) {
            e.stopPropagation();
            ShowBlock($('#divMain'), 'Loading');
            var $self = $(this);
            var sectionId = parseInt($self.parents('.groupSection').attr('id'), 10);

            getCheckedQuestionGroupHeader();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddEmptyQuestionGroupForSection")',
                data: { virtualTestId: '@Model.VirtualTestId', virtualSectionId: sectionId },
                success: function(data, status, xhr) {
                    if (data.Success == true) {
                        var newData = new sectionViewModel(data.newData.VirtualSectionList);
                        viewModel.vmdata(newData.vmdata());
                        ResetQtiItemDetail();
                        LoadImages('#divVirutalSectionQuestion');
                        $('#selectSectionAddContainer').show();
                        $('#divMain').unblock();
                    }
                    else {
                        CustomAlert(data.ErrorMessage, true);
                        var newData = new sectionViewModel(data.newData.VirtualSectionList);
                        viewModel.vmdata(newData.vmdata());
                        ResetQtiItemDetail();
                        LoadImages('#divVirutalSectionQuestion');
                        $('#divMain').unblock();
                    }

                    setCheckedQuestionGroupHeader();
                    addClassGroupHeader()
                    removeElementEmpty();
                },
                error: function(xhr, status, error) {
                    alert(error);
                    LoadImages('#divVirutalSectionQuestion');
                    $('#divMain').unblock();
                }
            });
        });
    }

    function ResetQtiItemDetail() {
        $('.QtiItemDetail').each(function (index, ctrl) {
            var xmlContent = $(ctrl).text();
            var html = DisplayQTIItemContent(xmlContent);
            $(ctrl).html(html);
            var textEntryInteraction = $(ctrl).find('textentryinteraction');
            if(textEntryInteraction.length) {
                $.each(textEntryInteraction, function(index, ele) {
                    var width = $(ele).attr('expectedwidth');
                    if (width) {
                        $(ele).css('min-width', width + 'px');
                    }
                })
            }
            var inlineChoiceInteraction = $(ctrl).find('inlineChoiceInteraction');
            if (inlineChoiceInteraction.length) {
                $.each(inlineChoiceInteraction, function (index, ele) {
                    var width = $(ele).attr('expectedwidth');
                    var visibleDimension = $(ele).attr('visibleDimension');
                    if (width && visibleDimension == 1) {
                        $(ele).css('min-width', width + 'px');
                    }
                    else {
                        $(ele).css('max-width', '250px');
                    }
                })
            }
            loadContentNumberLineHotspot('.QtiItemDetail');
            loadContentImageHotSpot('.QtiItemDetail');
            loadContentDragAndDrop('.QtiItemDetail');
        });
        $('#divVirutalSectionQuestion').scrollTop(getScroll);
        $(window).scrollTop(windowScroll);
    }

    function addPassage()
    {
        var qtiItemIdString = getSelectedQtiItemIdsForAddPassage();
        var selectedQtiItemIds = '';
        $('INPUT[name="chkVirtualQuestion"][type=checkbox]:checked').each(function (i, e) {
            selectedQtiItemIds += e.getAttribute('qtiitemid') + ',';
        });
        var virtualTestId = '@Model.VirtualTestId';
        var url = '@Url.Action("ShowPassagePopupForManyQtiItem", "QTIItem")\?qtiItemIdString=' + qtiItemIdString + '&selectedQtiItemId=' + selectedQtiItemIds + '&virtualTestId=' + virtualTestId;
        var worker = $('<div></div>');
        worker
            .addClass("dialog PassagePopUpDialogCSS")
            .attr("id", "addPassageDialog")
            .appendTo("body")
            .load(url, function () {
                worker.dialog({
                    open: function () {
                        $('#tips').html('');
                    },
                    title: $(this).attr("Standard"),
                    close: function () {
                        $('.ui-widget-overlay').remove();
                        $(this).remove();
                        $('#tips').html('');
                    },
                    modal: false,
                    width: 1200,
                    resizable: false
                });
            });

        showModalDialogBG();
    }

    function getSelectedQtiItemIdsForAddPassage() {
        var qtiItemIds = '';
        $('INPUT[name="chkVirtualQuestion"][type=checkbox]').each(function (i, e) {
            qtiItemIds += e.getAttribute('qtiitemid') + ',';
        });

        return qtiItemIds;
    }

    var QuestionGroup = (function () {
        var answerLabels = [
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
            'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH',
            'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW',
            'AX', 'AY', 'AZ', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL',
            'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA',
            'CB', 'CC', 'CD', 'CE', 'CF', 'CG', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CP',
            'CQ', 'CR', 'CS', 'CT', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ'
        ];

        var byQuestionGroupId = R.groupBy(function (item) {
            if (!!item.QuestionGroupID) {
                return item.QuestionGroupID;
            }
        });

        var byWithQuestionGroupId = function (a, b) {
            return a.QuestionGroupID === b.QuestionGroupID && (!!a.QuestionGroupID || !!b.QuestionGroupID);
        };

        function getListQuestion (data) {
            var questions = [];
            for (var i = 0, len = data.length; i < len; i++) {
                var sectionQuestion = data[i].SectionQuestionQtiItemList;
                if (sectionQuestion.length) {
                    questions = R.concat(questions, sectionQuestion);
                }
            }
            return questions;
        }

        function getListQuestionGroup (questions) {
            var questionsInGroup = [];

            questionsInGroup = byQuestionGroupId(questions);
            delete questionsInGroup.undefined;

            if (Object.keys(questionsInGroup).length) {
                questionsInGroup = R.groupWith(byWithQuestionGroupId, questions);
            } else {
                questionsInGroup = []
            }

            return questionsInGroup;
        }

        function getOrderQuestion (virtualQuestionId, questions) {
            var orderQuestion = '';

            for (var i = 0; i < questions.length; i++) {
                var questionsItem = questions[i];

                for (var j = 0; j < questionsItem.length; j++) {
                    if (virtualQuestionId === questionsItem[j].VirtualQuestionID) {
                        var ind = i + 1;

                        if (!!questionsItem[j].QuestionGroupID) {
                            orderQuestion = ind + answerLabels[j].toLowerCase() + '.';
                        } else {
                            orderQuestion = ind + '.';
                        }
                        break;
                    }
                }
            }

            return orderQuestion;
        }

        function getOrderQuestionBySection (virtualQuestionId, questionsInSection) {
            var orderQuestion = '';

            for (var i = 0; i < questionsInSection.length; i++) {
                var questionsItem = questionsInSection[i];

                if (virtualQuestionId === questionsItem.VirtualQuestionID) {
                    var ind = i + 1;
                    orderQuestion = ind + '.';
                    break;
                }
            }

            return orderQuestion;
        }

        return {
            getListQuestion: getListQuestion,
            getListQuestionGroup: getListQuestionGroup,
            getOrderQuestion: getOrderQuestion,
            getOrderQuestionBySection: getOrderQuestionBySection
        }
    })();

    function LoadDataForSectionQuestionDisplay(data) {

        sectionViewModel = function(inputData) {
            var self = this;
            self.data = ko.observableArray(inputData);
            self.vmdata = ko.observableArray([]);
            self.selectedQuestion = ko.observable('');

            var newTempGroup = function (groupID, isHeader, sectionID, isEmtySection, isLastGroup) {
                return {
                    groupID: ko.observable(groupID),
                    items: ko.observableArray([]),
                    isHeader: ko.observable(isHeader),
                    sectionID: ko.observable(sectionID),
                    isEmtySection: ko.observable(isEmtySection),
                    isLastGroup: ko.observable(isLastGroup),
                    classNoContent: ko.observable('')
                };
            };

            var questions = QuestionGroup.getListQuestion(inputData);
            var questionsInGroup = QuestionGroup.getListQuestionGroup(questions);

            $.each(inputData, function (index, item) {
                var sectionData = {
                    VirtualSectionId: ko.observable(item.VirtualSectionId),
                    VirtualTestId: ko.observable(item.VirtualTestId),
                    Order: ko.observable(item.Order),
                    Title: ko.observable(item.Title),
                    SectionQuestionQtiItemList: ko.observableArray([]),
                    QuestionGroupList: ko.observableArray([]),
                    GroupList: ko.observableArray([])
                };

                sectionData.QuestionGroupList = item.QuestionGroupList;

                var oldGroupID = null, countQuestion = 0, isNullGroup = false;
                var group = null, groupList = [], countNull = 0;

                if (item.SectionQuestionQtiItemList.length) {
                    var questionsInSection =  item.SectionQuestionQtiItemList;
                    var questionsInGroupInSection = QuestionGroup.getListQuestionGroup(questionsInSection);
                    var isNumeringItemBySection = $('#chkNumberBySection').is(':checked');

                    $.each(questionsInSection, function (subIndex, subItem) {
                        var newGroup = 0, preNewGroup = false;
                        /*
                        newGroup = 0: no group
                                1: create a new group
                                2: same above group
                        */
                        if (countQuestion == 0) {
                            if (subItem.QuestionGroupID == null) {
                                newGroup = 0;
                            }
                            else {
                                newGroup = 1;
                            }
                            oldGroupID = subItem.QuestionGroupID;
                        }
                        else {
                            if (subItem.QuestionGroupID == null) {
                                newGroup = 0;
                            }
                            else {
                                if (oldGroupID != subItem.QuestionGroupID) {
                                    newGroup = 1;
                                    preNewGroup = true;
                                }
                                else {
                                    newGroup = 2;
                                }
                            }
                            oldGroupID = subItem.QuestionGroupID;
                        }

                        countQuestion += 1;
                        var isLastItem = countQuestion == questionsInSection.length ? true : false;

                        var itemNumber = subItem.ItemNumber.toString() + '.';
                        if (questionsInGroup.length) {
                            if (isNumeringItemBySection) {
                                if (questionsInGroupInSection.length) {
                                    itemNumber = QuestionGroup.getOrderQuestion(subItem.VirtualQuestionID, questionsInGroupInSection);
                                } else {
                                    itemNumber = QuestionGroup.getOrderQuestionBySection(subItem.VirtualQuestionID, questionsInSection);
                                }
                            } else {
                                itemNumber = QuestionGroup.getOrderQuestion(subItem.VirtualQuestionID, questionsInGroup);
                            }
                        }

                        var sectionQuestionData = {
                            VirtualSectionID: ko.observable(subItem.VirtualSectionID),
                            VirtualQuestionID: ko.observable(subItem.VirtualQuestionID),
                            Order: ko.observable(subItem.Order),
                            QTIItemID: ko.observable(subItem.QTIItemID),
                            XmlContent: ko.observable(correctInlineChoice(subItem.XmlContent)),
                            QTIGroupID: ko.observable(subItem.QTIGroupID),
                            ItemNumber: ko.observable(itemNumber),
                            BaseVirtualQuestionId: ko.observable(subItem.BaseVirtualQuestionId),
                            QuestionGroupID: ko.observable(subItem.QuestionGroupID),
                            CheckNewGroup: ko.observable(newGroup),
                            IsLastItem: ko.observable(isLastItem)
                        };

                        sectionData.SectionQuestionQtiItemList.push(sectionQuestionData);

                        if (newGroup == 0) {
                            if (group != null) {
                                var tempGroup = newTempGroup(0, false, item.VirtualSectionId);
                                groupList.push(tempGroup);
                                groupList.push(group);
                                group = null;
                            }
                            isNullGroup = false;
                            group = newTempGroup(0, false, item.VirtualSectionId);
                            group.items.push(sectionQuestionData);
                        } else {
                            isNullGroup = true;
                            if (newGroup == 1) {

                                if (group != null) {
                                    var tempGroup = newTempGroup(0, false, subItem.VirtualSectionID);
                                    groupList.push(tempGroup);
                                    groupList.push(group);
                                }

                                group = newTempGroup(subItem.QuestionGroupID, true, item.VirtualSectionId);
                                group.items.push(sectionQuestionData);

                            }
                            else {
                                group.items.push(sectionQuestionData);
                            }
                        }

                        if (!questionsInSection.length && !!group) {
                            isLastItem = true;
                        }

                        if (isLastItem) {
                            if (group != null) {
                                var tempGroup = newTempGroup(0, false, subItem.VirtualSectionID);
                                groupList.push(tempGroup);
                                groupList.push(group);
                            }

                            if (item.QuestionGroupList) {
                                $.each(item.QuestionGroupList, function (subIndex, subGroup) {
                                    if (subGroup.IsEmpty) {
                                        var tempGroup = newTempGroup(0, false, subItem.VirtualSectionID);
                                        groupList.push(tempGroup);
                                        group = newTempGroup(subGroup.QuestionGroupID, true, item.VirtualSectionId, true);
                                        groupList.push(group);
                                    }
                                });
                            }

                            //Add last null group
                            var tempGroup = newTempGroup(0, false, subItem.VirtualSectionID, false, true);
                            groupList.push(tempGroup);

                            sectionData.GroupList = groupList;
                        }
                    });
                } else {
                    if (item.QuestionGroupList) {
                        $.each(item.QuestionGroupList, function (subIndex, subGroup) {
                            if (subGroup.IsEmpty) {
                                group = newTempGroup(subGroup.QuestionGroupID, true, item.VirtualSectionId, true);
                                groupList.push(group);
                            }
                        });

                        var tempGroup = newTempGroup(0, false, item.VirtualSectionID, false, true);
                        groupList.push(tempGroup);
                    }

                    if (!groupList.length) {
                        var tempGroup = newTempGroup(0, false, item.VirtualSectionId, true);
                        groupList.push(tempGroup);
                    }

                    sectionData.GroupList = groupList;
                }

                sectionData.SectionQuestionQtiItemList.id = item.VirtualSectionId;
                var groupList = [];
                var itemEmpty = [];
                for(var i = 0; i < sectionData.GroupList.length; i++) {
                    var item =  sectionData.GroupList[i];
                    if(item.items().length || item.groupID()) {
                        groupList.push(item)
                    }
                    if (item.items.length === 0 && !item.groupID()) {
                        itemEmpty = item
                    }
                }
                itemEmpty.classNoContent = 'no-content';
                groupList.push(itemEmpty);
                if (groupList.length) {
                    sectionData.GroupList = groupList;
                } else {
                    sectionData.GroupList[0].classNoContent = 'no-content'
                }
                self.vmdata.push(sectionData);
            });

            self.showVirtualQuestionProperties = function(item) {
                if(!checkTestIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }
                if(!checkSectionIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                if(!checkQuestionGroupInstructionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                self.selectedQuestion(item);

                var virtualQuestionId = item.VirtualQuestionID();
                var qtiItemid = item.QTIItemID();
                ShowBlock($('#divMain'), 'Loading');
                //Add highlight to selected item
                $('.virtualGroup').removeClass('selected');
                $(".autoListUL .ulItem").removeClass("selected");
                $(".autoListUL .ulItem[id="+ virtualQuestionId +"]").addClass("selected");

                //Destroy CKEditor before load new content.
                destroyEditorInstance('txtTestPropertiesInstruction');
                destroyEditorInstance('txtSectionTestPropertiesInstruction');
                destroyEditorInstance('txtQuestionGroupInstruction');
                $('#divRight').load('@Url.Action("LoadVirtualQuestionProperties")?virtualQuestionId=' + virtualQuestionId + '&qtiItemId=' + qtiItemid + '&isSurvey=' + '@Model.IsSurvey'.toLowerCase(), function() {
                    $('#divRight').focus();
                });
            };

            self.showVirtualSectionProperties = function(item) {
                if(!checkTestIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }
                if(!checkSectionIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                if(!checkQuestionGroupInstructionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                var virtualSectionId = item.VirtualSectionId();
                var virtualTestId = '@Model.VirtualTestId';
                $('.virtualGroup').removeClass('selected');
                $(".autoListUL .ulItem").removeClass("selected");
                ShowBlock($('#divMain'), 'Loading');
                destroyEditorInstance('txtTestPropertiesInstruction');
                destroyEditorInstance('txtSectionTestPropertiesInstruction');
                destroyEditorInstance('txtQuestionGroupInstruction');
                $('#divRight').load('@Url.Action("LoadVirtualSectionProperties")?virtualSectionId=' + virtualSectionId + '&virtualTestId=' + virtualTestId, function() {
                    $('#divRight').focus();
                    $('#divMain').unblock();
                });
            };

            self.showSectionGroupProperties = function (item) {
                var groupId = item.groupID();

                if(!checkTestIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                if(!checkSectionIntrustionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                if(!checkQuestionGroupInstructionEditorDirty()) { //defined in Index.cshtml
                    return;
                }

                $('.autoListUL .ulItem').removeClass('selected');
                $('.virtualGroup').removeClass('selected');
                $('.virtualGroup[id="' + groupId + '"]').addClass('selected');
                ShowBlock($('#divMain'), 'Loading');
                destroyEditorInstance('txtTestPropertiesInstruction');
                destroyEditorInstance('txtSectionTestPropertiesInstruction');
                destroyEditorInstance('txtQuestionGroupInstruction');
                $('#divRight').load('@Url.Action("LoadQuestionGroupProperties")?questionGroupId=' + groupId, function() {
                    $('#divRight').focus();
                    $('#divMain').unblock();
                });
            }

            self.chkVirtualQuestionClick = function(item) {
                var ck = $('#' + item.VirtualQuestionID()).find('input[type=checkbox]');
                var isChecked = $(ck).is(':checked');
                if (isChecked) {
                    var checkboxes = $('INPUT[name="chkVirtualQuestion"][type=checkbox]');
                    var checkall = true;
                    for (var i = 0; i < checkboxes.length; i++) {
                        var itemChecked = (checkboxes[i]).checked;
                        if (!itemChecked) {
                            $('#chkAllVirtualQuestion').removeAttr('checked');
                            checkall = false;
                            break;
                        }
                    }
                    if (checkall) {
                        $('#chkAllVirtualQuestion').attr('checked', 'checked');
                    }
                    disableActionButton(false);
                } else {
                    $('#chkAllVirtualQuestion').removeAttr('checked');
                    var checkedboxes = $('INPUT[name="chkVirtualQuestion"][type=checkbox]:checked');
                    if (checkedboxes.length > 0) {
                        disableActionButton(false);
                    } else {
                        disableActionButton(true);
                    }
                }
                portalV2SkinCheckBox()
                return true;
            };

            var getTargetOrder = function (sectionID, questionID, currentOrder) {
                var count = 0, isFound = false, val;
                $.each(viewModel.vmdata(), function (index, item) {
                    if (item.VirtualSectionId() == sectionID) {
                        $.each(item.GroupList, function (groupIndex, groupItem) {
                            $.each(groupItem.items(), function (subIndex, subItem) {
                                if (subItem.VirtualQuestionID() == questionID) {
                                    val = count;
                                    isFound = true;
                                    //This case fix for questionn has been dragged from low order to high order
                                    if (currentOrder < count) {
                                        count += 1;
                                        val = count;
                                    }
                                    return;
                                }
                                count += 1;
                            });
                            if (isFound) return;
                        });
                    }
                    if (isFound) return;
                });
                return val;
            };

            self.questionDropped = function (arg) {
                getScroll = $('#divVirutalSectionQuestion').scrollTop();
                windowScroll = $(window).scrollTop();
                var sourceIndex = arg.item.Order() - 1;
                var currentOrder = sourceIndex;
                var sectionID = $(this).attr('sectionid');
                if (sectionID != $(arg.sourceParentNode).attr('sectionid')) {
                    currentOrder = $(this).parents('.groupClass').find('li[orderid]').length;
                }
                var targetIndex = getTargetOrder(sectionID, arg.item.VirtualQuestionID(), currentOrder);
                var sourceSectionID = arg.item.VirtualSectionID();
                var targetSectionID = sectionID;
                var baseVirtualQuestionId = arg.item.BaseVirtualQuestionId();
                var targetQuestionGroupId = this.id == 0 ? null : this.id;
                var targetQuestionGroupIndex = arg.targetIndex;
                var selectedVirtualQuestionIds = $('#hdSelectedVirtualQuestionIds').val();//get selected questions
                ShowBlock($('#divMain'), 'Loading');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("MoveManyVirtualSectionQuestions")',
                    data: {
                        sourceIndex: sourceIndex,
                        targetIndex: targetIndex,
                        sourceSectionID: sourceSectionID,
                        targetSectionID: targetSectionID,
                        virtualTestID: '@Model.VirtualTestId',
                        numberingItemBySection:$('#chkNumberBySection').is(':checked'),
                        virtualQuestionID:arg.item.VirtualQuestionID,
                        baseVirtualQuestionId:baseVirtualQuestionId,
                        selectedVirtualQuestionIds: selectedVirtualQuestionIds,
                        sourceQuestionGroupId: null,
                        targetQuestionGroupId: targetQuestionGroupId,
                        targetQuestionGroupIndex: targetQuestionGroupIndex,

                    },
                    success: function(response, status, xhr) {
                        if (response.Success == true) {
                            var newData = new sectionViewModel(response.newData.VirtualSectionList);
                            viewModel.vmdata(newData.vmdata());
                            RefreshSectionQuestion(@Model.VirtualTestId);
                            ResetQtiItemDetail();
                        }
                        else {
                            CustomAlert(response.ErrorMessage,true);
                            RefreshSectionQuestion(@Model.VirtualTestId);
                        }
                        $('#divMain').unblock();
                    },
                    error: function(xhr, status, error) {
                        alert(error);
                        $('#divMain').unblock();
                    }
                });

            };
            self.questionBeforeMove = function (arg, event, ui) {
                var selectedVirtualQuestionIds = getSelectedVirtualQuestionIds();
                $('#hdSelectedVirtualQuestionIds').val(selectedVirtualQuestionIds);

                arg.item.XmlContent = '';
                var sourceSectionID = arg.sourceParent.id;
                var targetSectionID = arg.targetParent.id;
                var baseVirtualQuestionId = arg.item.BaseVirtualQuestionId();
                if(baseVirtualQuestionId > 0) {
                    if (sourceSectionID != targetSectionID) {
                        CustomAlert('All criteria-based scoring questions must fall directly below their base question.',true);
                        arg.cancelDrop  = true;
                        $('.autoListUL').removeAttr('min-height');
                        return;
                    }
                }

            };

            var getTargetOrderGroup = function (sectionID, groupID, currentOrder) {
                var count = 0, isFound = false, val;
                $.each(viewModel.vmdata(), function (index, item) {
                    if (item.VirtualSectionId() == sectionID) {
                        $.each(item.GroupList, function (groupIndex, groupItem) {
                            if (groupItem.groupID() == groupID) {
                                val = count;
                                isFound = true;

                                //This case fix for questionn has been dragged from low order to high order
                                if (currentOrder < count) {
                                    count += groupItem.items().length;
                                    val = count;
                                }
                                return;
                            }
                            $.each(groupItem.items(), function (subIndex, subItem) {
                                count += 1;
                            });
                            if (isFound) return;
                        });
                    }
                    if (isFound) return;
                });
                return val;
            };
            var numberQuestionInGroup = 0;
            var buildQuestionGroupList = function (sectionID, groupID) {
                var isFound = false, val = '';
                $.each(viewModel.vmdata(), function (index, item) {
                    if (item.VirtualSectionId() == sectionID) {
                        $.each(item.GroupList, function (groupIndex, groupItem) {
                            if (groupItem.groupID() == groupID) {
                                numberQuestionInGroup = groupItem.items().length - 1;
                                $.each(groupItem.items(), function (subIndex, subItem) {
                                    val += subItem.VirtualQuestionID()+',';
                                });
                                isFound = true;
                                return;
                            }
                            if (isFound) return;
                        });
                    }
                    if (isFound) return;
                });
                return val;
            };

            self.groupDropped = function (arg) {
                getScroll = $('#divVirutalSectionQuestion').scrollTop();
                windowScroll = $(window).scrollTop();
                var sectionID = $(this).attr('sectionid');

                var currentOrder = $(this).find('li[orderid]').length;
                if (arg.item.items().length > 0) {
                    currentOrder = arg.item.items()[0].Order() - 1;
                }
                if (sectionID != $(arg.sourceParentNode).attr('sectionid')) {
                    currentOrder = $(this).find('li[orderid]').length;
                }
                var targetIndexGroup = getTargetOrderGroup(sectionID, arg.item.groupID(), currentOrder);
                var sourceIndex = sourceIndexGroup;
                var targetIndex = targetIndexGroup;
                var sourceSectionID = arg.item.sectionID();
                var targetSectionID = sectionID;
                var baseVirtualQuestionId = 0;
                var targetQuestionGroupIndex = 0;
                var sourceQuestionGroupId = arg.item.groupID();
                var selectedVirtualQuestionIds = buildQuestionGroupList(sectionID, arg.item.groupID());
                ShowBlock($('#divMain'), 'Loading');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("MoveManyVirtualSectionQuestions")',
                    data: {
                        sourceIndex: sourceIndex,
                        targetIndex: targetIndex,
                        sourceSectionID: sourceSectionID,
                        targetSectionID: targetSectionID,
                        virtualTestID: '@Model.VirtualTestId',
                        numberingItemBySection: $('#chkNumberBySection').is(':checked'),
                        virtualQuestionID: 0,
                        baseVirtualQuestionId: baseVirtualQuestionId,
                        selectedVirtualQuestionIds: selectedVirtualQuestionIds,
                        sourceQuestionGroupId: sourceQuestionGroupId,
                        targetQuestionGroupId: sourceQuestionGroupId,
                        targetQuestionGroupIndex: targetQuestionGroupIndex
                    },
                    success: function(response, status, xhr) {
                        if (response.Success == true) {
                            var newData = new sectionViewModel(response.newData.VirtualSectionList);
                            viewModel.vmdata(newData.vmdata());
                            RefreshSectionQuestion(@Model.VirtualTestId);
                            ResetQtiItemDetail();
                        }
                        else {
                            CustomAlert(response.ErrorMessage,true);
                            RefreshSectionQuestion(@Model.VirtualTestId);
                        }
                        $('#divMain').unblock();
                    },
                    error: function(xhr, status, error) {
                        alert(error);
                        $('#divMain').unblock();
                    }
                });

            };
            var sourceIndexGroup = 0;
            self.groupBeforeMove = function(arg,event,ui) {
                sourceIndexGroup = getTargetOrderGroup(arg.item.sectionID(), arg.item.groupID());

            };

            self.startDragGroup = function (event, ui) {

            };
            dragMultipleItem = function(event, $item) {
                var selectedVirtualQuestionIds = getSelectedVirtualQuestionIds();
                var ids = selectedVirtualQuestionIds.split(',');
                if(ids.length > 1) {
                    for(var i = 0; i < ids.length; i++) {
                        var $element = $('li#' + ids[i]);
                        $element.fadeOut(100);
                        $element.parents('.autoListUL').parent().css('min-height', 0)
                    }
                    $helper = $('<li class="item selected">You have ' + ids.length + ' items selected.</li>');
                    return $helper
                } else {
                    $($item).parent('.autoListUL').parent('li').css('min-height', 0);
                }
                return $item;
            }
            self.stopDragGroup = function (event, ui) {
                $('.autoListUL').removeAttr('min-height');
                $('.autoListUL').css('min-height','0');
                var selectedVirtualQuestionIds = getSelectedVirtualQuestionIds();
                var ids = selectedVirtualQuestionIds.split(',');
                if(ids.length > 1) {
                    for(var i = 0; i < ids.length; i++) {
                        var $element = $('li#' + ids[i]);
                        $element.fadeIn(100);
                        $element.parents('.autoListUL').parent().css('min-height', 65)
                    }
                }
            };

            self.sectionDropped = function(arg) {
                getScroll = $('#divVirutalSectionQuestion').scrollTop();
                windowScroll = $(window).scrollTop();
                var sourceIndex = arg.sourceIndex;
                var targetIndex = arg.targetIndex;

                ShowBlock($('#divMain'), 'Loading');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("MoveSection")',
                    data: {
                        sourceIndex: sourceIndex,
                        targetIndex: targetIndex,
                        virtualTestID: '@Model.VirtualTestId',
                        numberingItemBySection:$('#chkNumberBySection').is(':checked')
                    },
                    success: function(response, status, xhr) {
                        if (response.Success == true) {
                            var newData = new sectionViewModel(response.newData.VirtualSectionList);
                            viewModel.vmdata(newData.vmdata());
                            ResetQtiItemDetail();
                        } else {
                            CustomAlert(response.ErrorMessage,true);
                        }
                        $('#divMain').unblock();
                    },
                    error: function(xhr, status, error) {
                        alert(error);
                        $('#divMain').unblock();
                    }
                });

            };


        };

        viewModel = new sectionViewModel(data);
        var elNoContent = $(".groupSection > ul.groupClass > li.no-content");
        $(elNoContent.parent()).hide();
        ko.applyBindings(viewModel);
    }

    function displayTestName(testName) {
        testName = htmlDecode(testName);
        if (testName == null) {
            testName = '';
        }

        $("#spanTestName").text(testName);
        testName = htmlEncode(testName);
        $("#btnViewVirtualTestProperties").html(testName);

        const elText = $('#btnViewVirtualTestProperties').get(0);

        if (elText.scrollWidth > elText.clientWidth) {
            var orginalValue = testName;
            orginalValue = htmlEncode(orginalValue);
            $("#btnViewVirtualTestProperties").attr('title', '<p style="text-align:left;width:300px;white-space: normal">' + orginalValue.split('|').join('<br />') + '</p>');
            $("#btnViewVirtualTestProperties").tip();
        }
    }
    function parseQtiItemXmlContent(xmlContent) {
        if (xmlContent != '') {
            var divTitle = '';
            var title = '';
            var span = $(xmlContent).find('itemBody span').first();
            var b = $(xmlContent).find("itemBody span b").first();//sometime there's a <b> inside span
            if (b.length > 0) {
                title = b.text();//LNKT-5661
                if (title == null) {
                    title = '';
                }
                if (title.length > 50) {
                    title = title.substring(0, 47);
                    title += '...';
                }

                b.text(title);
                $(span).html($(b).outerHTML());
            } else {
                title = span.text();//LNKT-5661
                if (title == null) {
                    title = '';
                }
                if (title.length > 50) {
                    title = title.substring(0, 47);
                    title += '...';
                }

                span.text(title);
            }
            divTitle = '<div class="divContentItem">' + $(span).outerHTML() + '</div>';///LNKT-5785
            if (title == null || title.length == 0) {//un common xml construction, need to parse for special casees
                span = $(xmlContent).find('itemBody span[class="bold class1"]').first();
                divTitle = '<div class="divContentItem">' + $(span).outerHTML() + '</div>';///LNKT-5785
            }
            if (title == null || title.trim().length == 0) {//sometime there's no class mainbody or mainbody
                title = $(xmlContent).find('itemBody').first().html();
                if (title == null || title.trim().length == 0) {
                    title = $(xmlContent).find('itembody').first().html();
                }
                if (title == null) {
                    title = '';
                }
                divTitle = '<div class="divContentItem">' + title + '</div>';///LNKT-5785
            }
            return divTitle;
        }
        return '';
    }
    jQuery.fn.outerHTML = function (s) {
        return (s)
            ? this.before(s).remove()
            : jQuery("<p>").append(this.eq(0).clone()).html();
    };


   function showVirtualSectionProperties(virtualSectionId) {
       ($('#divMain'), 'Loading');
        $('#divRight').load('@Url.Action("LoadVirtualSectionProperties")?virtualSectionId=' + virtualSectionId, function () {
            $('#divRight').focus();
            $('#divMain').unblock();
      });
    }

    $('#btnAssignStandard').die('click');
    $('#btnAssignStandard').live("click", function (e) {
        showStandardPopup();
    });

    //Master Standard
    function showStandardPopup() {
        var selectedVirtualQuestionIds = getSelectedVirtualQuestionIds();
        if (selectedVirtualQuestionIds == null) {
            return;
        }
        if (selectedVirtualQuestionIds.length == 0) {
            return;
        }

        var worker = $('<div />');
        worker
            .addClass("dialog StandardPopUpDialogCSS")
            .attr("id", "addStandardDialog")
            .appendTo("body")
            .load('@Url.Action("ShowStandardPopup")\?virtualQuestionIds=' + selectedVirtualQuestionIds, function (response, status) {
                $('#divMain').unblock();

                if ( status == "error" ) {
                    $('.ui-widget-overlay').remove();
                    $(worker).remove();
                }

                worker.dialog({
                    open: function () {
                        $('#tips').html('');
                        $('#categories').marquee();
                        $('#selectState').marquee();
                        $('#selectSubject').marquee();
                        $('#selectGrade').marquee();
                    },
                    title: $(this).attr("Standard"),
                    close: function () {
                        selectStateId = $('#selectState').val();
                        if (selectStateId == null || selectStateId == '' || selectStateId == 'select' || selectStateId == 'All') {
                            selectStateId = 0;
                        }
                        selectSubjectId = $('#selectSubject').val();
                        if (selectSubjectId == null || selectSubjectId == '' || selectSubjectId == 'select' || selectSubjectId == 'All') {
                            selectSubjectId = '';
                        }
                        selectGradeId = $('#selectGrade').val();
                        if (selectGradeId == null || selectGradeId == '' || selectGradeId == 'select' || selectGradeId == 'All') {
                            selectGradeId = '';
                        }
                        $('.ui-widget-overlay').remove();
                        $(this).remove();
                        $('#tips').html('');
                    },
                    modal: false,
                    width: 905,
                    resizable: false
                });
            });
        showModalDialogBG();
        ShowBlock($('#divMain'), "Loading");
    }
    $('#btnAssignTag').die('click');
    $('#btnAssignTag').live("click", function (e) {
        showTagPopup();
    });

    //Tag
    function showTagPopup() {
        var virtualQuestionIdString = getSelectedVirtualQuestionIds();
        var worker = $('<div />');
        worker
            .addClass("dialog TagPopUpDialogCSS")
            .attr("id", "addTagDialog")
            .appendTo("body")
            .load('@Url.Action("ShowTagPopup")\?virtualQuestionIdString=' + virtualQuestionIdString, function (response, status) {
                $('#divMain').unblock();

                if ( status == "error" ) {
                    $('.ui-widget-overlay').remove();
                    $(worker).remove();
                }

                worker.dialog({
                    open: function () {
                        $('#tips').html('');
                    },
                    title: $(this).attr("Tag"),
                    close: function () {

                        selectStateId_dt = $('#selectState').val();
                        if (selectStateId_dt == null || selectStateId_dt == '' || selectStateId_dt == 'select' || selectStateId_dt == 'All') {
                            selectStateId_dt = 0;
                        }
                        selectDistrictId_dt = $('#selectDistrict').val();
                        if (selectDistrictId_dt == null || selectDistrictId_dt == '' || selectDistrictId_dt == 'select' || selectDistrictId_dt == 'All') {
                            selectDistrictId_dt = '';
                        }
                        selectCategoryId_dt = $('#selectCategory').val();
                        if (selectCategoryId_dt == null || selectCategoryId_dt == '' || selectCategoryId_dt == 'select' || selectCategoryId_dt == 'All') {
                            selectCategoryId_dt = '';
                        }
                        textToSearch_dt = $('#txtTextToSearch').val();
                        $('.ui-widget-overlay').remove();//will be remove when table display completelly
                        $(this).remove();
                        $('#tips').html('');
                        //disableActionButton(true);

                    },
                    modal: false,
                    width: 980,
                    resizable: false
                });
            });
        showModalDialogBG();
        ShowBlock($('#divMain'), "Loading");
    }

    function DisplayQTIItemContent( xmlContent) {
        var title = '';
        $(xmlContent).find('.itemBody, itemBody, itembody').each(function () {
            var itemBody = $(this);
            itemBody.find("videolinkit").replaceWith(function () {
                return $('');
            });
            if ($(xmlContent).find("responsedeclaration").attr("partialgrading") == "1") {
                itemBody.find("sourcetext").each(function () {
                    if ($(this).attr("pointvalue") > 0) {
                        $(this).addClass("marker-correct");
                    }
                });
            } else {
                $(xmlContent).find("correctResponse").each(function () {
                    var id = $(this).attr("identifier");
                    itemBody.find("sourcetext[identifier=\"" + id + "\"]").addClass("marker-correct");
                });
            }

            title = itemBody.html();
        });

        if (title == null || title.trim().length == 0) {
            title = $(xmlContent).find('itemBody').first().html();
        }

        if (title==null || title.trim().length == 0) {
            title = $(xmlContent).find('itembody').first().html();
        }
        if (title == null || title.trim().length == 0) {
            $(xmlContent).find('.mainbody, .mainBody').each(function() {
                title = $(this).html();
            });
        }
        if (title == null) {
            title = '';
        }

        var divTitle = '<div class="fontFamily" style="max-height:60px; overflow:hidden;max-width:220px">' + title + '</div>';
        return divTitle;
    }
</script>
<!-- CheckBox -->
<script type="text/javascript">
    $('#chkAllVirtualQuestion').die('click');
    $('#chkAllVirtualQuestion').live("click", function (e) {
        if (this.checked) {
            $('INPUT[name="chkVirtualQuestion"][type=checkbox]').attr('checked', 'checked');
            disableActionButton(false);
        }
        else {
            $('INPUT[name="chkVirtualQuestion"][type=checkbox]').removeAttr('checked');
            disableActionButton(true);
        }
        portalV2SkinCheckBox();
    });



    function getSelectedVirtualQuestionIds() {
        var qtiItemIds = '';
        $('INPUT[name="chkVirtualQuestion"][type=checkbox]:checked').each(function (i, e) {
            qtiItemIds += $(e).val() + ',';
        });
        return qtiItemIds.substr(0, qtiItemIds.length - 1);
    }

    function checkHasRetakeRequestThenDisableButton() {
        if (hasRetakeRequest) {
            $('#btnDeleteSeletedQuestions').attr('disabled', 'disabled');
        }
    }

    function disableActionButton(yn) {
        if (yn == true) {
            $('#btnAssignStandard').attr('disabled', 'disabled');
            $('#btnAssignTag').attr('disabled', 'disabled');
            $('#btnDeleteSeletedQuestions').attr('disabled', 'disabled');
            $('#btnAddPassage').attr('disabled', 'disabled');
        }
        else {
            $('#btnAssignStandard').removeAttr('disabled');
            $('#btnAssignTag').removeAttr('disabled');
            $('#btnDeleteSeletedQuestions').removeAttr('disabled');
            $('#btnAddPassage').removeAttr('disabled');
        }

        checkHasRetakeRequestThenDisableButton();
    }

    $( ".groupSection" ).scroll(function() {
    });

    function RefreshSectionQuestion(virtualTestId, hasDeletedSection) {
        var numberingItemBySection = $('#chkNumberBySection').is(':checked');
        if(numberingItemBySection==undefined || numberingItemBySection=='undefined') {
            numberingItemBySection = false;
        }
        $('#IsNumberQuestions').val(numberingItemBySection);

        $.get('@Url.Action("GetSections", "VirtualTest")?virtualTestId='+virtualTestId, function(states) {
            $('#selectSectionAdd').html('');
            AddSelectListItems($('#selectSectionAdd'), states, 'Select Section');
        });

        $.ajax({
            type: 'POST',
            url: '@Url.Action("RefreshSectionQuestionData","VirtualTest")',
            data: { virtualTestId: virtualTestId,numberingItemBySection:numberingItemBySection },
            success: function(data, status, xhr) {
                if (data.Success == true) {
                    if (hasDeletedSection != undefined) {
                        if ($('#divVirtualTestProperties').length > 0) {
                            return;
                        }
                        if (data.newData.VirtualSectionList.length == 1) {
                            var firstVirtualSectionID = data.newData.VirtualSectionList[0].VirtualSectionId;
                            if (firstVirtualSectionID == 0) {
                                // actually no section
                                //there's no section -> hide the old section property
                                $('#divRight').html('');
                            }
                        }
                    }

                    var newData = new sectionViewModel(data.newData.VirtualSectionList);
                    viewModel.vmdata(newData.vmdata());//viewModel in _VirtualSectionQuestion.cshtml
                    ResetQtiItemDetail();
                    LoadImages('#divVirutalSectionQuestion');
                    SetBaseQuestionBackground();
                    $('#divMain').unblock();
                    LoadImages('#divVirutalSectionQuestion');
                    setCheckedQuestionGroupHeader();

                    if ($('#chkAllVirtualQuestion').is(':checked')) {
                        $('input[name="chkVirtualQuestion"][type="checkbox"]').attr('checked', 'checked');
                        disableActionButton(false);
                    }

                    //UpdateSubScoreLabelSurveyTemplate
                    if ('@Model.IsSurvey' == 'True') {
                        UpdateSubScoreLabelSurveyTemplate(virtualTestId);
                    }
                    addClassGroupHeader()
                    removeElementEmpty()
                }
            },
            error: function (xhr, status, error) {
                alert(error);
                $('#divMain').unblock();
            }
        });
    }

    function UpdateSubScoreLabelSurveyTemplate(virtualTestId) {
        var items = $.map(viewModel.vmdata()[0].SectionQuestionQtiItemList(), function (item) { return { VirtualQuestionId: item.VirtualQuestionID(), ItemNumber: item.ItemNumber().substring(0, item.ItemNumber().length - 1) }; });
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateSubScoreLabelSurveyTemplate", "ManageSurvey")',
            data: { virtualTestId: virtualTestId, items: JSON.stringify(items) },
            success: function (data, status, xhr) { }
        });
    }
</script>
<script type="text/javascript">
    $(function () {
        $('.divContentItem').each(function (index, val) {
            LoadImages(val);//LoadImages is defined in Index.cshtml
        });

        calculatorSequenceWidth(".autoListUL partialsequence");

    });
</script>
<script type="text/javascript">
    $(function() {
        hideDefaultSection();
    });
    function hideDefaultSection() {
        var defaultSection = $('.autoTestHeader .delete-section[id="0"]');
        if(defaultSection.length > 0) {
            defaultSection.hide();
        }
    }
    function deleteSection(img) {
        var virtualSectionId = $(img).attr("id");
        DeleteSection(virtualSectionId, @Model.VirtualTestId);
    }
    function closePopUpActionsManageRosters() {
        $('#ConfirmSectionDeleteDialog').dialog('close');
    }
    function DeleteSection(virtualSectionId, virtualTestId) {
        if(virtualSectionId<=0) {
            return;
        }
        confirmMessageV2(
            {
                message: 'Are you sure you want to delete this section?',
                cbYesBtnFuncName: 'ConfirmSectionDeleteOkClick(' + virtualSectionId + ', '+ virtualTestId + ')',
                cbCancelBtnFuncName: 'closePopUpActionsManageRosters()'
            },
            {
                dialogAttr: {
                    attr: {
                        id: 'ConfirmSectionDeleteDialog'
                    }
                }
            })

    }

    function ConfirmSectionDeleteOkClick(virtualSectionId,virtualTestId) {
        $("#ConfirmSectionDeleteDialog").dialog("close");
        ShowBlock($('#divMain'), "Deleting");
        $.post('@Url.Action("DeleteVirtualSection")', { virtualSectionId: virtualSectionId, virtualTestId: virtualTestId }, function (response) {
            $('#divMain').unblock();
            if (response == true) {
                CustomAlert("Section has been deleted successfully.");
                //Remove section on the left, refresh section-question
                RefreshSectionQuestion(@Model.VirtualTestId);//defined in _VirtualSectionQuestion.cshtml
                showPropertiesVirtualTest();
            } else {
                CustomAlert(response.ErrorMessage);
                $('#divMain').unblock();
            }
        });
    }

    function ConfirmSectionDeleteCancellick() {
        $("#ConfirmSectionDeleteDialog").dialog("close");
    }

    function removeDeletedSectionOnUI(virtualSectionId) {
        $('label[id="'+ virtualSectionId + '"]').parent().remove();
    }

    function deleteSectionGroup (group) {
        var $group = $(group);
        var questiongroupId = parseInt($group.attr('id'), 10);
        VirtualSectionQuestionModel.isShowModalDeleteGroup = true;
        VirtualSectionQuestionModel.virtualSectionQuestion.questiongroupId = questiongroupId;
        VirtualSectionQuestionModel.virtualSectionQuestion.virtualTestId = '@Model.VirtualTestId';
    }
</script>
<script type="text/javascript">
    @*$('#chkNumberBySection').die('click');
    $('#chkNumberBySection').live("click", function (e) {
        ShowBlock($('#divMain'), "Loading");

        getCheckedQuestionGroupHeader();

        RefreshSectionQuestion(@Model.VirtualTestId);
    });*@

      $('#chkNumberBySection').change(function() {
          ShowBlock($('#divMain'), "Loading");
        updateNumberQuestionBySection();
        getCheckedQuestionGroupHeader();
        RefreshSectionQuestion(@Model.VirtualTestId);
      });

    function triggerChange(){
        $("#chkNumberBySection").trigger("change");
    }

    function getCheckedQuestionGroupHeader () {
        if ($('.groupHeader').parent().hasClass('selected')) {
            groupHeaderSelected = $('.groupHeader').parent('.selected').attr('id');
        } else {
            groupHeaderSelected = null;
        }

        virtualQuestionListChecked = [];

        if ($('input[name="chkVirtualQuestion"][type=checkbox]:checked').length) {
            $('input[name="chkVirtualQuestion"][type=checkbox]').each(function () {
                var $chkVirtualQuestion = $(this);
                var chkVirtualQuestionId = $chkVirtualQuestion.attr('id');

                if ($chkVirtualQuestion.is(':checked')) {
                    virtualQuestionListChecked.push(chkVirtualQuestionId);
                }
            });
        }
    }

    function setCheckedQuestionGroupHeader () {
        if (groupHeaderSelected != null) {
            $('.virtualGroup[id="' + groupHeaderSelected + '"]').addClass('selected');
        }

        if (virtualQuestionListChecked.length) {
            for (var i = 0, len = virtualQuestionListChecked.length; i < len; i++) {
                var virtualQuestionItem = virtualQuestionListChecked[i];
                $('input[name="chkVirtualQuestion"][type="checkbox"][id="' + virtualQuestionItem + '"]').attr('checked', 'checked');
            }
        }
    }

    function LoadVirtualQuestionPropertyOnInit() {
        ShowBlock($('#divMain'), 'Loading');
        //Add highlight to selected item
        $(".autoListUL .ulItem").removeClass("selected");
        $(".autoListUL .ulItem[id="+ @Model.VirtualQuestionId +"]").addClass("selected");
        $('#divRight').load('@Url.Action("LoadVirtualQuestionProperties")?virtualQuestionId=@Model.VirtualQuestionId&qtiItemId=@Model.QtiItemId', function() {
            $('#divRight').focus();
            destroyEditorInstance('txtTestPropertiesInstruction');
            destroyEditorInstance('txtSectionTestPropertiesInstruction');
        });
    }

    function closeDialogDeleteVirtualTest() {
        $('#_popUpConfirmDeleteVirtualQuestionSeletedId').dialog('close')
    }

    function popUpConfirmDeleteVirtualQuestionSeleted() {
        var questionAmount = 0;
        $('INPUT[name="chkVirtualQuestion"][type=checkbox]:checked').each(function (i, e) {
            questionAmount = questionAmount + 1;
        });
        var message = 'Are you sure you want to delete '+ questionAmount +' question(s) from the test?';

        confirmMessageV2(
        {
            message,
            cbYesBtnFuncName: 'DeleteVirtualQuestionSeleted()',
            cbCancelBtnFuncName: 'closeDialogDeleteVirtualTest()'
        },
        {
            dialogAttr: {
                attr: {
                    id: '_popUpConfirmDeleteVirtualQuestionSeletedId'
                }
            },
            option: {
                width: 565,
            }
        })

    }

    function DeleteVirtualQuestionSeleted() {
        $("#_popUpConfirmDeleteVirtualQuestionSeletedId").dialog("close");
        ShowBlock($('#divMain'), "Deleting");
        var lstQuestionIds = getSelectedVirtualQuestionIds();
        $.post('@Url.Action("DeleteVirtualQuestionSeleted")', {lstVirtualQuestionIds:lstQuestionIds, virtualTestId:@Model.VirtualTestId}, function (response) {
            $('#divRight').unblock();
            if (response == true) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("RefreshSectionQuestionData","VirtualTest")',
                    data: { virtualTestId: '@Model.VirtualTestId' },
                    success: function(data, status, xhr) {
                        $('#divMain').unblock();
                        if (data.Success == true) {
                            var newData = new sectionViewModel(data.newData.VirtualSectionList);
                            viewModel.vmdata(newData.vmdata());//viewModel in _VirtualSectionQuestion.cshtml
                            ResetQtiItemDetail();
                            LoadImages('#divVirutalSectionQuestion');
                            $('#divMain').unblock();
                            if ($('input[name="chkVirtualQuestion"][type="checkbox"]:checked').length == 0) {
                                disableActionButton(true);
                            }
                            CustomAlert("Questions successfully deleted.")
                            addClassGroupHeader()
                            removeElementEmpty()
                        }
                    },
                    error: function (xhr, status, error) {
                        CustomAlert(error);
                        $('#divMain').unblock();
                        addClassGroupHeader();
                        removeElementEmpty();
                    }
                });
                //clear the virtual question information
                if ($('#artQuestionProperty').length > 0) {
                    //a question property is being opened
                    $('#divRight').html('');
                    //load Test property
                    showPropertiesVirtualTest();
                }

            } else {
                CustomAlert(response.ErrorMessage);
                $('#divMain').unblock();
            }
        });
    }

    function DeleteVirtualQuestionSeletedCancellick() {
        $("#_popUpConfirmDeleteVirtualQuestionSeletedId").dialog("close");
    }

    function updateNumberQuestionBySection() {
        var numberQuestion = $('#chkNumberBySection').is(':checked');
        $.post('@Url.Action("UpdateNumberQuestionByTestId")', { virtualTestId:@Model.VirtualTestId, isNumberQuestion: numberQuestion}, function (response) {
            ;
        });
    }

    function addClassGroupHeader() {
        var elGroupHeader = $('.groupHeader');
        elGroupHeader.each(function () {
            var html = $(this).html();
            if (html.length > 0) {
                $(this).addClass('groupHeaderLate');

            }
        })

        elGroupHeader.unbind();
        $(".groupHeader.groupHeaderLate").on('click', function (e) {
            $(this).find('.groupHeaderTitle').trigger('click')
        })

        $(".delete-section").tip();
        $(".section-header").unbind('click');
        $(".section-header").on('click', function (e) {
            $(this).find('.VirtualSectionLable').trigger('click')
        })

        eventStopPropagation('.delete-section');
        eventStopPropagation('.VirtualSectionLable');
        eventStopPropagation('.groupHeaderTitle');
        eventStopPropagation('.expan-section');
    }

    function removeElementEmpty() {
        var parentNoContent = $('.groupSection .groupClass');
        parentNoContent.each(function () {
            var elLi = $(this).find('li');
            if (elLi.length == 1) {
                $(this).css('border', '1px solid var(--blue3)').css('border-top', 'none');
            } else {
                $(this).find('li.no-content').hide();
            }
        })
    }

    function eventStopPropagation(id) {
        $(id).click(function (e) {
            e.stopPropagation();
            if (id == '.expan-section') {
                console.log(e)
                var sectionItems = $(this).parents('.groupSection').children('ul.groupClass');
                console.log('sectionItems', sectionItems)
                if ($(this).children('i').hasClass('down')) {
                    $(this).children('i').removeClass('down').addClass('right');
                    sectionItems.slideUp()
                } else {
                    $(this).children('i').removeClass('right').addClass('down');
                    sectionItems.slideDown()
                }
            }
        })
    }
</script>
