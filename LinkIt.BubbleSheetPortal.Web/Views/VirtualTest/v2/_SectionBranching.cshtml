<script src="@Url.Content("~/Scripts/jquery.listSplitter.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/TagIt/js/tag-it.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Scripts/TagIt/css/jquery.tagit.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Scripts/TagIt/css/tagit.ui-zendesk.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/themes/Constellation/css/form.css")" rel="stylesheet" type="text/css" />

<style>
    .datatable-testletbranching ~ .block-footer {
        margin-left: 0;
        margin-right: 0;
    }

    .wraptag-testletbranching {
        margin-bottom: 30px;
    }

    ul.tagit.tagit-testletbranching {
        border-radius: 0.417em;
        border-color: #89bad3;
        padding-top: 0;
        padding-bottom: 0;
    }

    ul.tagit.tagit-testletbranching li.tagit-choice-editable {
        padding-top: .1em;
        padding-bottom: .1em;
    }

    .icon-sectionbranching-delete {
        background: url(/Content/themes/Constellation/images/icons/fugue/cross-circle.png) no-repeat;
    }

    #portal-v2-containter .form .labelControll {
        font-size: 1em !important
    }
    .dataTableSectionBranchingTable .no-margin.last-child {
        margin: 0!important;
    }
    #portal-v2-containter .ui-dialog .ui-dialog-titlebar-close, #portal-v2-containter .ui-dialog-titlebar-close {
        right: 2.2rem;
        top: 1.8rem;
    }

    .virtualColor {
        color: var(--navyColor) !important;
        font-weight: bold !important;
        font-size: 1em !important;
    }

    .text-color {
        color: var(--navyColor);
    }

    #portal-v2-containter ul.tagit {
        padding: 0 0.65rem !important;
        border: 2px solid var(--selectBorder);
        border-radius: 0;
        color: var(--selectColor);
        font-size: var(--fontSizeText);
        background: none;
        display: flex;
        align-items: center;
        min-height: 43.78px;
        overflow: visible;
    }

    #portal-v2-containter ul.tagit li.tagit-choice {
        background-color: var(--blue3) !important;
        padding: 4px 26px 4px 8px !important;
        border-radius: 0;
    }

    #portal-v2-containter  .tagit-close .text-icon {
        position: relative;
        width: 12px;
        height: 12px;
        color: transparent !important;
    }

    #portal-v2-containter ul.tagit li.tagit-choice .tagit-label:not(a) {
        color: var(--navyColor);
    }

    .tagit-choice .text-icon:after {
        content: '\f00d';
        position: absolute;
        top: 3px;
        right: 3px;
        font-family: "Font Awesome 6 Free";
        font-weight: 900;
        color: var(--navyColor);
        font-size: 0.875rem;
        min-height: 43.78px;
    }

    /*.vertualtest-view-control*/
    ul.tagit li.tagit-new {
        display: none;
    }
    .EditSectionBranchingPath,
    .DeleteSectionBranchingPath {
        display: inline-block !important;
    }

    .section-target-note {
        background-color: var(--blue1);
    }
</style>

<div class="block-border" id="divContentTestSettingTestPropertyTopSectionBranching">
    <div id="divContentTestSettingTestPropertySectionBranching" class="block-content block-24 form">
        <h2 class="header">Section Branching Settings</h2>
        <div class="section-branching d-flex flex-row">
            <h2 class="p-header">Branch by</h2>
            <div class="d-flex flex-row ms-4" style="margin-top: 3px">
                <input type="radio" name="section-branching" id="section-branching-aggregate" checked value="1" />
                <label for="section-branching-aggregate" class="ms-2 virtualColor">Aggregate Score</label>
            </div>
            <div class="d-flex flex-row ms-3" style="margin-top: 3px">
                <input type="radio" name="section-branching" id="section-branching-section" value="0" />
                <label for="section-branching-section" class="ms-2 virtualColor">Section Score</label>
            </div>
        </div>
        <div class="dataTableSectionBranchingTable mb-4">
            <table id="dataTableSectionBranchingTable" class="datatable datatable-testletbranching table" width="100%">
                <thead>
                    <tr>
                        <th scope="col" class="black-cell">Actions</th>
                        <th scope="col">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Section Path
                        </th>
                        <th scope="col">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Min
                        </th>
                        <th scope="col">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Max
                        </th>
                        <th scope="col">
                            <span class="column-sort">
                                <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                            </span>
                            Target Section
                        </th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div id="idAddPathforSectionBranching" style="display:none;" class="mb-4">
            <div class="" id="fsSelectTest">
                <div class="d-flex flex-row justify-content-between mt-4">
                    <h2 class="p-header">Section Path</h2>
                    <button onclick="insertPath()" type="button" class="btn-text btn-plus-icon">Insert Path</button>
                </div>
                <div class="row g-3 branching-insert-path">
                    <div class="d-flex flex-column col-5">
                        <label>Select Path</label>
                        <select id="selectSectionPath" class="full-width"></select>
                    </div>
                    <div class="d-flex flex-column col-5">
                        <label>&nbsp;</label>
                        <div class="wraptag wraptag-testletbranching">
                            <ul id="selectedSectionTestIds" class="tagit"></ul>
                        </div>
                    </div>
                </div>
                <div class="columns branching-insert-path">
                    <div class="d-flex flex-row justify-content-between">
                        <h2 class="p-header">Target Sections</h2>
                        <button id="btnAddMoreTarget" class="btn-text btn-plus-icon" type="button">Add more Target</button>
                    </div>
                    <div id="divShowListSectionTarget">
                        <div class="row g-0 align-items-center section-item">
                            <div id="divSectionPath" class="section-target-item col-10">
                                <div class="row g-3">
                                    <div class="col-3 d-flex flex-column">
                                        <label>Min Score</label>
                                        <input id="idSectionPathMinValue" class="numbersOnly full-width" type="text" value="0" />
                                    </div>
                                    <div class="col-3 d-flex flex-column">
                                        <label>Max Score</label>
                                        <input id="idSectionPathMaxValue" class="numbersOnly full-width" type="text" />
                                    </div>
                                    <div class="col-6 d-flex flex-column section-target">
                                        <label>Section Target</label>
                                        <select id="selectSectiontarget" class="full-width"></select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-2 section-path-delete ps-4">
                                <span class="custom-icon fa-solid fa-circle-xmark icon-red ms-3 mt-4" style="cursor: pointer" onclick="removeSectionBranchingTarteRow(this)"></span>
                            </div>
                        </div>
                    </div>
                    <div class="section-target-note align-items-start mt-4 d-flex flex-row p-3">
                        <div class="px-2">
                            <img src="/Content/images/icons/icon-info.svg" width="20" height="20">
                        </div>
                        <ul class="ms-4" style=" list-style: disc;">
                            <li class="mb-1">A section path must have a minimum score of 0 and a maximum score of 9999.</li>
                            <li>Score ranges cannot overlap each other.</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div  class="modal-component-footer" style="margin: 0 -24px -24px -24px;">
            <div slot="footer">
                <button id="btnCancelSaveAPath" type="button">Cancel</button>
                <button id="btnSaveAPath" type="button" class="btn-red" style="display: none">Save Path</button>
                <button id="btnSectionBranchingAddNewRow" onclick="insertPath()" type="button" class="btn-red">Insert Path</button>
            </div>
        </div>
    </div>
</div>
<script>
    var selectedTagsDict = {};
    var counterAddSectionTarget = 0;
    var ListSectionTarets = {};
    var lstScore = [];
    var lstSectionPathUI = [];
    function getBranchingByValue() {
        return $("input[name='section-branching']:checked").val() + '' == '0';
    };
    function updateBranchingByValue() {
         ShowBlock($('#divContentTestSettingTestPropertyTopSectionBranching'), "Loading");
        var virtualtestId = $('#hiddenVirtualTestIdOnIndexPage').val();
        $.post('VirtualTest/UpdateBranchingMethod', {
            virtualTestId: virtualtestId,
            isBranchBySectionScore: getBranchingByValue()
        }, function (response) {
            $('#divContentTestSettingTestPropertyTopSectionBranching').unblock();
            portalV2SkinRadio();
        });
    }
    function loadCurrentBranchBy() {
        var virtualtestId = $('#hiddenVirtualTestIdOnIndexPage').val();
        $.get('VirtualTest/IsBranchBySectionScore', { virtualtestId: virtualtestId }, function (response) {
            if (response.IsSuccess) {

                $("input:radio[name='section-branching'][value = '" + (response.StrongData == true ? "0" : "1") + "']").prop("checked", true);
                portalV2SkinRadio();
            }
        });
    }
    $(function () {

        $("input[name='section-branching']").change(function () {
            updateBranchingByValue();
        });

        loadCurrentBranchBy();

        var options = {
            iDisplayLength: 100,
            searching: false,
            bPaginate: true,
            bLengthChange: false,
            bInfo: false,
            bDestroy: true,
            bServerSide: true,
            bFilter: false,
            sAjaxSource: getAjaxSourceSectionBranching(),
            bAutoWidth: false,
            aaSorting: [[1, "asc"], [2, "asc"]],
            aoColumns: [
                { sType: 'int', sName: 'VirtualSectionBranchingID', bSearchable: false, bSortable: false, sWidth: '77px', sClass: 'alignRight' },
                { sType: 'string', sName: 'TestletPath', bSearchable: true, bSortable: false },
                { sType: 'int', sName: 'LowScore', bSearchable: true, bSortable: false },
                { sType: 'int', sName: 'HighScore', bSearchable: true, bSortable: false },
                { sType: 'string', sName: 'TargetVirtualSection', bSearchable: true, bSortable: false }
            ],
            oLanguage: { "sEmptyTable": "No records found" },
            fnPreDrawCallback: function () {
                ShowBlock($('#divContentTestSettingTestPropertyTopSectionBranching'), "Loading");
                lstSectionPathUI = [];
                return true;
            },
            fnRowCallback: function (nRow, aData) {
                //$('td:eq(0)', nRow).addClass('center');
                if (showAddEdit(aData[1])) {
                    $('td:eq(0)', nRow).html(setIconVisibility(aData[0]));
                } else {
                    $('td:eq(0)', nRow).html('');
                }
                return nRow;
            },
            fnDrawCallback: function () {
                $('#divContentTestSettingTestPropertyTopSectionBranching').unblock();
                $('.with-tip').tip();
            }
        };
        function showAddEdit(sectionpath) {
            for (var i = 0; i < lstSectionPathUI.length; i++) {
                if (lstSectionPathUI[i] === sectionpath) {
                    return false;
                }
            }
            lstSectionPathUI.push(sectionpath);
            return true;
        }

        function setIconVisibility(VirtualSectionBranchingID) {

            var editIcon = '<span class="icon fa-solid fa-pencil icon-grey"></span>';
            var editString = '<a href="javascript:void(0)" title="Edit Section Branching Path" virtualsectionbranchingid="' + VirtualSectionBranchingID + '" class="with-tip EditSectionBranchingPath">' + editIcon +'</a>';

            var deleteIcon = '<span class="icon fa-solid fa-circle-xmark icon-red"></span>';
            var deleteIconString = '<a href="javascript:void(0)" title="Delete Section Branching Path" virtualsectionbranchingid="' + VirtualSectionBranchingID + '" class="with-tip DeleteSectionBranchingPath ms-3">' + deleteIcon +'</a>';

            return editString + deleteIconString;
        }

        $("#dataTableSectionBranchingTable").data("options", options);
        initializeDataTable($("#dataTableSectionBranchingTable"));
    });

    $('.EditSectionBranchingPath').die('click');
    $('.EditSectionBranchingPath').live('click', function () {
        clearSectionTarget();
        var sectionbranchingId = $(this).attr('virtualsectionbranchingid');
        $.get('@Url.Action("EditSectionPath", "VirtualTest")?sectionBranchingId=' + sectionbranchingId,
                function (response) {
                    if (response.success) {
                        if (response.data != null && response.data.length > 0) {

                            selectedTagsDict = {};
                            $('#selectedSectionTestIds').tagit('removeAll');
                            var virtualtestId = $('#hiddenVirtualTestIdOnIndexPage').val();
                            if (virtualtestId > 0) {
                                $.get('@Url.Action("GetSectionDropDownByVirtualtestId", "VirtualTest")?virtualtestId=' + virtualtestId, function (testsections) {
                                    $('#selectSectionPath').empty();
                                    ListSectionTarets = testsections;
                                    AddSelectListItems($('#selectSectionPath'), ListSectionTarets, 'Select Section');
                                    //TODO:
                                    $.each(response.data, function (i, member) {

                                        if (i === 0) {
                                            InitValueTheFirstSectionTarget(member.MinValue, member.MaxValue, member.TargetId);
                                            refillSectionSelected(member.sectionselected);
                                        }
                                        else {
                                            var idCounter = InitSectionTargetEmpty();
                                            InitValueSectionTarget(idCounter, member.MinValue, member.MaxValue, member.TargetId);
                                        }
                                    });
                                });
                            }

                            $('#idAddPathforSectionBranching').show();
                            $(window).scrollTop($('#idAddPathforSectionBranching').offset().top);
                        }
                        else {
                            alert("response.data error. Please try again");
                        }
                    }
                    else {
                        //TODO:
                        alert("Have some error. Please try again");
                    }
                });
    });

    $('.DeleteSectionBranchingPath').die('click');
    $('.DeleteSectionBranchingPath').live('click', function () {
        var sectionbranchingId = $(this).attr('virtualsectionbranchingid');
        confirmMessageV2(
            {
                message: 'Are you sure, you want delete this section path ?',
                cbYesBtnFuncName: 'confirmDeleteSectionBranching(' + sectionbranchingId + ')',
                cbCancelBtnFuncName: 'closeSectionBranchingPathDialog()'
            },
            {
                dialogAttr: {
                    attr: {
                        id: 'deleteSectionBranchingPathDialog'
                    }
                }
            }
        )
        //popupAlertMessageV2(type, msg, w, h, functionName, valueInfor)
        //TODO:
    });
    function closeSectionBranchingPathDialog() {
        $('#deleteSectionBranchingPathDialog').dialog('close')
    }

    function confirmDeleteSectionBranching(sectionbranchingId) {
        closeSectionBranchingPathDialog();
        ShowBlock($('#divContentTestSettingTestPropertyTopSectionBranching'), "Loading");
        $.get('@Url.Action("DeleteSectionBranchingById", "VirtualTest")?sectionBranchingId=' + sectionbranchingId,
                function (response) {
                    if (response.success) {
                        $("#dataTableSectionBranchingTable").dataTable().fnReloadAjax(getAjaxSourceSectionBranching());
                    }
                    $('#divContentTestSettingTestPropertyTopSectionBranching').unblock();
                });
    }

    function insertPath() {
        clearSectionTarget();
        InitSectionPathData();
        $('#idAddPathforSectionBranching').show();
        $('#btnSaveAPath').show();
        $('#btnSectionBranchingAddNewRow').hide();
        $(window).scrollTop($('#idAddPathforSectionBranching').offset().top);
        setTimeout(function () {
            reCalculatePositionPopup();
        }, 200)
    }

    function InitSectionPathData() {
        selectedTagsDict = {};
        $('#selectedSectionTestIds').tagit('removeAll');

        $('#idSectionPathMinValue').val(0);
        //$('#idSectionPathMaxValue').val(9999);
        FillDropdownSection('selectSectionPath');
        FillDropdownSection('selectSectiontarget');

    }

    function FillDropdownSection(dropdownId) {

        var virtualtestId = $('#hiddenVirtualTestIdOnIndexPage').val();
        if (virtualtestId > 0) {
            $.get('@Url.Action("GetSectionDropDownByVirtualtestId", "VirtualTest")?virtualtestId=' + virtualtestId,
                function (testsections) {
                    $('#' + dropdownId).empty();
                    AddSelectListItems($('#' + dropdownId), testsections, 'Select Section');
                    if (dropdownId === 'selectSectiontarget') {
                        $("#selectSectiontarget").append(new Option("End Test", 0));
                        ListSectionTarets = testsections;
                    }
                });
        }
    }

    $('#btnSaveAPath').unbind('click');
    $('#btnSaveAPath').click(function ()
    {

        removeErrorCSS();
        InitMaxValueBeforeSave();
        //TODO: validation
        if (ValidationSectionPathAndTarget() === false) {
            return;
        }

        if (validationMinMaxValue() === false) {
            return;
        }

        //TODO: Save data
        var sectionselected = BuildListVirtualSectionSelected();
        var virtualTestId = $('#hiddenVirtualTestIdOnIndexPage').val();
        var sectionPaths = [];
        var isBranchBySectionScore = getBranchingByValue();

        for (var i = 0; i < lstScore.length; i++) {
            var myObj = {
                sectionselected: sectionselected,
                VirtualTestId: virtualTestId,
                TargetId: lstScore[i].TargetId,
                MinValue: lstScore[i].MinValue,
                MaxValue: lstScore[i].MaxValue,
                isBranchBySectionScore: isBranchBySectionScore
            }
            sectionPaths.push(myObj);
        }
        ShowBlock($('#divContentTestSettingTestPropertyTopSectionBranching'), "Loading");
        $.ajax({
            contentType: 'application/json',
            datatype: 'json',
            type: 'POST',
            url: '@Url.Action("InsertSectionPath", "VirtualTest")',
            cache: false,
            data: JSON.stringify({ 'sectionPaths': sectionPaths }),
            traditional: true,

            success: function (response) {
                if (response.success) {
                    //TODO: Reload data table
                    $("#dataTableSectionBranchingTable").dataTable().fnReloadAjax(getAjaxSourceSectionBranching());
                    //$('#idAddPathforSectionBranching').hide();
                    clearSectionTarget();
                    $('#btnSectionBranchingAddNewRow').show();
                    $('#btnSaveAPath').hide();
                    $('#divContentTestSettingTestPropertyTopSectionBranching').unblock();
                } else {
                    //TODO: Show message warning
                    customAlert(response.ErrMessage);
                    $('#divContentTestSettingTestPropertyTopSectionBranching').unblock();
                    return false;
                }
            },
            error: function (data) {

            }
        });

    });

    $('#btnCancelSaveAPath').unbind('click');
    $('#btnCancelSaveAPath').click(function () {
        clearSectionTarget();
        $('#divSectionBranchingPanel').remove();
        $("body .my-overlay").remove();
    });


    $('#selectSectionPath').change(function () {
        var testSectionId = $('#selectSectionPath').val();
        if (testSectionId > 0) {
            $("#selectedSectionTestIds").tagit("createTag", $('#selectSectionPath option:selected').text());
            $('#selectSectionPath option:selected').remove();
            //$("#selectSectiontarget option[value='" + testSectionId + "']").remove();
        }
    });

    $("#selectedSectionTestIds").tagit({
        beforeTagAdded: function (event, ui)
        {

            var tagId = $('#selectSectionPath').val();
            if (tagId != undefined) {
                selectedTagsDict[$('#selectSectionPath option:selected').text().trim()] = tagId; //remember Id of selected tag
            }
        },
        beforeTagRemoved: function (event, ui)
        {

            //TODO: Add back to dropdown
            $("#selectSectionPath").append(new Option(ui.tagLabel, selectedTagsDict[ui.tagLabel]));
            //$("#selectSectiontarget").append(new Option(ui.tagLabel, selectedTagsDict[ui.tagLabel]));
            //clear the selected tag out of memory
            delete selectedTagsDict[ui.tagLabel];
        }
    });

    $('#selectedSectionTestIds').find('.ui-autocomplete-input').attr('readonly', true); // Disallow to type into selected test tagit
    $('#selectedSectionTestIds').find('.tagit-dropdown').hide();

    $('.numbersOnly').keyup(function () {
        this.value = this.value.replace(/[^0-9\.]/g, '');
    });

    function BuildListVirtualSectionSelected() {
        var x = '';
        for (var key in selectedTagsDict) {
            x += selectedTagsDict[key] + ',';
        }

        if (x.length > 0)
            return x.substring(0, x.length - 1);
        return '';
    }

    function getAjaxSourceSectionBranching() {
        var virtualTestId = $('#hiddenVirtualTestIdOnIndexPage').val()
        return '@Url.Action("LoadSectionBranching")?virtualTestId=' + virtualTestId;
    }

    //Validation Min Max Score
    function validationMinMaxValue() {

        var invalidMinMax = 0;
        var invalidMinValue = 0;
        var invalidMaxValue = 0;
        var invalidSectionTargetId = 0;
        var currentRowInvalid = 0;
        lstScore = [];
        $('#divShowListSectionTarget div[id^="divSectionPath"]').each(function () {

            var objminvalue = $(this).find('input[id^="idSectionPathMinValue"]').val();
            var objmaxvalue = $(this).find('input[id^="idSectionPathMaxValue"]').val();
            var objtargetId = $(this).find('select[id^="selectSectiontarget"]').val();
            var minValue = parseInt(objminvalue);
            var maxValue = parseInt(objmaxvalue);
            var targetId = parseInt(objtargetId);

            var divId = $(this).attr('id');
            currentRowInvalid = 0;
            if (isNaN(targetId) || targetId < 0)
            {
                invalidSectionTargetId += 1;
                currentRowInvalid += 1;
            }
            if (isNaN(minValue)) {
                invalidMinValue += 1;
                currentRowInvalid += 1;
            }
            if (isNaN(maxValue)) {
                invalidMaxValue += 1;
                currentRowInvalid += 1;
            }
            if (isNaN(minValue) == false && isNaN(maxValue) == false && minValue > maxValue) {

                invalidMinMax += 1;
                currentRowInvalid += 1;
            } else {
                var objMinMax = {
                    MinValue: minValue,
                    MaxValue: maxValue,
                    TargetId: targetId,
                    DivId: divId
                }
                lstScore.push(objMinMax);
            }
            if(currentRowInvalid > 0)
            {
                $(this).addClass("error");
            }
        });
        var vMessage = "";
        if (invalidSectionTargetId > 0)
        {
            vMessage += "Please Select a section target. <br />";
        }
        if (invalidMinValue > 0) {
            vMessage += "Please input correct Min Score. <br />";
        }
        if (invalidMaxValue > 0) {
            vMessage += "Please input correct Max Score. <br />";
        }
        if (invalidMinMax > 0) {
            vMessage += "Min score must be equal or smaller than max score. <br />";
        }
        if (vMessage.length > 0) {
            customAlert(vMessage);
            return false;
        } else {
            //TODO: validation min/max per target.

            lstScore.sort(function (a, b)
            {
                return a.MinValue - b.MinValue;
            });


            var msInvalidMinScore = '';
            var msInvalidMaxScore = '';
            var isOverlap = 0;
            for (var i = 0; i < lstScore.length; i++)
            {

                if (i == 0 && lstScore.length > 1)
                {
                    if(lstScore[i].MaxValue + 1 != lstScore[i+1].MinValue)
                    {
                        isOverlap += 1;
                        $('#' +lstScore[i].DivId).addClass("error");
                    }
                }
                if(i == lstScore.length - 1 && lstScore.length > 1)
                {
                    if (lstScore[i].MinValue != lstScore[i - 1].MaxValue + 1) {
                        isOverlap += 1;
                        $('#' + lstScore[i].DivId).addClass("error");
                    }
                }
                if (i === 0 && lstScore[i].MinValue !== 0) {
                    isOverlap += 1;
                    msInvalidMinScore = 'The lowest score must be equal to 0. <br />';
                    $('#' + lstScore[i].DivId).addClass("error");
                }
                else if (i === lstScore.length - 1 && lstScore[i].MaxValue !== 9999) {
                    isOverlap += 1;
                    msInvalidMinScore = 'The Maximum score must be equal to 9999. <br />';
                }
                else if (i > 0 && i < lstScore.length - 1)
                {

                    if (lstScore[i].MinValue !== (lstScore[i - 1].MaxValue + 1)
                        || (lstScore[i].MaxValue + 1) !== lstScore[i + 1].MinValue)
                    {
                        isOverlap += 1;
                        $('#' + lstScore[i].DivId).addClass("error");
                    }
                }
            }
            if (isOverlap > 0) {
                var alertMessage = msInvalidMinScore + msInvalidMaxScore + 'Min score and Max score on each target should not overlap together.';

                customAlert(alertMessage);
                return false;
            }
        }
        return true;
    }

    //Section Tartget no belong section path
    function ValidationSectionPathAndTarget() {

        var totalTagsDict = 0;
        for (var key in selectedTagsDict) {
            totalTagsDict += 1;
        }
        if (totalTagsDict == 0) {
            //TODO: Show warning message.
            var alertMessage = 'Please, select section path.';
            customAlert(alertMessage);
            return false;
        }
        var invalidTargetId = 0;
        $('#divShowListSectionTarget div[id^="divSectionPath_"]').each(function () {

            var targetId = $(this).val();
            for (var key in selectedTagsDict) {
                if (selectedTagsDict[key] === targetId)
                {
                    $(this).addClass("error");
                    invalidTargetId += 1;
                }
            }
        });
        if (invalidTargetId > 0) {
            var alertMessage = 'The target section must be different with the section in the path.';
            customAlert(alertMessage);
            return false;
        }

        return true;
    }

    function InitMaxValueBeforeSave()
    {
        $('#divShowListSectionTarget div[id^="divSectionPath"]').each(function ()
        {

            var objmaxvalue = $(this).find('input[id^="idSectionPathMaxValue"]');
            if (objmaxvalue.val() === "")
            {
                objmaxvalue.val(9999);
            }
        });
    }

    $('#btnAddMoreTarget').unbind('click');
    $('#btnAddMoreTarget').click(function () {
        InitSectionTargetEmpty();
    });

    function InitValueSectionTarget(counterId, minValue, maxValue, stargetId) {
        $('#idSectionPathMinValue_' + counterId).val(minValue);
        $('#idSectionPathMaxValue_' + counterId).val(maxValue);
        $('#selectSectiontarget_' + counterId).val(stargetId);
    }

    function InitValueTheFirstSectionTarget(minValue, maxValue, stargetId) {
        $('#selectSectiontarget').empty();
        AddSelectListItems($('#selectSectiontarget'), ListSectionTarets, 'Select Section');
        $('#selectSectiontarget').append(new Option("End Test", 0));

        $('#idSectionPathMinValue').val(minValue);
        $('#idSectionPathMaxValue').val(maxValue);
        $('#selectSectiontarget').val(stargetId);
    }

    function InitSectionTargetEmpty() {
        counterAddSectionTarget += 1;
        $('#divShowListSectionTarget').append(
        '<div class="row g-0 align-items-center section-item mt-3">' +
            '<div class="section-target-item col-10" id="divSectionPath_' + counterAddSectionTarget +'">' +
                '<div class="row g-3">' +
                    '<div class="col-3 d-flex flex-column">' +
                        '<label>Min Score</label>' +
                        '<input class="numbersOnly full-width" type="text" value="0" id="idSectionPathMinValue_' + counterAddSectionTarget +'" />' +
                    '</div>'+
                    '<div class="col-3 d-flex flex-column">' +
                        '<label>Max Score</label>' +
                        '<input class="numbersOnly full-width" type="text" id="idSectionPathMaxValue_ ' + counterAddSectionTarget +' "/>' +
                        '</div>' +
                    '<div class="col-6 d-flex flex-column section-target">' +
                        '<label>Section Target</label>' +
                        '<select class="full-width"  id="selectSectiontarget_' + counterAddSectionTarget +'"></select>' +
                    '</div>' +
                '</div>' +
             '</div>' +
            '<div class="col-2 section-path-delete ps-4">' +
                '<span class="custom-icon fa-solid fa-circle-xmark icon-red ms-3 mt-4" style="cursor: pointer" onclick="removeSectionBranchingTarteRow(this)"></span>' +
            '</div>' +
          '</div>'
         )
        //Fill SectionTarget
        $('#selectSectiontarget_' + counterAddSectionTarget).empty();
        AddSelectListItems($('#selectSectiontarget_' + counterAddSectionTarget), ListSectionTarets, 'Select Section');
        $('#selectSectiontarget_' + counterAddSectionTarget).append(new Option("End Test", 0));
        return counterAddSectionTarget;
    }

    function removeSectionBranchingTarteRow(vm) {
        $($(vm).parent().parent()).remove();
    }

    function clearSectionTarget() {
        $('#divShowListSectionTarget div[id^="divSectionPath_"]').each(function () {
            var parent = $(this).parent();
            $(parent).remove();
        });
        $('#idAddPathforSectionBranching').hide();
    }

    function refillSectionSelected(sectionSelected) {

        var arr = sectionSelected.split("-");
        for (var i = 0; i < arr.length; i++) {
            $('#selectSectionPath').val(arr[i]);
            $("#selectedSectionTestIds").tagit("createTag", $('#selectSectionPath option:selected').text());
            $('#selectSectionPath option:selected').remove();
        }
        $('#selectSectionPath').val('-1');
    }

    function removeErrorCSS() {
        $('#divShowListSectionTarget div[id^="divSectionPath"]').each(function () {

            $(this).removeClass("error");
        });
    }


    function reCalculatePositionPopup() {
        const elHtml = $('html').get(0);
        var scrollTop = elHtml.scrollTop;
        var winInnerHeight = window.innerHeight;
        var popupHeight = $('#divSectionBranchingPanel').parent().height();
        var newPosition = (winInnerHeight / 2) + scrollTop - (popupHeight / 2);
        $('#divSectionBranchingPanel').parent().css('top', newPosition)
    }

</script>
