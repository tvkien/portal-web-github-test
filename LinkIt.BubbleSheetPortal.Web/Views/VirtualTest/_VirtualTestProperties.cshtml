@using LinkIt.BubbleSheetPortal.Common.Enum
@using LinkIt.BubbleSheetPortal.Common;
@model LinkIt.BubbleSheetPortal.Web.ViewModels.VirtualTestPropertiesViewModel
<style>
    #divInstrustion .topMenu {
        width: 553px;
    }

    .DivFieldSet {
        padding-left: 10px;
        padding-right: 10px;
        width: 595px;
    }

    .divBotButton {
        padding-right: 10px;
        padding-left: 10px;
    }

    .selectScoringMethod {
        min-width: 180px;
    }
</style>
<article class="container_12" style="width: 100%">
    <section class="grid_12" style="width: 93%">
        <div class="block-border" style="width: 100%" id="divVirtualTestProperties">
            <div class="block-content form">
                <h1 class="PropertyTitle">
                    @if (Model.IsSurvey)
                    {
                        <text>Survey Properties</text>
                    }
                    else
                    {
                        <text>Test Properties</text>
                    }
                </h1>
                <ul style="display: none" id="error-messages" class="message error"></ul>
                <ul style="display: none" id="success-message" class="message success">
                    <li>Test properties successfully updated.</li>
                </ul>
                <div class="no-margin last-child">
                    @using (Html.BeginForm("EditTestProperties", "VirtualTest", FormMethod.Post, new { id = "editTestPropertiesForm", @class = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <div id="notification"></div>
                        <div class="DivFieldSet">
                            <fieldset>
                                <div style="display: inline-block; width: 75px;">
                                    <label class="u-inline-block u-fw-400 u-c-mineshaft" for="Name">
                                        @if (Model.IsSurvey)
                                        {
                                            <text>Survey Name:</text>
                                        }
                                        else
                                        {
                                            <text>Test Name:</text>
                                        }
                                    </label>
                                </div>
                                <div style="display: inline-block;width: 471px;">
                                    @Html.TextBoxFor(x => x.Name, new { @class = "full-width", tabindex = 1 })
                                </div>
                            </fieldset>
                        </div>
                        @Html.TextArea("xmlContent", Model.Instruction, new { @style = "display:none" })
                        @Html.HiddenFor(x => x.VirtualTestId)
                        @Html.HiddenFor(x => x.CurrentNavigationMethodID)
                        @Html.HiddenFor(x => x.IsNumberQuestions)
                        <input type="hidden" id="hdNavigationMethodID" />
                        <div class="clear10"></div>
                        <div id="divInstrustion" class="DivFieldSet">
                            <fieldset>
                                <legend>
                                    @if (Model.IsSurvey)
                                    {
                                        <text>Survey Instructions:</text>
                                    }
                                    else
                                    {
                                        <text>Test Instructions:</text>
                                    }
                                </legend>
                                <div class="topMenu">
                                    <div id="topSpace"></div>
                                    <div class="questionType" id="questionType">
                                        <div class="clear"></div>
                                    </div>
                                </div>
                                <div class="clear"></div>
                                <div class="qContent">
                                    <div class="clear"></div>
                                    <div class="clear"></div>
                                    <textarea cols="80" id="txtTestPropertiesInstruction" name="editor1" rows="10"></textarea>
                                </div>
                            </fieldset>
                            <div class="clear10"></div>
                        </div>

                        <div class="DivFieldSet">
                            <fieldset>
                                <div style="float: left;width: 100%">
                                    <div style="float: left; width: 55%">
                                        <div class="u-inline-block u-w-105">
                                            <label class="u-inline-block u-fw-400 u-c-mineshaft" for="CategoryID"> Category:</label>
                                        </div>
                                        <div class="u-inline-block" style="margin-bottom:5px; width:180px">
                                            <input type="text" id="selectCategoryIDDropdown" placeholder="Select Category" autocomplete="off" class="full-width" style="width: 180px" />
                                        </div>
                                        @if (!Model.IsSurvey)
                                        {
                                            <div class="u-inline-block u-w-105">
                                                <label class="u-inline-block u-fw-400 u-c-mineshaft" for="TestScoreMethodID"> Scoring Method:</label>
                                            </div>
                                            <div class="u-inline-block " style="width:175px">
                                                @Html.DropDownListFor(x => x.TestScoreMethodID, Model.AvailableScoringMethods, new { id = "selectScoringMethod", @class = "selectScoringMethod" })
                                            </div>
                                        }
                                        <div class="u-inline-block u-w-105">
                                            <label class="u-inline-block u-fw-400 u-c-mineshaft" for="VirtualTestSubTypeID"> Navigation Method:</label>
                                        </div>
                                        <div class="u-inline-block " style="width:175px">
                                            @Html.DropDownListFor(x => x.NavigationMethodID, Model.AvailableNavigationMethods, new { id = "selectNavigationMethod", @class = "selectNavigationMethod" })
                                        </div>
                                        @if (!Model.IsSurvey)
                                        {
                                            <div class="u-m-t-10">
                                                <div class="u-inline-block u-w-105">
                                                    <label class="u-inline-block u-fw-400 u-c-mineshaft" for="IsTeacherLed"> Interview-Style Assessment:</label>
                                                </div>
                                                <div class="u-inline-block u-w-100">
                                                    @Html.CheckBoxFor(x => x.IsTeacherLed)
                                                </div>
                                            </div>
                                        }
                                        <div class="u-m-t-10">
                                            <div class="u-inline-block u-w-105">
                                                <label class="u-inline-block u-fw-400 u-c-mineshaft" for="IsCustomItemNaming"> Custom Item Naming:</label>
                                            </div>
                                            <div class="u-inline-block u-w-100">
                                                @Html.CheckBoxFor(x => x.IsCustomItemNaming, new { @class = "nameCustomItemNaming" })
                                            </div>
                                        </div>
                                        @if (!Model.IsSurvey)
                                        {
                                            <div class="u-m-t-10">
                                                <div class="u-inline-block u-w-105">
                                                    <label class="u-inline-block u-fw-400 u-c-mineshaft" for="IsOverwriteTestResults"> Overwrite Test Results</label>
                                                </div>
                                                <div class="u-inline-block u-w-100">
                                                    @Html.CheckBoxFor(x => x.IsOverwriteTestResults, new { @class = "multipleTestResult" })
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    @if (!Model.IsSurvey)
                                    {
                                        <div style="float: left; width: 45%">
                                            <div>
                                                <div class="u-inline-block u-w-160 u-m-t-5">
                                                    <label class="u-inline-block u-fw-400 u-c-mineshaft"> Total Points Possible:</label>
                                                </div>
                                                <div class="u-inline-block" style="width: 50px;">
                                                    <label id="lblTotalPointsPossible">@Model.TotalPointsPossible</label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </fieldset>
                        </div>
                        <div class="divBotButton" style="padding-top: 10px">
                            <button id="btnConfigureBranching" type="button" class="float-right btnConfigureBranching"
                                    style="width: 200px; display:none;">
                                Configure Branching
                            </button>
                            <button id="btnSubmit" type="button" class="float-right btnSave"
                                    onclick="SaveTestProperties()">
                                Save Changes
                            </button>
                        </div>
                    }
                    <div class="clear10"></div>
                </div>
            </div>
        </div>
    </section>
</article>
<script type="text/javascript">
    // Replace the <textarea id="editor"> with an CKEditor
    // instance, using default configurations.
    var basicSciencePaletteSymbol = unescapeHtml('@Model.BasicSciencePaletteSymbol');
    sessionStorage.setItem('basicSciencePaletteSymbol', self.basicSciencePaletteSymbol);
    var nagivationMethod = {
        Linear: "1",
        NormalBranching: "2",
        SectionBasedBranching: "3",
        AlgorithmicBranching: "4"
    }
    $(document).ready(function () {
        $('#hdNavigationMethodID').val('@Model.CurrentNavigationMethodID');

        var linkitProtocol = window.location.protocol;
        var linkitHostname = window.location.hostname;

        MKEditor = {
            imgUrl: "../../Content/themes/TestMaker/",
            audioUrl: "/PassageEditor/AudioUpload/",
            objectId: '0',
            loadAudioUrl: linkitProtocol + "//" + linkitHostname + "/PassageEditor/GetAudio",
            imgUpload: "/PassageEditor/ImageUpload/",
            GetViewReferenceImg: linkitProtocol + "//" + linkitHostname + '/TestAssignmentRegrader/GetViewReferenceImg?imgPath=' //This is config for view image on test maker
        };

        try {
            CKEDITOR.instances['txtTestPropertiesInstruction'].destroy(true);
        } catch (e) {}

        CKEDITOR.replace('txtTestPropertiesInstruction', {
            extraPlugins: 'mathjax,sharedspace,multiplechoice,mathfraction,indent,dialog,contextmenu,liststyle,tabspaces',
            height: 150,
            toolbar: [
                ['JustifyLeft', 'JustifyCenter', 'JustifyRight', '-', 'NumberedList', 'BulletedList'],
                ['Bold', 'Italic', 'Underline'], ['Sameline'],
                ['FontSize', 'Subscript', 'Superscript', '-', 'RemoveFormat'],
                ['Link', 'Unlink', 'Table', 'SpecialChar', 'Indent', 'Outdent', 'Tabspaces', 'ImageUpload']
            ],
            sharedSpaces: {
                top: 'topSpace',
                bottom: 'bottomSpace'
            },
            extraAllowedContent: 'span[stylename]; span(smallText,normalText,largeText,veryLargeText);'
        });

        if (CKEDITOR.env.ie && CKEDITOR.env.version == 8)
            document.getElementById('ie8-warning').className = 'warning';

        xmlInstructionImport($('#xmlContent'));
        populateScoringMethods($('#selectScoringMethod'));
        if(@Model.VirtualTestId == 0) {
            $('#btnSubmit').attr('disabled','disabled');
        }

        refeshConfig();

        //Show button config section branching when VirtualtestsubtypeId = 13 & checkbox sectionbranching checked.
        var hdCurrentNavigationMethodID = $('#hdNavigationMethodID').val();
        if (hdCurrentNavigationMethodID === nagivationMethod.SectionBasedBranching)
        {
            $('#btnConfigureBranching').show();
        }
        if (hdCurrentNavigationMethodID === nagivationMethod.SectionBasedBranching || hdCurrentNavigationMethodID === nagivationMethod.NormalBranching) {
            $("#selectNavigationMethod").val(hdCurrentNavigationMethodID);
        }

        CheckAlgorithmicBranching('@Model.TestScoreMethodID', '@Model.VirtualTestSubTypeID');

        GetDataSetCategories();

    });

    function CheckAlgorithmicBranching(testScoreMethodId, navigationMethodId) {
        if (navigationMethodId && navigationMethodId != 0) {
            $("#selectNavigationMethod").val(navigationMethodId);
        } else {
            $("#selectNavigationMethod").val(0);
        }
    }
    var comboTree1 = null;
    var categoryElementId = '#selectCategoryIDDropdown';

    function GetDataSetCategories() {
        var datasetCategoryID = @Model.DatasetCategoryID;
        var selectedDatasetCategoryID = datasetCategoryID;
        if (datasetCategoryID > 0) {
            selectedDatasetCategoryID = datasetCategoryID
        } else {
            selectedDatasetCategoryID = null
        }
        $.get('@Url.Action("GetDataSetCategoriesToComboTree", "CategoriesAPI")' + '?categoryId=' + selectedDatasetCategoryID, function (categoryList) {
            //defaul linkit category

            comboTree1 = $(categoryElementId).comboTree({
                source: categoryList,
                isMultiple: false,
                cascadeSelect: true,
                collapse: false,
                selected: [selectedDatasetCategoryID]
            });

            $(categoryElementId).change(function(e) {
                $(this).val(comboTree1 ? comboTree1.getSelectedNames() : '');
            });

            if (comboTree1 &&  '@ViewBag.AllowChangeDataSetCategory' === 'False')
            {
                $(categoryElementId).parents('.comboTreeInputWrapper').addClass('disabled');
            }
        });
    }
    function SaveTestProperties() {
        var $divMain = $('#divMain');
        //Check Name
        if ($('#Name').val().trim().length == 0) {
            CustomAlert('Please input Name');
            return;
        }
        if ($('#selectCategoryIDDropdown').val() === '') {
            CustomAlert('Please select the category name');
            return;
        }
        if (!comboTree1._selectedItem) {
            CustomAlert('Please select the category name');
            return;
        }
        var categoryId = comboTree1._selectedItem.id;
        if (!categoryId) {
            CustomAlert('Please select the category name');
            return;
        }

        //check length of Test Instructions:
        if ($("<div>" + CKEDITOR.instances.txtTestPropertiesInstruction.getData() + "</div>").text().length > 10000) {
            popupAlertMessage("alert", "You cannot enter more than 10,000 characters.", 400);
            return;
        }

        ShowBlock($divMain, 'Saving');
        $('#btnSubmit').disableBt();
        $('#success-message').hide();

        $('#xmlContent').val(xmlInstructionExport());

        $("#selectNavigationMethod").removeAttr("disabled");
        var testData = $('#editTestPropertiesForm').serialize();
        testData = testData + "&DatasetCategoryID=" + categoryId;
        var url = '@Url.Action("EditTestProperties")';
        $.ajax({
            url: url,
            type: 'POST',
            data: testData,
            success: function (response) {
                var $errorMsg = $('#error-messages');
                var $successMsg = $('#success-message');

                $divMain.unblock();

                if (response.Success == true) {
                    $errorMsg.hide();
                    $successMsg.show();
                    resetTestIntrustionEditorDirty();//define in Index.cshtml
                    window.setTimeout(function () {
                        $successMsg.hide();
                    }, 5000);
                    $('#hdVirtualTestName').val($('#Name').val());

                    $('#hdNavigationMethodID').val(response.NavigationMethodID);
                    $('#hdVirtualTestSubTypeID').val(response.NavigationMethodID);

                    displayTestName( htmlEncode($('#Name').val()));
                    $('#lblTotalPointsPossible').text(response.TotalPointsPossible);

                } else {
                    $errorMsg.show().addClass('no-margin').html('<ul><li>' + response.ErrorMessage + '</li></ul>');
                }

                $('#btnSubmit').enableBt();
            },
            failure: function (response) {
                $divMain.unblock();
                alert(response);
            }
        });
    }

    //Copy and modify from Content\themes\TeskMaker\ckeditor_mk.js -> xmlPassageImport
    function xmlInstructionImport(element) {

        var xmlContent = "";
        if (element.val() != "") {
            var passageAudioLink = "";
            xmlContent = element.val();

            CKEDITOR.instances["txtTestPropertiesInstruction"].setData(xmlContent, function () {
                //This to make sure state of CKEditor is false after loaded data. Waiting 1s
                var that = this;
                window.setTimeout(function () {
                    that.resetDirty();
                }, 1000);

            });

            CKEDITOR.instances["txtTestPropertiesInstruction"].resetDirty();
        }
    }
    //Copy and modify from xmlPassageExport
    function xmlInstructionExport() {
        return CKEDITOR.instances["txtTestPropertiesInstruction"].getData();;
    }

    function populateScoringMethods(scoringMethodSelect) {
        scoringMethodSelect.empty();
        $.get('@Url.Action("GetTestScoreMethods")', function (response) {
            addDefaultOptionToUserSchool(scoringMethodSelect, "Scoring Method");
            addSelectListItems(scoringMethodSelect, response);
            if(@Model.TestScoreMethodID <= 0) {
                scoringMethodSelect.val(1);//display default
            } else {
                scoringMethodSelect.val(@Model.TestScoreMethodID);
            }
        });
    }

    function showModalDialogBG() {
        var win = $('body');
        $('body').prepend('<div class="ui-widget-overlay" style="width: ' + win.width() + 'px; height: ' + win.height() + 'px; z-index: 1001;"></div>');
    }

    function okPopUpCustomItemNaming() {
        $('#divAlertCustomItemNaming').dialog('close');
        $('#IsCustomItemNaming').prop("checked", false);
        SaveTestProperties();
    }

    function cancelPopUpCustomItemNaming() {
        $('#divAlertCustomItemNaming').dialog('close');
    }

    $("input:checkbox[class='nameCustomItemNaming']").click(function () {
        var isChecked = $('#IsCustomItemNaming').is(':checked');
        if (!isChecked) {
            $('#IsCustomItemNaming').prop("checked", true);
            $(".dialog").dialog("close");
            $('body').append('<div id="divAlertCustomItemNaming" class="dialog"></div>');
            var html = '<section class="grid_5">\
                            <div class="block-border" style="width: 300px;">\
                                <div class="block-content form" style="text-align: center;">\
                                    <div>Custom item names will be lost.</div>\
                                    <p style="margin:10px">\
                                        <button id="btnOk" type="button" name="ok" onclick="okPopUpCustomItemNaming()">OK</button>\
                                        <button id="btnCancel" type="button" name="cancel" onclick="cancelPopUpCustomItemNaming()">Cancel</button>\
                                    </p>\
                                </div>\
                            </div>\
                        </section>';
            $("#divAlertCustomItemNaming").append(html);
            $('#divAlertCustomItemNaming').dialog({
                title: "",
                open: function () {
                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }
                    //Create overlay for popup
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                },
                beforeclose: function () {
                    return true;
                },
                close: function () {
                    $('#divAlertCustomItemNaming').remove();
                    $("body .my-overlay").remove();
                },
                modal: false,
                width: 360,
                resizable: false
            });
        }
    });

    $("input:checkbox[class='nameBranchingTest']").change(function () {
        var isChecked = $('#IsSectionBranchingTest').is(':checked');
        if (isChecked == true)
        {
            $('#btnConfigureBranching').show();
        }
        else
        {
            $('#btnConfigureBranching').hide();
        }
    });

    $("input:checkbox[class='nameBranchingTest']").on('click', function() {
        // in the handler, 'this' refers to the box clicked on
        var $box = $(this);
        if ($box.is(":checked")) {
            // the name of the box is retrieved using the .attr() method
            // as it is assumed and expected to be immutable
            var group = "input:checkbox[class='nameBranchingTest']";
            // the checked state of the group/box on the other hand will change
            // and the current value is retrieved using .prop() method
            $(group).prop("checked", false);
            $box.prop("checked", true);
        } else {
            $box.prop("checked", false);
        }
    });
    $(document).on('keydown', '.DivFieldSet #Name, .DivFieldSet #Title, .DivFieldSet #QuestionGroupTitle', function(e) {
    if (e.keyCode == 13) {
        var inputs = $(this).parents("form").eq(0).find(":input");
        if (inputs[inputs.index(this) + 1] != null) {
            inputs[inputs.index(this) + 1].focus();
        }
        e.preventDefault();
        return false;
    }
    })
    $('#btnConfigureBranching').unbind('click');
    $('#btnConfigureBranching').click(function() {
        ShowBlock($('#divMain'), 'Loading');

        var url = '@Url.Action("InitSectionBranching")';

        $.ajax({
            url: url,
            cache: false
        }).done(function (html) {
            $('#divMain').unblock();
            $('body').append('<div id="divSectionBranchingPanel" class="dialog"></div>');
            $("#divSectionBranchingPanel").append(html);
            $('#divSectionBranchingPanel').dialog({
                title: "",
                open: function () {
                    //If width of popup gt window width popup auto show on the left
                    var currentPopup = $(this);
                    if (currentPopup.width() > $(window).width()) {
                        currentPopup.parent().css({ "left": "0" });
                    }
                    //Create overlay for popup
                    $("body").append('<div class="my-overlay" style="z-index: ' + ($.ui.dialog.currentZ() - 1) + ';width:' + $(document).width() + 'px;height:' + $(document).height() + 'px;background-color: black;opacity: 0.3;position: absolute;top:0px;left: 0px;"></div>');
                },
                beforeclose: function () {

                },
                close: function () {
                    $('#divSectionBranchingPanel').remove();
                    $("body .my-overlay").remove();
                },
                modal: false,
                width: 1006,
                resizable: false
            });
        });
        $(".close").unbind("click");
        $(".close").live("click", function (e) {
            e.preventDefault();
        });
    });

    $('#selectNavigationMethod').on('change', function (e) {
        var optionSelected = $("option:selected", this);
        var valueSelected = this.value;
        if (valueSelected === nagivationMethod.SectionBasedBranching) {
            $('#btnConfigureBranching').show();
        } else {
            $('#btnConfigureBranching').hide();
        }

        var currentSubTypeID = $('#hdNavigationMethodID').val();
        if (currentSubTypeID == nagivationMethod.NormalBranching || currentSubTypeID == nagivationMethod.SectionBasedBranching || currentSubTypeID == nagivationMethod.AlgorithmicBranching) {
            //Show popup message
            if (valueSelected !== currentSubTypeID) {
                CustomConfirm({
                    message: 'Please note: Changing the navigation method will cause any existing branching configurations to be lost.',
                    textLeft: true,
                    yesMessage: 'OK',
                    yesWidth: 80,
                    noMessage: 'Cancel',
                    noWidth: 80,
                    yes: function () {  },
                    no: function () {
                        $("#selectNavigationMethod").val($('#hdNavigationMethodID').val());
                        if ($('#hdNavigationMethodID').val() === nagivationMethod.SectionBasedBranching) {
                            $('#btnConfigureBranching').show();
                        } else {
                            $('#btnConfigureBranching').hide();
                        }
                    },
                    open: function () { },
                    close: function () { }
                });
            }
        }
    });

    $('#selectScoringMethod').on('change', function (e) {
        var optionSelected = $("option:selected", this);
        var valueSelected = this.value;
        CheckAlgorithmicBranching(valueSelected);
    });
</script>
