<style>
    .noPadding {
        padding-left: 0px;
        padding-right: 0px;
        padding-bottom: 0px;
        padding-top: 0px;
    }

    .divItem {
        height: 270px;
        width: 270px
    }

    .divInputName {
        float: left;
        padding-left: 5px;
        padding-top: 5px
    }

    .divButtonAdd {
        float: left;
        padding-top: 5px
    }

    .resource-green-button {
        background: -moz-linear-gradient(center top, #FFFFFF, #72C6E4 4%, #0C5FA5) repeat scroll 0 0 rgba(0, 0, 0, 0) !important;
    }

    .LinkitDefaultTagForm {
        min-width: 827px;
        min-height: 277px;
    }
</style>
<!-- Style for scrollbar-->
<style>
    /*********** Default css ***********/
    .dataTableDefaultTagStyle .dataTables_empty div {
        /*No data*/
        width: 264px !important;
    }

    .dataTableDefaultTagStyle tr td {
        padding-left: 0px;
        padding-right: 0px;
    }

    .dataTableDefaultTagStyle {
        width: 270px !important;
        height: 193px;
    }

        .dataTableDefaultTagStyle tbody img {
            margin-left: 5px !important;
            margin-right: 5px !important;
        }

        .dataTableDefaultTagStyle thead,
        .dataTableDefaultTagStyle tbody {
            display: block;
        }

        .dataTableDefaultTagStyle tbody {
            height: 158px;
            overflow: auto;
            overflow-x: hidden;
        }

            .dataTableDefaultTagStyle tbody td {
                /*word-break: break-all;*/
                word-wrap: break-word;
            }
            /* Padding content inside div */
            .dataTableDefaultTagStyle tbody tr td div {
                padding-left: 3px !important;
                padding-right: 3px !important;
            }

            .dataTableDefaultTagStyle tbody td:nth-of-type(1) div {
                width: 30px;
            }

            .dataTableDefaultTagStyle tbody td:nth-of-type(2) div {
                width: 211px;
            }

        .dataTableDefaultTagStyle thead th:nth-of-type(1) {
            width: 15px !important;
        }

        .dataTableDefaultTagStyle thead th:nth-of-type(2) {
            width: 213px !important;
        }

    /*********** Has scroll bar ***********/
    .scrolldataTableDefaultTagStyle tbody td:nth-of-type(2) div {
        width: 211px;
    }
    /*********** No scroll bar ***********/
    .noscrolldataTableDefaultTagStyle tbody td:nth-of-type(2) div {
        width: 228px;
    }
</style>

<style>
    /*Fix for IE9*/
    .dataTableDefaultTagStyleIE9 {
        margin-top: -4px !important;
        height: auto !important;
    }

        .dataTableDefaultTagStyleIE9 tbody tr {
            height: 100% !important;
        }

    .divdataTableDefaultTagStyleIE9 {
        margin-top: -22px !important;
        height: 149px !important;
    }

    .divdataTableHeaderDefaultTagStyleIE9 {
        margin-top: -12px !important;
    }

    /***List tag for search***/
    .ui-menu .ui-menu-item:hover {
        cursor: pointer;
    }

    .ui-autocomplete {
        z-index: 2000 !important;
        max-height: 200px !important;
        overflow-x: hidden;
        overflow-y: visible;
        width: 260px !important;
        position: absolute !important;
    }

    .ui-menu .ui-menu-item {
        background-color: transparent;
    }
    /***List tag for search***/
</style>

<section>

    <div class="block-content form LinkitDefaultTagForm" style="margin-top: -27px">
        <label style="margin-top:-10px">
            @if (ViewBag.HasManyQtiItem)
            {
                <text>
                    Shared Tags
                </text>
            }
            else
            {
                <text>
                    Associated Tags
                </text>
            }
        </label>
        <div style="float: left; margin-top:0px">
            <div id="divTopic" style="float: left;padding-right: 5px">
                <div class="block-content form noPadding divItem">
                    <div style="float: left; height:230px; width: 100%; overflow: hidden;" class="noPadding">
                        <table id="dataTableTopic" class="datatable table no-margin noPadding dataTableDefaultTagStyle" style="width: 100%; padding-top: 5px !important">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 15px"></th>
                                    <th scope="col">
                                        <span class="column-sort">
                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                        </span>
                                        Topics
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div style="float: left; height: 40px; width: 100%" class="grey-bg noPadding">
                        <div class="divInputName" style="width: 170px;">
                            <input type="text" id="Topic" style="width: 100%" maxlength="200" />
                        </div>
                        <div class="divButtonAdd" style="width: 80px;">
                            <button id="btnAddTopic" type="button" class="grey" tabindex="3" onclick="AddTopic()" style="margin-left:25px">Add</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="divSkill" style="float: left;padding-right: 5px">
                <div class="block-content form noPadding divItem">
                    <div style="float: left; height:230px; width: 100%; overflow: hidden;" class="noPadding">
                        <table id="dataTableSkill" class="datatable table no-margin noPadding dataTableDefaultTagStyle" style="width: 100%;padding-top: 5px !important">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 15px"></th>
                                    <th scope="col">
                                        <span class="column-sort">
                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                        </span>
                                        Skills
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div style="float: left; height: 40px; width: 100%" class="grey-bg noPadding">
                        <div class="divInputName" style="width: 170px;">
                            <input type="text" id="Skill" style="width: 100%" maxlength="400" />
                        </div>
                        <div class="divButtonAdd" style="width: 80px;">
                            <button id="btnAddSkill" type="button" class="grey" tabindex="3" onclick="AddSkill()" style="margin-left:25px">Add</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="divOther" style="float: left">
                <div class="block-content form noPadding divItem">
                    <div style="float: left; height:230px; width: 100%; overflow: hidden;" class="noPadding">
                        <table id="dataTableOther" class="datatable table no-margin noPadding dataTableDefaultTagStyle" style="width: 100%;padding-top: 5px !important">
                            <thead>
                                <tr>
                                    <th scope="col" style="width: 15px"></th>
                                    <th scope="col">
                                        <span class="column-sort">
                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                        </span>
                                        Other
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div style="float: left; height: 40px; width: 100%" class="grey-bg noPadding">
                        <div class="divInputName" style="width: 170px;">
                            <input type="text" id="Other" style="width: 100%" maxlength="400" />
                        </div>
                        <div class="divButtonAdd" style="width: 80px;">
                            <button id="btnAddOther" type="button" class="grey" tabindex="3" onclick="AddOther()" style="margin-left:25px">Add</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script type="text/javascript">

    $(function() {
        PopulateTopic();
        PopulateSkill();
        PopulateOther();
        $("#dataTableTopic_wrapper").css("margin","0");
        $("#dataTableSkill_wrapper").css("margin","0");
        $("#dataTableOther_wrapper").css("margin","0");
        bindEvents();

        var firstTimeTopic = true;
        $("#Topic").keyup(function () {
            if ($.trim($("#Topic").val()).length > 0) {
                $("#btnAddTopic").addClass('resource-green-button');
                $("#btnAddTopic").removeClass('grey');
            } else {
                $("#btnAddTopic").removeClass('resource-green-button');
                $("#btnAddTopic").addClass('grey');
            }
        });
        var firstTimeSkill = true;
        $("#Skill").keyup(function () {
            if ($.trim($("#Skill").val()).length > 0) {
                $("#btnAddSkill").addClass('resource-green-button');
                $("#btnAddSkill").removeClass('grey');
            } else {
                $("#btnAddSkill").removeClass('resource-green-button');
                $("#btnAddSkill").addClass('grey');
            }
        });
        var firstTimeOther = true;
        $("#Other").keyup(function () {
            if ($.trim($("#Other").val()).length > 0) {
                $("#btnAddOther").addClass('resource-green-button');
                $("#btnAddOther").removeClass('grey');
            } else {
                $("#btnAddOther").removeClass('resource-green-button');
                $("#btnAddOther").addClass('grey');
            }
        });

        $("#Other").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetSearchAllOthersTags", "VirtualTest")',
                    type: "get",
                    dataType: "json",
                    data: {
                        tagSearch: encodeURIComponent(htmlEncode(request.term)),
                        virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString'
                    },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 2
        });

        $("#Topic").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetSearchAllTopicTags", "VirtualTest")',
                    type: "get",
                    dataType: "json",
                    data: {
                        tagSearch: encodeURIComponent(htmlEncode(request.term)),
                        virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString'
                    },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 2
        });

        $("#Skill").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetSearchAllSkillTags", "VirtualTest")',
                    type: "get",
                    dataType: "json",
                    data: {
                        tagSearch: encodeURIComponent(htmlEncode(request.term)),
                        virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString'
                    },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 2
        });
    });

    function PopulateTopic() {

        var optionsTopic = {
            bServerSide: true,
            bFilter:false, // not allow search filter
            sAjaxSource: '@Url.Action("GetMutualTopicsOfVirtualQuestions")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualQuestionIdString", value: '@ViewBag.VirtualQuestionIdString' },
                    { name: "rubricCategoryId", value: Number.isInteger(vm.selectedCategoryId()) ? vm.selectedCategoryId() : 0 }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        //when passing parameter to searchbox then click on allpy filter, tabase does not recognize parameter, need to assign parameter to searchbox manually
                        if (item.value.length == 0 && $("input[aria-controls|='dataTableTopic']").val().length > 0) {
                            item.value = $("input[aria-controls|='dataTableTopic']").val();
                        }

                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''");
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;//only process searchbox
                    }
                    if(item.name =='iDisplayLength') {
                        item.value = 10000;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'TopicID', bSearchable: false, bSortable: false},
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true},
                { sType: 'integer', sName: 'RubricQuestionCategoryID', bSearchable: false, bSortable: false, bVisible: false}
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayIconTopic(aData[0], aData[2]));
                $('td:eq(1)', nRow).html($('<div />').text(aData[1]).html());
                addWordBreakToTableCell($('td:eq(1)', nRow), 25, aData[1]);
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTableTopic'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#dataTableTopic').unblock();
                $('.with-tip').tip();
                $('#dataTableTopic_wrapper .block - controls').css('marginTop', '100px');
                formatTableForAddingVertialScrollBar('dataTableTopic', 'scrolldataTableDefaultTagStyle', 'noscrolldataTableDefaultTagStyle', 'scrolldataTableDefaultTagStyleIE9', 'noscrolldataTableDefaultTagStyleIE9');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableTopic').addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableTopic').addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableTopicHeader').addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }
            }
        };

        $("#dataTableTopic").data("options", optionsTopic);
        initializeDataTable($("#dataTableTopic"));
    }

    function DisplayIconTopic(topicId, rubricQuestionCategoryId) {
        var removeIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        var removeIconLink = '<a href="javascript:void(0);" title="Remove" class="with-tip" '
            + 'onclick="RemoveTopicTag('+ topicId + ',' + rubricQuestionCategoryId + ')"'
            + '><img src ="' + removeIcon + '" width="16" height="16" style="margin-right: 4px"></a>';
        return removeIconLink;
    }
    function RemoveTopicTag(topicId, rubricQuestionCategoryId) {
        ConfirmTopicDelete("Do you want to remove this tag?", topicId, rubricQuestionCategoryId);

    }
    function AddTopic() {
        if (!vm.isReadyToAssign()) {
            vm.isInvalidCategory(true);
            return;
        } else {
            vm.isInvalidCategory(false);
        }

        var name = $("#Topic").val();
        name = $.trim(name);
        if(name.length == 0) {
            return;
        }
        if(name.length > 200) {
            CustomAlert("Name of Topic Tag is not over 200 characters.",true);
            return;
        }
        $("#btnAddTopic").attr('disabled', 'disabled');

        $.ajax({
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            url: '@Url.Action("AssignTopicTagForVirtualQuestions")',
            data: JSON.stringify({
                virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
                name: encodeURIComponent(name),
                questionCategoryTags: vm.questionCategoryTags()
            }),
            traditional: true,
            success: function (response) {
                if (response.Success == 'Success') {
                    ui.dataTableTopic.fnDraw();
                    $("#btnAddTopic").removeAttr('disabled');
                } else {
                    CustomAlert(response.errorMessage);
                    $("#btnAddTopic").removeAttr('disabled');
                }
            },
            error: function (xhr, status, error) {
                CustomAlert(error);
                $("#btnAddTopic").removeAttr('disabled');
            }
        });
    }

    function PopulateSkill() {

        var optionsSkill = {
            bServerSide: true,
            bFilter:false, // not allow search filter
            sAjaxSource: '@Url.Action("GetMutualSkillsVirtualQuestions")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualQuestionIdString", value: '@ViewBag.VirtualQuestionIdString' },
                    { name: "rubricCategoryId", value: Number.isInteger(vm.selectedCategoryId()) ? vm.selectedCategoryId() : 0 }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        //when passing parameter to searchbox then click on allpy filter, tabase does not recognize parameter, need to assign parameter to searchbox manually
                        if (item.value.length == 0 && $("input[aria-controls|='dataTableSkill']").val().length > 0) {
                            item.value = $("input[aria-controls|='dataTableSkill']").val();
                        }

                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''");
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;//only process searchbox
                    }
                    if(item.name =='iDisplayLength') {
                        item.value = 10000;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'LessonOneID', bSearchable: false, bSortable: false,sWidth:"30px"},
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true, sWidth: '300px' },
                { sType: 'integer', sName: 'RubricQuestionCategoryID', bSearchable: false, bSortable: false, bVisible: false}
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayIconSkill(aData[0], aData[2]));
                $('td:eq(1)', nRow).html($('<div />').text(aData[1]).html());
                addWordBreakToTableCell($('td:eq(1)', nRow), 25, aData[1]);
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTableSkill'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#dataTableSkill').unblock();
                $('.with-tip').tip();
                $('#dataTableSkill_wrapper .block - controls').css('marginTop', '100px');

                formatTableForAddingVertialScrollBar('dataTableSkill', 'scrolldataTableDefaultTagStyle', 'noscrolldataTableDefaultTagStyle', 'scrolldataTableDefaultTagStyleIE9', 'noscrolldataTableDefaultTagStyleIE9');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableSkill').addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableSkill').addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableSkillHeader').addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }
            }
        };

        $("#dataTableSkill").data("options", optionsSkill);
        initializeDataTable($("#dataTableSkill"));
    }
    function DisplayIconSkill(lessonOneId, rubricQuestionCategoryId) {
        var removeIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        var removeIconLink = '<a href="javascript:void(0);" title="Remove" class="with-tip" '
            + 'onclick="RemoveSkillTag(' + lessonOneId + ',' + rubricQuestionCategoryId + ')"'
            + '><img src ="' + removeIcon + '" width="16" height="16" style="margin-right: 4px"></a>';
        return removeIconLink;
    }
    function RemoveSkillTag(lessonOneId, rubricQuestionCategoryId) {
        ConfirmSkillDelete("Do you want to remove this tag?",lessonOneId, rubricQuestionCategoryId);

    }
    function AddSkill() {
        if (!vm.isReadyToAssign()) {
            vm.isInvalidCategory(true);
            return;
        } else {
            vm.isInvalidCategory(false);
        }

        var name = $("#Skill").val();
        name = $.trim(name);
        if(name.length == 0) {
            return;
        }
        if(name.length > 400) {
            CustomAlert("Name of Skill Tag is not over 400 characters.");
            return;
        }
        $("#btnAddSkill").attr('disabled', 'disabled');

        $.ajax({
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            url: '@Url.Action("AssignSkillTagForVirtualQuestions")',
            data: JSON.stringify({
                virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
                name: encodeURIComponent(name),
                questionCategoryTags: vm.questionCategoryTags()
            }),
            traditional: true,
            success: function (response) {
                if (response.Success == 'Success') {
                    ui.dataTableSkill.fnDraw();
                    $("#btnAddSkill").removeAttr('disabled');
                } else {
                    CustomAlert(response.errorMessage);
                    $("#btnAddSkill").removeAttr('disabled');
                }
            },
            error: function (xhr, status, error) {
                CustomAlert(error);
                $("#btnAddSkill").removeAttr('disabled');
            }
        });
    }

    function PopulateOther() {

        var optionsOther = {
            bServerSide: true,
            bFilter:false, // not allow search filter
            sAjaxSource: '@Url.Action("GetMutualOthersOfVirtualQuestions")',
            fnServerParams: function (aoData) {
                aoData.push(
                    { name: "virtualQuestionIdString", value: '@ViewBag.VirtualQuestionIdString' },
                    { name: "rubricCategoryId", value: Number.isInteger(vm.selectedCategoryId()) ? vm.selectedCategoryId() : 0 }
                );

                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        //when passing parameter to searchbox then click on allpy filter, tabase does not recognize parameter, need to assign parameter to searchbox manually
                        if (item.value.length == 0 && $("input[aria-controls|='dataTableOther']").val().length > 0) {
                            item.value = $("input[aria-controls|='dataTableOther']").val();
                        }

                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''");
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;//only process searchbox
                    }
                    if(item.name =='iDisplayLength') {
                        item.value = 10000;
                    }
                }
            },
            bAutoWidth: false,
            "oLanguage": {
                "sEmptyTable": "No Tag"
            },
            bPaginate: false,
            iDisplayLength: 1000,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'integer', sName: 'LessonTwoID', bSearchable: false, bSortable: false,sWidth:"30px"},
                { sType: 'string', sName: 'Name', bSearchable: true, bSortable: true, sWidth: '300px' },
                { sType: 'integer', sName: 'RubricQuestionCategoryID', bSearchable: false, bSortable: false, bVisible: false}
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(DisplayIconOther(aData[0], aData[2]));
                $('td:eq(1)', nRow).html($('<div />').text(aData[1]).html());
                addWordBreakToTableCell($('td:eq(1)', nRow), 25, aData[1]);
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTableOther'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#dataTableOther').unblock();
                $('.with-tip').tip();
                $('#dataTableOther_wrapper .block - controls').css('marginTop', '100px');

                formatTableForAddingVertialScrollBar('dataTableOther', 'scrolldataTableDefaultTagStyle', 'noscrolldataTableDefaultTagStyle', 'scrolldataTableDefaultTagStyleIE9', 'noscrolldataTableDefaultTagStyleIE9');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    //Fix for IE9
                    $('#dataTableOther').addClass('dataTableDefaultTagStyleIE9');
                    $('#divdataTableOther').addClass('divdataTableDefaultTagStyleIE9');//generated in formatTableForAddingVertialScrollBar
                    $('#dataTableOtherHeader').addClass('divdataTableHeaderDefaultTagStyleIE9'); //generated in formatTableForAddingVertialScrollBar
                }
            }
        };

        $("#dataTableOther").data("options", optionsOther);
        initializeDataTable($("#dataTableOther"));
    }
    function DisplayIconOther(lessonTwoId, rubricQuestionCategoryId) {
        var removeIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        var removeIconLink = '<a href="javascript:void(0);" title="Remove" class="with-tip" '
            + 'onclick="RemoveOtherTag(' + lessonTwoId + ',' + rubricQuestionCategoryId + ')"'
            + '><img src ="' + removeIcon + '" width="16" height="16" style="margin-right: 4px"></a>';
        return removeIconLink;
    }
    function RemoveOtherTag(lessonTwoId, rubricQuestionCategoryId) {
        ConfirmOtherDelete("Do you want to remove this tag?", lessonTwoId, rubricQuestionCategoryId);

    }
    function AddOther() {
        if (!vm.isReadyToAssign()) {
            vm.isInvalidCategory(true);
            return;
        } else {
            vm.isInvalidCategory(false);
        }

        var name = $("#Other").val();
        name = $.trim(name);
        if(name.length == 0) {
            return;
        }
        if(name.length > 400) {
            CustomAlert("Name of Other Tag is not over 400 characters.");
            return;
        }
        $("#btnAddOther").attr('disabled', 'disabled');

        $.ajax({
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            url: '@Url.Action("AssignOtherTagForVirtualQuestions")',
            data: JSON.stringify({
                virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
                name: encodeURIComponent(name),
                questionCategoryTags: vm.questionCategoryTags()
            }),
            traditional: true,
            success: function (response) {
                if (response.Success == 'Success') {
                    ui.dataTableOther.fnDraw();
                    $("#btnAddOther").removeAttr('disabled');
                } else {
                    //alert(response.errorMessage);
                    CustomAlert(response.errorMessage);
                    $("#btnAddOther").removeAttr('disabled');
                }
            },
            error: function (xhr, status, error) {
                CustomAlert(error);
                $("#btnAddOther").removeAttr('disabled');
            }
        });
    }
    function bindEvents() {
        $('button[data-dialog="close"]').die('click');
        $(document).on('click', 'button[data-dialog="close"]', function (e) {

            var self = $(e.target);
            self.closest('.dialog').dialog('close');

        });

    }
</script>
<!-- Custom confirm popup window -->
<script type="text/javascript">
    function ConfirmTopicDelete(message, id, rubricQuestionCategoryId) {
        var hbody = $("body").height() - 109;
        var strHtml = '<section class="grid_5" style="height:140px;">' +
            '<div class="block-border" style="width: 350px; min-height: 100px;">' +
            '<div class="block-content form" style="padding-bottom:0px">' +
            '<table cellpadding="0" cellspacing="0" style="margin-top:-15px;"><tr><td><p class="styleMessage" style="margin-bottom:10px;">' + message +
            '</p></td></tr><tr><td>' +
            '<p class="plButton"  style="margin-bottom:10px;text-align: center">' +
            '<button id="btnOk" type="button" name="ok" onclick="ConfirmTopicDeleteOkClick(' + id + ',' + rubricQuestionCategoryId + ')">OK</button>' +
            '<button id="btnCancel" type="button" name="cancel" onclick="ConfirmTopicDeleteCancelClick()" style="margin-left:10px;">Cancel</button>' +
            '</p></td></tr></table></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "ConfirmTopicDeleteDialog")
            .appendTo("body")
            .dialog({
                open: function () {
                    $('#ConfirmTopicDeleteDialog').prev().css('top', '34px');
                },
                close: function () { $(this).remove(); },
                modal: true,
                width: 420,
                maxheight: 100,
                resizable: false
            });

        $(".ui-dialog").css("height", hbody);

    }

    function ConfirmTopicDeleteOkClick(topicId, rubricQuestionCategoryId) {
        $.post('@Url.Action("RemoveTopicTagForVirtualQuestions")', {
            virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
            topicId: topicId,
            rubricQuestionCategoryId: vm.selectedCategoryId()
        }, function (response) {
            if (response.Success == 'Success') {
                $("#ConfirmTopicDeleteDialog").dialog("close");
                ui.dataTableTopic.fnDraw();
            } else {
                //alert(response.errorMessage);
                CustomAlert(response.errorMessage);
            }

        });

    }

    function ConfirmTopicDeleteCancelClick() {
        $("#ConfirmTopicDeleteDialog").dialog("close");
    }

    function ConfirmSkillDelete(message, id, rubricQuestionCategoryId) {
        var hbody = $("body").height() - 109;
        var strHtml = '<section class="grid_5" style="height:140px;">' +
            '<div class="block-border" style="width: 350px; min-height: 100px;">' +
            '<div class="block-content form" style="padding-bottom:0px">' +
            '<table cellpadding="0" cellspacing="0" style="margin-top:-15px;"><tr><td><p class="styleMessage" style="margin-bottom:10px;">' + message +
            '</p></td></tr><tr><td>' +
            '<p class="plButton"  style="margin-bottom:10px;text-align: center">' +
            '<button id="btnOk" type="button" name="ok" onclick="ConfirmSkillDeleteOkClick(' + id + ',' + rubricQuestionCategoryId + ')">OK</button>' +
            '<button id="btnCancel" type="button" name="cancel" onclick="ConfirmSkillDeleteCancelClick()" style="margin-left:10px;">Cancel</button>' +
            '</p></td></tr></table></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "ConfirmSkillDeleteDialog")
            .appendTo("body")
            .dialog({
                open: function () {
                    $('#ConfirmSkillDeleteDialog').prev().css('top', '34px');
                },
                close: function () { $(this).remove(); },
                modal: true,
                width: 420,
                maxheight: 100,
                resizable: false
            });

        $(".ui-dialog").css("height", hbody);

    }

    function ConfirmSkillDeleteOkClick(lessonOneId, rubricQuestionCategoryId) {
        $.post('@Url.Action("RemoveSkillTagForVirtualQuestions")', {
            virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
            lessonOneId: lessonOneId,
            rubricQuestionCategoryId: vm.selectedCategoryId()
        }, function (response) {
            if (response.Success == 'Success') {
                $("#ConfirmSkillDeleteDialog").dialog("close");
                ui.dataTableSkill.fnDraw();
            } else {
                //alert(response.errorMessage);
                CustomAlert(response.errorMessage);
            }

        });

    }

    function ConfirmSkillDeleteCancelClick() {
        $("#ConfirmSkillDeleteDialog").dialog("close");
    }

    function ConfirmOtherDelete(message, id, rubricQuestionCategoryId) {
        var hbody = $("body").height() - 109;
        var strHtml = '<section class="grid_5" style="height:140px;">' +
            '<div class="block-border" style="width: 350px; min-height: 100px;">' +
            '<div class="block-content form" style="padding-bottom:0px">' +
            '<table cellpadding="0" cellspacing="0" style="margin-top:-15px;"><tr><td><p class="styleMessage" style="margin-bottom:10px;">' + message +
            '</p></td></tr><tr><td>' +
            '<p class="plButton"  style="margin-bottom:10px;text-align: center">' +
            '<button id="btnOk" type="button" name="ok" onclick="ConfirmOtherDeleteOkClick(' + id + ',' + rubricQuestionCategoryId + ')">OK</button>' +
            '<button id="btnCancel" type="button" name="cancel" onclick="ConfirmOtherDeleteCancelClick()" style="margin-left:10px;">Cancel</button>' +
            '</p></td></tr></table></div></div></section>';
        $("<div></div>")
            .html(strHtml)
            .addClass("dialog")
            .attr("id", "ConfirmOtherDeleteDialog")
            .appendTo("body")
            .dialog({
                open: function () {
                    $('#ConfirmOtherDeleteDialog').prev().css('top', '34px');
                },
                close: function () { $(this).remove(); },
                modal: true,
                width: 420,
                maxheight: 100,
                resizable: false
            });

        $(".ui-dialog").css("height", hbody);

    }

    function ConfirmOtherDeleteOkClick(lessonTwoId, rubricQuestionCategoryId) {
        $.post('@Url.Action("RemoveOtherTagForVirtualQuestions")', {
            virtualQuestionIdString: '@ViewBag.VirtualQuestionIdString',
            lessonTwoId: lessonTwoId,
            rubricQuestionCategoryId: vm.selectedCategoryId()
        }, function (response) {
            if (response.Success == 'Success') {
                $("#ConfirmOtherDeleteDialog").dialog("close");
                ui.dataTableOther.fnDraw();
            } else {
                //alert(response.errorMessage);
                CustomAlert(response.errorMessage);
            }

        });

    }

    function ConfirmOtherDeleteCancelClick() {
        $("#ConfirmOtherDeleteDialog").dialog("close");
    }
</script>
