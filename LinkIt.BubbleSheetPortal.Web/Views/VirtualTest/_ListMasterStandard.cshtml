<script type="text/javascript" src="@Url.Content("~/Scripts/knockout-3.0.0.js")"></script>
<style type="text/css">
    .grid_10 {
        margin-left: 0px;
        margin-right: 0px;
        width: 834px !important;
    }

    tr.even.row_selected td {
        background-color: #82CAFA !important;
    }

    tr.odd.row_selected td {
        background-color: #82CAFA !important;
    }

    #dataTableMasterStandard tr td {
        padding-left: 0px !important;
        padding-right: 0px !important;
    }

    #dataTableAssignedMasterStandard tr td {
        padding-left: 0px;
        padding-right: 0px;
    }

    .ui-widget-header {
        right: 0px !important;
    }
</style>
<!-- Style for scrollbar-->
<style>
    /*********** Default css ***********/
    #dataTableMasterStandard tbody tr {
        height: 100% !important; /* Fix for IE9*/
    }

    #dataTableMasterStandardHeader thead tr {
        height: 100% !important; /* Fix for IE9*/
    }
    /*No data*/
    #dataTableMasterStandard .dataTables_empty div {
        width: 398px !important;
        height: 100%;
    }

    .dataTableMasterStandardStyle td img {
        padding-left: 3px;
        padding-right: 3px;
    }

    .dataTableMasterStandardStyle thead,
    .dataTableMasterStandardStyle tbody {
        display: block;
    }

    .dataTableMasterStandardStyle tbody {
        height: 273px;
        overflow: auto;
        overflow-x: hidden;
    }

    .dataTableMasterStandardStyle {
        width: 399px !important;
        height: 304px;
    }

        .dataTableMasterStandardStyle tbody tr td {
            /*word-break: break-all;*/
            word-wrap: break-word;
        }

            /* Set width for  div in td*/
            /* Padding content inside div */
            .dataTableMasterStandardStyle tbody tr td div {
                padding-left: 3px !important;
                padding-right: 3px !important;
            }

            .dataTableMasterStandardStyle tbody tr td:nth-of-type(1) div {
                width: 36px;
            }

            .dataTableMasterStandardStyle tbody tr td:nth-of-type(2) div {
                width: 33px;
            }

            .dataTableMasterStandardStyle tbody tr td:nth-of-type(3) div {
                width: 93px;
            }

        /* Set width for  th*/
        .dataTableMasterStandardStyle thead th:nth-of-type(1) {
            width: 21px;
        }

        .dataTableMasterStandardStyle thead th:nth-of-type(2) {
            width: 18px;
        }

        .dataTableMasterStandardStyle thead th:nth-of-type(3) {
            width: 78px;
        }

    /*********** Has scroll bar ***********/
    .scrollDataTableMasterStandard tbody tr td:nth-of-type(4) div {
        width: 151px;
    }

    .scrollDataTableMasterStandard tbody tr td:nth-of-type(5) div {
        width: 36px;
    }

    .scrollDataTableMasterStandard thead th:nth-of-type(4) {
        width: 136px;
    }

    .scrollDataTableMasterStandard thead th:nth-of-type(5) {
        width: 40px;
    }
    /**************** No scroll bar *********************************************/
    .noscrollDataTableMasterStandard tbody tr td:nth-of-type(4) div {
        width: 167px;
    }

    .noscrollDataTableMasterStandard tbody tr td:nth-of-type(5) div {
        width: 36px;
    }
    /* Set width for  th*/
    .noscrollDataTableMasterStandard thead th:nth-of-type(4) {
        width: 152px;
    }

    .noscrollDataTableMasterStandard thead th:nth-of-type(5) {
        width: 21px;
    }
    /* IE9*/
    #divdataTableMasterStandard {
        height: 262px !important;
    }

    .scrollDataTableMasterStandardStyleIE9 {
        height: auto !important;
    }

        .scrollDataTableMasterStandardStyleIE9 thead th:nth-of-type(4) {
            width: 136px !important;
        }

        .scrollDataTableMasterStandardStyleIE9 thead th:nth-of-type(5) {
            width: 40px !important;
        }

        .scrollDataTableMasterStandardStyleIE9 tbody tr td:nth-of-type(4) div {
            width: 149px !important;
        }

        .scrollDataTableMasterStandardStyleIE9 tbody tr td:nth-of-type(5) div {
            width: 54px !important;
        }

    .noscrollDataTableMasterStandardStyleIE9 thead th:nth-of-type(4) {
        width: 152px !important;
    }

    .noscrollDataTableMasterStandardStyleIE9 thead th:nth-of-type(5) {
        width: 23px !important;
    }

    .noscrollDataTableMasterStandardStyleIE9 tbody tr td:nth-of-type(4) div {
        width: 158px !important;
    }
</style>
<style>
    /*********** Default css ***********/

    #dataTableAssignedMasterStandard tbody tr {
        height: 100% !important; /* Fix for IE9*/
    }
    /*No data*/
    #dataTableAssignedMasterStandard .dataTables_empty div {
        width: 398px !important;
    }

    .dataTableAssignedMasterStandardStyle td img {
        padding-left: 3px;
        padding-right: 3px;
    }

    .dataTableAssignedMasterStandardStyle thead,
    .dataTableAssignedMasterStandardStyle tbody {
        display: block;
    }

    .dataTableAssignedMasterStandardStyle tbody {
        height: 411px;
        overflow: auto;
    }

        .dataTableAssignedMasterStandardStyle tbody td {
            /*word-break: break-all;*/
            word-wrap: break-word;
        }
        /* Padding content inside div */
        .dataTableAssignedMasterStandardStyle tbody tr td div {
            padding-left: 3px !important;
            padding-right: 3px !important;
        }

        .dataTableAssignedMasterStandardStyle tbody td:nth-of-type(1) div {
            width: 30px;
        }

        .dataTableAssignedMasterStandardStyle tbody td:nth-of-type(2) div {
            width: 97px;
        }

    .dataTableAssignedMasterStandardStyle thead th:nth-of-type(1) {
        width: 15px;
    }

    .dataTableAssignedMasterStandardStyle thead th:nth-of-type(2) {
        width: 83px;
    }

    .dataTableAssignedMasterStandardStyle thead th:nth-of-type(3) {
        width: 237px;
    }
    /*********** Has scroll bar ***********/
    .scrollItemDataTableAssignedMasterStandard tbody td:nth-of-type(3) div {
        width: 238px;
    }
    /*********** No scroll bar ***********/
    .noscrollItemDataTableAssignedMasterStandard tbody td:nth-of-type(3) div {
        width: 252px;
    }

    /*IE9*/
    #divdataTableAssignedMasterStandard {
        height: 394px !important;
    }

    .scrollItemDataTableAssignedMasterStandardIE9 tbody td:nth-of-type(3) div {
        width: 238px;
    }

    .scrollItemDataTableAssignedMasterStandardIE9 thead th:nth-of-type(2) {
        width: 88px !important;
    }

    .scrollItemDataTableAssignedMasterStandardIE9 thead th:nth-of-type(3) {
        width: 230px !important;
    }

    .noscrollItemDataTableAssignedMasterStandardIE9 tbody td:nth-of-type(3) div {
        width: 238px;
    }

    .noscrollItemDataTableAssignedMasterStandardIE9 thead th:nth-of-type(2) {
        width: 88px !important;
    }

    .noscrollItemDataTableAssignedMasterStandardIE9 thead th:nth-of-type(3) {
        width: 230px !important;
    }

    .lmsRow {
        padding: 10px 0px;
    }

    .d-none {
        display: none !important;
    }

    .colx2-left {
        width: 400px;
        padding-right: 0px;
        position: relative;
    }

    .colx2-right {
        width: 385px;
        padding-right: 0px;
        padding-left: 2px;
        position: relative;
    }

    #addStandardDialog {
        overflow: hidden;
    }
</style>
<style>
    .error-message {
        color: red;
        display: none;
        font-size: 85%;
        margin-top: 0.25rem;
        max-width: 350px;
    }

    .is-invalid .qtiItemSelector {
        border-color: red !important;
    }

    .is-invalid .error-message {
        display: block;
    }
</style>
<section>
    <div id="divListMasterStandardMany" class="block-border">
        <div class="block-content form">
            <h1>
                Assign Standard
            </h1>
            <p style="height: 5px">
                <div id="masterStandardNotInLessonNotifications"></div>
            </p>
            <div>
                <div class="no-margin last-child">
                    <fieldset>
                        <div class="columns" id="lmsColumn">
                            <div class="colx2-left" style="z-index: 2;">
                                <div id="categories"
                                     class="lmsRow"
                                     data-bind="
                                        css: {
                                            'd-none': !isShowSelectCategory(),
                                            'is-invalid': isInvalidCategory
                                        }
                                    ">
                                    <label>Rubric Category</label>
                                    <select id="selectCategories"
                                            class="qtiItemSelector"
                                            data-bind="
                                            options: rubricQuestionCategories,
                                            optionsText: 'Name',
                                            optionsValue: 'Id',
                                            value: selectedCategoryId
                                        "
                                            style="width: 350px"></select>
                                    <p class="error-message">Please select at least one category from the category list to assign standard tag.</p>
                                </div>
                                <div id="states" class="lmsRow">
                                    <label>State</label>
                                    <select id="selectState" class="qtiItemSelector" data-bind="options: listStates, optionsText: 'Name', optionsCaption: 'Select State', optionsValue: 'Id', value: stateId" style="width: 350px"></select>
                                </div>
                                <div class="lmsRow">
                                    <select id="selectSubject" data-bind="options: listSubjects, optionsText: 'SubjectName', optionsCaption: 'Select @LabelHelper.Subject', optionsValue: 'SubjectName', value: subjectName" style="width: 350px"></select>
                                </div>
                                <div class="lmsRow">
                                    <select id="selectGrade" data-bind="options: listGrades, optionsText: 'GradeName', optionsCaption: 'Select @LabelHelper.TestGrade', optionsValue: 'GradeName', value: grade" style="width: 350px"></select>
                                </div>
                                <div class="block-content form tableFix" style="overflow: hidden; height: 422px">
                                    <div style="height:100%; width: 100%">
                                        <table id="dataTableMasterStandard" class="datatable table no-margin dataTableMasterStandardStyle scrollDataTableMasterStandard" style="width: 400px">
                                            <thead>
                                                <tr>
                                                    <th scope="col">
                                                    </th>
                                                    <th scope="col">
                                                    </th>
                                                    <th scope="col">
                                                        <span class="column-sort">
                                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                                        </span>
                                                        Number
                                                    </th>
                                                    <th scope="col">
                                                        <span class="column-sort">
                                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                                        </span>
                                                        Description
                                                    </th>
                                                    <th scope="col">
                                                    </th>
                                                    <th scope="col">
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="colx2-right" style="z-index: 1;">
                                @if (((string)ViewBag.VirtualQuestionString).IndexOf(",") > 0)
                                {
                                    <label>Shared Standards</label>
                                }
                                else
                                {
                                    <label>Associated Standards</label>
                                }

                                <div class="block-content form restoreItemTable" style="overflow: hidden; height: 579px">

                                    <div class="block-border" style="box-shadow:none">
                                        <table id="dataTableAssignedMasterStandard" class="datatable table no-margin dataTableAssignedMasterStandardStyle scrollItemDataTableAssignedMasterStandard" style="width: 384px">
                                            <thead>
                                                <tr>
                                                    <th scope="col">
                                                    </th>
                                                    <th scope="col">
                                                    </th>
                                                    <th scope="col">
                                                        <span class="column-sort">
                                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                                        </span>
                                                        Number
                                                    </th>
                                                    <th scope="col">
                                                        <span class="column-sort">
                                                            <a href="javascript:void(0)" title="Sort Up" class="sort-up"></a>
                                                            <a href="javascript:void(0)" title="Sort Down" class="sort-down"></a>
                                                        </span>
                                                        Description
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
            <div style="margin-top:40px; margin-bottom:-10px">
                <button id="btnCloseUserClick" type="button" class="grey classProgramButton" data-dialog="close">Close</button>
                <input type="hidden" id="SelectedParentMasterStandardGUID" />
            </div>
        </div>
    </div>
</section>
<input type="hidden" id="VirtualQuestionAssignedStandardIdString" />
<script type="text/javascript">
    ko.bindingHandlers.select2 = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var obj = valueAccessor(),
                allBindings = allBindingsAccessor(),
                lookupKey = allBindings.lookupKey;

            $(element).select2(obj);
            if (lookupKey) {
                var value = ko.utils.unwrapObservable(allBindings.value);
                $(element).select2('data', ko.utils.arrayFirst(obj.data.results, function (item) {
                    return item[lookupKey] === value;
                }));
            }

            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).select2('destroy');
            });
        },
        update: function (element) {
            $(element).trigger('change');
        }
    };

    var vm;
    var viewModel = function() {
        var self = this;
        self.listStates = ko.observableArray([]);
        self.listSubjects = ko.observableArray([]);
        self.listGrades = ko.observableArray([]);
        self.stateId = ko.observable();
        self.subjectName = ko.observable();
        self.grade = ko.observable();

        self.rubricQuestions = ko.observableArray(null);
        self.rubricQuestionCategories = ko.observableArray(null);
        self.selectedCategoryId = ko.observable();
        self.isRubricBasedQuestion = ko.computed(function() {
            return !IsNullOrEmpty(self.rubricQuestionCategories());
        });
        self.isMultipleQuestion = ko.observable('@ViewBag.IsMultipleQuestion' === 'True' ? true : false);
        self.isShowSelectCategory = ko.computed(function() {
            return !self.isMultipleQuestion() && self.isRubricBasedQuestion();
        });
        self.isInvalidCategory = ko.observable(false);

        getStates(function(states) {
            self.listStates(states);
        });

        getCategories(function(questions, categories) {
            self.rubricQuestions(questions);
            self.rubricQuestionCategories(categories);
        });

        self.selectedCategoryId.subscribe(function(newValue) {
            if (!IsNullOrEmpty(ui) && !IsNullOrEmpty(ui.dataTableAssignedMasterStandard)) {
                ui.dataTableAssignedMasterStandard.fnReloadAjax(getAjaxSourceForAssignedMasterStandard());
            }

            if (!IsNullOrEmpty(newValue)) {
                self.isInvalidCategory(false);
            }
        });

        self.stateId.subscribe(function (selectedState) {
            ui.dataTableMasterStandard.fnReloadAjax(getAjaxSourceForMasterStandard());
            if (selectedState > 0) {
                $.ajax({
                    url: '@Url.Action("GetStandardSubjectByStateId", "MasterStandard")',
                    type: 'post',
                    data: { stateId: selectedState },
                    success: function(response) {
                        if (response.Success == true) {
                            var data = response.Data;
                            var array = [];
                            $.each(data, function(index, value) {
                                array.push(value);
                            });
                            self.listSubjects(array);
                            if (selectSubjectId != null && selectSubjectId.length > 0) {
                                $('#selectSubject').val(selectSubjectId);
                                $('#selectSubject').trigger('change');
                            }
                        }
                    }
                });
            } else {
                self.listSubjects([]);
            }
        });

        self.subjectName.subscribe(function (selectedSubject) {
            ui.dataTableMasterStandard.fnReloadAjax(getAjaxSourceForMasterStandard());
            if (selectedSubject != null) {
                $.ajax({
                    url: '@Url.Action("GetStandardGradeByStateAndSubject", "MasterStandard")',
                    type: 'post',
                    data: { stateId: self.stateId, subject: selectedSubject },
                    success: function (response) {
                        if (response.Success == true) {
                            var data = response.Data;
                            var array = [];
                            $.each(data, function (index, value) {
                                array.push(value);
                            });
                            self.listGrades(array);
                            if (selectGradeId != null && selectGradeId.length > 0) {
                                $('#selectGrade').val(selectGradeId);
                                $('#selectGrade').trigger('change');
                            }
                        }
                    }
                });
            } else {
                self.listGrades([]);
            }
        });

        self.grade.subscribe(function (selectedGrade) {
            ui.dataTableMasterStandard.fnReloadAjax(getAjaxSourceForMasterStandard());
            parentId = 0;
            //if (selectedGrade != null) {
            //    if (parentId != null && parentId > 0) {
            //        GetStandardNextLevelOnLoad();
            //    }
            //    if (childId != null && childId > 0) {
            //        GetStandardPreviousLevelOnLoad();
            //    }
            //}
        });
    };

    function getStates(callback) {
        callback = callback || function() {};

        $.ajax({
            url: "@Url.Action("GetStateStandardWithCC", "PopulateStateDistrict")",
            type: "get",
            async: false,
            success: function(data) {
                var array = [];
                $.each(data, function(index, value) {
                    array.push(value);
                });

                callback(array);
            }
        });
    };

    function getCategories(callback) {
        callback = callback || function() {};

        $.ajax({
            url: "@Url.Action("GetRubricCategoryByQuestionIds", "VirtualTest")?virtualQuestionIds=@ViewBag.VirtualQuestionString",
            type: "get",
            async: false,
            success: function(data) {
                var mappedCategories = [];
                var mappedQuestions = [];

                $.each(data, function(index, question) {
                    var categories = question.RubricQuestionCategories;
                    var categoryIds = [];

                    $.each(categories, function(index, category) {
                        mappedCategories.push({
                            Id: category.RubricQuestionCategoryID,
                            Name: category.CategoryName
                        });

                        categoryIds.push(category.RubricQuestionCategoryID);
                    });

                    if (mappedCategories.length) {
                        mappedCategories.unshift({
                            Id: categoryIds.join(','),
                            Name: 'All Categories'
                        });
                    }

                    mappedQuestions.push({
                        VirtualQuestionID: question.VirtualQuestionID,
                        RubricQuestionCategoryIDs: categoryIds.join(',')
                    })
                });

                callback(mappedQuestions, mappedCategories);
            }
        });
    };

    $(function () {
        vm = new viewModel();
        ko.cleanNode(document.getElementById("divListMasterStandardMany"));
        ko.applyBindings(vm, document.getElementById("divListMasterStandardMany"));

        bindEvents();
        $.get('@Url.Action("GetMutualStandardIdStringOfVirtualQuestions", "MasterStandard")/?virtualQuestionString=@ViewBag.VirtualQuestionString', function (data) {
            if (data.VirtualQuestionAssignedStandardIdString.length > 0) {
                $("#VirtualQuestionAssignedStandardIdString").val(data.VirtualQuestionAssignedStandardIdString);
            }
            LoadStandardTable();
            LoadAssignedStandardTable();
        });
        if (selectStateId > 0) {
            $('#selectState').val(selectStateId);
            $('#selectState').trigger('change');
        }

    });
    var standardTable = null;

    function IsNullOrEmpty(value) {
        return typeof (value) === 'undefined' || value == null || $.trim(value) === '';
    };

    function getAssignedStandardTagIds() {
        var assignedTags = ui.dataTableAssignedMasterStandard.fnGetData();
        var assignedTagIds = assignedTags.map(function(tag) {
            return tag[1];
        });

        return assignedTagIds;
    }
    
    function getAvailabelStandardTagIds() {
        var availabelTags = ui.dataTableMasterStandard.fnGetData();
        var availabelTagIds = availabelTags.map(function(tag) {
            return tag[1];
        });

        return availabelTagIds;
    }

    function updateAssignStandardButtonStatus() {
        var assignedTagIds = getAssignedStandardTagIds();
        var availabelTagIds = getAvailabelStandardTagIds();

        availabelTagIds.forEach(function(tagId) {
            var isExisted = assignedTagIds.indexOf(tagId) != -1;
            if (isExisted) {
                $("#iconDelete_" + tagId).show();
                $("#iconAdd_" + tagId).hide();
            } else {
                $("#iconDelete_" + tagId).hide();
                $("#iconAdd_" + tagId).show();
            }
        });
    }

    function LoadStandardTable() {
        var options = {
            bServerSide: true,
            bDestroy: true,
            sAjaxSource: getAjaxSourceForMasterStandard(),
            fnServerParams: function (aoData) {
                //TuanVo:encode text in filter searchbox
                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''"); // when user type " or "", or """,...in searchbox, system will issue an error, this code fix that error
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;
                    }
                }

            },
            bStateSave: false,
            bAutoWidth: false,
            iDisplayLength: 100,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'string', sName: 'GUID', bSearchable: false, bSortable: false },
                { sType: 'integer', sName: 'MasterStandardID', bSearchable: false, bSortable: false},
                { sType: 'string', sName: 'Number', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'Description', bSearchable: true, bSortable: true },
                { sType: 'integer', sName: 'Level', bSearchable: false, bSortable: false },
                { sType: 'integer', sName: 'Children', bSearchable: false, bSortable: false, bVisible: false },
                { sType: 'string', sName: 'ParentGUID', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'DescendantItemCount', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'ParentId', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'RubricQuestionCategoryID', bSearchable: false, bSortable: false, bVisible:false }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(setIconViewParentStandards(aData[1],aData[4]));
                $('td:eq(1)', nRow).html(setIconVisibilityMasterStandard(aData[1], aData[4], aData[5], aData[9]));
                $('td:eq(4)', nRow).html(setIconViewChildStandards(aData[1], aData[5]));
                //Add word-break: break-all; to td which has long text ,such as text_123_456_789_1011
                addWordBreakToTableCell($('td:eq(2)', nRow), 10, aData[2]);
                addWordBreakToTableCell($('td:eq(3)', nRow), 25, aData[3]);

                $(nRow).each(function (idx, row) {

                    $(this).draggable({
                        revert: "invalid", // when not dropped, the item will revert back to its initial position
                        containment: "document",
                        helper: "clone",
                        cursor: "move",
                        zIndex: 99999,
                        stop: function (event, ui) {
                            $(this).parents("#lmsColumn .colx2-left").attr({ "style": "" });
                            $('.tableFix').css({
                                'height': '413px',
                                //'overflow': 'auto', ->OK
                                'overflow': 'hidden',
                                'z-index': '1'
                            });
                            $('.restoreItemTable').css('z-index', '0');
                        },
                        drag: function (event, ui) {
                            $(this).parents("#lmsColumn .colx2-left").css({
                                'z-index': '2',
                            });
                            $('.tableFix').css({
                                'height': '413px',
                                'overflow': 'visible',
                                'z-index': '1'
                            });

                            $('.restoreItemTable').css('z-index', '0');
                        }

                    });
                });
                // let the be droppable, accepting items
                $containDrap.droppable({
                    accept: "#dataTableMasterStandard tbody tr",
                    activeClass: "ui-state-highlight",
                    tolerance: "pointer",
                    drop: function (event, ui) {
                        dragItem(ui.draggable);
                        $('.tableFix').css({
                            'height': '413px',
                            //'overflow': 'auto' -> OK
                            'overflow': 'hidden'
                        });
                    }
                });
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTableMasterStandard'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#dataTableMasterStandard').unblock();
                $('.with-tip').tip();
                formatTableForAddingVertialScrollBar('dataTableMasterStandard', 'scrollDataTableMasterStandard', 'noscrollDataTableMasterStandard', 'scrollDataTableMasterStandardStyleIE9', 'noscrollDataTableMasterStandardStyleIE9');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    $("#dataTableMasterStandard, #dataTableAssignedMasterStandard").css({ "position": "inherit" });

                    if ($('#dataTableMasterStandard .dataTables_empty').length == 1) {
                        //No data
                        $('#dataTableMasterStandard').height(32);
                    }
                }

                updateAssignStandardButtonStatus();
            }
        };

        $("#dataTableMasterStandard").data("options", options);
        standardTable = initializeDataTable($("#dataTableMasterStandard"));
    }
    // drag and drop
    var $containDrap = $('#dataTableAssignedMasterStandard');
    var $ContainRestore = $('#dataTableMasterStandard');

    function dragItem($item) {
        var dragged = $item.clone(true);

        dragged.fadeOut(function () {
            var $tbody = $("tbody", $containDrap).length ?
              $("tbody", $containDrap) :
              $("<tbody class='gallery ui-helper-reset'></tbody>").appendTo($containDrap);

            dragged.find('.assignMasterStandard').trigger('click');
            dragged.find('td:eq(0),td:eq(4)').hide();
            dragged.find('.assignMasterStandard').hide().end()
                   .find('.removeAssignedMasterStandard').addClass('btnRemove').show();
            dragged
                //.appendTo( $tbody )
                .fadeIn();
        });

        // $('.dataTables_empty').hide();
    }
    // restore items
    function restoreItems($item) {
        var $restoreItem = $item.clone(true);
        $restoreItem.fadeOut(function () {
            $item.find('a[title="Remove standard"]').trigger('click');

            $restoreItem.find(".assignMasterStandard").show().end()
                        .find('.removeAssignedMasterStandard').hide().end()
                        .find('td:eq(0),td:eq(4)').show().end()
                        //.appendTo($ContainRestore)
                        .fadeIn();
        });
    }

    function LoadAssignedStandardTable() {
        var options = {
            bServerSide: true,
            bDestroy: true,
            sAjaxSource: getAjaxSourceForAssignedMasterStandard(),
            fnServerParams: function (aoData) {
                //TuanVo:encode text in filter searchbox
                var item = null;
                for (var i = 0; i < aoData.length; i++) {
                    item = aoData[i];
                    if (item.name == 'sSearch') {
                        do {
                            item.value = item.value.replace('""', '"');
                        } while (item.value.indexOf('""') >= 0)

                        if (item.value == '"') {
                            item.value = item.value.replace('"', "''"); // when user type " or "", or """,...in searchbox, system will issue an error, this code fix that error
                        } else {
                            item.value = encodeURIComponent(item.value);
                        }
                        break;
                    }
                }
            },
            bStateSave: false,
            bAutoWidth: false,
            iDisplayLength: 100,
            aaSorting: [[1, "asc"]],
            aoColumns: [
                { sType: 'string', sName: 'GUID', bSearchable: false, bSortable: false,sWidth: '0px',bVisible:false },
                { sType: 'integer', sName: 'MasterStandardID', bSearchable: false, bSortable: false },
                { sType: 'string', sName: 'Number', bSearchable: true, bSortable: true },
                { sType: 'string', sName: 'Description', bSearchable: true, bSortable: true },
                { sType: 'integer', sName: 'Level', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'Children', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'string', sName: 'ParentGUID', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'DescendantItemCount', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'ParentId', bSearchable: false, bSortable: false, bVisible:false },
                { sType: 'integer', sName: 'RubricQuestionCategoryID', bSearchable: false, bSortable: false, bVisible:false }
            ],
            fnRowCallback: function (nRow, aData) {
                $('td:eq(0)', nRow).html(setIconRemoveMasterStandard(aData[1], aData[9]));
                //Add word-break: break-all; to td which has long text ,such as text_123_456_789_1011
                addWordBreakToTableCell($('td:eq(1)', nRow), 10, aData[2]);
                addWordBreakToTableCell($('td:eq(2)', nRow), 25, aData[3]);

                $(nRow).each(function () {
                    $(this).draggable({
                        revert: "invalid", // when not dropped, the item will revert back to its initial position
                        containment: "document",
                        helper: "clone",
                        cursor: "move",
                        zIndex: 99999,
                        stop: function (event, ui) {
                            $('.restoreItemTable').css({
                                'height': '579px',
                                'overflow': 'hidden'
                            });
                            $(this).parents("#lmsColumn .colx2-right").attr({ "style": "" });
                        },
                        drag: function (event, ui) {
                            $('.restoreItemTable').css({
                                'height': 'auto',
                                'overflow': 'visible'
                            });
                            $('.tableFix').css({
                                'z-index': '0'
                            });
                            $(this).parents("#lmsColumn .colx2-right").css({
                                'z-index': '3',
                            });

                        }
                    });
                });

                // let the be droppable, accepting items
                $ContainRestore.droppable({
                    accept: "#dataTableAssignedMasterStandard tbody tr",
                    activeClass: "ui-state-highlight",
                    tolerance: "pointer",
                    drop: function (event, ui) {
                        restoreItems(ui.draggable);
                        $('.restoreItemTable').css({
                            'height': '579px',
                            'overflow': 'hidden'
                        });
                    }
                });
                return nRow;
            },
            fnPreDrawCallback: function () {
                ShowBlock($('#dataTableAssignedMasterStandard'), "Loading");
                return true;
            },
            fnDrawCallback: function () {
                $('#dataTableAssignedMasterStandard').unblock();
                $('.with-tip').tip();
                formatTableForAddingVertialScrollBar('dataTableAssignedMasterStandard', 'scrollItemDataTableAssignedMasterStandard', 'noscrollItemDataTableAssignedMasterStandard',
                    'scrollItemDataTableAssignedMasterStandardIE9', 'noscrollItemDataTableAssignedMasterStandardIE9');
                if (jQuery.browser.msie && jQuery.browser.version == '9.0') {
                    $("#dataTableMasterStandard, #dataTableAssignedMasterStandard").css({ "position": "inherit" });
                }

                updateAssignStandardButtonStatus();
            }
        };

        $("#dataTableAssignedMasterStandard").data("options", options);
        initializeDataTable($("#dataTableAssignedMasterStandard"));
    }

    function getAjaxSourceForMasterStandard() {
        if (vm.stateId() != null && vm.subjectName() != null && vm.grade() != null) {
            return '@Url.Action("GetStandardByStateAndSubjectAndGradeTopLevel", "MasterStandard")/?stateId=' + vm.stateId() + '&subject=' + vm.subjectName() + '&grade=' + vm.grade();
        } else {
            return '@Url.Action("GetStandardByStateAndSubjectAndGradeTopLevel", "MasterStandard")/?stateId=0&subject=0&grade=0';
        }
    }
    function getAjaxSourceForAssignedMasterStandard() {
        var standardIdString = $("#VirtualQuestionAssignedStandardIdString").val();
        var rubricCategoryId = Number.isInteger(vm.selectedCategoryId())
            ? vm.selectedCategoryId()
            : 0;

        var queryString = 'standardIdString=' + standardIdString + '&virtualQuestionIds=@ViewBag.VirtualQuestionString'  + '&rubricCategoryId=' + rubricCategoryId;
        return '@Url.Action("GetStandardsByStandardIdString", "MasterStandard")/?' + queryString;
    }

    function setIconVisibilityMasterStandard(masterStandardId, level, children, rubricQuestionCategoryId) {
        var addDisplayed = 'none';
        var deleteDisplayed = 'none';
        var standardIdList = $("#VirtualQuestionAssignedStandardIdString").val();
        if (standardIdList == null) {
            standardIdList = '';
        }
        if (standardIdList.indexOf(',-'+masterStandardId + '-') >= 0) {
            deleteDisplayed = 'inline';
        } else {
            addDisplayed = 'inline';//if standard has not been assigned, display green icon,else display the red icon
        }
        //AddIcon must be visible and deleteIcon is invisible because when user selectes both item A,B but only A is assigned to standard and B is not assigned then addIcon must be visible to allow use assign this standard to B
        //addDisplayed = 'inline';
        //deleteDisplayed = 'none';

        var addIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/plus-circle-blue.png")';
        var addString = '<a id="iconAdd_' + masterStandardId + '" href="javascript:void(0)" onclick="AssignStandard(this);" title="Assign Standard" masterStandardId="' + masterStandardId + '" class="with-tip assignMasterStandard" style="display:' + addDisplayed  + '"><img src="' + addIcon + '" width="16" height="16"></a>';

         @*var deleteIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        var deleteString = '<a id="iconDelete_' + masterStandardId + '" href="javascript:void(0)" onclick="RemoveStandard(this);" title="Remove" operation="1"  rubricQuestionCategoryId="' + rubricQuestionCategoryId + '" masterStandardId="' + masterStandardId + '" class="with-tip actionIcon removeAssignedMasterStandard" style="display:' + deleteDisplayed  + '"><img src="' + deleteIcon + '" width="16" height="16"></a>';*@
        //Linkit does not want delete icon, just the check icon
        var deleteIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-check.png")';
        var deleteString = '<a id="iconDelete_' + masterStandardId + '" href="javascript:void(0)" operation="1" masterStandardId="' + masterStandardId + '" class="actionIcon " style="display:' + deleteDisplayed + '"><img src="' + deleteIcon + '" width="16" height="16"></a>';

        var result = '';
        result = addString + deleteString;
        return result;

    }
    function setIconViewParentStandards(masterStandardId, level) {
        if(level > 1) {
            var backIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/viewparentstandard.png")';
            var backString = '<a masterStandardId="' + masterStandardId + '" href="javascript:void(0);" onclick="GetStandardPreviousLevel(this);" title="back" class="with-tip"><img src="' + backIcon + '" width="16" height="16" style="margin-right: 0px"></a>';
            return backString;
        } else {
            return '';
        }
    }
    function setIconViewChildStandards(masterStandardId, countChildren) {

        if (countChildren > 0) {
            var nextIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/viewchildstandard.png")';
            var nextString = '<a masterStandardId="' + masterStandardId + '" href="javascript:void(0);" onclick="GetStandardNextLevel(this);" title="next" class="with-tip"><img src="' + nextIcon + '" width="16" height="16" style="margin-right: 0px"></a>';
            return nextString;
        } else {
            return '';
        }

    }
    function setIconRemoveMasterStandard(masterStandardId, rubricQuestionCategoryId) {
        var removeIcon = '@Url.Content("~/Content/themes/Constellation/images/icons/fugue/icon-red.png")';
        var removeString = '<a masterStandardId="' + masterStandardId + '" rubricQuestionCategoryId="' + rubricQuestionCategoryId + '" href="javascript:void(0);" onclick="RemoveStandard(this);" title="Remove standard" class="with-tip"><img src="' + removeIcon + '" width="16" height="16" style="margin-right: 4px"></a>';
        return removeString;
    }

    function GetStandardNextLevel(control) {
        $('#tips').empty();
        var self = $(control);
        var masterStandardId = self.attr('masterStandardId');
        parentId = masterStandardId;// parentId is declared in _ItemListNormalView
        childId = 0;

        var url = '@Url.Action("GetStandardByParentStandardId", "MasterStandard")/?parentId=' + masterStandardId;
        ui.dataTableMasterStandard.fnReloadAjax(url, function () {
            $('#dataTableMasterStandard_filter input').val('');
            standardTable.fnFilter('');
        });
    }

    function GetStandardPreviousLevel(control) {
        $('#tips').empty();
        var self = $(control);
        var masterStandardId = self.attr('masterStandardId');
        var gradeText = $("#selectGrade option:selected").text();
        childId = masterStandardId; // childId is declared in _ItemListNormalView
        parentId = 0;
        var url = '@Url.Action("GetStandardByChildStandardId", "MasterStandard")/?childId=' + masterStandardId + '&grade=' + encodeURIComponent(gradeText);;;
        ui.dataTableMasterStandard.fnReloadAjax(url, function () {
            $('#dataTableMasterStandard_filter input').val('');
            standardTable.fnFilter('');
        });
    }

    function IsReadyToAssign() {
        var hasCategories = !IsNullOrEmpty(vm.selectedCategoryId());
        var isMultipleQuestion = vm.isMultipleQuestion();
        var isRubricBasedQuestion = vm.isRubricBasedQuestion();

        return isMultipleQuestion
            ? true
            : (!isRubricBasedQuestion || (isRubricBasedQuestion && hasCategories))
                ? true
                : false;
    };

    function getQuestionCategoryTags() {
        var copyedRubricQuestions = JSON.parse(JSON.stringify(vm.rubricQuestions()));
        var selectedCategoryId = vm.selectedCategoryId() ? vm.selectedCategoryId().toString() : '';
        var allCategoryIds = ko.utils.arrayMap(vm.rubricQuestionCategories(), function(category) {
                return category.Id;
            });

        var selectedCategoryIds = selectedCategoryId;

        return !vm.isRubricBasedQuestion()
            ? null
            : vm.isMultipleQuestion()
                ? copyedRubricQuestions
                : ko.utils.arrayMap(copyedRubricQuestions, function(question) {
                    return {
                        VirtualQuestionID:  question.VirtualQuestionID,
                        RubricQuestionCategoryIDs: selectedCategoryIds
                    }
                });
    };

    function AssignStandard(control) {
        if (!IsReadyToAssign()) {
            vm.isInvalidCategory(true);
            return;
        } else {
            vm.isInvalidCategory(false);
        }

        $('#tips').empty();
        var self = $(control);
        var masterStandardId = self.attr('masterStandardId');
        var questionCategoryTags = getQuestionCategoryTags();
        var postModel = {
            virtualQuestionString: '@ViewBag.VirtualQuestionString',
            masterStandardId: masterStandardId,
            questionCategoryTags: questionCategoryTags
        };

        $.ajax({
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            url: '@Url.Action("AssignStandardForVirtualQuestions", "MasterStandard")',
            data: JSON.stringify(postModel),
            traditional: true,
            success: function (response) {
                if (response.Success == 'Success') {

                    LinkIt.success('#masterStandardNotInLessonNotifications', 'Master Standard Assigned');
                    var standardIdList = $("#VirtualQuestionAssignedStandardIdString").val();
                    if (standardIdList == null) {
                        standardIdList = '';
                    }
                    standardIdList = standardIdList + ",-" + masterStandardId + "-";
                    $("#VirtualQuestionAssignedStandardIdString").val(standardIdList);
                    $("#iconAdd_" + masterStandardId).hide();
                    $("#iconDelete_" + masterStandardId).show();
                    ui.dataTableAssignedMasterStandard.fnReloadAjax(getAjaxSourceForAssignedMasterStandard());
                } else {
                    CustomAlert(response.errorMessage);
                }
            },
            error: function (xhr, status, error) {
                CustomAlert(error);
            }
        });
    }
    function RemoveStandard(control) {
        $('#tips').empty();
        if (confirm("Do you want to remove this standard?")) {
            var self = $(control);
            var masterStandardId = self.attr('masterStandardId');
            var rubricQuestionCategoryId = vm.selectedCategoryId();
            $.post('@Url.Action("RemoveStandardForVirtualQuestions", "MasterStandard")', {
                virtualQuestionString: '@ViewBag.VirtualQuestionString',
                masterStandardId: masterStandardId,
                rubricQuestionCategoryId: rubricQuestionCategoryId
            }, function (response) {
                if (response.Success == 'Success') {

                    LinkIt.success('#masterStandardNotInLessonNotifications', 'Master Standard Removed');

                    var standardIdList = $("#VirtualQuestionAssignedStandardIdString").val();
                    if (standardIdList == null) {
                        standardIdList = '';
                    }
                    standardIdList = standardIdList.replace(',-' + masterStandardId + '-','');
                    $("#VirtualQuestionAssignedStandardIdString").val(standardIdList);

                    $("#iconAdd_" + masterStandardId).show();
                    $("#iconDelete_" + masterStandardId).hide();
                    //ui.dataTableAssignedMasterStandard.fnDraw();
                    ui.dataTableAssignedMasterStandard.fnReloadAjax(getAjaxSourceForAssignedMasterStandard());
                } else {
                    //alert(response.errorMessage);
                    CustomAlert(response.errorMessage);
                }

            });
        }
    }
    function bindEvents() {
        $('button[data-dialog="close"]').die('click');
        $(document).on('click', 'button[data-dialog="close"]', function (e) {
            $('.ui-widget-overlay').remove();
            var self = $(e.target);
            self.closest('.dialog').dialog('close');

        });

    }
    function GetStandardNextLevelOnLoad() {
        $('#tips').empty();
        if (parentId == null || parentId <= 0) {
            return;
        }
        var url = '@Url.Action("GetStandardByParentStandardId", "MasterStandard")/?parentId=' + parentId;
        ui.dataTableMasterStandard.fnReloadAjax(url);
    }

    function GetStandardPreviousLevelOnLoad() {
        $('#tips').empty();
        if (childId == null || childId <= 0) {
            return;
        }
        var gradeText = $("#selectGrade option:selected").text();
        var url = '@Url.Action("GetStandardByChildStandardId", "MasterStandard")/?childId=' + childId + '&grade=' + encodeURIComponent(gradeText);;
        ui.dataTableMasterStandard.fnReloadAjax(url);
    }
</script>
